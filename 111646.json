{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        response = sourceSolrClient.query(params);\n        List<Long> versions = (List<Long>) response.getResponse().get(\"versions\");\n        for (Long version : versions) {\n          maxVersion = Math.max(maxVersion, version);\n        }\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        cdcrStart(targetSolrClient);\n        cdcrStart(sourceSolrClient);\n\n        response = getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = waitForTargetToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9","date":1523659106,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 1)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      target.waitForAllNodes(30);\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.waitForAllNodes(30);\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.startJettySolrRunner(runner);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dcc9716082884c383cdc754ce1a33da8bf558da","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(3000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(1000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427254df84e2d3af7f975aa0f56b14c597b87346","date":1544540322,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(3000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0abaca9e5481b5c3660805111683e8ce53bef3","date":1544554124,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(3000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5c929d2716fa79d443b93a82adb1da5b578ebd8","date":1550428858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"Target zkHost = {}\", target.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      log.info(\"Target zkHost = \" + target.getZkServer().getZkAddress());\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        log.info(\"Cdcr queue response: \" + response.getResponse());\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"Target zkHost = {}\", target.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"Target zkHost = {}\", target.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .setMaxShardsPerNode(2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrBootstrapTest#testConvertClusterToCdcrAndBootstrap().mjava","sourceNew":null,"sourceOld":"  /**\n   * Starts a source cluster with no CDCR configuration, indexes enough documents such that\n   * the at least one old tlog is closed and thrown away so that the source cluster does not have\n   * all updates available in tlogs only.\n   * <p>\n   * Then we start a target cluster with CDCR configuration and we change the source cluster configuration\n   * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.\n   * <p>\n   * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint\n   * call returns the same version as the last update indexed on the source.\n   */\n  @Test\n  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  // commented out on: 17-Feb-2019   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testConvertClusterToCdcrAndBootstrap() throws Exception {\n    // start the target first so that we know its zkhost\n    MiniSolrCloudCluster target = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-target\"), buildJettyConfig(\"/solr\"));\n    try {\n      if (log.isInfoEnabled()) {\n        log.info(\"Target zkHost = {}\", target.getZkServer().getZkAddress());\n      }\n      System.setProperty(\"cdcr.target.zkHost\", target.getZkServer().getZkAddress());\n\n      // start a cluster with no cdcr\n      MiniSolrCloudCluster source = new MiniSolrCloudCluster(1, createTempDir(\"cdcr-source\"), buildJettyConfig(\"/solr\"));\n      try {\n        source.uploadConfigSet(configset(\"cdcr-source-disabled\"), \"cdcr-source\");\n\n        // create a collection with the cdcr-source-disabled configset\n        CollectionAdminRequest.createCollection(\"cdcr-source\", \"cdcr-source\", 1, 1)\n            // todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?\n            .withProperty(\"solr.directoryFactory\", \"solr.StandardDirectoryFactory\")\n            .process(source.getSolrClient());\n        source.waitForActiveCollection(\"cdcr-source\", 1, 1);\n        CloudSolrClient sourceSolrClient = source.getSolrClient();\n        int docs = (TEST_NIGHTLY ? 100 : 10);\n        int numDocs = indexDocs(sourceSolrClient, \"cdcr-source\", docs);\n\n        QueryResponse response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"\", numDocs, response.getResults().getNumFound());\n\n        // lets find and keep the maximum version assigned by source cluster across all our updates\n        long maxVersion = Long.MIN_VALUE;\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CommonParams.QT, \"/get\");\n        params.set(\"getVersions\", numDocs);\n        params.set(\"fingerprint\", true);\n        response = sourceSolrClient.query(params);\n        maxVersion = (long)(((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\"));\n\n//       upload the cdcr-enabled config and restart source cluster\n        source.uploadConfigSet(configset(\"cdcr-source\"), \"cdcr-source\");\n        JettySolrRunner runner = source.stopJettySolrRunner(0);\n        source.waitForJettyToStop(runner);\n        \n        source.startJettySolrRunner(runner);\n        source.waitForAllNodes(30);\n        assertTrue(runner.isRunning());\n        AbstractDistribZkTestBase.waitForRecoveriesToFinish(\"cdcr-source\", source.getSolrClient().getZkStateReader(), true, true, 330);\n\n        response = sourceSolrClient.query(new SolrQuery(\"*:*\"));\n        assertEquals(\"Document mismatch on source after restart\", numDocs, response.getResults().getNumFound());\n\n        // setup the target cluster\n        target.uploadConfigSet(configset(\"cdcr-target\"), \"cdcr-target\");\n        CollectionAdminRequest.createCollection(\"cdcr-target\", \"cdcr-target\", 1, 2)\n            .process(target.getSolrClient());\n        target.waitForActiveCollection(\"cdcr-target\", 1, 2);\n        CloudSolrClient targetSolrClient = target.getSolrClient();\n        targetSolrClient.setDefaultCollection(\"cdcr-target\");\n        Thread.sleep(6000);\n\n        CdcrTestsUtil.cdcrStart(targetSolrClient);\n        CdcrTestsUtil.cdcrStart(sourceSolrClient);\n\n        response = CdcrTestsUtil.getCdcrQueue(sourceSolrClient);\n        if (log.isInfoEnabled()) {\n          log.info(\"Cdcr queue response: {}\", response.getResponse());\n        }\n        long foundDocs = CdcrTestsUtil.waitForClusterToSync(numDocs, targetSolrClient);\n        assertEquals(\"Document mismatch on target after sync\", numDocs, foundDocs);\n        assertTrue(CdcrTestsUtil.assertShardInSync(\"cdcr-target\", \"shard1\", targetSolrClient)); // with more than 1 replica\n\n        params = new ModifiableSolrParams();\n        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.COLLECTIONCHECKPOINT.toString());\n        params.set(CommonParams.QT, \"/cdcr\");\n        response = targetSolrClient.query(params);\n        Long checkpoint = (Long) response.getResponse().get(CdcrParams.CHECKPOINT);\n        assertNotNull(checkpoint);\n        assertEquals(\"COLLECTIONCHECKPOINT from target cluster should have returned the maximum \" +\n            \"version across all updates made to source\", maxVersion, checkpoint.longValue());\n      } finally {\n        source.shutdown();\n      }\n    } finally {\n      target.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["6ee2533508e7cceb7551bb7deaeaf89dfa3767b9"],"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"4dcc9716082884c383cdc754ce1a33da8bf558da":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"427254df84e2d3af7f975aa0f56b14c597b87346":["4dcc9716082884c383cdc754ce1a33da8bf558da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["4dcc9716082884c383cdc754ce1a33da8bf558da","427254df84e2d3af7f975aa0f56b14c597b87346"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"6ee2533508e7cceb7551bb7deaeaf89dfa3767b9":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["6ee2533508e7cceb7551bb7deaeaf89dfa3767b9"],"4dcc9716082884c383cdc754ce1a33da8bf558da":["427254df84e2d3af7f975aa0f56b14c597b87346","7e0abaca9e5481b5c3660805111683e8ce53bef3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["4dcc9716082884c383cdc754ce1a33da8bf558da"],"b5c929d2716fa79d443b93a82adb1da5b578ebd8":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"427254df84e2d3af7f975aa0f56b14c597b87346":["7e0abaca9e5481b5c3660805111683e8ce53bef3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7e0abaca9e5481b5c3660805111683e8ce53bef3":["b5c929d2716fa79d443b93a82adb1da5b578ebd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}