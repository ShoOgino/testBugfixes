{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"/dev/null","sourceNew":"    private void handleGET() {\n      String path = (String) req.getContext().get(\"path\");\n      if(path == null) path=\"/config\";\n      if(\"/config/overlay\".equals(path)){\n        resp.add(\"overlay\", req.getCore().getSolrConfig().getOverlay().toOutputFormat());\n        return;\n      } else {\n        List<String> parts =StrUtils.splitSmart(path, '/');\n        if(parts.get(0).isEmpty()) parts.remove(0);\n        if(parts.size() == 1) {\n          resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n        } else{\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      String path = (String) req.getContext().get(\"path\");\n      if(path == null) path=\"/config\";\n      if(\"/config/overlay\".equals(path)){\n        resp.add(\"overlay\", req.getCore().getSolrConfig().getOverlay().toMap());\n      } else {\n        List<String> parts =StrUtils.splitSmart(path, '/');\n        if(parts.get(0).isEmpty()) parts.remove(0);\n        if(parts.size() == 1) {\n          resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n        } else{\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      String path = (String) req.getContext().get(\"path\");\n      if(path == null) path=\"/config\";\n      if(\"/config/overlay\".equals(path)){\n        resp.add(\"overlay\", req.getCore().getSolrConfig().getOverlay().toOutputFormat());\n        return;\n      } else {\n        List<String> parts =StrUtils.splitSmart(path, '/');\n        if(parts.get(0).isEmpty()) parts.remove(0);\n        if(parts.size() == 1) {\n          resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n        } else{\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      String path = (String) req.getContext().get(\"path\");\n      if(path == null) path=\"/config\";\n      if(\"/config/overlay\".equals(path)){\n        resp.add(\"overlay\", req.getCore().getSolrConfig().getOverlay().toMap());\n      } else {\n        List<String> parts =StrUtils.splitSmart(path, '/');\n        if(parts.get(0).isEmpty()) parts.remove(0);\n        if(parts.size() == 1) {\n          resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n        } else{\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45a5f13e4e6b3c60912dc0911227739fe2f371c2","date":1420449490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"config\", req.getCore().getSolrConfig().toMap());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"solrConfig\", req.getCore().getSolrConfig().toMap());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"solrConfig\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a6b799f9d59f607df4b994cd143a0586f9cf896","date":1420614480,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = getConfigDetails();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"config\", req.getCore().getSolrConfig().toMap());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = req.getCore().getSolrConfig().toMap();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = getConfigDetails();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1), m.get(parts.get(1))));\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if(parts.size() == 1) {\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if(ConfigOverlay.NAME.equals(parts.get(1))){\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        }else if(RequestParams.NAME.equals(parts.get(1))) {\n          if(parts.size() == 3){\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m =new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if(p!=null){\n              m.put(RequestParams.NAME,ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME,req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = getConfigDetails();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1),m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389d072b64597cdcf75c2d536aaec3e8afe3393f","date":1427818698,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, ZkNodeProps.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = getConfigDetails();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1), m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["60fbf45fdc4c578b71b38d70a03617829161f4bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, ZkNodeProps.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ConfigOverlay.ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, ZkNodeProps.makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          Map<String, Object> m = getConfigDetails();\n          resp.add(\"config\", ZkNodeProps.makeMap(parts.get(1), m.get(parts.get(1))));\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, ZkNodeProps.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            MapSolrParams p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.getMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc69baf14413994ccde897681e5ce1d393cf7156","date":1468245555,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60fbf45fdc4c578b71b38d70a03617829161f4bd","date":1471870345,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8661269ebb23269662a2826882f11611e91d5a","date":1475042403,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                val.put(parts.get(1), makeMap(componentName, map.get(componentName)));\n              }\n            }\n\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                val.put(parts.get(1), makeMap(componentName, map.get(componentName)));\n              }\n            }\n\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                val.put(parts.get(1), makeMap(componentName, map.get(componentName)));\n              }\n            }\n\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails());\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().toMap());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap()));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams().toMap());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean checkStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              checkStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (checkStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(SolrConfigHandler.class.getSimpleName() + \"-refreshconf\") {\n                @Override\n                public void run() {\n                  if (!reloadLock.tryLock()) {\n                    log.info(\"Another reload is in progress . Not doing anything\");\n                    return;\n                  }\n                  try {\n                    log.info(\"Trying to update my configs\");\n                    SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                  } catch (Exception e) {\n                    log.error(\"Unable to refresh conf \", e);\n                  } finally {\n                    reloadLock.unlock();\n                  }\n                }\n              }.start();\n            } else {\n              log.info(\"checkStale {} , resourceloader {}\", checkStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails();\n            resp.add(\"config\", makeMap(parts.get(1), m.get(parts.get(1))));\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                val.put(parts.get(1), makeMap(componentName, map.get(componentName)));\n              }\n            }\n\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              if (log.isInfoEnabled()) {\n                log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n              }\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            @SuppressWarnings({\"rawtypes\"})\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              if (log.isInfoEnabled()) {\n                log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n              }\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              @SuppressWarnings({\"rawtypes\"})\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        @SuppressWarnings({\"rawtypes\"})\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              if (log.isInfoEnabled()) {\n                log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n              }\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#handleGET().mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            @SuppressWarnings({\"rawtypes\"})\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              if (log.isInfoEnabled()) {\n                log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n              }\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              @SuppressWarnings({\"rawtypes\"})\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        @SuppressWarnings({\"rawtypes\"})\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion(info.cName));\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings({\"unchecked\"})\n    private void handleGET() {\n      if (parts.size() == 1) {\n        //this is the whole config. sent out the whole payload\n        resp.add(\"config\", getConfigDetails(null, req));\n      } else {\n        if (ConfigOverlay.NAME.equals(parts.get(1))) {\n          resp.add(ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay());\n        } else if (RequestParams.NAME.equals(parts.get(1))) {\n          if (parts.size() == 3) {\n            RequestParams params = req.getCore().getSolrConfig().getRequestParams();\n            RequestParams.ParamSet p = params.getParams(parts.get(2));\n            @SuppressWarnings({\"rawtypes\"})\n            Map m = new LinkedHashMap<>();\n            m.put(ZNODEVER, params.getZnodeVersion());\n            if (p != null) {\n              m.put(RequestParams.NAME, makeMap(parts.get(2), p.toMap(new LinkedHashMap<>())));\n            }\n            resp.add(SolrQueryResponse.NAME, m);\n          } else {\n            resp.add(SolrQueryResponse.NAME, req.getCore().getSolrConfig().getRequestParams());\n          }\n\n        } else {\n          if (ZNODEVER.equals(parts.get(1))) {\n            resp.add(ZNODEVER, Utils.makeMap(\n                ConfigOverlay.NAME, req.getCore().getSolrConfig().getOverlay().getZnodeVersion(),\n                RequestParams.NAME, req.getCore().getSolrConfig().getRequestParams().getZnodeVersion()));\n            boolean isStale = false;\n            int expectedVersion = req.getParams().getInt(ConfigOverlay.NAME, -1);\n            int actualVersion = req.getCore().getSolrConfig().getOverlay().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting overlay version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of config\", expectedVersion);\n            }\n            expectedVersion = req.getParams().getInt(RequestParams.NAME, -1);\n            actualVersion = req.getCore().getSolrConfig().getRequestParams().getZnodeVersion();\n            if (expectedVersion > actualVersion) {\n              log.info(\"expecting params version {} but my version is {}\", expectedVersion, actualVersion);\n              isStale = true;\n            } else if (expectedVersion != -1) {\n              log.info(\"I already have the expected version {} of params\", expectedVersion);\n            }\n            if (isStale && req.getCore().getResourceLoader() instanceof ZkSolrResourceLoader) {\n              new Thread(() -> {\n                if (!reloadLock.tryLock()) {\n                  log.info(\"Another reload is in progress . Not doing anything\");\n                  return;\n                }\n                try {\n                  log.info(\"Trying to update my configs\");\n                  SolrCore.getConfListener(req.getCore(), (ZkSolrResourceLoader) req.getCore().getResourceLoader()).run();\n                } catch (Exception e) {\n                  log.error(\"Unable to refresh conf \", e);\n                } finally {\n                  reloadLock.unlock();\n                }\n              }, SolrConfigHandler.class.getSimpleName() + \"-refreshconf\").start();\n            } else {\n              if (log.isInfoEnabled()) {\n                log.info(\"isStale {} , resourceloader {}\", isStale, req.getCore().getResourceLoader().getClass().getName());\n              }\n            }\n\n          } else {\n            Map<String, Object> m = getConfigDetails(parts.get(1), req);\n            Map<String, Object> val = makeMap(parts.get(1), m.get(parts.get(1)));\n            String componentName = req.getParams().get(\"componentName\");\n            if (componentName != null) {\n              @SuppressWarnings({\"rawtypes\"})\n              Map map = (Map) val.get(parts.get(1));\n              if (map != null) {\n                Object o = map.get(componentName);\n                val.put(parts.get(1), makeMap(componentName, o));\n                if (req.getParams().getBool(\"meta\", false)) {\n                  // meta=true is asking for the package info of the plugin\n                  // We go through all the listeners and see if there is one registered for this plugin\n                  List<PackageListeners.Listener> listeners = req.getCore().getPackageListeners().getListeners();\n                  for (PackageListeners.Listener listener :\n                      listeners) {\n                    PluginInfo info = listener.pluginInfo();\n                    if(info == null) continue;\n                    if (info.type.equals(parts.get(1)) && info.name.equals(componentName)) {\n                      if (o instanceof Map) {\n                        @SuppressWarnings({\"rawtypes\"})\n                        Map m1 = (Map) o;\n                        m1.put(\"_packageinfo_\", listener.getPackageVersion());\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            resp.add(\"config\", val);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["cc69baf14413994ccde897681e5ce1d393cf7156","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"be214850f18c80408bcfafd463ec155ab0515aee":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"cc69baf14413994ccde897681e5ce1d393cf7156":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","5e8661269ebb23269662a2826882f11611e91d5a"],"a5296efc4b319f5647b606629c093a94b23692c6":["b693a83132c9e45afcd564fd65a25b60ed80388b","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"fab172655716b96f7e42376116235017a922de3a":["be214850f18c80408bcfafd463ec155ab0515aee","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["cc69baf14413994ccde897681e5ce1d393cf7156","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["be214850f18c80408bcfafd463ec155ab0515aee"],"1f1f31880696765d6aec499d3b01fa501129af45":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["389d072b64597cdcf75c2d536aaec3e8afe3393f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b5991832ae4bac45cecfff0fc33125aeac823d3d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["cc69baf14413994ccde897681e5ce1d393cf7156"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"5e8661269ebb23269662a2826882f11611e91d5a":["1f1f31880696765d6aec499d3b01fa501129af45"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"be214850f18c80408bcfafd463ec155ab0515aee":["fab172655716b96f7e42376116235017a922de3a","389d072b64597cdcf75c2d536aaec3e8afe3393f"],"cc69baf14413994ccde897681e5ce1d393cf7156":["0c82557b0a8c9d4012f208e5de912ae7500ea351","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","60fbf45fdc4c578b71b38d70a03617829161f4bd"],"45a5f13e4e6b3c60912dc0911227739fe2f371c2":["1a6b799f9d59f607df4b994cd143a0586f9cf896"],"954ae83b7dfacaa33d48ea056448ae11f7745a93":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["954ae83b7dfacaa33d48ea056448ae11f7745a93","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"fab172655716b96f7e42376116235017a922de3a":[],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["45a5f13e4e6b3c60912dc0911227739fe2f371c2"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","1f1f31880696765d6aec499d3b01fa501129af45"],"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"389d072b64597cdcf75c2d536aaec3e8afe3393f":["fab172655716b96f7e42376116235017a922de3a","b693a83132c9e45afcd564fd65a25b60ed80388b"],"1f1f31880696765d6aec499d3b01fa501129af45":["5e8661269ebb23269662a2826882f11611e91d5a"],"1a6b799f9d59f607df4b994cd143a0586f9cf896":["be214850f18c80408bcfafd463ec155ab0515aee"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"60fbf45fdc4c578b71b38d70a03617829161f4bd":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e8661269ebb23269662a2826882f11611e91d5a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["cc69baf14413994ccde897681e5ce1d393cf7156","a5296efc4b319f5647b606629c093a94b23692c6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","fab172655716b96f7e42376116235017a922de3a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}