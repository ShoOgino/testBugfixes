{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7375bc69c270e1e62c08c5091793a3e9dce937f","date":1275471695,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182cfc5b92d5da17fd74fc41c8091ed157d80ff4","date":1290263949,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_CODEC_PROVIDER, CodecProvider.getDefault());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(IndexWriterConfig.UNLIMITED_FIELD_LENGTH, conf.getMaxFieldLength());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19b281157bd1e723dc9a712b6058506090cf2a8a","date":1304007734,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed58545b60d7aa369597f02f68f1d1c9c04be47a","date":1305377120,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n\n\n\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_THREAD_STATES, conf.getMaxThreadStates());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n    \n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d61bb4c680a738a817636a2a4e2a16c8375a4c","date":1311702666,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertNull(conf.getFlushPolicy());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getCodecProvider\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarityProvider() == conf.getSimilarityProvider());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarityProvider\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testDefaults().mjava","sourceNew":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDefaults() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    assertEquals(MockAnalyzer.class, conf.getAnalyzer().getClass());\n    assertNull(conf.getIndexCommit());\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    assertEquals(OpenMode.CREATE_OR_APPEND, conf.getOpenMode());\n    // we don't need to assert this, it should be unspecified\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    assertEquals(IndexWriterConfig.DEFAULT_TERM_INDEX_INTERVAL, conf.getTermIndexInterval());\n    assertEquals(IndexWriterConfig.getDefaultWriteLockTimeout(), conf.getWriteLockTimeout());\n    assertEquals(IndexWriterConfig.WRITE_LOCK_TIMEOUT, IndexWriterConfig.getDefaultWriteLockTimeout());\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DELETE_TERMS, conf.getMaxBufferedDeleteTerms());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB, conf.getRAMBufferSizeMB(), 0.0);\n    assertEquals(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS, conf.getMaxBufferedDocs());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_POOLING, conf.getReaderPooling());\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    assertNull(conf.getMergedSegmentWarmer());\n    assertEquals(IndexWriterConfig.DEFAULT_READER_TERMS_INDEX_DIVISOR, conf.getReaderTermsIndexDivisor());\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    assertEquals(ThreadAffinityDocumentsWriterThreadPool.class, conf.getIndexerThreadPool().getClass());\n    assertEquals(FlushByRamOrCountsPolicy.class, conf.getFlushPolicy().getClass());\n    assertEquals(IndexWriterConfig.DEFAULT_RAM_PER_THREAD_HARD_LIMIT_MB, conf.getRAMPerThreadHardLimitMB());\n    assertEquals(Codec.getDefault(), conf.getCodec());\n    assertEquals(InfoStream.getDefault(), conf.getInfoStream());\n    // Sanity check - validate that all getters are covered.\n    Set<String> getters = new HashSet<String>();\n    getters.add(\"getAnalyzer\");\n    getters.add(\"getIndexCommit\");\n    getters.add(\"getIndexDeletionPolicy\");\n    getters.add(\"getMaxFieldLength\");\n    getters.add(\"getMergeScheduler\");\n    getters.add(\"getOpenMode\");\n    getters.add(\"getSimilarity\");\n    getters.add(\"getTermIndexInterval\");\n    getters.add(\"getWriteLockTimeout\");\n    getters.add(\"getDefaultWriteLockTimeout\");\n    getters.add(\"getMaxBufferedDeleteTerms\");\n    getters.add(\"getRAMBufferSizeMB\");\n    getters.add(\"getMaxBufferedDocs\");\n    getters.add(\"getIndexingChain\");\n    getters.add(\"getMergedSegmentWarmer\");\n    getters.add(\"getMergePolicy\");\n    getters.add(\"getMaxThreadStates\");\n    getters.add(\"getReaderPooling\");\n    getters.add(\"getIndexerThreadPool\");\n    getters.add(\"getReaderTermsIndexDivisor\");\n    getters.add(\"getFlushPolicy\");\n    getters.add(\"getRAMPerThreadHardLimitMB\");\n    getters.add(\"getCodec\");\n    getters.add(\"getInfoStream\");\n    \n    for (Method m : IndexWriterConfig.class.getDeclaredMethods()) {\n      if (m.getDeclaringClass() == IndexWriterConfig.class && m.getName().startsWith(\"get\")) {\n        assertTrue(\"method \" + m.getName() + \" is not tested for defaults\", getters.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["d572389229127c297dd1fa5ce4758e1cec41e799"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["06584e6e98d592b34e1329b384182f368d2025e8"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"ed58545b60d7aa369597f02f68f1d1c9c04be47a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"c6d61bb4c680a738a817636a2a4e2a16c8375a4c":["ed58545b60d7aa369597f02f68f1d1c9c04be47a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19b281157bd1e723dc9a712b6058506090cf2a8a":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","19b281157bd1e723dc9a712b6058506090cf2a8a"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"7b91922b55d15444d554721b352861d028eb8278":["c6d61bb4c680a738a817636a2a4e2a16c8375a4c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ed58545b60d7aa369597f02f68f1d1c9c04be47a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","ed58545b60d7aa369597f02f68f1d1c9c04be47a"],"45669a651c970812a680841b97a77cce06af559f":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","01e5948db9a07144112d2f08f28ca2e3cd880348"],"3bb13258feba31ab676502787ab2e1779f129b7a":["c7375bc69c270e1e62c08c5091793a3e9dce937f","182cfc5b92d5da17fd74fc41c8091ed157d80ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7375bc69c270e1e62c08c5091793a3e9dce937f":["182cfc5b92d5da17fd74fc41c8091ed157d80ff4","6c18273ea5b3974d2f30117f46f1ae416c28f727","3bb13258feba31ab676502787ab2e1779f129b7a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"182cfc5b92d5da17fd74fc41c8091ed157d80ff4":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c2047784e704fe141e0ff36affac8a7cb6c7bbec","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","a3776dccca01c11e7046323cfad46a3b4a471233"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["45669a651c970812a680841b97a77cce06af559f"],"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"ed58545b60d7aa369597f02f68f1d1c9c04be47a":["c6d61bb4c680a738a817636a2a4e2a16c8375a4c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"c6d61bb4c680a738a817636a2a4e2a16c8375a4c":["7b91922b55d15444d554721b352861d028eb8278"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"19b281157bd1e723dc9a712b6058506090cf2a8a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"fe8474c4e5a03f0ca187f99c062af83e092717f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"06584e6e98d592b34e1329b384182f368d2025e8":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["c7375bc69c270e1e62c08c5091793a3e9dce937f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ed58545b60d7aa369597f02f68f1d1c9c04be47a","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"962d04139994fce5193143ef35615499a9a96d78":["19b281157bd1e723dc9a712b6058506090cf2a8a"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}