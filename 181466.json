{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCreateWithReader2().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCreateWithReader2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCreateWithReader2().mjava","sourceNew":"    // Same test as above, but use IndexWriter constructor\n    // that takes File:\n    public void xxxtestCreateWithReader2() throws IOException {\n        String tempDir = System.getProperty(\"java.io.tmpdir\");\n        if (tempDir == null)\n            throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n        File indexDir = new File(tempDir, \"lucenetestindexwriter\");\n        try {\n          // add one document & close writer\n          IndexWriter writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDoc(writer);\n          writer.close();\n\n          // now open reader:\n          IndexReader reader = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n\n          // now open index for create:\n          writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          assertEquals(\"should be zero documents\", writer.docCount(), 0);\n          addDoc(writer);\n          writer.close();\n\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n          IndexReader reader2 = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader2.numDocs(), 1);\n          reader.close();\n          reader2.close();\n        } finally {\n          rmDir(indexDir);\n        }\n    }\n\n","sourceOld":"    // Same test as above, but use IndexWriter constructor\n    // that takes File:\n    public void testCreateWithReader2() throws IOException {\n        String tempDir = System.getProperty(\"java.io.tmpdir\");\n        if (tempDir == null)\n            throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n        File indexDir = new File(tempDir, \"lucenetestindexwriter\");\n        try {\n          // add one document & close writer\n          IndexWriter writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDoc(writer);\n          writer.close();\n\n          // now open reader:\n          IndexReader reader = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n\n          // now open index for create:\n          writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          assertEquals(\"should be zero documents\", writer.docCount(), 0);\n          addDoc(writer);\n          writer.close();\n\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n          IndexReader reader2 = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader2.numDocs(), 1);\n          reader.close();\n          reader2.close();\n        } finally {\n          rmDir(indexDir);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCreateWithReader2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCreateWithReader2().mjava","sourceNew":"    // Same test as above, but use IndexWriter constructor\n    // that takes File:\n    public void testCreateWithReader2() throws IOException {\n        String tempDir = System.getProperty(\"java.io.tmpdir\");\n        if (tempDir == null)\n            throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n        File indexDir = new File(tempDir, \"lucenetestindexwriter\");\n        try {\n          // add one document & close writer\n          IndexWriter writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDoc(writer);\n          writer.close();\n\n          // now open reader:\n          IndexReader reader = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n\n          // now open index for create:\n          writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          assertEquals(\"should be zero documents\", writer.docCount(), 0);\n          addDoc(writer);\n          writer.close();\n\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n          IndexReader reader2 = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader2.numDocs(), 1);\n          reader.close();\n          reader2.close();\n        } finally {\n          rmDir(indexDir);\n        }\n    }\n\n","sourceOld":"    // Same test as above, but use IndexWriter constructor\n    // that takes File:\n    public void xxxtestCreateWithReader2() throws IOException {\n        String tempDir = System.getProperty(\"java.io.tmpdir\");\n        if (tempDir == null)\n            throw new IOException(\"java.io.tmpdir undefined, cannot run test\");\n        File indexDir = new File(tempDir, \"lucenetestindexwriter\");\n        try {\n          // add one document & close writer\n          IndexWriter writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          addDoc(writer);\n          writer.close();\n\n          // now open reader:\n          IndexReader reader = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n\n          // now open index for create:\n          writer = new IndexWriter(indexDir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n          assertEquals(\"should be zero documents\", writer.docCount(), 0);\n          addDoc(writer);\n          writer.close();\n\n          assertEquals(\"should be one document\", reader.numDocs(), 1);\n          IndexReader reader2 = IndexReader.open(indexDir);\n          assertEquals(\"should be one document\", reader2.numDocs(), 1);\n          reader.close();\n          reader2.close();\n        } finally {\n          rmDir(indexDir);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}