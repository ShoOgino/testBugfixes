{"path":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadNextSkip(int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadNextSkip(int).mjava","pathOld":"/dev/null","sourceNew":"  private boolean loadNextSkip(int level) throws IOException {\n    // we have to skip, the target document is greater than the current\n    // skip list entry        \n    setLastSkipData(level);\n      \n    numSkipped[level] += skipInterval[level];\n      \n    if (numSkipped[level] > docCount) {\n      // this skip list is exhausted\n      skipDoc[level] = Integer.MAX_VALUE;\n      if (numberOfSkipLevels > level) numberOfSkipLevels = level; \n      return false;\n    }\n\n    // read next skip entry\n    skipDoc[level] += readSkipData(level, skipStream[level]);\n    \n    if (level != 0) {\n      // read the child pointer if we are not on the leaf level\n      childPointer[level] = skipStream[level].readVLong() + skipPointer[level - 1];\n    }\n    \n    return true;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af012165196cf308c4c905cbe866039b6fcd2233"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListReader#loadNextSkip(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/MultiLevelSkipListReader#loadNextSkip(int).mjava","sourceNew":"  private boolean loadNextSkip(int level) throws IOException {\n    // we have to skip, the target document is greater than the current\n    // skip list entry        \n    setLastSkipData(level);\n      \n    numSkipped[level] += skipInterval[level];\n      \n    if (numSkipped[level] > docCount) {\n      // this skip list is exhausted\n      skipDoc[level] = Integer.MAX_VALUE;\n      if (numberOfSkipLevels > level) numberOfSkipLevels = level; \n      return false;\n    }\n\n    // read next skip entry\n    skipDoc[level] += readSkipData(level, skipStream[level]);\n    \n    if (level != 0) {\n      // read the child pointer if we are not on the leaf level\n      childPointer[level] = skipStream[level].readVLong() + skipPointer[level - 1];\n    }\n    \n    return true;\n\n  }\n\n","sourceOld":"  private boolean loadNextSkip(int level) throws IOException {\n    // we have to skip, the target document is greater than the current\n    // skip list entry        \n    setLastSkipData(level);\n      \n    numSkipped[level] += skipInterval[level];\n      \n    if (numSkipped[level] > docCount) {\n      // this skip list is exhausted\n      skipDoc[level] = Integer.MAX_VALUE;\n      if (numberOfSkipLevels > level) numberOfSkipLevels = level; \n      return false;\n    }\n\n    // read next skip entry\n    skipDoc[level] += readSkipData(level, skipStream[level]);\n    \n    if (level != 0) {\n      // read the child pointer if we are not on the leaf level\n      childPointer[level] = skipStream[level].readVLong() + skipPointer[level - 1];\n    }\n    \n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}