{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7d6a557f2d994f949e2a69d503202f504b3c5f2","date":1534603499,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    assert(bottomPlane.isWithin(centerPoint));\n    assert(leftPlane.isWithin(centerPoint));\n    assert(rightPlane.isWithin(centerPoint));\n    \n    // Compute the backing plane\n    // The normal for this plane is a unit vector through the origin that goes through the middle lon.  The plane's D is 0,\n    // because it goes through the origin.\n    this.backingPlane = new SidedPlane(this.centerPoint, cosMiddleLon, sinMiddleLon, 0.0, 0.0);\n    \n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n    \n    System.out.println(\"LLHC = \"+LLHC+\" LRHC = \"+LRHC);\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n  }\n\n","bugFix":null,"bugIntro":["a6a3cf171f27a0939a32624a3e8e518ebc15b35e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a3cf171f27a0939a32624a3e8e518ebc15b35e","date":1534610006,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoNorthRectangle#GeoNorthRectangle(PlanetModel,double,double,double).mjava","sourceNew":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    assert(bottomPlane.isWithin(centerPoint));\n    assert(leftPlane.isWithin(centerPoint));\n    assert(rightPlane.isWithin(centerPoint));\n    \n    // Compute the backing plane\n    // The normal for this plane is a unit vector through the origin that goes through the middle lon.  The plane's D is 0,\n    // because it goes through the origin.\n    this.backingPlane = new SidedPlane(this.centerPoint, cosMiddleLon, sinMiddleLon, 0.0, 0.0);\n    \n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n    \n    //System.out.println(\"LLHC = \"+LLHC+\" LRHC = \"+LRHC);\n  }\n\n","sourceOld":"  /**\n   * Accepts only values in the following ranges: lat: {@code -PI/2 -> PI/2}, lon: {@code -PI -> PI}\n   *@param planetModel is the planet model.\n   *@param bottomLat is the bottom latitude.\n   *@param leftLon is the left longitude.\n   *@param rightLon is the right longitude.\n   */\n  public GeoNorthRectangle(final PlanetModel planetModel, final double bottomLat, final double leftLon, double rightLon) {\n    super(planetModel);\n    // Argument checking\n    if (bottomLat > Math.PI * 0.5 || bottomLat < -Math.PI * 0.5)\n      throw new IllegalArgumentException(\"Bottom latitude out of range\");\n    if (leftLon < -Math.PI || leftLon > Math.PI)\n      throw new IllegalArgumentException(\"Left longitude out of range\");\n    if (rightLon < -Math.PI || rightLon > Math.PI)\n      throw new IllegalArgumentException(\"Right longitude out of range\");\n    double extent = rightLon - leftLon;\n    if (extent < 0.0) {\n      extent += 2.0 * Math.PI;\n    }\n    if (extent > Math.PI)\n      throw new IllegalArgumentException(\"Width of rectangle too great\");\n\n    this.bottomLat = bottomLat;\n    this.leftLon = leftLon;\n    this.rightLon = rightLon;\n\n    final double sinBottomLat = Math.sin(bottomLat);\n    final double cosBottomLat = Math.cos(bottomLat);\n    final double sinLeftLon = Math.sin(leftLon);\n    final double cosLeftLon = Math.cos(leftLon);\n    final double sinRightLon = Math.sin(rightLon);\n    final double cosRightLon = Math.cos(rightLon);\n\n    // Now build the points\n    this.LRHC = new GeoPoint(planetModel, sinBottomLat, sinRightLon, cosBottomLat, cosRightLon, bottomLat, rightLon);\n    this.LLHC = new GeoPoint(planetModel, sinBottomLat, sinLeftLon, cosBottomLat, cosLeftLon, bottomLat, leftLon);\n\n    final double middleLat = (Math.PI * 0.5 + bottomLat) * 0.5;\n    final double sinMiddleLat = Math.sin(middleLat);\n    this.cosMiddleLat = Math.cos(middleLat);\n    // Normalize\n    while (leftLon > rightLon) {\n      rightLon += Math.PI * 2.0;\n    }\n    final double middleLon = (leftLon + rightLon) * 0.5;\n    final double sinMiddleLon = Math.sin(middleLon);\n    final double cosMiddleLon = Math.cos(middleLon);\n\n    this.centerPoint = new GeoPoint(planetModel, sinMiddleLat, sinMiddleLon, cosMiddleLat, cosMiddleLon);\n\n    this.bottomPlane = new SidedPlane(centerPoint, planetModel, sinBottomLat);\n    this.leftPlane = new SidedPlane(centerPoint, cosLeftLon, sinLeftLon);\n    this.rightPlane = new SidedPlane(centerPoint, cosRightLon, sinRightLon);\n\n    assert(bottomPlane.isWithin(centerPoint));\n    assert(leftPlane.isWithin(centerPoint));\n    assert(rightPlane.isWithin(centerPoint));\n    \n    // Compute the backing plane\n    // The normal for this plane is a unit vector through the origin that goes through the middle lon.  The plane's D is 0,\n    // because it goes through the origin.\n    this.backingPlane = new SidedPlane(this.centerPoint, cosMiddleLon, sinMiddleLon, 0.0, 0.0);\n    \n    this.bottomPlanePoints = new GeoPoint[]{LLHC, LRHC};\n    this.leftPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LLHC};\n    this.rightPlanePoints = new GeoPoint[]{planetModel.NORTH_POLE, LRHC};\n\n    this.edgePoints = new GeoPoint[]{planetModel.NORTH_POLE};\n    \n    System.out.println(\"LLHC = \"+LLHC+\" LRHC = \"+LRHC);\n  }\n\n","bugFix":["e7d6a557f2d994f949e2a69d503202f504b3c5f2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7d6a557f2d994f949e2a69d503202f504b3c5f2":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a6a3cf171f27a0939a32624a3e8e518ebc15b35e":["e7d6a557f2d994f949e2a69d503202f504b3c5f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a3cf171f27a0939a32624a3e8e518ebc15b35e"]},"commit2Childs":{"e7d6a557f2d994f949e2a69d503202f504b3c5f2":["a6a3cf171f27a0939a32624a3e8e518ebc15b35e"],"a6a3cf171f27a0939a32624a3e8e518ebc15b35e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["e7d6a557f2d994f949e2a69d503202f504b3c5f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}