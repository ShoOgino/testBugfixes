{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return  new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return useRandomAccess;\n        }\n      };\n    }\n    return _TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return  new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return useRandomAccess;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return  new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return useRandomAccess;\n        }\n      };\n    }\n    return _TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return  new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return useRandomAccess;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return  new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return useRandomAccess;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff","date":1412587199,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, long filterCost) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, long filterCost) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#randomFilterStrategy(Random,boolean).mjava","sourceNew":null,"sourceOld":"  private static FilteredQuery.FilterStrategy randomFilterStrategy(Random random, final boolean useRandomAccess) {\n    if (useRandomAccess) {\n      return new FilteredQuery.RandomAccessFilterStrategy() {\n        @Override\n        protected boolean useRandomAccess(Bits bits, long filterCost) {\n          return true;\n        }\n      };\n    }\n    return TestUtil.randomFilterStrategy(random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["6613659748fe4411a7dcf85266e55db1f95f7315"],"55980207f1977bd1463465de1659b821347e2fa8":["acf00221f44c5f08ccea014f2492b53af15ecd66","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"6613659748fe4411a7dcf85266e55db1f95f7315":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["6613659748fe4411a7dcf85266e55db1f95f7315","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"55980207f1977bd1463465de1659b821347e2fa8":[],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["1db68e96dd908fcd79ef809095822736aa601d08","55980207f1977bd1463465de1659b821347e2fa8"],"6613659748fe4411a7dcf85266e55db1f95f7315":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["55980207f1977bd1463465de1659b821347e2fa8","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}