{"path":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), new Term(field, singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), new Term(field, commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), new Term(field, singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), new Term(field, commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), new Term(field, singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), new Term(field, commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), term.createTerm(singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), term.createTerm(commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    MinimizationOperations.minimize(automaton);\n    \n    if (BasicOperations.isEmpty(automaton)) {\n      // matches nothing\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return TermsEnum.EMPTY;\n        }\n      };\n    } else if (BasicOperations.isTotal(automaton)) {\n      // matches all possible strings\n      factory = new TermsEnumFactory() {\n        @Override\n        protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n          return terms.iterator();\n        }\n      };\n    } else {\n      final String singleton;\n      final String commonPrefix;\n      \n      if (automaton.getSingleton() == null) {\n        commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n      } else {\n        commonPrefix = null;\n        singleton = automaton.getSingleton();\n      }\n      \n      if (singleton != null) {\n        // matches a fixed string in singleton or expanded representation\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new SingleTermsEnum(terms.iterator(), new Term(field, singleton));\n          }\n        };\n      } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n          BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n        // matches a constant prefix\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new PrefixTermsEnum(terms.iterator(), new Term(field, commonPrefix));\n          }\n        };\n      } else {\n        final AutomatonTermsEnum.CompiledAutomaton compiled = \n          new CompiledAutomaton(automaton, SpecialOperations.isFinite(automaton));\n        factory = new TermsEnumFactory() {\n          @Override\n          protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n            return new AutomatonTermsEnum(terms.iterator(), compiled);\n          }\n        };\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#AutomatonQuery(Term,Automaton).mjava","sourceNew":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton);\n  }\n\n","sourceOld":"  /**\n   * Create a new AutomatonQuery from an {@link Automaton}.\n   * \n   * @param term Term containing field and possibly some pattern structure. The\n   *        term text is ignored.\n   * @param automaton Automaton to run, terms that are accepted are considered a\n   *        match.\n   */\n  public AutomatonQuery(final Term term, Automaton automaton) {\n    super(term.field());\n    this.term = term;\n    this.automaton = automaton;\n    this.compiled = new CompiledAutomaton(automaton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["60ba444201d2570214b6fcf1d15600dc1a01f548","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","95f7ab6c9bc005d456da65d8d74c5338ffc031aa","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}