{"path":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"doc2\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"doc2\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0234821f0874a57cda0a32ef52180de16fd0da4","date":1259026960,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"h\\u1234llo\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    assertEquals( 2, rsp.getResults().getNumFound() );\n    // System.out.println( rsp.getResults() );\n\n    // query outside ascii range\n    query.setQuery(\"name:h\\u1234llo\");\n    rsp = server.query( query );\n    assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"doc2\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    Assert.assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n  }\n\n","bugFix":["87b35b4a5f61517716607e0ae9fe449bdbbf6bb6","2e97a7d6ce275d5deea94b74ce25d8551202f9ba","abea0c3441959408379877b217ef9a7a9182e48b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testAddRetrieve().mjava","sourceNew":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"h\\u1234llo\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    assertEquals( 2, rsp.getResults().getNumFound() );\n    // System.out.println( rsp.getResults() );\n\n    // query outside ascii range\n    query.setQuery(\"name:h\\u1234llo\");\n    rsp = server.query( query );\n    assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n  public void testAddRetrieve() throws Exception\n  {    \n    SolrServer server = getSolrServer();\n    \n    // Empty the database...\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    \n    // Now add something...\n    SolrInputDocument doc1 = new SolrInputDocument();\n    doc1.addField( \"id\", \"id1\", 1.0f );\n    doc1.addField( \"name\", \"doc1\", 1.0f );\n    doc1.addField( \"price\", 10 );\n\n    SolrInputDocument doc2 = new SolrInputDocument();\n    doc2.addField( \"id\", \"id2\", 1.0f );\n    doc2.addField( \"name\", \"h\\u1234llo\", 1.0f );\n    doc2.addField( \"price\", 20 );\n    \n    Collection<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    docs.add( doc1 );\n    docs.add( doc2 );\n    \n    // Add the documents\n    server.add( docs );\n    server.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"*:*\" );\n    query.addSortField( \"price\", SolrQuery.ORDER.asc );\n    QueryResponse rsp = server.query( query );\n    \n    assertEquals( 2, rsp.getResults().getNumFound() );\n    System.out.println( rsp.getResults() );\n    \n    // Now do it again\n    server.add( docs );\n    server.commit();\n    \n    rsp = server.query( query );\n    assertEquals( 2, rsp.getResults().getNumFound() );\n    // System.out.println( rsp.getResults() );\n\n    // query outside ascii range\n    query.setQuery(\"name:h\\u1234llo\");\n    rsp = server.query( query );\n    assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f0234821f0874a57cda0a32ef52180de16fd0da4"],"f0234821f0874a57cda0a32ef52180de16fd0da4":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["f0234821f0874a57cda0a32ef52180de16fd0da4"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"f0234821f0874a57cda0a32ef52180de16fd0da4":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}