{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", analyzer);\n    parser.setAutoGeneratePhraseQueries(true);\n    assertEquals(expected, parser.parse(\"中国\"));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", analyzer);\n    parser.setAutoGeneratePhraseQueries(true);\n    assertEquals(expected, parser.parse(\"中国\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", analyzer);\n    parser.setAutoGeneratePhraseQueries(true);\n    assertEquals(expected, parser.parse(\"中国\"));\n  }\n\n","bugFix":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", analyzer);\n    parser.setAutoGeneratePhraseQueries(true);\n    assertEquals(expected, parser.parse(\"中国\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, \"field\", analyzer);\n    parser.setAutoGeneratePhraseQueries(true);\n    assertEquals(expected, parser.parse(\"中国\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery(\"field\", \"中\", \"国\");\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery();\n    expected.add(new Term(\"field\", \"中\"));\n    expected.add(new Term(\"field\", \"国\"));\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d610f871e456a170bec00f4e3cb584769c6b9ec","date":1479428298,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery(\"field\", \"中\", \"国\");\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    if (qp instanceof QueryParser) { // Always true, since TestStandardQP overrides this method\n      ((QueryParser)qp).setSplitOnWhitespace(true); // LUCENE-7533\n    }\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery(\"field\", \"中\", \"国\");\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e859e664a65796dadf8aaf65db6f66f3a885368","date":1479487334,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testAutoGeneratePhraseQueriesOn().mjava","sourceNew":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery(\"field\", \"中\", \"国\");\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    if (qp instanceof QueryParser) { // Always true, since TestStandardQP overrides this method\n      ((QueryParser)qp).setSplitOnWhitespace(true); // LUCENE-7533\n    }\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","sourceOld":"  public void testAutoGeneratePhraseQueriesOn() throws Exception {\n    // individual CJK chars as terms\n    SimpleCJKAnalyzer analyzer = new SimpleCJKAnalyzer(); \n  \n    PhraseQuery expected = new PhraseQuery(\"field\", \"中\", \"国\");\n    CommonQueryParserConfiguration qp = getParserConfig(analyzer);\n    setAutoGeneratePhraseQueries(qp, true);\n    assertEquals(expected, getQuery(\"中国\",qp));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9e1499c5d26c936238506df90a3c02c76707722":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"8d610f871e456a170bec00f4e3cb584769c6b9ec":["e9e1499c5d26c936238506df90a3c02c76707722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"2e859e664a65796dadf8aaf65db6f66f3a885368":["e9e1499c5d26c936238506df90a3c02c76707722","8d610f871e456a170bec00f4e3cb584769c6b9ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d610f871e456a170bec00f4e3cb584769c6b9ec"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["e9e1499c5d26c936238506df90a3c02c76707722","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e9e1499c5d26c936238506df90a3c02c76707722":["8d610f871e456a170bec00f4e3cb584769c6b9ec","2e859e664a65796dadf8aaf65db6f66f3a885368"],"8d610f871e456a170bec00f4e3cb584769c6b9ec":["2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2e859e664a65796dadf8aaf65db6f66f3a885368":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","2e859e664a65796dadf8aaf65db6f66f3a885368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}