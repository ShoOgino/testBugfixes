{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","commits":[{"id":"f18d4e1cdc7330101ca433af5e8564dfd894f2bf","date":1379041877,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validate(String name, Set<String> marked, Set<String> chain) {        \n    ValueSource vs = getValueSource(name);\n    if (vs == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    }\n    \n    if (vs instanceof ExpressionValueSource) {\n      Expression expr = ((ExpressionValueSource)vs).expression;\n      for (String external : expr.externals) {\n        if (chain.contains(external)) {\n          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + external + \")\");\n        }\n        if (!marked.contains(external)) {\n          chain.add(external);\n          validate(external, marked, chain);\n          chain.remove(external);\n        }\n      }\n    }\n    \n    marked.add(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37d6b37d9aac54bcb228187c93c3ede63a974996","date":1379049687,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","sourceNew":"  private void validate(String name, Set<String> marked, Set<String> chain) {        \n    ValueSource vs = getValueSource(name);\n    if (vs == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    }\n    \n    if (vs instanceof ExpressionValueSource) {\n      Expression expr = ((ExpressionValueSource)vs).expression;\n      for (String external : expr.variables) {\n        if (chain.contains(external)) {\n          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + external + \")\");\n        }\n        if (!marked.contains(external)) {\n          chain.add(external);\n          validate(external, marked, chain);\n          chain.remove(external);\n        }\n      }\n    }\n    \n    marked.add(name);\n  }\n\n","sourceOld":"  private void validate(String name, Set<String> marked, Set<String> chain) {        \n    ValueSource vs = getValueSource(name);\n    if (vs == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    }\n    \n    if (vs instanceof ExpressionValueSource) {\n      Expression expr = ((ExpressionValueSource)vs).expression;\n      for (String external : expr.externals) {\n        if (chain.contains(external)) {\n          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + external + \")\");\n        }\n        if (!marked.contains(external)) {\n          chain.add(external);\n          validate(external, marked, chain);\n          chain.remove(external);\n        }\n      }\n    }\n    \n    marked.add(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  private void validate(String name, Set<String> marked, Set<String> chain) {        \n    ValueSource vs = getValueSource(name);\n    if (vs == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    }\n    \n    if (vs instanceof ExpressionValueSource) {\n      Expression expr = ((ExpressionValueSource)vs).expression;\n      for (String external : expr.variables) {\n        if (chain.contains(external)) {\n          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + external + \")\");\n        }\n        if (!marked.contains(external)) {\n          chain.add(external);\n          validate(external, marked, chain);\n          chain.remove(external);\n        }\n      }\n    }\n    \n    marked.add(name);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb","date":1379734663,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/Bindings#validate(String,Set[String],Set[String]).mjava","sourceNew":null,"sourceOld":"  private void validate(String name, Set<String> marked, Set<String> chain) {        \n    ValueSource vs = getValueSource(name);\n    if (vs == null) {\n      throw new IllegalArgumentException(\"Invalid reference '\" + name + \"'\");\n    }\n    \n    if (vs instanceof ExpressionValueSource) {\n      Expression expr = ((ExpressionValueSource)vs).expression;\n      for (String external : expr.variables) {\n        if (chain.contains(external)) {\n          throw new IllegalArgumentException(\"Recursion Error: Cycle detected originating in (\" + external + \")\");\n        }\n        if (!marked.contains(external)) {\n          chain.add(external);\n          validate(external, marked, chain);\n          chain.remove(external);\n        }\n      }\n    }\n    \n    marked.add(name);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37d6b37d9aac54bcb228187c93c3ede63a974996"]},"commit2Childs":{"c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f18d4e1cdc7330101ca433af5e8564dfd894f2bf":["37d6b37d9aac54bcb228187c93c3ede63a974996"],"37d6b37d9aac54bcb228187c93c3ede63a974996":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f18d4e1cdc7330101ca433af5e8564dfd894f2bf","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["c4a2e0e19d6ee2740632e97e6248b49b1f6df7fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}