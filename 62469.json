{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRand().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testRangeFilterRand() throws IOException {\n    \n    IndexReader reader = signedIndexReader;\n    IndexSearcher search = newSearcher(reader);\n    \n    String minRP = pad(signedIndexDir.minR);\n    String maxRP = pad(signedIndexDir.maxR);\n    \n    int numDocs = reader.numDocs();\n    \n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n    \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\", \"body\"));\n    \n    // test extremes, bounded on both ends\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but biggest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but smallest\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"all but extremes\", numDocs - 2, result.length);\n    \n    // unbounded\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"smallest and up\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"biggest and down\", numDocs, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, null, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not smallest, but up\", numDocs - 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"not biggest, but down\", numDocs - 1, result.length);\n    \n    // very small sets\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F\", 0, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, F, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F\", 0, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", minRP, minRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", null, minRP, F, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T\", 1, result.length);\n    \n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, maxRP, T, T)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T\", 1, result.length);\n    result = search.search(new FilteredQuery(q, TermRangeFilter.newStringRange(\"rand\", maxRP, null, T, F)),\n        numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}