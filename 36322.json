{"path":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(rand, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory(rand);\n    RandomIndexWriter writer = new RandomIndexWriter(rand, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);\n\n    // not cacheable:\n    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(slowReader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(ReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(IndexReader reader) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a openbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new OpenBitSet();\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir, true));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"386d1b0dcb065f1bfc494b1407cb41c536b95485","date":1327848512,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = new SlowMultiReaderWrapper(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader.maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingWrapperFilter#testIsCacheAble().mjava","sourceNew":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIsCacheAble() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(new Document());\n    writer.close();\n\n    IndexReader reader = SlowCompositeReaderWrapper.wrap(IndexReader.open(dir));\n\n    // not cacheable:\n    assertDocIdSetCacheable(reader, new QueryWrapperFilter(new TermQuery(new Term(\"test\",\"value\"))), false);\n    // returns default empty docidset, always cacheable:\n    assertDocIdSetCacheable(reader, NumericRangeFilter.newIntRange(\"test\", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);\n    // is cacheable:\n    assertDocIdSetCacheable(reader, FieldCacheRangeFilter.newIntRange(\"test\", Integer.valueOf(10), Integer.valueOf(20), true, true), true);\n    // a fixedbitset filter is always cacheable\n    assertDocIdSetCacheable(reader, new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) {\n        return new FixedBitSet(context.reader().maxDoc());\n      }\n    }, true);\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["6620df8541b174097b1133a4fc370adb2e570524","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"51c34a3639838887e7997850b6be80f838a4d6f7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["6620df8541b174097b1133a4fc370adb2e570524"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","51c34a3639838887e7997850b6be80f838a4d6f7"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","386d1b0dcb065f1bfc494b1407cb41c536b95485"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["51c34a3639838887e7997850b6be80f838a4d6f7"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["6620df8541b174097b1133a4fc370adb2e570524","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c34a3639838887e7997850b6be80f838a4d6f7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e","3bb13258feba31ab676502787ab2e1779f129b7a"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["386d1b0dcb065f1bfc494b1407cb41c536b95485"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["6620df8541b174097b1133a4fc370adb2e570524"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"386d1b0dcb065f1bfc494b1407cb41c536b95485":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}