{"path":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","commits":[{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","pathOld":"/dev/null","sourceNew":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity super.score() always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4f598c1e5eb83ef2a8e9a4cd04c60b94b9511d3","date":1175735134,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","sourceNew":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity super.score() always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","sourceOld":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    final int requiredNrMatchers = requiredScorers.size();\n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity super.score() always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76349ae49451ab1e1e63e8eeb254f82684b1da25","date":1176847207,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","sourceNew":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","sourceOld":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity super.score() always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","sourceNew":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) throws IOException { // non counting.\n    return new ConjunctionScorer(defaultSimilarity, new Scorer[]{req1, req2});\n    // All scorers match, so defaultSimilarity always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n  }\n\n","sourceOld":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) { // non counting. \n    ConjunctionScorer cs = new ConjunctionScorer(defaultSimilarity);\n    // All scorers match, so defaultSimilarity always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n    cs.add(req1);\n    cs.add(req2);\n    return cs;\n  }\n\n","bugFix":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#dualConjunctionSumScorer(Scorer,Scorer).mjava","sourceNew":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) throws IOException { // non counting.\n    return new ConjunctionScorer(defaultSimilarity, new Scorer[]{req1, req2});\n    // All scorers match, so defaultSimilarity always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n  }\n\n","sourceOld":"  private Scorer dualConjunctionSumScorer(Scorer req1, Scorer req2) throws IOException { // non counting.\n    return new ConjunctionScorer(defaultSimilarity, new Scorer[]{req1, req2});\n    // All scorers match, so defaultSimilarity always has 1 as\n    // the coordination factor.\n    // Therefore the sum of the scores of two scorers\n    // is used as score.\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["c4f598c1e5eb83ef2a8e9a4cd04c60b94b9511d3"],"c4f598c1e5eb83ef2a8e9a4cd04c60b94b9511d3":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a251547210ad8523f10c15c461496a2ad4bb3df4"]},"commit2Childs":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"76349ae49451ab1e1e63e8eeb254f82684b1da25":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"c4f598c1e5eb83ef2a8e9a4cd04c60b94b9511d3":["76349ae49451ab1e1e63e8eeb254f82684b1da25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["c4f598c1e5eb83ef2a8e9a4cd04c60b94b9511d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}