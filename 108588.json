{"path":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (state.liveDocs != null && state.liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (state.liveDocs != null && state.liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (state.liveDocs != null && state.liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (state.liveDocs != null && state.liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (state.liveDocs != null && state.liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document: \" + lastDocID + \" and \" + docID);\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document: \" + lastDocID + \" and \" + docID);\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/IDVersionPostingsWriter#startDoc(int,int).mjava","sourceNew":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document: \" + lastDocID + \" and \" + docID);\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","sourceOld":"  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n    // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n    if (liveDocs != null && liveDocs.get(docID) == false) {\n      return;\n    }\n    if (lastDocID != -1) {\n      throw new IllegalArgumentException(\"term appears in more than one document\");\n    }\n    if (termDocFreq != 1) {\n      throw new IllegalArgumentException(\"term appears more than once in the document\");\n    }\n\n    lastDocID = docID;\n    lastPosition = -1;\n    lastVersion = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"99eb4a732d1a908f4636ace52928876136bf1896":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["4d637064d608752565d4f9f41b2497dfdfdde50e","99eb4a732d1a908f4636ace52928876136bf1896"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","4d637064d608752565d4f9f41b2497dfdfdde50e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}