{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBufferOnNonLeader().mjava","sourceNew":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  public void doTestBufferOnNonLeader() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(200, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(200, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","sourceNew":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","sourceNew":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","sourceNew":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBufferOnNonLeader().mjava","sourceNew":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that the buffer is always activated on non-leader nodes.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBufferOnNonLeader() throws Exception {\n    // buffering is enabled by default, so disable it\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // Index documents\n    for (int i = 0; i < 200; i++) {\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i))); // will perform a commit for every document\n    }\n\n    // And immediately, close all the leaders, then restart them. It is likely that the replication will not be\n    // performed fully, and therefore be continued by the new leader\n    // At this stage, the new leader must have been elected\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1));\n    this.restartServer(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2));\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // Commit to make the documents visible on the target\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(200, SOURCE_COLLECTION);\n    assertNumDocs(200, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e7da9d8536c11576df10e348efa79d2739170936"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}