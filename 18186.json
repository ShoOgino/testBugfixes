{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":null,"sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean fullMerge) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), StringField.TYPE_STORED));\n        writer.addDocument(doc);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexReader reader = IndexReader.open(directory);\n      IndexSearcher indexSearcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      reader.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}