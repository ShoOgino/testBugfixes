{"path":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(IndexReader).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    NumericRangeTermsEnum(final IndexReader reader) throws IOException {\n      super(reader, getField());\n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(TermsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(IndexReader).mjava","sourceNew":"    NumericRangeTermsEnum(final TermsEnum tenum) throws IOException {\n      super(tenum);\n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n\n      termComp = getComparator();\n    }\n\n","sourceOld":"    NumericRangeTermsEnum(final IndexReader reader) throws IOException {\n      super(reader, getField());\n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(IndexReader).mjava","sourceNew":null,"sourceOld":"    NumericRangeTermsEnum(final IndexReader reader) throws IOException {\n      super(reader, getField());\n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#NumericRangeTermsEnum(IndexReader).mjava","sourceNew":null,"sourceOld":"    NumericRangeTermsEnum(final IndexReader reader) throws IOException {\n      super(reader, getField());\n      switch (valSize) {\n        case 64: {\n          // lower\n          long minBound = Long.MIN_VALUE;\n          if (min instanceof Long) {\n            minBound = min.longValue();\n          } else if (min instanceof Double) {\n            minBound = NumericUtils.doubleToSortableLong(min.doubleValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Long.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          long maxBound = Long.MAX_VALUE;\n          if (max instanceof Long) {\n            maxBound = max.longValue();\n          } else if (max instanceof Double) {\n            maxBound = NumericUtils.doubleToSortableLong(max.doubleValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Long.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitLongRange(new NumericUtils.LongRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        case 32: {\n          // lower\n          int minBound = Integer.MIN_VALUE;\n          if (min instanceof Integer) {\n            minBound = min.intValue();\n          } else if (min instanceof Float) {\n            minBound = NumericUtils.floatToSortableInt(min.floatValue());\n          }\n          if (!minInclusive && min != null) {\n            if (minBound == Integer.MAX_VALUE) break;\n            minBound++;\n          }\n          \n          // upper\n          int maxBound = Integer.MAX_VALUE;\n          if (max instanceof Integer) {\n            maxBound = max.intValue();\n          } else if (max instanceof Float) {\n            maxBound = NumericUtils.floatToSortableInt(max.floatValue());\n          }\n          if (!maxInclusive && max != null) {\n            if (maxBound == Integer.MIN_VALUE) break;\n            maxBound--;\n          }\n          \n          NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n            @Override\n            public final void addRange(BytesRef minPrefixCoded, BytesRef maxPrefixCoded) {\n              rangeBounds.add(minPrefixCoded);\n              rangeBounds.add(maxPrefixCoded);\n            }\n          }, precisionStep, minBound, maxBound);\n          break;\n        }\n          \n        default:\n          // should never happen\n          throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n      }\n\n      termComp = getComparator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e8dd2a69747e9f2922fd8b6970bd1661b26a692d","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}