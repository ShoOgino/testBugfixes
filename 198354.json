{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f41255666b78a4e257ec4e0eb099e332f06a4a0c","date":1477483663,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":6,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":6,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      return disi.advance(target);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["f41255666b78a4e257ec4e0eb099e332f06a4a0c","03e17b020972a0d6e8d6823f545571a66646a167"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"f41255666b78a4e257ec4e0eb099e332f06a4a0c":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","084884d4602f4d1c7411eab29e897e349ce62675"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"f41255666b78a4e257ec4e0eb099e332f06a4a0c":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}