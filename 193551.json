{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","commits":[{"id":"4425aa1103f1abe8e39d220f12e82b94c4f8272a","date":1467268836,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void modifyCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","sourceOld":"  private void modifyCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#modifyCollection(ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","sourceOld":"  private void modifyCollection(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    \n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(COLL_CONF);\n    \n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n      \n      boolean isLegacyCloud =  Overseer.isLegacy(zkStateReader);\n      createConfNode(configName, collectionName, isLegacyCloud);\n      reloadCollection(new ZkNodeProps(NAME, collectionName), results);\n    }\n    \n    overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}