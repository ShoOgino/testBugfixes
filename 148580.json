{"path":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n      if (sortSpec != null) {\n        sort = sortSpec.getSort();\n        // ignore the count for now... it's currently only controlled by start & limit on req\n        // count = sortSpec.getCount();\n      }\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6075cf7db5ebb03b013c9110fca8f1013ba6a72","date":1196271697,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());\n      if (sortSpec != null) {\n        sort = sortSpec.getSort();\n        // ignore the count for now... it's currently only controlled by start & limit on req\n        // count = sortSpec.getCount();\n      }\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n      TopFieldDocs hits = req.getSearcher().search(query,filter, req.getStart()+req.getLimit(), sort);\n\n      int numHits = hits.totalHits;\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n    Hits hits=null;\n\n    try {\n      hits = req.getSearcher().search(query,filter,sort);\n\n      int numHits = hits.length();\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.id(i);\n        data[i] = hits.doc(i);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f824fc682d760b1e10b1ac8238be69e9de08198","date":1268605446,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n      TopFieldDocs hits = req.getSearcher().search(query,filter, req.getStart()+req.getLimit(), sort);\n\n      int numHits = hits.totalHits;\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = hits.scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/tst/OldRequestHandler#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n\n    Query query = null;\n    Filter filter = null;\n\n    List<String> commands = StrUtils.splitSmart(req.getQueryString(),';');\n\n    String qs = commands.size() >= 1 ? commands.get(0) : \"\";\n    query = QueryParsing.parseQuery(qs, req.getSchema());\n\n    // If the first non-query, non-filter command is a simple sort on an indexed field, then\n    // we can use the Lucene sort ability.\n    Sort sort = null;\n    if (commands.size() >= 2) {\n      sort = QueryParsing.parseSort(commands.get(1), req.getSchema());\n    }\n\n\n    try {\n\n      int numHits;\n      ScoreDoc[] scoreDocs;\n      if (sort != null) {\n        TopFieldDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit(), sort);\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      } else {\n        TopDocs hits = req.getSearcher().search(query, filter,\n            req.getStart() + req.getLimit());\n        scoreDocs = hits.scoreDocs;\n        numHits = hits.totalHits;\n      }\n\n      int startRow = Math.min(numHits, req.getStart());\n      int endRow = Math.min(numHits,req.getStart()+req.getLimit());\n      int numRows = endRow-startRow;\n\n      int[] ids = new int[numRows];\n      Document[] data = new Document[numRows];\n      for (int i=startRow; i<endRow; i++) {\n        ids[i] = scoreDocs[i].doc;\n        data[i] = req.getSearcher().doc(ids[i]);\n      }\n\n      rsp.add(null, new DocSlice(0,numRows,ids,null,numHits,0.0f));\n\n      /***********************\n      rsp.setResults(new DocSlice(0,numRows,ids,null,numHits));\n\n      // Setting the actual document objects is optional\n      rsp.setResults(data);\n      ************************/\n    } catch (IOException e) {\n      rsp.setException(e);\n      numErrors++;\n      return;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f824fc682d760b1e10b1ac8238be69e9de08198":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"ad94625fb8d088209f46650c8097196fec67f00c":["1f824fc682d760b1e10b1ac8238be69e9de08198"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f824fc682d760b1e10b1ac8238be69e9de08198":["ad94625fb8d088209f46650c8097196fec67f00c"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["1f824fc682d760b1e10b1ac8238be69e9de08198"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}