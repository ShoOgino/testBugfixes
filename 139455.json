{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","commits":[{"id":"9aefce86de8b17eed91ab011fb54d704d91102ef","date":1599128224,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/Lucene87StoredFieldsFormat.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0830ac90eb1444b953b84ce674e347f2601674f9","date":1599145226,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        compressor.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(dictBytes.length, len);\n      System.arraycopy(bytes, off, dictBytes, 0, dictLength);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        // NOTE: offset MUST be 0 when setting the dictionary in order to work around JDK-8252739\n        compressor.setDictionary(dictBytes, 0, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":["4a423eed13bcef28b1313c2e674f9ce6eec07c95"],"bugIntro":["ed895147bd2a42a346cf4711e35fbe452fc1df6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ed895147bd2a42a346cf4711e35fbe452fc1df6f","date":1599729179,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        deflaterBugfix.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        compressor.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":["0830ac90eb1444b953b84ce674e347f2601674f9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b45f542a44cc5225bc57913f3ec59d5016398f14","date":1600254540,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = len / (NUM_SUB_BLOCKS * DICT_SIZE_FACTOR);\n      final int blockLength = (len - dictLength + NUM_SUB_BLOCKS - 1) / NUM_SUB_BLOCKS;\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        deflaterBugfix.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        deflaterBugfix.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene87/DeflateWithPresetDictCompressionMode.DeflateWithPresetDictCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = len / (NUM_SUB_BLOCKS * DICT_SIZE_FACTOR);\n      final int blockLength = (len - dictLength + NUM_SUB_BLOCKS - 1) / NUM_SUB_BLOCKS;\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        deflaterBugfix.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      final int dictLength = Math.min(this.dictLength, len);\n      out.writeVInt(dictLength);\n      out.writeVInt(blockLength);\n      final int end = off + len;\n\n      // Compress the dictionary first\n      compressor.reset();\n      doCompress(bytes, off, dictLength, out);\n\n      // And then sub blocks\n      for (int start = off + dictLength; start < end; start += blockLength) {\n        compressor.reset();\n        deflaterBugfix.setDictionary(bytes, off, dictLength);\n        doCompress(bytes, start, Math.min(blockLength, off + len - start), out);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0830ac90eb1444b953b84ce674e347f2601674f9":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9aefce86de8b17eed91ab011fb54d704d91102ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["ed895147bd2a42a346cf4711e35fbe452fc1df6f","b45f542a44cc5225bc57913f3ec59d5016398f14"],"b45f542a44cc5225bc57913f3ec59d5016398f14":["ed895147bd2a42a346cf4711e35fbe452fc1df6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"ed895147bd2a42a346cf4711e35fbe452fc1df6f":["0830ac90eb1444b953b84ce674e347f2601674f9"]},"commit2Childs":{"0830ac90eb1444b953b84ce674e347f2601674f9":["ed895147bd2a42a346cf4711e35fbe452fc1df6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9aefce86de8b17eed91ab011fb54d704d91102ef"],"9aefce86de8b17eed91ab011fb54d704d91102ef":["0830ac90eb1444b953b84ce674e347f2601674f9"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b45f542a44cc5225bc57913f3ec59d5016398f14":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"ed895147bd2a42a346cf4711e35fbe452fc1df6f":["65352f844eb9e9a677ec4eb2abced4404f08181d","b45f542a44cc5225bc57913f3ec59d5016398f14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}