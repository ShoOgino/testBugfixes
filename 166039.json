{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","commits":[{"id":"308eabc0d18aa58a75b0a130d08524e98661807b","date":1425056617,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher = newSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    assertEquals(searcher.count(query), searcher.search(query, 1).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","pathOld":"/dev/null","sourceNew":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher = newSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    assertEquals(searcher.count(query), searcher.search(query, 1).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0a65e308c1642d1ffb120ffae140f08362e92a7","date":1441197397,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","sourceNew":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n      }\n      if (rarely()) {\n        doc.add(new StringField(\"delete\", \"yes\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for (boolean delete : new boolean[] {false, true}) {\n      if (delete) {\n        w.deleteDocuments(new Term(\"delete\", \"yes\"));\n      }\n      final IndexReader reader = w.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      // Test multiple queries, some of them are optimized by IndexSearcher.count()\n      for (Query query : Arrays.asList(\n          new MatchAllDocsQuery(),\n          new MatchNoDocsQuery(),\n          new TermQuery(new Term(\"foo\", \"bar\")),\n          new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"baz\"))),\n          new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            .build()\n          )) {\n        assertEquals(searcher.count(query), searcher.search(query, 1).totalHits);\n      }\n      reader.close();\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    w.commit();\n    final IndexReader reader = w.getReader();\n    w.close();\n    final IndexSearcher searcher = newSearcher(reader);\n    final Query query = new TermQuery(new Term(\"foo\", \"bar\"));\n    assertEquals(searcher.count(query), searcher.search(query, 1).totalHits);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testCount().mjava","sourceNew":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n      }\n      if (rarely()) {\n        doc.add(new StringField(\"delete\", \"yes\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for (boolean delete : new boolean[] {false, true}) {\n      if (delete) {\n        w.deleteDocuments(new Term(\"delete\", \"yes\"));\n      }\n      final IndexReader reader = w.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      // Test multiple queries, some of them are optimized by IndexSearcher.count()\n      for (Query query : Arrays.asList(\n          new MatchAllDocsQuery(),\n          new MatchNoDocsQuery(),\n          new TermQuery(new Term(\"foo\", \"bar\")),\n          new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"baz\"))),\n          new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            .build()\n          )) {\n        assertEquals(searcher.count(query), searcher.search(query, 1).totalHits.value);\n      }\n      reader.close();\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testCount() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(100);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n      }\n      if (random().nextBoolean()) {\n        doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n      }\n      if (rarely()) {\n        doc.add(new StringField(\"delete\", \"yes\", Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for (boolean delete : new boolean[] {false, true}) {\n      if (delete) {\n        w.deleteDocuments(new Term(\"delete\", \"yes\"));\n      }\n      final IndexReader reader = w.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      // Test multiple queries, some of them are optimized by IndexSearcher.count()\n      for (Query query : Arrays.asList(\n          new MatchAllDocsQuery(),\n          new MatchNoDocsQuery(),\n          new TermQuery(new Term(\"foo\", \"bar\")),\n          new ConstantScoreQuery(new TermQuery(new Term(\"foo\", \"baz\"))),\n          new BooleanQuery.Builder()\n            .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.SHOULD)\n            .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n            .build()\n          )) {\n        assertEquals(searcher.count(query), searcher.search(query, 1).totalHits);\n      }\n      reader.close();\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","308eabc0d18aa58a75b0a130d08524e98661807b"],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["308eabc0d18aa58a75b0a130d08524e98661807b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"308eabc0d18aa58a75b0a130d08524e98661807b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["f0a65e308c1642d1ffb120ffae140f08362e92a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f0a65e308c1642d1ffb120ffae140f08362e92a7":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","308eabc0d18aa58a75b0a130d08524e98661807b"],"308eabc0d18aa58a75b0a130d08524e98661807b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f0a65e308c1642d1ffb120ffae140f08362e92a7"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}