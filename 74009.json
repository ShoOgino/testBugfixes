{"path":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","commits":[{"id":"bde86e98c3d4e1e436c54b2303fc946a19efb893","date":1110227284,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#readIndex().mjava","sourceNew":"  private final void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                       // index already read\n      return;                                     // do nothing\n    try {\n      int indexSize = (int)indexEnum.size;        // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","sourceOld":"  private final void readIndex() throws IOException {\n    SegmentTermEnum indexEnum =\n      new SegmentTermEnum(directory.openInput(segment + \".tii\"),\n\t\t\t  fieldInfos, true);\n    try {\n      int indexSize = (int)indexEnum.size;\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n\n      for (int i = 0; indexEnum.next(); i++) {\n\tindexTerms[i] = indexEnum.term();\n\tindexInfos[i] = indexEnum.termInfo();\n\tindexPointers[i] = indexEnum.indexPointer;\n      }\n    } finally {\n      indexEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef6ca0f33f96437f61d7d8b89c0d40dcbad388d9","date":1110228636,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","sourceNew":"  private synchronized void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                       // index already read\n      return;                                     // do nothing\n    try {\n      int indexSize = (int)indexEnum.size;        // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","sourceOld":"  private final void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                       // index already read\n      return;                                     // do nothing\n    try {\n      int indexSize = (int)indexEnum.size;        // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa","date":1195161267,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","sourceNew":"  private synchronized void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                                    // index already read\n      return;                                                  // do nothing\n    try {\n      int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n        \n        for (int j = 1; j < indexDivisor; j++)\n            if (!indexEnum.next())\n                break;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","sourceOld":"  private synchronized void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                       // index already read\n      return;                                     // do nothing\n    try {\n      int indexSize = (int)indexEnum.size;        // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","sourceNew":"  private void ensureIndexIsRead() {\n    if (indexTerms == null) {\n      throw new IllegalStateException(\"terms index was not loaded when this reader was created\");\n    }\n  }\n\n","sourceOld":"  private synchronized void ensureIndexIsRead() throws IOException {\n    if (indexTerms != null)                                    // index already read\n      return;                                                  // do nothing\n    try {\n      int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n      indexTerms = new Term[indexSize];\n      indexInfos = new TermInfo[indexSize];\n      indexPointers = new long[indexSize];\n        \n      for (int i = 0; indexEnum.next(); i++) {\n        indexTerms[i] = indexEnum.term();\n        indexInfos[i] = indexEnum.termInfo();\n        indexPointers[i] = indexEnum.indexPointer;\n        \n        for (int j = 1; j < indexDivisor; j++)\n            if (!indexEnum.next())\n                break;\n      }\n    } finally {\n        indexEnum.close();\n        indexEnum = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","pathOld":"src/java/org/apache/lucene/index/TermInfosReader#ensureIndexIsRead().mjava","sourceNew":"  private void ensureIndexIsRead() {\n    if (indexTerms == null) {\n      throw new IllegalStateException(\"terms index was not loaded when this reader was created\");\n    }\n  }\n\n","sourceOld":"  private void ensureIndexIsRead() {\n    if (indexTerms == null) {\n      throw new IllegalStateException(\"terms index was not loaded when this reader was created\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bde86e98c3d4e1e436c54b2303fc946a19efb893":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"961159f13aece73fbb30aea720e77a2237e8bafd":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef6ca0f33f96437f61d7d8b89c0d40dcbad388d9":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["ef6ca0f33f96437f61d7d8b89c0d40dcbad388d9"]},"commit2Childs":{"bde86e98c3d4e1e436c54b2303fc946a19efb893":["ef6ca0f33f96437f61d7d8b89c0d40dcbad388d9"],"961159f13aece73fbb30aea720e77a2237e8bafd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bde86e98c3d4e1e436c54b2303fc946a19efb893"],"ef6ca0f33f96437f61d7d8b89c0d40dcbad388d9":["cf2ab57cc5ab974400f01fd95f84903ac6d4abfa"],"cf2ab57cc5ab974400f01fd95f84903ac6d4abfa":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}