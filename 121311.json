{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","commits":[{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","pathOld":"/dev/null","sourceNew":"  public Equalitor<Tuple> constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      Equalitor[] eqs = new Equalitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultiEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (Equalitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","sourceNew":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","sourceOld":"  public Equalitor<Tuple> constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      Equalitor[] eqs = new Equalitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultiEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (Equalitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","sourceNew":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if (equalitorString.contains(\",\")) {\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    } else {\n      String leftFieldName;\n      String rightFieldName;\n      \n      if (equalitorString.contains(\"=\")) {\n        String[] parts = equalitorString.split(\"=\");\n        if (2 != parts.length) {\n          throw new IOException(String.format(Locale.ROOT, \"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      } else {\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor) createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","sourceOld":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if(equalitorString.contains(\",\")){\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for(int idx = 0; idx < parts.length; ++idx){\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    }\n    else{\n      String leftFieldName;\n      String rightFieldName;\n      \n      if(equalitorString.contains(\"=\")){\n        String[] parts = equalitorString.split(\"=\");\n        if(2 != parts.length){\n          throw new IOException(String.format(Locale.ROOT,\"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      }\n      else{\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor)createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#constructEqualitor(String,Class).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if (equalitorString.contains(\",\")) {\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    } else {\n      String leftFieldName;\n      String rightFieldName;\n      \n      if (equalitorString.contains(\"=\")) {\n        String[] parts = equalitorString.split(\"=\");\n        if (2 != parts.length) {\n          throw new IOException(String.format(Locale.ROOT, \"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      } else {\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor) createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","sourceOld":"  public StreamEqualitor constructEqualitor(String equalitorString, Class equalitorType) throws IOException {\n    if (equalitorString.contains(\",\")) {\n      String[] parts = equalitorString.split(\",\");\n      StreamEqualitor[] eqs = new StreamEqualitor[parts.length];\n      for (int idx = 0; idx < parts.length; ++idx) {\n        eqs[idx] = constructEqualitor(parts[idx].trim(), equalitorType);\n      }\n      return new MultipleFieldEqualitor(eqs);\n    } else {\n      String leftFieldName;\n      String rightFieldName;\n      \n      if (equalitorString.contains(\"=\")) {\n        String[] parts = equalitorString.split(\"=\");\n        if (2 != parts.length) {\n          throw new IOException(String.format(Locale.ROOT, \"Invalid equalitor expression %s - expecting fieldName=fieldName\",equalitorString));\n        }\n        \n        leftFieldName = parts[0].trim();\n        rightFieldName = parts[1].trim();\n      } else {\n        leftFieldName = rightFieldName = equalitorString.trim();\n      }\n      \n      return (StreamEqualitor) createInstance(equalitorType, new Class[]{ String.class, String.class }, new Object[]{ leftFieldName, rightFieldName });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"e431b0806b8db369da896b66a74e304a49953c7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"0891a6931fc352fc7e61f2752ef9add758d3fb89":["804a8d5358fe7b7563b85ee7838714d720b89272"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e431b0806b8db369da896b66a74e304a49953c7b"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}