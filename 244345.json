{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResultLoop(Rectangle,int,int).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResultLoop(Rectangle,int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResultLoop(Rectangle,int,int).mjava","sourceNew":"  /** Recursively facet & validate at higher resolutions until we've seen enough. We assume there are\n   * some non-zero cells. */\n  private void validateHeatmapResultLoop(Rectangle inputRange, int facetLevel, int cellCountRecursThreshold)\n      throws IOException {\n    if (facetLevel > grid.getMaxLevels()) {\n      return;\n    }\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null, inputRange, facetLevel, maxCells);\n    int preNonZero = cellValidatedNonZero;\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n    assert cellValidatedNonZero - preNonZero > 0;//we validated more non-zero cells\n    if (heatmap.counts.length < cellCountRecursThreshold) {\n      validateHeatmapResultLoop(inputRange, facetLevel + 1, cellCountRecursThreshold);\n    }\n  }\n\n","sourceOld":"  /** Recursively facet & validate at higher resolutions until we've seen enough. We assume there are\n   * some non-zero cells. */\n  private void validateHeatmapResultLoop(Rectangle inputRange, int facetLevel, int cellCountRecursThreshold)\n      throws IOException {\n    if (facetLevel > grid.getMaxLevels()) {\n      return;\n    }\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null, inputRange, facetLevel, maxCells);\n    int preNonZero = cellValidatedNonZero;\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n    assert cellValidatedNonZero - preNonZero > 0;//we validated more non-zero cells\n    if (heatmap.counts.length < cellCountRecursThreshold) {\n      validateHeatmapResultLoop(inputRange, facetLevel + 1, cellCountRecursThreshold);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResultLoop(Rectangle,int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#validateHeatmapResultLoop(Rectangle,int,int).mjava","sourceNew":"  /** Recursively facet & validate at higher resolutions until we've seen enough. We assume there are\n   * some non-zero cells. */\n  private void validateHeatmapResultLoop(Rectangle inputRange, int facetLevel, int cellCountRecursThreshold)\n      throws IOException {\n    if (facetLevel > grid.getMaxLevels()) {\n      return;\n    }\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null, inputRange, facetLevel, maxCells);\n    int preNonZero = cellValidatedNonZero;\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n    assert cellValidatedNonZero - preNonZero > 0;//we validated more non-zero cells\n    if (heatmap.counts.length < cellCountRecursThreshold) {\n      validateHeatmapResultLoop(inputRange, facetLevel + 1, cellCountRecursThreshold);\n    }\n  }\n\n","sourceOld":"  /** Recursively facet & validate at higher resolutions until we've seen enough. We assume there are\n   * some non-zero cells. */\n  private void validateHeatmapResultLoop(Rectangle inputRange, int facetLevel, int cellCountRecursThreshold)\n      throws IOException {\n    if (facetLevel > grid.getMaxLevels()) {\n      return;\n    }\n    final int maxCells = 10_000;\n    final HeatmapFacetCounter.Heatmap heatmap = HeatmapFacetCounter.calcFacets(\n        (PrefixTreeStrategy) strategy, indexSearcher.getTopReaderContext(), null, inputRange, facetLevel, maxCells);\n    int preNonZero = cellValidatedNonZero;\n    validateHeatmapResult(inputRange, facetLevel, heatmap);\n    assert cellValidatedNonZero - preNonZero > 0;//we validated more non-zero cells\n    if (heatmap.counts.length < cellCountRecursThreshold) {\n      validateHeatmapResultLoop(inputRange, facetLevel + 1, cellCountRecursThreshold);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}