{"path":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","commits":[{"id":"ddc1ae5ff40afa2c5136ee382632ebe602e050e6","date":1474097671,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Internal SolrCloud API\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0","fae84bbf6b9010357c7cbc15871b8df9a785f330","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Internal SolrCloud API\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Internal SolrCloud API\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c0c76f8855bd391c39890131d8dbd56c3fdcef0","date":1512185429,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Internal SolrCloud API\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"670400747be2d99524159f3806d449ecfb0c2389","date":1512293281,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Internal SolrCloud API\");\n    }\n\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63a1a94d02abb8cde5dd6ea0defbbc751ce71603","date":1521902895,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    String name = params.get(NAME);\n    if (name == null) {\n      throw new IllegalArgumentException(CoreAdminParams.NAME + \" is required\");\n    }\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fae84bbf6b9010357c7cbc15871b8df9a785f330","date":1534333085,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation() + \". \" +\n            \"Note that Backup/Restore of a SolrCloud collection \" +\n            \"requires a shared file system mounted at the same path on all nodes!\");\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation());\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58dba38d0c9777f300cca9dd3c150fe2d244742","date":1599661188,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/BackupCoreOp#execute(CoreAdminHandler.CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(repoName);\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation() + \". \" +\n            \"Note that Backup/Restore of a SolrCloud collection \" +\n            \"requires a shared file system mounted at the same path on all nodes!\");\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n    String name = params.required().get(NAME);\n\n    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);\n    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));\n\n    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));\n    if (location == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'location' is not specified as a query\"\n          + \" parameter or as a default repository property\");\n    }\n\n    // An optional parameter to describe the snapshot to be backed-up. If this\n    // parameter is not supplied, the latest index commit is backed-up.\n    String commitName = params.get(CoreAdminParams.COMMIT_NAME);\n\n    URI locationUri = repository.createURI(location);\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);\n      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.\n      //  But we want to throw. One reason is that\n      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared\n      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.\n      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Directory to contain snapshots doesn't exist: \" + snapShooter.getLocation() + \". \" +\n            \"Note that Backup/Restore of a SolrCloud collection \" +\n            \"requires a shared file system mounted at the same path on all nodes!\");\n      }\n      snapShooter.validateCreateSnapshot();\n      snapShooter.createSnapshot();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Failed to backup core=\" + cname + \" because \" + e, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["670400747be2d99524159f3806d449ecfb0c2389","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"670400747be2d99524159f3806d449ecfb0c2389":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7c0c76f8855bd391c39890131d8dbd56c3fdcef0"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["fae84bbf6b9010357c7cbc15871b8df9a785f330"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"fae84bbf6b9010357c7cbc15871b8df9a785f330":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["670400747be2d99524159f3806d449ecfb0c2389"]},"commit2Childs":{"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["fae84bbf6b9010357c7cbc15871b8df9a785f330"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7c0c76f8855bd391c39890131d8dbd56c3fdcef0","670400747be2d99524159f3806d449ecfb0c2389","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c0c76f8855bd391c39890131d8dbd56c3fdcef0":["670400747be2d99524159f3806d449ecfb0c2389"],"670400747be2d99524159f3806d449ecfb0c2389":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"d58dba38d0c9777f300cca9dd3c150fe2d244742":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"fae84bbf6b9010357c7cbc15871b8df9a785f330":["d58dba38d0c9777f300cca9dd3c150fe2d244742"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}