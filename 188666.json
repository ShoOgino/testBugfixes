{"path":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int inc = _TestUtil.nextInt(random, 1, segmentInfos.size()-upto);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","8f9de0e14b6cea7b32a86ec19999587bfbb023f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472","date":1296560509,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int inc = _TestUtil.nextInt(random, 1, segmentInfos.size()-upto);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":["8f9de0e14b6cea7b32a86ec19999587bfbb023f8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/MockRandomMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(\n      SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize)\n    throws CorruptIndexException, IOException {\n\n    //System.out.println(\"MRMP: findMergesForOptimize sis=\" + segmentInfos);\n    MergeSpecification mergeSpec = null;\n    if (segmentInfos.size() > 1 || (segmentInfos.size() == 1 && segmentInfos.info(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      SegmentInfos segmentInfos2 = new SegmentInfos();\n      segmentInfos2.addAll(segmentInfos);\n      Collections.shuffle(segmentInfos2, random);\n      int upto = 0;\n      while(upto < segmentInfos.size()) {\n        int max = Math.min(10, segmentInfos.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(segmentInfos2.range(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c19f985e36a65cc969e8e564fe337a0d41512075":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472"]},"commit2Childs":{"3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c19f985e36a65cc969e8e564fe337a0d41512075":["3e2234d6cf76d3960fbc62f9c1ba2d13ebe43472"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}