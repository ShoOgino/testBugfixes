{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;    \t\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;    \t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;    \t\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n      return true;\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n      return true;\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n        if (!more) {\n            return false;\n          }\n          doc = spans.doc();\n          freq = 0.0f;\n          payloadScore = 0;\n          payloadsSeen = 0;\n          do {\n            int matchLength = spans.end() - spans.start();\n            freq += docScorer.computeSlopFactor(matchLength);\n            Spans[] spansArr = new Spans[1];\n            spansArr[0] = spans;\n            getPayloads(spansArr);            \n            more = spans.next();\n          } while (more && (doc == spans.doc()));\n          return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4409879b1445c56c3834b823720d47c08c409c5","date":1428086307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","sourceOld":"    //\n    @Override\n    protected boolean setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        payloadCollector.reset();\n        spans.collect(payloadCollector);\n        processPayloads(payloadCollector.getPayloads(), startPos, spans.endPosition());\n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","sourceOld":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        Spans[] spansArr = new Spans[1];\n        spansArr[0] = spans;\n        getPayloads(spansArr);            \n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","bugFix":null,"bugIntro":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2","date":1432114286,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        collector.reset();\n        spans.collect(collector);\n        processPayloads(collector.getPayloads(), startPos, spans.endPosition());\n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","sourceOld":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        payloadCollector.reset();\n        spans.collect(payloadCollector);\n        processPayloads(payloadCollector.getPayloads(), startPos, spans.endPosition());\n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","bugFix":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8525cf39738b3113cc2ef20025af7208403718","date":1438616965,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.PayloadNearSpanScorer#setFreqCurrentDoc().mjava","sourceNew":null,"sourceOld":"    //\n    @Override\n    protected void setFreqCurrentDoc() throws IOException {\n      freq = 0.0f;\n      payloadScore = 0;\n      payloadsSeen = 0;\n      int startPos = spans.nextStartPosition();\n      assert startPos != Spans.NO_MORE_POSITIONS : \"initial startPos NO_MORE_POSITIONS, spans=\"+spans;\n      do {\n        int matchLength = spans.endPosition() - startPos;\n        freq += docScorer.computeSlopFactor(matchLength);\n        collector.reset();\n        spans.collect(collector);\n        processPayloads(collector.getPayloads(), startPos, spans.endPosition());\n        startPos = spans.nextStartPosition();\n      } while (startPos != Spans.NO_MORE_POSITIONS);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e8525cf39738b3113cc2ef20025af7208403718":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4409879b1445c56c3834b823720d47c08c409c5":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","f4409879b1445c56c3834b823720d47c08c409c5"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["f4409879b1445c56c3834b823720d47c08c409c5"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"fab172655716b96f7e42376116235017a922de3a":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2e8525cf39738b3113cc2ef20025af7208403718"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"2e8525cf39738b3113cc2ef20025af7208403718":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4409879b1445c56c3834b823720d47c08c409c5":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","2d530e71ed32ab23b34ca3fc72b080a554a40404"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2"],"8f6e2f8b5923e09c68fcefca2b75678c8d9c89f2":["2e8525cf39738b3113cc2ef20025af7208403718"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["f4409879b1445c56c3834b823720d47c08c409c5","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}