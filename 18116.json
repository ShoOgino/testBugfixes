{"path":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","sourceNew":"  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    assert docFreq >= 0;\n    assert totalTermFreq == -1 || totalTermFreq >= docFreq; // #positions must be >= #postings\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","sourceOld":"  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    assert docFreq >= 0;\n    assert totalTermFreq == -1 || totalTermFreq >= docFreq; // #positions must be >= #postings\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3119ed4143b91eaf5ac74a4dc4625f5036d472c","date":1509409932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a term.\n   * @param term Term bytes\n   * @param docFreq number of documents containing the term in the collection.\n   * @param totalTermFreq number of occurrences of the term in the collection.\n   * @throws NullPointerException if {@code term} is {@code null}.\n   * @throws IllegalArgumentException if {@code docFreq} is negative or zero.\n   * @throws IllegalArgumentException if {@code totalTermFreq} is less than {@code docFreq}.\n   */\n  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    Objects.requireNonNull(term);\n    if (docFreq <= 0) {\n      throw new IllegalArgumentException(\"docFreq must be positive, docFreq: \" + docFreq);\n    }\n    if (totalTermFreq != -1) {\n      if (totalTermFreq < docFreq) {\n        throw new IllegalArgumentException(\"totalTermFreq must be at least docFreq, totalTermFreq: \" + totalTermFreq + \", docFreq: \" + docFreq);\n      }\n    }\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","sourceOld":"  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    assert docFreq >= 0;\n    assert totalTermFreq == -1 || totalTermFreq >= docFreq; // #positions must be >= #postings\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","bugFix":["c546021ffb4e623a6242cd68ee234c17d3ba6646"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a term.\n   * @param term Term bytes\n   * @param docFreq number of documents containing the term in the collection.\n   * @param totalTermFreq number of occurrences of the term in the collection.\n   * @throws NullPointerException if {@code term} is {@code null}.\n   * @throws IllegalArgumentException if {@code docFreq} is negative or zero.\n   * @throws IllegalArgumentException if {@code totalTermFreq} is less than {@code docFreq}.\n   */\n  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    Objects.requireNonNull(term);\n    if (docFreq <= 0) {\n      throw new IllegalArgumentException(\"docFreq must be positive, docFreq: \" + docFreq);\n    }\n    if (totalTermFreq <= 0) {\n      throw new IllegalArgumentException(\"totalTermFreq must be positive, totalTermFreq: \" + totalTermFreq);\n    }\n    if (totalTermFreq < docFreq) {\n      throw new IllegalArgumentException(\"totalTermFreq must be at least docFreq, totalTermFreq: \" + totalTermFreq + \", docFreq: \" + docFreq);\n    }\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","sourceOld":"  /**\n   * Creates statistics instance for a term.\n   * @param term Term bytes\n   * @param docFreq number of documents containing the term in the collection.\n   * @param totalTermFreq number of occurrences of the term in the collection.\n   * @throws NullPointerException if {@code term} is {@code null}.\n   * @throws IllegalArgumentException if {@code docFreq} is negative or zero.\n   * @throws IllegalArgumentException if {@code totalTermFreq} is less than {@code docFreq}.\n   */\n  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    Objects.requireNonNull(term);\n    if (docFreq <= 0) {\n      throw new IllegalArgumentException(\"docFreq must be positive, docFreq: \" + docFreq);\n    }\n    if (totalTermFreq != -1) {\n      if (totalTermFreq < docFreq) {\n        throw new IllegalArgumentException(\"totalTermFreq must be at least docFreq, totalTermFreq: \" + totalTermFreq + \", docFreq: \" + docFreq);\n      }\n    }\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermStatistics#TermStatistics(BytesRef,long,long).mjava","sourceNew":"  /**\n   * Creates statistics instance for a term.\n   * @param term Term bytes\n   * @param docFreq number of documents containing the term in the collection.\n   * @param totalTermFreq number of occurrences of the term in the collection.\n   * @throws NullPointerException if {@code term} is {@code null}.\n   * @throws IllegalArgumentException if {@code docFreq} is negative or zero.\n   * @throws IllegalArgumentException if {@code totalTermFreq} is less than {@code docFreq}.\n   */\n  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    Objects.requireNonNull(term);\n    if (docFreq <= 0) {\n      throw new IllegalArgumentException(\"docFreq must be positive, docFreq: \" + docFreq);\n    }\n    if (totalTermFreq <= 0) {\n      throw new IllegalArgumentException(\"totalTermFreq must be positive, totalTermFreq: \" + totalTermFreq);\n    }\n    if (totalTermFreq < docFreq) {\n      throw new IllegalArgumentException(\"totalTermFreq must be at least docFreq, totalTermFreq: \" + totalTermFreq + \", docFreq: \" + docFreq);\n    }\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","sourceOld":"  /**\n   * Creates statistics instance for a term.\n   * @param term Term bytes\n   * @param docFreq number of documents containing the term in the collection.\n   * @param totalTermFreq number of occurrences of the term in the collection.\n   * @throws NullPointerException if {@code term} is {@code null}.\n   * @throws IllegalArgumentException if {@code docFreq} is negative or zero.\n   * @throws IllegalArgumentException if {@code totalTermFreq} is less than {@code docFreq}.\n   */\n  public TermStatistics(BytesRef term, long docFreq, long totalTermFreq) {\n    Objects.requireNonNull(term);\n    if (docFreq <= 0) {\n      throw new IllegalArgumentException(\"docFreq must be positive, docFreq: \" + docFreq);\n    }\n    if (totalTermFreq != -1) {\n      if (totalTermFreq < docFreq) {\n        throw new IllegalArgumentException(\"totalTermFreq must be at least docFreq, totalTermFreq: \" + totalTermFreq + \", docFreq: \" + docFreq);\n      }\n    }\n    this.term = term;\n    this.docFreq = docFreq;\n    this.totalTermFreq = totalTermFreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c","086ffe31d8fba0110227db122974163709ecc1b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c3119ed4143b91eaf5ac74a4dc4625f5036d472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c3119ed4143b91eaf5ac74a4dc4625f5036d472c":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}