{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","commits":[{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(int).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n    BytesRefArray data = this.buffer;\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT)) {\n      ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      data.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected Path sortPartition(int len) throws IOException {\n    BytesRefArray data = this.buffer;\n    Path tempFile = Files.createTempFile(tempDirectory, \"sort\", \"partition\");\n\n    long start = System.currentTimeMillis();\n    sortInfo.sortTime += (System.currentTimeMillis() - start);\n    \n    final ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n    BytesRef spare;\n    try {\n      BytesRefIterator iter = buffer.iterator(comparator);\n      while((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      out.close();\n\n      // Clean up the buffer for the next partition.\n      data.clear();\n      return tempFile;\n    } finally {\n      IOUtils.close(out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3ce1ef883d26aa73919aa2d53991726e96caa13","date":1445421402,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n    BytesRefArray data = this.buffer;\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      data.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n    BytesRefArray data = this.buffer;\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT)) {\n      ByteSequencesWriter out = new ByteSequencesWriter(tempFile);\n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      data.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73860c1174109b7d888d50a10088afb18293b153","date":1457392330,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n    BytesRefArray data = this.buffer;\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      data.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += (System.currentTimeMillis() - start);\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45","date":1492172132,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":"  /** Sort a single partition in-memory. */\n  protected PartitionAndCount sortPartition(TrackingDirectoryWrapper trackingDir, int lineCount) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile, lineCount);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      int count = 0;\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n        count++;\n      }\n\n      assert count == lineCount;\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return new PartitionAndCount(lineCount, tempFile.getName());\n    }\n  }\n\n","sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#sortPartition(TrackingDirectoryWrapper).mjava","sourceNew":null,"sourceOld":"  /** Sort a single partition in-memory. */\n  protected String sortPartition(TrackingDirectoryWrapper trackingDir) throws IOException {\n\n    try (IndexOutput tempFile = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT);\n         ByteSequencesWriter out = getWriter(tempFile);) {\n      \n      BytesRef spare;\n\n      long start = System.currentTimeMillis();\n      BytesRefIterator iter = buffer.iterator(comparator);\n      sortInfo.sortTime += System.currentTimeMillis() - start;\n\n      while ((spare = iter.next()) != null) {\n        assert spare.length <= Short.MAX_VALUE;\n        out.write(spare);\n      }\n      \n      // Clean up the buffer for the next partition.\n      buffer.clear();\n\n      CodecUtil.writeFooter(out.out);\n\n      return tempFile.getName();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ee52259641568741fbc6ecc51284431e2a36475c"],"73860c1174109b7d888d50a10088afb18293b153":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["73860c1174109b7d888d50a10088afb18293b153"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["ee52259641568741fbc6ecc51284431e2a36475c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73860c1174109b7d888d50a10088afb18293b153":["950b7a6881d14da782b60444c11295e3ec50d41a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ee52259641568741fbc6ecc51284431e2a36475c":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","62e7e8f89cb6b0283f3f5d6c0945453b73f09d45"],"e3ce1ef883d26aa73919aa2d53991726e96caa13":["73860c1174109b7d888d50a10088afb18293b153"],"950b7a6881d14da782b60444c11295e3ec50d41a":["ee52259641568741fbc6ecc51284431e2a36475c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["e3ce1ef883d26aa73919aa2d53991726e96caa13"],"62e7e8f89cb6b0283f3f5d6c0945453b73f09d45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}