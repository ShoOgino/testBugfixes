{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(reporterName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(reporterName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(reporterName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo();\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48cf7d27089ca96453966bc767c0ec53121efa43","date":1493221697,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 1, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946","date":1499084472,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":["48cf7d27089ca96453966bc767c0ec53121efa43"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9bfbea0278c393fb53c503162381e1c3b66929c","date":1573576925,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterTest#beforeTest().mjava","sourceNew":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    String reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    SolrJmxReporter reporter = (SolrJmxReporter) reporters.get(taggedName);\n    assertNotNull(\"MBean server not found on reporter\", reporter.getMBeanServer());\n    assertEquals(\"Wrong MBeanServer found on reporter\",\n                 TEST_MBEAN_SERVER,\n                 reporter.getMBeanServer());\n  }\n\n","sourceOld":"  @Before\n  public void beforeTest() throws Exception {\n    initCore(\"solrconfig-basic.xml\", \"schema.xml\");\n\n    final SolrCore core = h.getCore();\n    domain = core.getName();\n    rootName = PREFIX + TestUtil.randomSimpleString(random(), 5, 10);\n\n    coreMetricManager = core.getCoreMetricManager();\n    metricManager = core.getCoreContainer().getMetricManager();\n    PluginInfo pluginInfo = createReporterPluginInfo(rootName, true);\n    metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n        pluginInfo, coreMetricManager.getTag());\n\n    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n    assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n    reporterName = pluginInfo.name;\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n    assertNotNull(\"reporter \" + taggedName + \" not present among \" + reporters, reporters.get(taggedName));\n    assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof SolrJmxReporter);\n\n    reporter = (SolrJmxReporter) reporters.get(taggedName);\n    mBeanServer = reporter.getMBeanServer();\n    assertNotNull(\"MBean server not found.\", mBeanServer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["48cf7d27089ca96453966bc767c0ec53121efa43"],"30c8e5574b55d57947e989443dfde611646530ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","48cf7d27089ca96453966bc767c0ec53121efa43"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"48cf7d27089ca96453966bc767c0ec53121efa43":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a9bfbea0278c393fb53c503162381e1c3b66929c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"c4ab4a7edc7af79e3c922c4d6a468fd48ea86946":["30c8e5574b55d57947e989443dfde611646530ee","f90f26c648df8320685eb76fec8bb9972e1994c4"],"30c8e5574b55d57947e989443dfde611646530ee":[],"f90f26c648df8320685eb76fec8bb9972e1994c4":["a9bfbea0278c393fb53c503162381e1c3b66929c"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["48cf7d27089ca96453966bc767c0ec53121efa43"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["30c8e5574b55d57947e989443dfde611646530ee"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"48cf7d27089ca96453966bc767c0ec53121efa43":["c4ab4a7edc7af79e3c922c4d6a468fd48ea86946","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a9bfbea0278c393fb53c503162381e1c3b66929c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}