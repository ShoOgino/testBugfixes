{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBooleanSpanQuery().mjava","commits":[{"id":"d38075bc94ec45477bc193ace787dcfa443154e9","date":1349986934,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBooleanSpanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    try{\n      CharArraySet stops = CharArraySet.EMPTY_SET;\n      Analyzer indexerAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stops);\n      //Analyzer indexerAnalyzer = new MockAnalyzer(LuceneProjectVersion.LUCENE_VERSION);\n      //Directory directory = new RAMDirectory();\n\n      IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n      IndexWriter writer = new IndexWriter(directory, config);\n      String FIELD = \"content\";\n      Document d = new Document();\n      d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.close();\n\n      IndexReader indexReader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(indexReader);\n\n      BooleanQuery query = new BooleanQuery();\n      SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n      SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n      query.add(sq1, BooleanClause.Occur.SHOULD);\n      query.add(sq2, BooleanClause.Occur.SHOULD);\n      TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n      searcher.search(query, collector);\n      hits = collector.topDocs().scoreDocs.length;\n      for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n        System.out.println(scoreDoc.doc);\n      }\n      indexReader.close();\n    } catch (java.lang.ArrayIndexOutOfBoundsException e){\n      failed = true;\n    } catch (IOException e){\n\n      e.printStackTrace();\n    }\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb57794aa7b3ae9947d196a88aeb1c1e40a992df","date":1349990966,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/standard/TestStandardFactories#testBooleanSpanQuery().mjava","sourceNew":null,"sourceOld":"  public void testBooleanSpanQuery() throws Exception {\n    boolean failed = false;\n    int hits = 0;\n    Directory directory = newDirectory();\n    try{\n      CharArraySet stops = CharArraySet.EMPTY_SET;\n      Analyzer indexerAnalyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, stops);\n      //Analyzer indexerAnalyzer = new MockAnalyzer(LuceneProjectVersion.LUCENE_VERSION);\n      //Directory directory = new RAMDirectory();\n\n      IndexWriterConfig config = new IndexWriterConfig(TEST_VERSION_CURRENT, indexerAnalyzer);\n      IndexWriter writer = new IndexWriter(directory, config);\n      String FIELD = \"content\";\n      Document d = new Document();\n      d.add(new TextField(FIELD, \"clockwork orange\", Field.Store.YES));\n      writer.addDocument(d);\n      writer.close();\n\n      IndexReader indexReader = DirectoryReader.open(directory);\n      IndexSearcher searcher = new IndexSearcher(indexReader);\n\n      BooleanQuery query = new BooleanQuery();\n      SpanQuery sq1 = new SpanTermQuery(new Term(FIELD, \"clockwork\"));\n      SpanQuery sq2 = new SpanTermQuery(new Term(FIELD, \"clckwork\"));\n      query.add(sq1, BooleanClause.Occur.SHOULD);\n      query.add(sq2, BooleanClause.Occur.SHOULD);\n      TopScoreDocCollector collector = TopScoreDocCollector.create(1000, true);\n      searcher.search(query, collector);\n      hits = collector.topDocs().scoreDocs.length;\n      for (ScoreDoc scoreDoc : collector.topDocs().scoreDocs){\n        System.out.println(scoreDoc.doc);\n      }\n      indexReader.close();\n    } catch (java.lang.ArrayIndexOutOfBoundsException e){\n      failed = true;\n    } catch (IOException e){\n\n      e.printStackTrace();\n    }\n    assertEquals(\"Bug in boolean query composed of span queries\", failed, false);\n    assertEquals(\"Bug in boolean query composed of span queries\", hits, 1);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d38075bc94ec45477bc193ace787dcfa443154e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb57794aa7b3ae9947d196a88aeb1c1e40a992df":["d38075bc94ec45477bc193ace787dcfa443154e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb57794aa7b3ae9947d196a88aeb1c1e40a992df"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d38075bc94ec45477bc193ace787dcfa443154e9"],"d38075bc94ec45477bc193ace787dcfa443154e9":["fb57794aa7b3ae9947d196a88aeb1c1e40a992df"],"fb57794aa7b3ae9947d196a88aeb1c1e40a992df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}