{"path":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","pathOld":"/dev/null","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 },\n        new int[] { 1, 1, 1 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","sourceNew":null,"sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 },\n        new int[] { 1, 1, 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","pathOld":"src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","pathOld":"/dev/null","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer( cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilterFactory#testNothingChange().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestPatternReplaceCharFilter#testNothingChange().mjava","sourceNew":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","sourceOld":"  //           1111\n  // 01234567890123\n  // this is test.\n  public void testNothingChange() throws IOException {\n    final String BLOCK = \"this is test.\";\n    PatternReplaceCharFilterFactory factory = new PatternReplaceCharFilterFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"pattern\", \"(aa)\\\\s+(bb)\\\\s+(cc)\");\n    args.put(\"replacement\", \"$1$2$3\");\n    factory.init(args);\n    CharStream cs = factory.create(\n          CharReader.get( new StringReader( BLOCK ) ) );\n    TokenStream ts = new WhitespaceTokenizer(DEFAULT_VERSION, cs );\n    assertTokenStreamContents(ts,\n        new String[] { \"this\", \"is\", \"test.\" },\n        new int[] { 0, 5, 8 },\n        new int[] { 4, 7, 13 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}