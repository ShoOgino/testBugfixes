{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.FLAG_POSITIONS; break;\n          case 1: posFlags = PostingsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = PostingsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = PostingsEnum.FLAG_OFFSETS | PostingsEnum.FLAG_PAYLOADS; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FLAG_FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.OFFSETS | PostingsEnum.PAYLOADS; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.FLAG_POSITIONS; break;\n          case 1: posFlags = PostingsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = PostingsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = PostingsEnum.FLAG_OFFSETS | PostingsEnum.FLAG_PAYLOADS; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FLAG_FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.OFFSETS | PostingsEnum.PAYLOADS; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        // nocommit: check\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0b81d743a15cd8d8e011856382d9ae1875d64c6","date":1427828269,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a PostingsEnum with random features available\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    // TODO: simplify this method? it would be easier to randomly either use the flags passed, or do the random selection,\n    // FREQS should be part fo the random selection instead of outside on its own?\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        return termsEnum.postings(liveDocs, null, posFlags);\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        // nocommit: check\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a PostingsEnum with random features available\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    // TODO: simplify this method? it would be easier to randomly either use the flags passed, or do the random selection,\n    // FREQS should be part fo the random selection instead of outside on its own?\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        return termsEnum.postings(liveDocs, null, posFlags);\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        PostingsEnum docsAndPositions = termsEnum.postings(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,PostingsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,PostingsEnum,int).mjava","sourceNew":"  // Returns a PostingsEnum with random features available\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, PostingsEnum reuse, int flags) throws IOException {\n    // TODO: simplify this method? it would be easier to randomly either use the flags passed, or do the random selection,\n    // FREQS should be part fo the random selection instead of outside on its own?\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        return termsEnum.postings(null, posFlags);\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(reuse, flags);\n  }\n\n","sourceOld":"  // Returns a PostingsEnum with random features available\n  public static PostingsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, PostingsEnum reuse, int flags) throws IOException {\n    // TODO: simplify this method? it would be easier to randomly either use the flags passed, or do the random selection,\n    // FREQS should be part fo the random selection instead of outside on its own?\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = PostingsEnum.POSITIONS; break;\n          case 1: posFlags = PostingsEnum.OFFSETS; break;\n          case 2: posFlags = PostingsEnum.PAYLOADS; break;\n          default: posFlags = PostingsEnum.ALL; break;\n        }\n        return termsEnum.postings(liveDocs, null, posFlags);\n      }\n      flags |= PostingsEnum.FREQS;\n    }\n    return termsEnum.postings(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["a9023c2bf8056230665bace786651c0716d78d31"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["a9023c2bf8056230665bace786651c0716d78d31","d0b81d743a15cd8d8e011856382d9ae1875d64c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0b81d743a15cd8d8e011856382d9ae1875d64c6":["cb5311f0bff57ce15a23909f4cfb953773630534"],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["d0b81d743a15cd8d8e011856382d9ae1875d64c6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"d0b81d743a15cd8d8e011856382d9ae1875d64c6":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a9023c2bf8056230665bace786651c0716d78d31":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}