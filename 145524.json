{"path":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"/dev/null","sourceNew":"    public void write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, docs.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public void write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, docs.length);\n    }\n\n","bugFix":null,"bugIntro":["29e23e367cc757f42cdfce2bcbf21e68cd209cda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public void write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, docs.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public void write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, docs.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCodecs.TermData#write(TermsConsumer).mjava","sourceNew":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","sourceOld":"    public long write(final TermsConsumer termsConsumer) throws Throwable {\n      final PostingsConsumer postingsConsumer = termsConsumer.startTerm(text);\n      long totTF = 0;\n      for(int i=0;i<docs.length;i++) {\n        final int termDocFreq;\n        if (field.omitTF) {\n          termDocFreq = 0;\n        } else {\n          termDocFreq = positions[i].length;\n        }\n        postingsConsumer.startDoc(docs[i], termDocFreq);\n        if (!field.omitTF) {\n          totTF += positions[i].length;\n          for(int j=0;j<positions[i].length;j++) {\n            final PositionData pos = positions[i][j];\n            postingsConsumer.addPosition(pos.pos, pos.payload, -1, -1);\n          }\n          postingsConsumer.finishDoc();\n        }\n      }\n      termsConsumer.finishTerm(text, new TermStats(docs.length, totTF));\n      return totTF;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"16843358872ed92ba92888ab99df297550b9a36a":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}