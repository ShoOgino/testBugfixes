{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","commits":[{"id":"747628bb19a950ac2141b16756bdce9a47e94cc2","date":1338661284,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = random().nextLong() & maxValue;\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        // nocommit remove this (just do the check at the\n        // end); useful to catch exact copy that was wrong:\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd30ce4d49d2e8e1a389aa7ac63f31f308514bb","date":1338661331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = random().nextLong() & maxValue;\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = random().nextLong() & maxValue;\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        // nocommit remove this (just do the check at the\n        // end); useful to catch exact copy that was wrong:\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = random().nextLong() & maxValue;\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(10);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 100 times:\n      for(int iter2=0;iter2<100;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = TestUtil.nextInt(random(), 1, 64);\n      int bits2 = TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = TestUtil.nextInt(random(), 1, valueCount - start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = _TestUtil.nextInt(random(), 1, 64);\n      int bits2 = _TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = _TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = _TestUtil.nextInt(random(), 1, valueCount-start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomBulkCopy().mjava","sourceNew":"  public void testRandomBulkCopy() {\n    Random random = random();\n    final int numIters = atLeast(random, 3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = TEST_NIGHTLY ? atLeast(random, 100000) : atLeast(random, 10000);\n      int bits1 = TestUtil.nextInt(random, 1, 64);\n      int bits2 = TestUtil.nextInt(random, 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = TestUtil.nextLong(random, 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random.nextInt(valueCount-1);\n        int len = TestUtil.nextInt(random, 1, valueCount - start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random.nextInt(valueCount - len);\n        }\n        if (random.nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random.nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomBulkCopy() {\n    final int numIters = atLeast(3);\n    for(int iter=0;iter<numIters;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter);\n      }\n      final int valueCount = atLeast(100000);\n      int bits1 = TestUtil.nextInt(random(), 1, 64);\n      int bits2 = TestUtil.nextInt(random(), 1, 64);\n      if (bits1 > bits2) {\n        int tmp = bits1;\n        bits1 = bits2;\n        bits2 = tmp;\n      }\n      if (VERBOSE) {\n        System.out.println(\"  valueCount=\" + valueCount + \" bits1=\" + bits1 + \" bits2=\" + bits2);\n      }\n\n      final PackedInts.Mutable packed1 = PackedInts.getMutable(valueCount, bits1, PackedInts.COMPACT);\n      final PackedInts.Mutable packed2 = PackedInts.getMutable(valueCount, bits2, PackedInts.COMPACT);\n\n      final long maxValue = PackedInts.maxValue(bits1);\n      for(int i=0;i<valueCount;i++) {\n        final long val = TestUtil.nextLong(random(), 0, maxValue);\n        packed1.set(i, val);\n        packed2.set(i, val);\n      }\n\n      final long[] buffer = new long[valueCount];\n\n      // Copy random slice over, 20 times:\n      for(int iter2=0;iter2<20;iter2++) {\n        int start = random().nextInt(valueCount-1);\n        int len = TestUtil.nextInt(random(), 1, valueCount - start);\n        int offset;\n        if (VERBOSE) {\n          System.out.println(\"  copy \" + len + \" values @ \" + start);\n        }\n        if (len == valueCount) {\n          offset = 0;\n        } else {\n          offset = random().nextInt(valueCount - len);\n        }\n        if (random().nextBoolean()) {\n          int got = packed1.get(start, buffer, offset, len);\n          assertTrue(got <= len);\n          int sot = packed2.set(start, buffer, offset, got);\n          assertTrue(sot <= got);\n        } else {\n          PackedInts.copy(packed1, offset, packed2, offset, len, random().nextInt(10 * len));\n        }\n\n        /*\n        for(int i=0;i<valueCount;i++) {\n          assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n        }\n        */\n      }\n\n      for(int i=0;i<valueCount;i++) {\n        assertEquals(\"value \" + i, packed1.get(i), packed2.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","829d9441b99897377d279219000bb71b50c026be"],"ecd30ce4d49d2e8e1a389aa7ac63f31f308514bb":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["829d9441b99897377d279219000bb71b50c026be"],"829d9441b99897377d279219000bb71b50c026be":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["ecd30ce4d49d2e8e1a389aa7ac63f31f308514bb"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ecd30ce4d49d2e8e1a389aa7ac63f31f308514bb":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6613659748fe4411a7dcf85266e55db1f95f7315":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["747628bb19a950ac2141b16756bdce9a47e94cc2"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"747628bb19a950ac2141b16756bdce9a47e94cc2":["ecd30ce4d49d2e8e1a389aa7ac63f31f308514bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}