{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c22d44fa0ab988ba3253471cce23610e45a91052","date":1337131019,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      // nocommit: too much sneakiness here, seriously this is a negative vint?!\n      if (currentFieldNumber == -1) {\n        field = \"\";\n      } else {\n        assert fieldInfos.fieldInfo(currentFieldNumber) != null : currentFieldNumber;\n        field = fieldInfos.fieldInfo(currentFieldNumber).name.intern();\n      }\n    } else {\n      assert field.equals(fieldInfos.fieldInfo(fieldNumber).name) : \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldInfo(fieldNumber) == null ? \"null\" : fieldInfos.fieldInfo(fieldNumber).name;\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72075e55f96fefa443288356377c83e70d94cbd2","date":1337721157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      // NOTE: too much sneakiness here, seriously this is a negative vint?!\n      if (currentFieldNumber == -1) {\n        field = \"\";\n      } else {\n        assert fieldInfos.fieldInfo(currentFieldNumber) != null : currentFieldNumber;\n        field = fieldInfos.fieldInfo(currentFieldNumber).name.intern();\n      }\n    } else {\n      assert field.equals(fieldInfos.fieldInfo(fieldNumber).name) : \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldInfo(fieldNumber) == null ? \"null\" : fieldInfos.fieldInfo(fieldNumber).name;\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      // nocommit: too much sneakiness here, seriously this is a negative vint?!\n      if (currentFieldNumber == -1) {\n        field = \"\";\n      } else {\n        assert fieldInfos.fieldInfo(currentFieldNumber) != null : currentFieldNumber;\n        field = fieldInfos.fieldInfo(currentFieldNumber).name.intern();\n      }\n    } else {\n      assert field.equals(fieldInfos.fieldInfo(fieldNumber).name) : \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldInfo(fieldNumber) == null ? \"null\" : fieldInfos.fieldInfo(fieldNumber).name;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      // NOTE: too much sneakiness here, seriously this is a negative vint?!\n      if (currentFieldNumber == -1) {\n        field = \"\";\n      } else {\n        assert fieldInfos.fieldInfo(currentFieldNumber) != null : currentFieldNumber;\n        field = fieldInfos.fieldInfo(currentFieldNumber).name.intern();\n      }\n    } else {\n      assert field.equals(fieldInfos.fieldInfo(fieldNumber).name) : \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldInfo(fieldNumber) == null ? \"null\" : fieldInfos.fieldInfo(fieldNumber).name;\n    }\n  }\n\n","sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      field = fieldInfos.fieldName(currentFieldNumber).intern();\n    } else {\n      assert field.equals(fieldInfos.fieldName(fieldNumber)): \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldName(fieldNumber);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/TermBuffer#read(IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"  public void read(IndexInput input, FieldInfos fieldInfos)\n    throws IOException {\n    this.term = null;                           // invalidate cache\n    newSuffixStart = input.readVInt();\n    int length = input.readVInt();\n    int totalLength = newSuffixStart + length;\n    if (bytes.bytes.length < totalLength) {\n      bytes.grow(totalLength);\n    }\n    bytes.length = totalLength;\n    input.readBytes(bytes.bytes, newSuffixStart, length);\n    final int fieldNumber = input.readVInt();\n    if (fieldNumber != currentFieldNumber) {\n      currentFieldNumber = fieldNumber;\n      // NOTE: too much sneakiness here, seriously this is a negative vint?!\n      if (currentFieldNumber == -1) {\n        field = \"\";\n      } else {\n        assert fieldInfos.fieldInfo(currentFieldNumber) != null : currentFieldNumber;\n        field = fieldInfos.fieldInfo(currentFieldNumber).name.intern();\n      }\n    } else {\n      assert field.equals(fieldInfos.fieldInfo(fieldNumber).name) : \"currentFieldNumber=\" + currentFieldNumber + \" field=\" + field + \" vs \" + fieldInfos.fieldInfo(fieldNumber) == null ? \"null\" : fieldInfos.fieldInfo(fieldNumber).name;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","72075e55f96fefa443288356377c83e70d94cbd2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72075e55f96fefa443288356377c83e70d94cbd2":["c22d44fa0ab988ba3253471cce23610e45a91052"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"c22d44fa0ab988ba3253471cce23610e45a91052":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","c22d44fa0ab988ba3253471cce23610e45a91052"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"72075e55f96fefa443288356377c83e70d94cbd2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c22d44fa0ab988ba3253471cce23610e45a91052":["72075e55f96fefa443288356377c83e70d94cbd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}