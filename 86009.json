{"path":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","commits":[{"id":"b1f73d659ca2ba1a1656881663797f0e5b61f3fc","date":1307414322,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 15%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  DirectSolrSpellChecker returns a different format.  Is this OK?  Does SOLRJ need tweaking to handle this???\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==['document']]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\t//TODO: Why is DirectSolrSpellChecker returning \"true\" here?  Is that OK?\n  \t\t\t//assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de86357ed7f45c7efec5ea6ab5a403b027a9f0b0","date":1307486921,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 15%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  DirectSolrSpellChecker returns a different format.  Is this OK?  Does SOLRJ need tweaking to handle this???\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==['document']]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\t//TODO: Why is DirectSolrSpellChecker returning \"true\" here?  Is that OK?\n  \t\t\t//assertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"/dev/null","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/SpellCheckComponentTest#testThresholdTokenFrequency().mjava","sourceNew":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","sourceOld":"    @Test\n    public void testThresholdTokenFrequency() throws Exception {\n    \t\n  \t  \t//\"document\" is in 2 documents but \"another\" is only in 1.  \n  \t  \t//So with a threshold of 29%, \"another\" is absent from the dictionary \n  \t  \t//while \"document\" is present.\n    \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \tassertJQ(req(\"qt\",rh, SpellCheckComponent.COMPONENT_NAME, \"true\", \"q\",\"documenq\", SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\", SpellCheckComponent.SPELLCHECK_COUNT,\"5\", SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\")\n  \t        ,\"/spellcheck/suggestions/[1]/suggestion==[{'word':'document','freq':2}]\"\n  \t    );\n  \t  \t\n  \t  \t//TODO:  how do we make this into a 1-liner using \"assertQ()\" ???\n  \t  \tSolrCore core = h.getCore();\n  \t  \tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n  \t  \tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n  \t  \t\n  \t  \tModifiableSolrParams params = new ModifiableSolrParams();\t\t\n  \t\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\t\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold\");\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS,\"true\");\n  \t\t\tparams.add(CommonParams.Q, \"anotheq\");\n  \t\t\t\n  \t\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n  \t\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tNamedList values = rsp.getValues();\n  \t\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n  \t\t\t\n  \t\t\tparams.remove(SpellCheckComponent.SPELLCHECK_DICT);\n  \t\t\tparams.add(SpellCheckComponent.SPELLCHECK_DICT, \"threshold_direct\");\n  \t\t\trsp = new SolrQueryResponse();\n  \t\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n  \t\t\treq = new LocalSolrQueryRequest(core, params);\n  \t\t\thandler.handleRequest(req, rsp);\n  \t\t\treq.close();\n  \t\t\tvalues = rsp.getValues();\n  \t\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n  \t\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n  \t\t\tassertTrue(suggestions.get(\"suggestion\")==null);\n  \t\t\t\n  \t\t\tassertTrue((Boolean) suggestions.get(\"correctlySpelled\")==false);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de86357ed7f45c7efec5ea6ab5a403b027a9f0b0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"c26f00b574427b55127e869b935845554afde1fa":["de86357ed7f45c7efec5ea6ab5a403b027a9f0b0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de86357ed7f45c7efec5ea6ab5a403b027a9f0b0"],"de86357ed7f45c7efec5ea6ab5a403b027a9f0b0":["b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["de86357ed7f45c7efec5ea6ab5a403b027a9f0b0"],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","b1f73d659ca2ba1a1656881663797f0e5b61f3fc"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"de86357ed7f45c7efec5ea6ab5a403b027a9f0b0":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"b1f73d659ca2ba1a1656881663797f0e5b61f3fc":["de86357ed7f45c7efec5ea6ab5a403b027a9f0b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}