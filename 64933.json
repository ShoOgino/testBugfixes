{"path":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","commits":[{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = Field.Text(\"field\", \"word\");\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773e104db917d6cc9acade5a8aeb91a886192b99","date":1094581596,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = Field.Text(\"field\", \"word\");\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n    \n    // add the same document four times\n    Field f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n    \n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.TOKENIZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new MultiReaderHitCollector() {\n         private int base = -1;\n         public final void collect(int doc, float score) {\n           scores[doc + base] = score;\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new HitCollector() {\n         public final void collect(int doc, float score) {\n           scores[doc] = score;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new MultiReaderHitCollector() {\n         private int base = -1;\n         public final void collect(int doc, float score) {\n           scores[doc + base] = score;\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","pathOld":"src/test/org/apache/lucene/search/TestSetNorm#testSetNorm().mjava","sourceNew":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","sourceOld":"  public void testSetNorm() throws Exception {\n    RAMDirectory store = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n    // add the same document four times\n    Fieldable f1 = new Field(\"field\", \"word\", Field.Store.YES, Field.Index.ANALYZED);\n    Document d1 = new Document();\n    d1.add(f1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.addDocument(d1);\n    writer.close();\n\n    // reset the boost of each instance of this document\n    IndexReader reader = IndexReader.open(store, false);\n    reader.setNorm(0, \"field\", 1.0f);\n    reader.setNorm(1, \"field\", 2.0f);\n    reader.setNorm(2, \"field\", 4.0f);\n    reader.setNorm(3, \"field\", 16.0f);\n    reader.close();\n\n    // check that searches are ordered by this boost\n    final float[] scores = new float[4];\n\n    new IndexSearcher(store, true).search\n      (new TermQuery(new Term(\"field\", \"word\")),\n       new Collector() {\n         private int base = 0;\n         private Scorer scorer;\n         @Override\n         public void setScorer(Scorer scorer) throws IOException {\n          this.scorer = scorer;\n         }\n         @Override\n         public final void collect(int doc) throws IOException {\n           scores[doc + base] = scorer.score();\n         }\n         @Override\n         public void setNextReader(IndexReader reader, int docBase) {\n           base = docBase;\n         }\n         @Override\n         public boolean acceptsDocsOutOfOrder() {\n           return true;\n         }\n       });\n\n    float lastScore = 0.0f;\n\n    for (int i = 0; i < 4; i++) {\n      assertTrue(scores[i] > lastScore);\n      lastScore = scores[i];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0a046c0c310bc77931fc8441bd920053b607dd14":["052fac7830290bd38a04cddee1a121ee07656b56","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["773e104db917d6cc9acade5a8aeb91a886192b99"],"63bc3238545c6012bd44f5d294077997f236bc4e":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"773e104db917d6cc9acade5a8aeb91a886192b99":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["773e104db917d6cc9acade5a8aeb91a886192b99"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["63bc3238545c6012bd44f5d294077997f236bc4e"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"773e104db917d6cc9acade5a8aeb91a886192b99":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}