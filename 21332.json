{"path":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf74e192b8a096b0c484ce31b932a00d26ed27d","date":1333406232,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          sigFields = new ArrayList<String>(docFields.size());\n          sigFields.addAll(docFields);\n          Collections.sort(sigFields);\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : sigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof String) {\n              sig.add((String)o);\n            } else if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                if (oo instanceof String) {\n                  sig.add((String)oo);\n                }\n              }\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":["80c633e661becbcb6deb6ea2ef4588d230102f50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = (Signature) req.getCore().getResourceLoader().newInstance(signatureClass); \n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090bca5f286f0964e1a8b6f6e617e2c4e1a59a21","date":1358186372,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        if (sigFields == null || sigFields.size() == 0) {\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<String>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d3b450958a83a29a16e492fbff9d094a9a571b6","date":1421525067,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/SignatureUpdateProcessorFactory.SignatureUpdateProcessor#processAdd(AddUpdateCommand).mjava","sourceNew":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = AtomicUpdateDocumentMerger.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","sourceOld":"    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n      if (enabled) {\n        SolrInputDocument doc = cmd.getSolrInputDocument();\n        List<String> currDocSigFields = null;\n        boolean isPartialUpdate = DistributedUpdateProcessor.isAtomicUpdate(cmd);\n        if (sigFields == null || sigFields.size() == 0) {\n          if (isPartialUpdate)  {\n            throw new SolrException\n                (ErrorCode.SERVER_ERROR,\n                    \"Can't use SignatureUpdateProcessor with partial updates on signature fields\");\n          }\n          Collection<String> docFields = doc.getFieldNames();\n          currDocSigFields = new ArrayList<>(docFields.size());\n          currDocSigFields.addAll(docFields);\n          Collections.sort(currDocSigFields);\n        } else {\n          currDocSigFields = sigFields;\n        }\n\n        Signature sig = req.getCore().getResourceLoader().newInstance(signatureClass, Signature.class);\n        sig.init(params);\n\n        for (String field : currDocSigFields) {\n          SolrInputField f = doc.getField(field);\n          if (f != null) {\n            if (isPartialUpdate)  {\n              throw new SolrException\n                  (ErrorCode.SERVER_ERROR,\n                      \"Can't use SignatureUpdateProcessor with partial update request \" +\n                          \"containing signature field: \" + field);\n            }\n            sig.add(field);\n            Object o = f.getValue();\n            if (o instanceof Collection) {\n              for (Object oo : (Collection)o) {\n                sig.add(String.valueOf(oo));\n              }\n            } else {\n              sig.add(String.valueOf(o));\n            }\n          }\n        }\n\n        byte[] signature = sig.getSignature();\n        char[] arr = new char[signature.length<<1];\n        for (int i=0; i<signature.length; i++) {\n          int b = signature[i];\n          int idx = i<<1;\n          arr[idx]= StrUtils.HEX_DIGITS[(b >> 4) & 0xf];\n          arr[idx+1]= StrUtils.HEX_DIGITS[b & 0xf];\n        }\n        String sigString = new String(arr);\n        doc.addField(signatureField, sigString);\n\n        if (overwriteDupes) {\n          cmd.updateTerm = new Term(signatureField, sigString);\n        }\n\n      }\n\n      if (next != null)\n        next.processAdd(cmd);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["090bca5f286f0964e1a8b6f6e617e2c4e1a59a21","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","090bca5f286f0964e1a8b6f6e617e2c4e1a59a21"],"dbf74e192b8a096b0c484ce31b932a00d26ed27d":["c26f00b574427b55127e869b935845554afde1fa"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["090bca5f286f0964e1a8b6f6e617e2c4e1a59a21"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["dbf74e192b8a096b0c484ce31b932a00d26ed27d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"090bca5f286f0964e1a8b6f6e617e2c4e1a59a21":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2d3b450958a83a29a16e492fbff9d094a9a571b6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d3b450958a83a29a16e492fbff9d094a9a571b6"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["dbf74e192b8a096b0c484ce31b932a00d26ed27d"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"dbf74e192b8a096b0c484ce31b932a00d26ed27d":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["8917bfede3b4ca30f4305c1e391e9218959cd723","090bca5f286f0964e1a8b6f6e617e2c4e1a59a21"],"090bca5f286f0964e1a8b6f6e617e2c4e1a59a21":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8917bfede3b4ca30f4305c1e391e9218959cd723","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2d3b450958a83a29a16e492fbff9d094a9a571b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8917bfede3b4ca30f4305c1e391e9218959cd723","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}