{"path":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MultiLevelSkipListReader.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MultiLevelSkipListReader.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f72b850f14bb4291a8c2728f0073d07da0462d8","date":1333634910,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MathUtil.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MultiLevelSkipListReader.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e06babaa3e8b78433266149d50d1500ba941652c","date":1344293820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  // skipMultiplier and skipInterval are the same:\n  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this(skipInterval, skipInterval, maxSkipLevels, df);\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MathUtil.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  // skipMultiplier and skipInterval are the same:\n  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this(skipInterval, skipInterval, maxSkipLevels, df);\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MathUtil.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  // skipMultiplier and skipInterval are the same:\n  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this(skipInterval, skipInterval, maxSkipLevels, df);\n  }\n\n","sourceOld":"  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this.skipInterval = skipInterval;\n    \n    // calculate the maximum number of skip levels for this document frequency\n    numberOfSkipLevels = MathUtil.log(df, skipInterval);\n    \n    // make sure it does not exceed maxSkipLevels\n    if (numberOfSkipLevels > maxSkipLevels) {\n      numberOfSkipLevels = maxSkipLevels;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519435fc0d6082a1b8081f9492b714f716877437","date":1348258553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/MultiLevelSkipListWriter#MultiLevelSkipListWriter(int,int,int).mjava","sourceNew":"  /** Creates a {@code MultiLevelSkipListWriter}, where\n   *  {@code skipInterval} and {@code skipMultiplier} are\n   *  the same. */\n  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this(skipInterval, skipInterval, maxSkipLevels, df);\n  }\n\n","sourceOld":"  // skipMultiplier and skipInterval are the same:\n  protected MultiLevelSkipListWriter(int skipInterval, int maxSkipLevels, int df) {\n    this(skipInterval, skipInterval, maxSkipLevels, df);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["2f72b850f14bb4291a8c2728f0073d07da0462d8","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"519435fc0d6082a1b8081f9492b714f716877437":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f72b850f14bb4291a8c2728f0073d07da0462d8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["2f72b850f14bb4291a8c2728f0073d07da0462d8","e06babaa3e8b78433266149d50d1500ba941652c"],"e06babaa3e8b78433266149d50d1500ba941652c":["2f72b850f14bb4291a8c2728f0073d07da0462d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["519435fc0d6082a1b8081f9492b714f716877437"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"519435fc0d6082a1b8081f9492b714f716877437":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2f72b850f14bb4291a8c2728f0073d07da0462d8"],"2f72b850f14bb4291a8c2728f0073d07da0462d8":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e06babaa3e8b78433266149d50d1500ba941652c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","519435fc0d6082a1b8081f9492b714f716877437"],"e06babaa3e8b78433266149d50d1500ba941652c":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}