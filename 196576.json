{"path":"src/java/org/apache/solr/util/BitSetIterator#next().mjava","commits":[{"id":"21400778a0bf704d187a4848279049f5d90276c8","date":1149955512,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BitSetIterator#next().mjava","pathOld":"/dev/null","sourceNew":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  public int next() {\n    if (indexArray==0) {\n      if (word!=0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n        wordShift =-1;  // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BitSetIterator#next().mjava","pathOld":"src/java/org/apache/solr/util/BitSetIterator#next().mjava","sourceNew":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  public int next() {\n    if (indexArray==0) {\n      if (word!=0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n        wordShift =-1;  // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  /***** alternate shift implementations\n  // 32 bit shifts, but a long shift needed at the end\n  private void shift2() {\n    int y = (int)word;\n    if (y==0) {wordShift +=32; y = (int)(word >>>32); }\n    if ((y & 0x0000FFFF) == 0) { wordShift +=16; y>>>=16; }\n    if ((y & 0x000000FF) == 0) { wordShift +=8; y>>>=8; }\n    indexArray = bitlist[y & 0xff];\n    word >>>= (wordShift +1);\n  }\n\n  private void shift3() {\n    int lower = (int)word;\n    int lowByte = lower & 0xff;\n    if (lowByte != 0) {\n      indexArray=bitlist[lowByte];\n      return;\n    }\n    shift();\n  }\n  ******/\n\n  public int next() {\n    if (indexArray==0) {\n      if (word!=0) {\n        word >>>= 8;\n        wordShift += 8;\n      }\n\n      while (word==0) {\n        if (++i >= words) return -1;\n        word = arr[i];\n        wordShift =-1;  // loop invariant code motion should move this\n      }\n\n      // after the first time, should I go with a linear search, or\n      // stick with the binary search in shift?\n      shift();\n    }\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21400778a0bf704d187a4848279049f5d90276c8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["21400778a0bf704d187a4848279049f5d90276c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"21400778a0bf704d187a4848279049f5d90276c8":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["21400778a0bf704d187a4848279049f5d90276c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}