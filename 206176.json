{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","sourceNew":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary\n   * @return\n   */\n  public static final Set makeDictionary(final String[] dictionary) {\n    CharArraySet dict = new CharArraySet(dictionary.length, false);\n    addAllLowerCase(dict, Arrays.asList(dictionary));\n    return dict;\n  }\n\n","sourceOld":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary\n   * @return\n   */\n  public static final Set makeDictionary(final String[] dictionary) {\n    CharArraySet dict = new CharArraySet(dictionary.length, false);\n    addAllLowerCase(dict, Arrays.asList(dictionary));\n    return dict;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45b06c3ff8a4d9d3d751dd311e51c59303c2719c","date":1250600126,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","sourceNew":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary \n   * @return {@link Set} of lowercased terms \n   */\n  public static final Set makeDictionary(final String[] dictionary) {\n    // is the below really case insensitive? \n    CharArraySet dict = new CharArraySet(dictionary.length, false);\n    addAllLowerCase(dict, Arrays.asList(dictionary));\n    return dict;\n  }\n\n","sourceOld":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary\n   * @return\n   */\n  public static final Set makeDictionary(final String[] dictionary) {\n    CharArraySet dict = new CharArraySet(dictionary.length, false);\n    addAllLowerCase(dict, Arrays.asList(dictionary));\n    return dict;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","sourceNew":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary \n   * @return {@link Set} of lowercased terms \n   */\n  public static final Set<?> makeDictionary(final String[] dictionary) {\n    return makeDictionary(Version.LUCENE_30, dictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary \n   * @return {@link Set} of lowercased terms \n   */\n  public static final Set makeDictionary(final String[] dictionary) {\n    // is the below really case insensitive? \n    CharArraySet dict = new CharArraySet(dictionary.length, false);\n    addAllLowerCase(dict, Arrays.asList(dictionary));\n    return dict;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#makeDictionary(String[]).mjava","sourceNew":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary \n   * @return {@link Set} of lowercased terms \n   */\n  public static final Set<?> makeDictionary(final String[] dictionary) {\n    return makeDictionary(Version.LUCENE_30, dictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a set of words from an array\n   * The resulting Set does case insensitive matching\n   * TODO We should look for a faster dictionary lookup approach.\n   * @param dictionary \n   * @return {@link Set} of lowercased terms \n   */\n  public static final Set<?> makeDictionary(final String[] dictionary) {\n    return makeDictionary(Version.LUCENE_30, dictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["45b06c3ff8a4d9d3d751dd311e51c59303c2719c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"45b06c3ff8a4d9d3d751dd311e51c59303c2719c":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}