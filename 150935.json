{"path":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","commits":[{"id":"4a54d9ede1b7f2f026639186eb07f3f314d87d9a","date":1412176848,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(success);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(success);\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"484b0041674ce91006288ec1d6ef75f72d3703ff","date":1419085862,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(e== null) continue;\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(e== null) continue;\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":["484b0041674ce91006288ec1d6ef75f72d3703ff"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1dc1bb4254226c8d7151b596cc1be40671751","date":1421876355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (IOException e) {\n            e.printStackTrace();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestBulkSchemaConcurrent#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final int threadCount = 5;\n    setupHarnesses();\n    Thread[] threads = new Thread[threadCount];\n    final List<List> collectErrors = new ArrayList<>();\n\n\n    for(int i=0;i<threadCount;i++){\n      final int finalI = i;\n      threads[i] = new Thread(){\n        @Override\n        public void run() {\n          try {\n            ArrayList errs = new ArrayList();\n            collectErrors.add(errs);\n            invokeBulkCall(finalI,errs);\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (Thread thread : threads) thread.join();\n\n    boolean success = true;\n\n    for (List e : collectErrors) {\n      if(!e.isEmpty()){\n        success = false;\n        log.error(e.toString());\n      }\n\n    }\n\n    assertTrue(collectErrors.toString(), success);\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"484b0041674ce91006288ec1d6ef75f72d3703ff":["7d72e80cee24be385c713864a9f1f90be3744482"],"7d72e80cee24be385c713864a9f1f90be3744482":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"abb23fcc2461782ab204e61213240feb77d355aa":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a54d9ede1b7f2f026639186eb07f3f314d87d9a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["484b0041674ce91006288ec1d6ef75f72d3703ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"c6e1dc1bb4254226c8d7151b596cc1be40671751":["abb23fcc2461782ab204e61213240feb77d355aa"],"484b0041674ce91006288ec1d6ef75f72d3703ff":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"7d72e80cee24be385c713864a9f1f90be3744482":["484b0041674ce91006288ec1d6ef75f72d3703ff"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a54d9ede1b7f2f026639186eb07f3f314d87d9a","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4a54d9ede1b7f2f026639186eb07f3f314d87d9a":["7d72e80cee24be385c713864a9f1f90be3744482","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["c6e1dc1bb4254226c8d7151b596cc1be40671751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}