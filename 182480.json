{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return subSpans.get(0);\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          boolean hasApproximation = false;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              hasApproximation = true;\n              break;\n            }\n          }\n\n          if (!hasApproximation) { // none of the sub spans supports approximations\n            return null;\n          }\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n          };\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, acceptDocs, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return subSpans.get(0);\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          boolean hasApproximation = false;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              hasApproximation = true;\n              break;\n            }\n          }\n\n          if (!hasApproximation) { // none of the sub spans supports approximations\n            return null;\n          }\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n          };\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans(this, getSimScorer(context)) {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          boolean hasApproximation = false;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              hasApproximation = true;\n              break;\n            }\n          }\n\n          if (!hasApproximation) { // none of the sub spans supports approximations\n            return null;\n          }\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n          };\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return subSpans.get(0);\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          boolean hasApproximation = false;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              hasApproximation = true;\n              break;\n            }\n          }\n\n          if (!hasApproximation) { // none of the sub spans supports approximations\n            return null;\n          }\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n          };\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans(this, getSimScorer(context)) {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.iterator.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans(this, getSimScorer(context)) {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          boolean hasApproximation = false;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              hasApproximation = true;\n              break;\n            }\n          }\n\n          if (!hasApproximation) { // none of the sub spans supports approximations\n            return null;\n          }\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n          };\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue byDocQueue = new DisiPriorityQueue(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.spans.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.spans;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue<Spans> byDocQueue = new DisiPriorityQueue<>(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper<>(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans(this, getSimScorer(context)) {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation<Spans>(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper<Spans> w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.iterator.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper<Spans> listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.iterator;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6985f89d88fd014509aa82abcd81d0e59f3af9a3","date":1468946709,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return subSpans.get(0);\n      }\n\n      DisiPriorityQueue byDocQueue = new DisiPriorityQueue(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.spans.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.spans;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue byDocQueue = new DisiPriorityQueue(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.spans.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.spans;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanOrWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return subSpans.get(0);\n      }\n\n      DisiPriorityQueue byDocQueue = new DisiPriorityQueue(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.spans.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.spans;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings)\n        throws IOException {\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n\n      for (SpanWeight w : subWeights) {\n        Spans spans = w.getSpans(context, requiredPostings);\n        if (spans != null) {\n          subSpans.add(spans);\n        }\n      }\n\n      if (subSpans.size() == 0) {\n        return null;\n      } else if (subSpans.size() == 1) {\n        return new ScoringWrapperSpans(subSpans.get(0), getSimScorer(context));\n      }\n\n      DisiPriorityQueue byDocQueue = new DisiPriorityQueue(subSpans.size());\n      for (Spans spans : subSpans) {\n        byDocQueue.add(new DisiWrapper(spans));\n      }\n\n      SpanPositionQueue byPositionQueue = new SpanPositionQueue(subSpans.size()); // when empty use -1\n\n      return new Spans() {\n        Spans topPositionSpans = null;\n\n        @Override\n        public int nextDoc() throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          int currentDoc = topDocSpans.doc;\n          do {\n            topDocSpans.doc = topDocSpans.iterator.nextDoc();\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc == currentDoc);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          topPositionSpans = null;\n          DisiWrapper topDocSpans = byDocQueue.top();\n          do {\n            topDocSpans.doc = topDocSpans.iterator.advance(target);\n            topDocSpans = byDocQueue.updateTop();\n          } while (topDocSpans.doc < target);\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public int docID() {\n          DisiWrapper topDocSpans = byDocQueue.top();\n          return topDocSpans.doc;\n        }\n\n        @Override\n        public TwoPhaseIterator asTwoPhaseIterator() {\n          float sumMatchCost = 0; // See also DisjunctionScorer.asTwoPhaseIterator()\n          long sumApproxCost = 0;\n\n          for (DisiWrapper w : byDocQueue) {\n            if (w.twoPhaseView != null) {\n              long costWeight = (w.cost <= 1) ? 1 : w.cost;\n              sumMatchCost += w.twoPhaseView.matchCost() * costWeight;\n              sumApproxCost += costWeight;\n            }\n          }\n\n          if (sumApproxCost == 0) { // no sub spans supports approximations\n            computePositionsCost();\n            return null;\n          }\n\n          final float matchCost = sumMatchCost / sumApproxCost;\n\n          return new TwoPhaseIterator(new DisjunctionDISIApproximation(byDocQueue)) {\n            @Override\n            public boolean matches() throws IOException {\n              return twoPhaseCurrentDocMatches();\n            }\n\n            @Override\n            public float matchCost() {\n              return matchCost;\n            }\n          };\n        }\n\n        float positionsCost = -1;\n\n        void computePositionsCost() {\n          float sumPositionsCost = 0;\n          long sumCost = 0;\n          for (DisiWrapper w : byDocQueue) {\n            long costWeight = (w.cost <= 1) ? 1 : w.cost;\n            sumPositionsCost += w.spans.positionsCost() * costWeight;\n            sumCost += costWeight;\n          }\n          positionsCost = sumPositionsCost / sumCost;\n        }\n\n        @Override\n        public float positionsCost() {\n          // This may be called when asTwoPhaseIterator returned null,\n          // which happens when none of the sub spans supports approximations.\n          assert positionsCost > 0;\n          return positionsCost;\n        }\n\n        int lastDocTwoPhaseMatched = -1;\n\n        boolean twoPhaseCurrentDocMatches() throws IOException {\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          // remove the head of the list as long as it does not match\n          final int currentDoc = listAtCurrentDoc.doc;\n          while (listAtCurrentDoc.twoPhaseView != null) {\n            if (listAtCurrentDoc.twoPhaseView.matches()) {\n              // use this spans for positions at current doc:\n              listAtCurrentDoc.lastApproxMatchDoc = currentDoc;\n              break;\n            }\n            // do not use this spans for positions at current doc:\n            listAtCurrentDoc.lastApproxNonMatchDoc = currentDoc;\n            listAtCurrentDoc = listAtCurrentDoc.next;\n            if (listAtCurrentDoc == null) {\n              return false;\n            }\n          }\n          lastDocTwoPhaseMatched = currentDoc;\n          topPositionSpans = null;\n          return true;\n        }\n\n        void fillPositionQueue() throws IOException { // called at first nextStartPosition\n          assert byPositionQueue.size() == 0;\n          // add all matching Spans at current doc to byPositionQueue\n          DisiWrapper listAtCurrentDoc = byDocQueue.topList();\n          while (listAtCurrentDoc != null) {\n            Spans spansAtDoc = listAtCurrentDoc.spans;\n            if (lastDocTwoPhaseMatched == listAtCurrentDoc.doc) { // matched by DisjunctionDisiApproximation\n              if (listAtCurrentDoc.twoPhaseView != null) { // matched by approximation\n                if (listAtCurrentDoc.lastApproxNonMatchDoc == listAtCurrentDoc.doc) { // matches() returned false\n                  spansAtDoc = null;\n                } else {\n                  if (listAtCurrentDoc.lastApproxMatchDoc != listAtCurrentDoc.doc) {\n                    if (!listAtCurrentDoc.twoPhaseView.matches()) {\n                      spansAtDoc = null;\n                    }\n                  }\n                }\n              }\n            }\n\n            if (spansAtDoc != null) {\n              assert spansAtDoc.docID() == listAtCurrentDoc.doc;\n              assert spansAtDoc.startPosition() == -1;\n              spansAtDoc.nextStartPosition();\n              assert spansAtDoc.startPosition() != NO_MORE_POSITIONS;\n              byPositionQueue.add(spansAtDoc);\n            }\n            listAtCurrentDoc = listAtCurrentDoc.next;\n          }\n          assert byPositionQueue.size() > 0;\n        }\n\n        @Override\n        public int nextStartPosition() throws IOException {\n          if (topPositionSpans == null) {\n            byPositionQueue.clear();\n            fillPositionQueue(); // fills byPositionQueue at first position\n            topPositionSpans = byPositionQueue.top();\n          } else {\n            topPositionSpans.nextStartPosition();\n            topPositionSpans = byPositionQueue.updateTop();\n          }\n          return topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int startPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.startPosition();\n        }\n\n        @Override\n        public int endPosition() {\n          return topPositionSpans == null ? -1 : topPositionSpans.endPosition();\n        }\n\n        @Override\n        public int width() {\n          return topPositionSpans.width();\n        }\n\n        @Override\n        public void collect(SpanCollector collector) throws IOException {\n          if (topPositionSpans != null)\n            topPositionSpans.collect(collector);\n        }\n\n        @Override\n        public String toString() {\n          return \"spanOr(\" + SpanOrQuery.this + \")@\" + docID() + \": \" + startPosition() + \" - \" + endPosition();\n        }\n\n        long cost = -1;\n\n        @Override\n        public long cost() {\n          if (cost == -1) {\n            cost = 0;\n            for (Spans spans : subSpans) {\n              cost += spans.cost();\n            }\n          }\n          return cost;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6985f89d88fd014509aa82abcd81d0e59f3af9a3":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","6985f89d88fd014509aa82abcd81d0e59f3af9a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6985f89d88fd014509aa82abcd81d0e59f3af9a3"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"6985f89d88fd014509aa82abcd81d0e59f3af9a3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["6985f89d88fd014509aa82abcd81d0e59f3af9a3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}