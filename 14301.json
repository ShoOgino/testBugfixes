{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(this)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(this)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4409879b1445c56c3834b823720d47c08c409c5","date":1428086307,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(in)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(this)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","sourceNew":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(in)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(this)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0613e0740833ec755a71c81b0046b97df797e9ce","date":1428263071,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#twoPhaseCurrentDocMatches().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.PositionCheckSpans#toNextDocWithAllowedPosition().mjava","sourceNew":"    // return true if the current document matches\n    @SuppressWarnings(\"fallthrough\")\n    public boolean twoPhaseCurrentDocMatches() throws IOException {\n      atFirstInCurrentDoc = false;\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(in)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return true;\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            startPos = -1;\n            return false;\n        }\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"fallthrough\")\n    protected int toNextDocWithAllowedPosition() throws IOException {\n      startPos = in.nextStartPosition();\n      assert startPos != NO_MORE_POSITIONS;\n      for (;;) {\n        switch(acceptPosition(in)) {\n          case YES:\n            atFirstInCurrentDoc = true;\n            return in.docID();\n          case NO:\n            startPos = in.nextStartPosition();\n            if (startPos != NO_MORE_POSITIONS) {\n              break;\n            }\n            // else fallthrough\n          case NO_MORE_IN_CURRENT_DOC:\n            if (in.nextDoc() == NO_MORE_DOCS) {\n              startPos = -1;\n              return NO_MORE_DOCS;\n            }\n            startPos = in.nextStartPosition();\n            assert startPos != NO_MORE_POSITIONS : \"no start position at doc=\"+in.docID();\n            break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0613e0740833ec755a71c81b0046b97df797e9ce":["f4409879b1445c56c3834b823720d47c08c409c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4409879b1445c56c3834b823720d47c08c409c5":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","f4409879b1445c56c3834b823720d47c08c409c5"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0613e0740833ec755a71c81b0046b97df797e9ce"]},"commit2Childs":{"0613e0740833ec755a71c81b0046b97df797e9ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"f4409879b1445c56c3834b823720d47c08c409c5":["0613e0740833ec755a71c81b0046b97df797e9ce","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["f4409879b1445c56c3834b823720d47c08c409c5","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}