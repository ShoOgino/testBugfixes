{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","commits":[{"id":"c682f5d8dbe387f95559e6bd61039b04c10b140d","date":1553913180,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","pathOld":"/dev/null","sourceNew":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      //no role is assigned permission.That means everybody is allowed to access\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.info(\"request has come without principal. failed permission {} \", governingPermission);\n      //this resource needs a principal but the request has come without\n      //any credential.\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      return MatchStatus.PERMITTED;\n    }\n\n    for (String role : governingPermission.role) {\n      Set<String> userRoles = usersVsRoles.get(principal.getName());\n      if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb842b7eba1323ec814496c88e41dc3264d1d4e0","date":1569005452,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","sourceNew":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      log.debug(\"Governing permission [{}] has no role; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.debug(\"Governing permission [{}] has role, but request principal cannot be identified; forbidding access\", governingPermission);\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      log.debug(\"Governing permission [{}] allows all roles; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n\n    Set<String> userRoles = usersVsRoles.get(principal.getName());\n    for (String role : governingPermission.role) {\n      if (userRoles != null && userRoles.contains(role)) {\n        log.debug(\"Governing permission [{}] allows access to role [{}]; permitting access\", governingPermission, role);\n        return MatchStatus.PERMITTED;\n      }\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","sourceOld":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      //no role is assigned permission.That means everybody is allowed to access\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.info(\"request has come without principal. failed permission {} \", governingPermission);\n      //this resource needs a principal but the request has come without\n      //any credential.\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      return MatchStatus.PERMITTED;\n    }\n\n    for (String role : governingPermission.role) {\n      Set<String> userRoles = usersVsRoles.get(principal.getName());\n      if (userRoles != null && userRoles.contains(role)) return MatchStatus.PERMITTED;\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","sourceNew":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      log.debug(\"Governing permission [{}] has no role; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.debug(\"Governing permission [{}] has role, but request principal cannot be identified; forbidding access\", governingPermission);\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      log.debug(\"Governing permission [{}] allows all roles; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n\n    Set<String> userRoles = getUserRoles(principal);\n    for (String role : governingPermission.role) {\n      if (userRoles != null && userRoles.contains(role)) {\n        log.debug(\"Governing permission [{}] allows access to role [{}]; permitting access\", governingPermission, role);\n        return MatchStatus.PERMITTED;\n      }\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","sourceOld":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      log.debug(\"Governing permission [{}] has no role; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.debug(\"Governing permission [{}] has role, but request principal cannot be identified; forbidding access\", governingPermission);\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      log.debug(\"Governing permission [{}] allows all roles; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n\n    Set<String> userRoles = usersVsRoles.get(principal.getName());\n    for (String role : governingPermission.role) {\n      if (userRoles != null && userRoles.contains(role)) {\n        log.debug(\"Governing permission [{}] allows access to role [{}]; permitting access\", governingPermission, role);\n        return MatchStatus.PERMITTED;\n      }\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8076096f334b0665d0a69a63ee98ac09baad402b":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c682f5d8dbe387f95559e6bd61039b04c10b140d"],"c682f5d8dbe387f95559e6bd61039b04c10b140d":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["8076096f334b0665d0a69a63ee98ac09baad402b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}