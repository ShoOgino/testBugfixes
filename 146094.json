{"path":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#add(Document).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.add(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  synchronized public void add(Document doc) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      add(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92442af786151ee55bc283eb472f629e3c7b52b","date":1301070252,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.add(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions(), field.docValuesType());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"/dev/null","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions(), field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions(), field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getIndexOptions(), field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getOmitTermFreqAndPositions(), field.docValuesType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    for (IndexableField field : doc) {\n      fieldInfos.addOrUpdate(field.name(), field.indexed(), field.storeTermVectors(), field.storeTermVectorPositions(),\n              field.storeTermVectorOffsets(), field.omitNorms(), false, field.indexOptions(), field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    List<Fieldable> fields = doc.getFields();\n    for (Fieldable field : fields) {\n      fieldInfos.addOrUpdate(field.name(), field.isIndexed(), field.isTermVectorStored(), field.isStorePositionWithTermVector(),\n              field.isStoreOffsetWithTermVector(), field.getOmitNorms(), false, field.getIndexOptions(), field.docValuesType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    for (IndexableField field : doc) {\n      fieldInfos.addOrUpdate(field.name(), field.fieldType(), false, field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    for (IndexableField field : doc) {\n      fieldInfos.addOrUpdate(field.name(), field.indexed(), field.storeTermVectors(), field.storeTermVectorPositions(),\n              field.storeTermVectorOffsets(), field.omitNorms(), false, field.indexOptions(), field.docValuesType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/_TestUtil#add(Document,FieldInfos).mjava","sourceNew":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    for (IndexableField field : doc) {\n      fieldInfos.addOrUpdate(field.name(), field.fieldType(), false, field.docValuesType());\n    }\n  }\n\n","sourceOld":"  /** Adds field info for a Document. */\n  public static void add(Document doc, FieldInfos fieldInfos) {\n    for (IndexableField field : doc) {\n      fieldInfos.addOrUpdate(field.name(), field.fieldType(), false, field.docValuesType());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["e92442af786151ee55bc283eb472f629e3c7b52b","2e8d7ba2175f47e280231533f7d3016249cea88b"],"7b91922b55d15444d554721b352861d028eb8278":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"e92442af786151ee55bc283eb472f629e3c7b52b":["1224a4027481acce15495b03bce9b48b93b42722"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["e92442af786151ee55bc283eb472f629e3c7b52b","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e92442af786151ee55bc283eb472f629e3c7b52b"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"e92442af786151ee55bc283eb472f629e3c7b52b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"1224a4027481acce15495b03bce9b48b93b42722":["e92442af786151ee55bc283eb472f629e3c7b52b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}