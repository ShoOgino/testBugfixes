{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#addMultiTermClauses(List[BooleanClause],Query).mjava","commits":[{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#addMultiTermClauses(List[BooleanClause],Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds clauses generated from analysis over text containing whitespace.\n   * There are no operators, so the query's clauses can either be MUST (if the\n   * default operator is AND) or SHOULD (default OR).\n   *\n   * If all of the clauses in the given Query are TermQuery-s, this method flattens the result\n   * by adding the TermQuery-s individually to the output clause list; otherwise, the given Query\n   * is added as a single clause including its nested clauses.\n   */\n  protected void addMultiTermClauses(List<BooleanClause> clauses, Query q) {\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null) {\n      return;\n    }\n    boolean allNestedTermQueries = false;\n    if (q instanceof BooleanQuery) {\n      allNestedTermQueries = true;\n      for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n        if ( ! (clause.getQuery() instanceof TermQuery)) {\n          allNestedTermQueries = false;\n          break;\n        }\n      }\n    }\n    if (allNestedTermQueries) {\n      clauses.addAll(((BooleanQuery)q).clauses());\n    } else {\n      BooleanClause.Occur occur = operator == OR_OPERATOR ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST;\n      if (q instanceof BooleanQuery) {\n        for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n          clauses.add(newBooleanClause(clause.getQuery(), occur));\n        }\n      } else {\n        clauses.add(newBooleanClause(q, occur));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#addMultiTermClauses(List[BooleanClause],Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds clauses generated from analysis over text containing whitespace.\n   * There are no operators, so the query's clauses can either be MUST (if the\n   * default operator is AND) or SHOULD (default OR).\n   *\n   * If all of the clauses in the given Query are TermQuery-s, this method flattens the result\n   * by adding the TermQuery-s individually to the output clause list; otherwise, the given Query\n   * is added as a single clause including its nested clauses.\n   */\n  protected void addMultiTermClauses(List<BooleanClause> clauses, Query q) {\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null) {\n      return;\n    }\n    boolean allNestedTermQueries = false;\n    if (q instanceof BooleanQuery) {\n      allNestedTermQueries = true;\n      for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n        if ( ! (clause.getQuery() instanceof TermQuery)) {\n          allNestedTermQueries = false;\n          break;\n        }\n      }\n    }\n    if (allNestedTermQueries) {\n      clauses.addAll(((BooleanQuery)q).clauses());\n    } else {\n      BooleanClause.Occur occur = operator == OR_OPERATOR ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST;\n      if (q instanceof BooleanQuery) {\n        for (BooleanClause clause : ((BooleanQuery)q).clauses()) {\n          clauses.add(newBooleanClause(clause.getQuery(), occur));\n        }\n      } else {\n        clauses.add(newBooleanClause(q, occur));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"]},"commit2Childs":{"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}