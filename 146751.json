{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#determinize(Automaton,Set[State]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#determinize(Automaton,Set[State]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determinizes the given automaton using the given set of initial states.\n   */\n  static void determinize(Automaton a, Set<State> initialset) {\n    char[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>,Set<State>> sets = new HashMap<Set<State>,Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>,State> newstate = new HashMap<Set<State>,State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.transitions)\n            if (t.min <= points[n] && points[n] <= t.max) p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        char min = points[n];\n        char max;\n        if (n + 1 < points.length) max = (char) (points[n + 1] - 1);\n        else max = Character.MAX_VALUE;\n        r.transitions.add(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.removeDeadTransitions();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicOperations#determinize(Automaton,Set[State]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determinizes the given automaton using the given set of initial states.\n   */\n  static void determinize(Automaton a, Set<State> initialset) {\n    char[] points = a.getStartPoints();\n    // subset construction\n    Map<Set<State>,Set<State>> sets = new HashMap<Set<State>,Set<State>>();\n    LinkedList<Set<State>> worklist = new LinkedList<Set<State>>();\n    Map<Set<State>,State> newstate = new HashMap<Set<State>,State>();\n    sets.put(initialset, initialset);\n    worklist.add(initialset);\n    a.initial = new State();\n    newstate.put(initialset, a.initial);\n    while (worklist.size() > 0) {\n      Set<State> s = worklist.removeFirst();\n      State r = newstate.get(s);\n      for (State q : s)\n        if (q.accept) {\n          r.accept = true;\n          break;\n        }\n      for (int n = 0; n < points.length; n++) {\n        Set<State> p = new HashSet<State>();\n        for (State q : s)\n          for (Transition t : q.transitions)\n            if (t.min <= points[n] && points[n] <= t.max) p.add(t.to);\n        if (!sets.containsKey(p)) {\n          sets.put(p, p);\n          worklist.add(p);\n          newstate.put(p, new State());\n        }\n        State q = newstate.get(p);\n        char min = points[n];\n        char max;\n        if (n + 1 < points.length) max = (char) (points[n + 1] - 1);\n        else max = Character.MAX_VALUE;\n        r.transitions.add(new Transition(min, max, q));\n      }\n    }\n    a.deterministic = true;\n    a.removeDeadTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"]},"commit2Childs":{"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}