{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","commits":[{"id":"cea5f7a2e31566bda38c740c37affa52b0e9c46e","date":1323436632,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54f30d837eed968a2b64ca9e82f710a6e5511a02","date":1331061399,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setQueryType(queryType);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setQueryType(queryType);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6b04f26b53089e5455892cda06cc4736c41da0b","date":1337008032,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setQueryType(queryType);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setQueryType(queryType);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a8954ce7749d4df8d7288d333126e079af73f12","date":1340166187,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.queryType = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setQueryType(queryType);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrServer.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException | IOException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException | IOException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d631465f88a03f4c835b8afad23d09615067b978","date":1483120253,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":null,"sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException | IOException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrEntityProcessor#doQuery(int).mjava","sourceNew":null,"sourceOld":"  protected SolrDocumentList doQuery(int start) {\n    this.queryString = context.getResolvedEntityAttribute(QUERY);\n    if (this.queryString == null) {\n      throw new DataImportHandlerException(\n          DataImportHandlerException.SEVERE,\n          \"SolrEntityProcessor: parameter 'query' is required\"\n      );\n    }\n\n    String rowsP = context.getResolvedEntityAttribute(CommonParams.ROWS);\n    if (rowsP != null) {\n      rows = Integer.parseInt(rowsP);\n    }\n\n    String fqAsString = context.getResolvedEntityAttribute(CommonParams.FQ);\n    if (fqAsString != null) {\n      this.filterQueries = fqAsString.split(\",\");\n    }\n\n    String fieldsAsString = context.getResolvedEntityAttribute(CommonParams.FL);\n    if (fieldsAsString != null) {\n      this.fields = fieldsAsString.split(\",\");\n    }\n    this.requestHandler = context.getResolvedEntityAttribute(CommonParams.QT);\n    String timeoutAsString = context.getResolvedEntityAttribute(TIMEOUT);\n    if (timeoutAsString != null) {\n      this.timeout = Integer.parseInt(timeoutAsString);\n    }\n\n    SolrQuery solrQuery = new SolrQuery(queryString);\n    solrQuery.setRows(rows);\n    solrQuery.setStart(start);\n    if (fields != null) {\n      for (String field : fields) {\n        solrQuery.addField(field);\n      }\n    }\n    solrQuery.setRequestHandler(requestHandler);\n    solrQuery.setFilterQueries(filterQueries);\n    solrQuery.setTimeAllowed(timeout * 1000);\n    \n    QueryResponse response = null;\n    try {\n      response = solrClient.query(solrQuery);\n    } catch (SolrServerException | IOException e) {\n      if (ABORT.equals(onError)) {\n        wrapAndThrow(SEVERE, e);\n      } else if (SKIP.equals(onError)) {\n        wrapAndThrow(DataImportHandlerException.SKIP_ROW, e);\n      }\n    }\n    \n    return response == null ? null : response.getResults();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6b04f26b53089e5455892cda06cc4736c41da0b":["54f30d837eed968a2b64ca9e82f710a6e5511a02"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","54f30d837eed968a2b64ca9e82f710a6e5511a02"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"7a8954ce7749d4df8d7288d333126e079af73f12":["f6b04f26b53089e5455892cda06cc4736c41da0b"],"bafca15d8e408346a67f4282ad1143b88023893b":["7a8954ce7749d4df8d7288d333126e079af73f12"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","d631465f88a03f4c835b8afad23d09615067b978"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"54f30d837eed968a2b64ca9e82f710a6e5511a02":["cea5f7a2e31566bda38c740c37affa52b0e9c46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d631465f88a03f4c835b8afad23d09615067b978":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d631465f88a03f4c835b8afad23d09615067b978"]},"commit2Childs":{"f6b04f26b53089e5455892cda06cc4736c41da0b":["7a8954ce7749d4df8d7288d333126e079af73f12"],"cea5f7a2e31566bda38c740c37affa52b0e9c46e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","54f30d837eed968a2b64ca9e82f710a6e5511a02"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7a8954ce7749d4df8d7288d333126e079af73f12":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d631465f88a03f4c835b8afad23d09615067b978"],"54f30d837eed968a2b64ca9e82f710a6e5511a02":["f6b04f26b53089e5455892cda06cc4736c41da0b","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cea5f7a2e31566bda38c740c37affa52b0e9c46e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"d631465f88a03f4c835b8afad23d09615067b978":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","f03e4bed5023ec3ef93a771b8888cae991cf448d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}