{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Collection<SearchGroup<BytesRef>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {\n    Map<String, Collection<SearchGroup<BytesRef>>> result = new HashMap<String, Collection<SearchGroup<BytesRef>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = command.getValue();\n      for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n        searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n        searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n        searchGroups.add(searchGroup);\n      }\n\n      result.put(command.getKey(), searchGroups);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af20870f6eab3807c968eec0b24e0c4358d0c1e5","date":1337002937,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Collection<SearchGroup<BytesRef>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {\n    Map<String, Collection<SearchGroup<BytesRef>>> result = new HashMap<String, Collection<SearchGroup<BytesRef>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = command.getValue();\n      for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n        searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n        searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n        searchGroups.add(searchGroup);\n      }\n\n      result.put(command.getKey(), searchGroups);\n    }\n    return result;\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) throws IOException {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25","date":1389830331,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<SearchGroup<BytesRef>>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<BytesRef>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97b865fb5b6ef0e08dcafe96ab9cdbcd1cbd0943","date":1440670426,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    Map<String, Pair<Integer, Collection<SearchGroup<BytesRef>>>> result = new HashMap<>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new Pair<Integer, Collection<SearchGroup<BytesRef>>>(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8352a83d5332dd7e172d6ceb8872f47f2f31ceb","date":1444852275,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>();\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(\"topGroups\");\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      Integer groupCount = (Integer) topGroupsAndGroupCount.get(\"groupCount\");\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bab0702ffbb627ce10bd5af1c669b3c1f999002","date":1487156075,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            if (field != null) {\n              FieldType fieldType = field.getType();\n              if (searchGroup.sortValues[i] != null) {\n                searchGroup.sortValues[i] = fieldType.unmarshalSortValue(searchGroup.sortValues[i]);\n              }\n            }\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","date":1489998096,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06f29c9961912220543423aa6fc6f64362874871","date":1490280012,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          searchGroup.groupValue = rawSearchGroup.getKey() != null ? new BytesRef(rawSearchGroup.getKey()) : null;\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f7a37353edeecde86a45f4895ef74901a0158b","date":1492601294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort sortWithinGroup, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7858d8d84de14b0479198247e8fcf09c0028a3b6","date":1563456212,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        final SchemaField groupField = searcher.getSchema().getFieldOrNull(command.getKey());\n        final SortField[] groupSortField = groupSort.getSort();\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = deserializeOneSearchGroup(\n              groupField, rawSearchGroup.getKey(),\n              groupSortField, rawSearchGroup.getValue());\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n          SchemaField groupField = rawSearchGroup.getKey() != null? searcher.getSchema().getFieldOrNull(command.getKey()) : null;\n          searchGroup.groupValue = null;\n          if (rawSearchGroup.getKey() != null) {\n            if (groupField != null) {\n              BytesRefBuilder builder = new BytesRefBuilder();\n              groupField.getType().readableToIndexed(rawSearchGroup.getKey(), builder);\n              searchGroup.groupValue = builder.get();\n            } else {\n              searchGroup.groupValue = new BytesRef(rawSearchGroup.getKey());\n            }\n          }\n          searchGroup.sortValues = rawSearchGroup.getValue().toArray(new Comparable[rawSearchGroup.getValue().size()]);\n          for (int i = 0; i < searchGroup.sortValues.length; i++) {\n            SchemaField field = groupSort.getSort()[i].getField() != null ? searcher.getSchema().getFieldOrNull(groupSort.getSort()[i].getField()) : null;\n            searchGroup.sortValues[i] = ShardResultTransformerUtils.unmarshalSortValue(searchGroup.sortValues[i], field);\n          }\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer#transformToNative(NamedList[NamedList],Sort,Sort,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings({\"unchecked\"})\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        final SchemaField groupField = searcher.getSchema().getFieldOrNull(command.getKey());\n        final SortField[] groupSortField = groupSort.getSort();\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = deserializeOneSearchGroup(\n              groupField, rawSearchGroup.getKey(),\n              groupSortField, rawSearchGroup.getValue());\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, SearchGroupsFieldCommandResult> transformToNative(NamedList<NamedList> shardResponse, Sort groupSort, Sort withinGroupSort, String shard) {\n    final Map<String, SearchGroupsFieldCommandResult> result = new HashMap<>(shardResponse.size());\n    for (Map.Entry<String, NamedList> command : shardResponse) {\n      List<SearchGroup<BytesRef>> searchGroups = new ArrayList<>();\n      NamedList topGroupsAndGroupCount = command.getValue();\n      @SuppressWarnings(\"unchecked\")\n      final NamedList<List<Comparable>> rawSearchGroups = (NamedList<List<Comparable>>) topGroupsAndGroupCount.get(TOP_GROUPS);\n      if (rawSearchGroups != null) {\n        final SchemaField groupField = searcher.getSchema().getFieldOrNull(command.getKey());\n        final SortField[] groupSortField = groupSort.getSort();\n        for (Map.Entry<String, List<Comparable>> rawSearchGroup : rawSearchGroups){\n          SearchGroup<BytesRef> searchGroup = deserializeOneSearchGroup(\n              groupField, rawSearchGroup.getKey(),\n              groupSortField, rawSearchGroup.getValue());\n          searchGroups.add(searchGroup);\n        }\n      }\n\n      final Integer groupCount = (Integer) topGroupsAndGroupCount.get(GROUP_COUNT);\n      result.put(command.getKey(), new SearchGroupsFieldCommandResult(groupCount, searchGroups));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["06f29c9961912220543423aa6fc6f64362874871"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"b94236357aaa22b76c10629851fe4e376e0cea82":["55f7a37353edeecde86a45f4895ef74901a0158b","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"f8352a83d5332dd7e172d6ceb8872f47f2f31ceb":["97b865fb5b6ef0e08dcafe96ab9cdbcd1cbd0943"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["7530de27b87b961b51f01bd1299b7004d46e8823","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["55f7a37353edeecde86a45f4895ef74901a0158b"],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["f8352a83d5332dd7e172d6ceb8872f47f2f31ceb"],"7858d8d84de14b0479198247e8fcf09c0028a3b6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"55f7a37353edeecde86a45f4895ef74901a0158b":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["7530de27b87b961b51f01bd1299b7004d46e8823"],"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"97b865fb5b6ef0e08dcafe96ab9cdbcd1cbd0943":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["7858d8d84de14b0479198247e8fcf09c0028a3b6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["af20870f6eab3807c968eec0b24e0c4358d0c1e5","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"06f29c9961912220543423aa6fc6f64362874871":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["97b865fb5b6ef0e08dcafe96ab9cdbcd1cbd0943"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7858d8d84de14b0479198247e8fcf09c0028a3b6"],"f8352a83d5332dd7e172d6ceb8872f47f2f31ceb":["5bab0702ffbb627ce10bd5af1c669b3c1f999002"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"5bab0702ffbb627ce10bd5af1c669b3c1f999002":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","06f29c9961912220543423aa6fc6f64362874871"],"55f7a37353edeecde86a45f4895ef74901a0158b":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"7858d8d84de14b0479198247e8fcf09c0028a3b6":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["55f7a37353edeecde86a45f4895ef74901a0158b"],"97b865fb5b6ef0e08dcafe96ab9cdbcd1cbd0943":["f8352a83d5332dd7e172d6ceb8872f47f2f31ceb"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"06f29c9961912220543423aa6fc6f64362874871":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","27ab7b234eab0cbc020836989b96ed430e1065bb","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}