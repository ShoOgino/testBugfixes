{"path":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"974ef146a791a4fadf1226b30089cd7ad7d2983f","date":1347388725,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      @Override\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      @Override\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      @Override\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<String>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      @Override\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<String>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/SolrDocumentTest#testAddCollections().mjava","sourceNew":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Iterable iter = new Iterable() {\n      @Override\n      @SuppressWarnings({\"rawtypes\"})\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","sourceOld":"  public void testAddCollections()\n  {\n    final List<String> c0 = new ArrayList<>();\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"aaa\" );\n    c0.add( \"bbb\" );\n    c0.add( \"ccc\" );\n    c0.add( \"ddd\" );\n    \n    SolrDocument doc = new SolrDocument();\n    doc.addField( \"v\", c0 );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    assertEquals( c0.get(0), doc.getFirstValue( \"v\" ) );\n    \n    // Same thing with an array\n    Object[] arr = new Object[] { \"aaa\", \"aaa\", \"aaa\", 10, 'b' };\n    doc = new SolrDocument();\n    doc.addField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    // try the same thing with 'setField'\n    doc.setField( \"v\", arr );\n    assertEquals( arr.length, doc.getFieldValues(\"v\").size() );\n    \n    doc.clear();\n    assertEquals( 0, doc.getFieldNames().size() );\n    \n    Iterable iter = new Iterable() {\n      @Override\n      public Iterator iterator() {\n        return c0.iterator();\n      }\n    };\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size(), doc.getFieldValues(\"v\").size() );\n    // do it again to get twice the size...\n    doc.addField( \"v\", iter );\n    assertEquals( c0.size()*2, doc.getFieldValues(\"v\").size() );\n    \n    // An empty list:\n    doc.setField( \"empty\", new ArrayList<String>() );\n    assertNull( doc.getFirstValue( \"empty\" ) );\n\n    // Try the JSTL accessor functions...\n    assertFalse( doc.getFieldValueMap().isEmpty() );\n    assertFalse( doc.getFieldValuesMap().isEmpty() );\n    assertEquals( 2, doc.getFieldValueMap().size() );\n    assertEquals( 2, doc.getFieldValuesMap().size() );\n    assertTrue( doc.getFieldValueMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().containsKey( \"v\" ) );\n    assertTrue( doc.getFieldValueMap().keySet().contains( \"v\" ) );\n    assertTrue( doc.getFieldValuesMap().keySet().contains( \"v\" ) );\n    assertFalse( doc.getFieldValueMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().containsKey( \"g\" ) );\n    assertFalse( doc.getFieldValueMap().keySet().contains( \"g\" ) );\n    assertFalse( doc.getFieldValuesMap().keySet().contains( \"g\" ) );\n\n    // A read-only list shouldn't break addField(\"v\", ...).\n    List<String> ro = Collections.unmodifiableList(c0);\n    doc = new SolrDocument();\n    doc.addField( \"v\", ro );\n\n    // This should NOT throw an UnsupportedOperationException.\n    doc.addField( \"v\", \"asdf\" );\n\n    // set field using a collection is documented to be backed by \n    // that collection, so changes should affect it.\n    Collection<String> tmp = new ArrayList<>(3);\n    tmp.add(\"one\");\n    doc.setField( \"collection_backed\", tmp );\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    tmp.add(\"two\");\n    assertEquals(\"wrong size\", \n                 2, doc.getFieldValues( \"collection_backed\" ).size());\n    assertEquals(\"collection not the same\", \n                 tmp, doc.getFieldValues( \"collection_backed\" ));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["974ef146a791a4fadf1226b30089cd7ad7d2983f","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["c26f00b574427b55127e869b935845554afde1fa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9ba1b632c041956c93c41aa1143d16a567014891"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["974ef146a791a4fadf1226b30089cd7ad7d2983f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"974ef146a791a4fadf1226b30089cd7ad7d2983f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}