{"path":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count)));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count)));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), StringField.TYPE_STORED));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count)));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85ca0e073c286ebb2c89364ada6dd2740fc18880","date":1453996944,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8de18786ea000fc5fbc7214d571cc7f41d597ee3","date":1454085819,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        d.add(new IntPoint(\"doc2d\", i, i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d15e34266d75e4e8b95da046cd0afc812367b38","date":1454246129,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        d.add(new IntPoint(\"doc2d\", i, i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        d.add(new IntPoint(\"doc2d\", i, i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork(int currentIteration) throws IOException {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*currentIteration), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        d.add(new IntPoint(\"doc2d\", i, i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new StringField(\"id\", Integer.toString(i), Field.Store.YES));\n        d.add(new TextField(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO));\n        d.add(new IntPoint(\"doc\", i));\n        d.add(new IntPoint(\"doc2d\", i, i));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8de18786ea000fc5fbc7214d571cc7f41d597ee3":["85ca0e073c286ebb2c89364ada6dd2740fc18880"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["04f07771a2a7dd3a395700665ed839c3dae2def2","8d15e34266d75e4e8b95da046cd0afc812367b38"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["04f07771a2a7dd3a395700665ed839c3dae2def2","8de18786ea000fc5fbc7214d571cc7f41d597ee3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","85ca0e073c286ebb2c89364ada6dd2740fc18880","8d15e34266d75e4e8b95da046cd0afc812367b38"],"8de18786ea000fc5fbc7214d571cc7f41d597ee3":["8d15e34266d75e4e8b95da046cd0afc812367b38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85ca0e073c286ebb2c89364ada6dd2740fc18880":["8de18786ea000fc5fbc7214d571cc7f41d597ee3"],"8d15e34266d75e4e8b95da046cd0afc812367b38":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}