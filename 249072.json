{"path":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b512a6470fbb93c320e0cc8519ec0fe94efa13e","date":1337522360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n    if (bytes == 1) {\n      return;\n    }\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n    if (bytes == 1) {\n      return;\n    }\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4583d4aac44f313f9af74ab6d81baab3f976232","date":1352409883,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. \n   *  <p>\n   *  Note: the implementation is thread-safe\n   *  </p>\n   *  @return the pause time in nano seconds \n   * */\n  public abstract long pause(long bytes);\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n    if (bytes == 1) {\n      return;\n    }\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. \n   *  <p>\n   *  Note: the implementation is thread-safe\n   *  </p>\n   *  @return the pause time in nano seconds \n   * */\n  public abstract long pause(long bytes);\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. NOTE: multiple threads\n   *  may safely use this, however the implementation is\n   *  not perfectly thread safe but likely in practice this\n   *  is harmless (just means in some rare cases the rate\n   *  might exceed the target).  It's best to call this\n   *  with a biggish count, not one byte at a time. */\n  public void pause(long bytes) {\n    if (bytes == 1) {\n      return;\n    }\n\n    // TODO: this is purely instantaneous rate; maybe we\n    // should also offer decayed recent history one?\n    final long targetNS = lastNS = lastNS + ((long) (bytes * nsPerByte));\n    long curNS = System.nanoTime();\n    if (lastNS < curNS) {\n      lastNS = curNS;\n    }\n\n    // While loop because Thread.sleep doesn't always sleep\n    // enough:\n    while(true) {\n      final long pauseNS = targetNS - curNS;\n      if (pauseNS > 0) {\n        try {\n          Thread.sleep((int) (pauseNS/1000000), (int) (pauseNS % 1000000));\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n        curNS = System.nanoTime();\n        continue;\n      }\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/RateLimiter#pause(long).mjava","sourceNew":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. \n   *  <p>\n   *  Note: the implementation is thread-safe\n   *  </p>\n   *  @return the pause time in nano seconds \n   * */\n  public abstract long pause(long bytes) throws IOException;\n\n","sourceOld":"  /** Pauses, if necessary, to keep the instantaneous IO\n   *  rate at or below the target. \n   *  <p>\n   *  Note: the implementation is thread-safe\n   *  </p>\n   *  @return the pause time in nano seconds \n   * */\n  public abstract long pause(long bytes);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","e4583d4aac44f313f9af74ab6d81baab3f976232"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["e4583d4aac44f313f9af74ab6d81baab3f976232"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e4583d4aac44f313f9af74ab6d81baab3f976232","407687e67faf6e1f02a211ca078d8e3eed631027"],"e4583d4aac44f313f9af74ab6d81baab3f976232":["407687e67faf6e1f02a211ca078d8e3eed631027","5faf65b6692f15cca0f87bf8666c87899afc619f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4b512a6470fbb93c320e0cc8519ec0fe94efa13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b512a6470fbb93c320e0cc8519ec0fe94efa13e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}