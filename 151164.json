{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(null, docs, PostingsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        DocsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.docs(null, docs, DocsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(null, docs, PostingsEnum.FLAG_NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(null, docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32dded412935340561db8ee7926a48382268f0b6","date":1436254356,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            this.docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","sourceOld":"    public void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      final int maxDoc = reader.maxDoc();\n      Terms terms = reader.terms(field);\n      if (terms != null) {\n        if (setDocsWithField) {\n          final int termsDocCount = terms.getDocCount();\n          assert termsDocCount <= maxDoc;\n          if (termsDocCount == maxDoc) {\n            // Fast case: all docs have this field:\n            this.docsWithField = new Bits.MatchAllBits(maxDoc);\n            setDocsWithField = false;\n          }\n        }\n\n        final TermsEnum termsEnum = termsEnum(terms);\n\n        PostingsEnum docs = null;\n        FixedBitSet docsWithField = null;\n        while(true) {\n          final BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          visitTerm(term);\n          docs = termsEnum.postings(docs, PostingsEnum.NONE);\n          while (true) {\n            final int docID = docs.nextDoc();\n            if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n              break;\n            }\n            visitDoc(docID);\n            if (setDocsWithField) {\n              if (docsWithField == null) {\n                // Lazy init\n                this.docsWithField = docsWithField = new FixedBitSet(maxDoc);\n              }\n              docsWithField.set(docID);\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":["32dded412935340561db8ee7926a48382268f0b6","0f4464508ee83288c8c4585b533f9faaa93aa314","c9fb5f46e264daf5ba3860defe623a89d202dd87","51f5280f31484820499077f41fcdfe92d527d9dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","sourceOld":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","sourceOld":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","sourceOld":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl.Uninvert#uninvert(LeafReader,String,boolean).mjava","sourceNew":null,"sourceOld":"    final void uninvert(LeafReader reader, String field, boolean setDocsWithField) throws IOException {\n      if (points) {\n        uninvertPoints(reader, field, setDocsWithField);\n      } else {\n        uninvertPostings(reader, field, setDocsWithField);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["32dded412935340561db8ee7926a48382268f0b6"],"32dded412935340561db8ee7926a48382268f0b6":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"51f5280f31484820499077f41fcdfe92d527d9dc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["32dded412935340561db8ee7926a48382268f0b6"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"32dded412935340561db8ee7926a48382268f0b6":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["51f5280f31484820499077f41fcdfe92d527d9dc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}