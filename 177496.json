{"path":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testOtherTag().mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/recipe/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}