{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,org.apache.solr.util.CommonParams).mjava","commits":[{"id":"5f0737567c7196b3ba1a359c2bdf103a3984a55e","date":1275089164,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,org.apache.solr.util.CommonParams).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,CommonParams).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @deprecated Use doStandardDebug(SolrQueryRequest,String,Query,DocList) with setDefaults\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results,\n                                          org.apache.solr.util.CommonParams params)\n    throws IOException {\n        \n    String debug = getParam(req, CommonParams.DEBUG_QUERY, params.debugQuery);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @deprecated Use doStandardDebug(SolrQueryRequest,String,Query,DocList) with setDefaults\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results,\n                                          CommonParams params)\n    throws IOException {\n        \n    String debug = getParam(req, org.apache.solr.common.params.CommonParams.DEBUG_QUERY, params.debugQuery);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd00dd91853514614379b0e680d65bd19cac0f30","date":1283087816,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,org.apache.solr.util.CommonParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @deprecated Use doStandardDebug(SolrQueryRequest,String,Query,DocList) with setDefaults\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results,\n                                          org.apache.solr.util.CommonParams params)\n    throws IOException {\n        \n    String debug = getParam(req, CommonParams.DEBUG_QUERY, params.debugQuery);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#doStandardDebug(SolrQueryRequest,String,Query,DocList,org.apache.solr.util.CommonParams).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Returns a NamedList containing many \"standard\" pieces of debugging\n   * information.\n   * </p>\n   *\n   * <ul>\n   * <li>rawquerystring - the 'q' param exactly as specified by the client\n   * </li>\n   * <li>querystring - the 'q' param after any preprocessing done by the plugin\n   * </li>\n   * <li>parsedquery - the main query executed formated by the Solr\n   *     QueryParsing utils class (which knows about field types)\n   * </li>\n   * <li>parsedquery_toString - the main query executed formated by it's\n   *     own toString method (in case it has internal state Solr\n   *     doesn't know about)\n   * </li>\n   * <li>expain - the list of score explanations for each document in\n   *     results against query.\n   * </li>\n   * <li>otherQuery - the query string specified in 'explainOther' query param.\n   * </li>\n   * <li>explainOther - the list of score explanations for each document in\n   *     results against 'otherQuery'\n   * </li>\n   * </ul>\n   *\n   * @param req the request we are dealing with\n   * @param userQuery the users query as a string, after any basic\n   *                  preprocessing has been done\n   * @param query the query built from the userQuery\n   *              (and perhaps other clauses) that identifies the main\n   *              result set of the response.\n   * @param results the main result set of the response\n   * @deprecated Use doStandardDebug(SolrQueryRequest,String,Query,DocList) with setDefaults\n   */\n  public static NamedList doStandardDebug(SolrQueryRequest req,\n                                          String userQuery,\n                                          Query query,\n                                          DocList results,\n                                          org.apache.solr.util.CommonParams params)\n    throws IOException {\n        \n    String debug = getParam(req, CommonParams.DEBUG_QUERY, params.debugQuery);\n\n    NamedList dbg = null;\n    if (debug!=null) {\n      dbg = new SimpleOrderedMap();\n\n      /* userQuery may have been pre-processes .. expose that */\n      dbg.add(\"rawquerystring\", req.getQueryString());\n      dbg.add(\"querystring\", userQuery);\n\n      /* QueryParsing.toString isn't perfect, use it to see converted\n       * values, use regular toString to see any attributes of the\n       * underlying Query it may have missed.\n       */\n      dbg.add(\"parsedquery\",QueryParsing.toString(query, req.getSchema()));\n      dbg.add(\"parsedquery_toString\", query.toString());\n            \n      dbg.add(\"explain\", getExplainList\n              (query, results, req.getSearcher(), req.getSchema()));\n      String otherQueryS = req.getParam(\"explainOther\");\n      if (otherQueryS != null && otherQueryS.length() > 0) {\n        DocList otherResults = doSimpleQuery\n          (otherQueryS,req.getSearcher(), req.getSchema(),0,10);\n        dbg.add(\"otherQuery\",otherQueryS);\n        dbg.add(\"explainOther\", getExplainList\n                (query, otherResults,\n                 req.getSearcher(),\n                 req.getSchema()));\n      }\n    }\n\n    return dbg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f0737567c7196b3ba1a359c2bdf103a3984a55e","cd00dd91853514614379b0e680d65bd19cac0f30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd00dd91853514614379b0e680d65bd19cac0f30"],"cd00dd91853514614379b0e680d65bd19cac0f30":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f0737567c7196b3ba1a359c2bdf103a3984a55e"],"5f0737567c7196b3ba1a359c2bdf103a3984a55e":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd00dd91853514614379b0e680d65bd19cac0f30"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd00dd91853514614379b0e680d65bd19cac0f30":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}