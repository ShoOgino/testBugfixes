{"path":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","commits":[{"id":"670790244f2adfdb58f01504d15f206d742ad837","date":1286643229,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = new IndexSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = new IndexSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = new IndexSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = new IndexSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = new IndexSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    searcher.close();\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery#testTieBreaker().mjava","sourceNew":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","sourceOld":"  /** \n   * MultiTermQuery provides (via attribute) information about which values\n   * must be competitive to enter the priority queue. \n   * \n   * FuzzyQuery optimizes itself around this information, if the attribute\n   * is not implemented correctly, there will be problems!\n   */\n  public void testTieBreaker() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    addDoc(\"a123456\", writer);\n    addDoc(\"c123456\", writer);\n    addDoc(\"d123456\", writer);\n    addDoc(\"e123456\", writer);\n    \n    Directory directory2 = newDirectory();\n    RandomIndexWriter writer2 = new RandomIndexWriter(random, directory2);\n    addDoc(\"a123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"b123456\", writer2);\n    addDoc(\"c123456\", writer2);\n    addDoc(\"f123456\", writer2);\n    \n    IndexReader ir1 = writer.getReader();\n    IndexReader ir2 = writer2.getReader();\n    \n    MultiReader mr = new MultiReader(ir1, ir2);\n    IndexSearcher searcher = newSearcher(mr);\n    FuzzyQuery fq = new FuzzyQuery(new Term(\"field\", \"z123456\"), 1f, 0, 2);\n    TopDocs docs = searcher.search(fq, 2);\n    assertEquals(5, docs.totalHits); // 5 docs, from the a and b's\n    mr.close();\n    ir1.close();\n    ir2.close();\n    writer.close();\n    writer2.close();\n    directory.close();\n    directory2.close(); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["670790244f2adfdb58f01504d15f206d742ad837"],"670790244f2adfdb58f01504d15f206d742ad837":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["790e1fde4caa765b3faaad3fbcd25c6973450336","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["670790244f2adfdb58f01504d15f206d742ad837","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","670790244f2adfdb58f01504d15f206d742ad837"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"790e1fde4caa765b3faaad3fbcd25c6973450336":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"670790244f2adfdb58f01504d15f206d742ad837":["790e1fde4caa765b3faaad3fbcd25c6973450336","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["670790244f2adfdb58f01504d15f206d742ad837","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}