{"path":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","commits":[{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)SolrConfig.config.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","sourceNew":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)SolrConfig.config.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7","date":1189312484,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","sourceNew":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    final SolrCore thiscore = this;\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( thiscore, node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( solrConfig, nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( thiscore, null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","sourceNew":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    final SolrCore thiscore = this;\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( thiscore, node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( solrConfig.getResourceLoader(), nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( thiscore, null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","sourceOld":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    final SolrCore thiscore = this;\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( thiscore, node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( solrConfig, nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( thiscore, null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d656bfb8102419b4568f368a9606efc4f059912e","date":1217031644,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/core/SolrCore#loadUpdateProcessors().mjava","sourceNew":null,"sourceOld":"  /**\n   * Load the request processors configured in solrconfig.xml\n   */\n  private Map<String, UpdateRequestProcessorFactory> loadUpdateProcessors() {\n    final Map<String,UpdateRequestProcessorFactory> map = new HashMap<String, UpdateRequestProcessorFactory>();\n    \n    // If this is a more general use-case, this could be a regular type\n    final SolrCore thiscore = this;\n    AbstractPluginLoader<UpdateRequestProcessorFactory> loader \n      = new AbstractPluginLoader<UpdateRequestProcessorFactory>( \"updateRequestProcessor\" ) {\n\n      @Override\n      protected void init(UpdateRequestProcessorFactory plugin, Node node) throws Exception {\n        plugin.init( thiscore, node );\n      }\n\n      @Override\n      protected UpdateRequestProcessorFactory register(String name, UpdateRequestProcessorFactory plugin) throws Exception {\n        return map.put( name, plugin );\n      }\n    };\n\n    NodeList nodes = (NodeList)solrConfig.evaluate(\"updateRequestProcessor/factory\", XPathConstants.NODESET);\n    UpdateRequestProcessorFactory def = loader.load( solrConfig.getResourceLoader(), nodes ); \n    if( def == null ) {\n      def = new ChainedUpdateProcessorFactory(); // the default\n      def.init( thiscore, null );\n    }\n    map.put( null, def );\n    map.put( \"\", def );\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["6589002090bd74db749eef5befe2f447c0e3dd49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d656bfb8102419b4568f368a9606efc4f059912e":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6589002090bd74db749eef5befe2f447c0e3dd49"],"6589002090bd74db749eef5befe2f447c0e3dd49":["6d6338c87060be5f66757a94945975f3bbd377a9"],"d656bfb8102419b4568f368a9606efc4f059912e":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["d656bfb8102419b4568f368a9606efc4f059912e"],"94fdcbef0182cbb32b3519de6a3d7d4d7bcb11d7":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d656bfb8102419b4568f368a9606efc4f059912e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}