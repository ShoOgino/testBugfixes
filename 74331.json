{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","commits":[{"id":"e268f08b3f32b86396577dee4e99e0384af9fd70","date":1236792757,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      writer.commit(\"\"+i);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      writer.commit(\"\"+(4+i));\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final String s = commit.getUserData();\n      final int v;\n      if (s == null) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s);\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      writer.commit(\"\"+i);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      writer.commit(\"\"+(4+i));\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final String s = commit.getUserData();\n      final int v;\n      if (s == null) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s);\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map data = new HashMap();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map data = new HashMap();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Iterator it = IndexReader.listCommits(dir).iterator();\n    while(it.hasNext()) {\n      IndexCommit commit = (IndexCommit) it.next();\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt((String) s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testReopenOnCommit().mjava","sourceNew":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testReopenOnCommit() throws Throwable {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(new KeepAllCommits()));\n    for(int i=0;i<4;i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", \"\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", i+\"\");\n      writer.commit(data);\n    }\n    for(int i=0;i<4;i++) {\n      writer.deleteDocuments(new Term(\"id\", \"\"+i));\n      Map<String,String> data = new HashMap<String,String>();\n      data.put(\"index\", (4+i)+\"\");\n      writer.commit(data);\n    }\n    writer.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    assertEquals(0, r.numDocs());\n    assertEquals(4, r.maxDoc());\n\n    Collection<IndexCommit> commits = IndexReader.listCommits(dir);\n    for (final IndexCommit commit : commits) {\n      IndexReader r2 = r.reopen(commit);\n      assertTrue(r2 != r);\n\n      // Reader should be readOnly\n      try {\n        r2.deleteDocument(0);\n        fail(\"no exception hit\");\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      final Map<String,String> s = commit.getUserData();\n      final int v;\n      if (s.size() == 0) {\n        // First commit created by IW\n        v = -1;\n      } else {\n        v = Integer.parseInt(s.get(\"index\"));\n      }\n      if (v < 4) {\n        assertEquals(1+v, r2.numDocs());\n      } else {\n        assertEquals(7-v, r2.numDocs());\n      }\n      r.close();\n      r = r2;\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["d3ab91f3bb602daf6393fa7f78b11afd3400d669","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e268f08b3f32b86396577dee4e99e0384af9fd70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["e268f08b3f32b86396577dee4e99e0384af9fd70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e268f08b3f32b86396577dee4e99e0384af9fd70":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e268f08b3f32b86396577dee4e99e0384af9fd70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}