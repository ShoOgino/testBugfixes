{"path":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","commits":[{"id":"8e191901ff30c9f34f5e72d2e7b6f6c975eb9b4e","date":1186612004,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"/dev/null","sourceNew":"    public void testNumeric() throws Exception {\n\t// floating point, serial, model numbers, ip addresses, etc.\n\t// every other segment must have at least one digit\n\tassertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n\tassertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n\tassertAnalyzesTo(a, \"216.239.63.104\",   new String[]{\"216.239.63.104\"});\n\tassertAnalyzesTo(a, \"1-2-3\",   new String[]{\"1-2-3\"});\n\tassertAnalyzesTo(a, \"a1-b2-c3\",   new String[]{\"a1-b2-c3\"});\n\tassertAnalyzesTo(a, \"a1-b-c3\",   new String[]{\"a1-b-c3\"});\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29189b79757c6eaf9bf3236db39656fbd2a43827","date":1198267704,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","sourceNew":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"}, new String[]{\"<NUM>\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","sourceOld":"    public void testNumeric() throws Exception {\n\t// floating point, serial, model numbers, ip addresses, etc.\n\t// every other segment must have at least one digit\n\tassertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n\tassertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n\tassertAnalyzesTo(a, \"216.239.63.104\",   new String[]{\"216.239.63.104\"});\n\tassertAnalyzesTo(a, \"1-2-3\",   new String[]{\"1-2-3\"});\n\tassertAnalyzesTo(a, \"a1-b2-c3\",   new String[]{\"a1-b2-c3\"});\n\tassertAnalyzesTo(a, \"a1-b-c3\",   new String[]{\"a1-b-c3\"});\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dc8095dc7b1ad6aca3955dd0d4bc9e98ea0fc70","date":1198269935,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","sourceNew":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","sourceOld":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"}, new String[]{\"<NUM>\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestStandardAnalyzer#testNumeric().mjava","sourceNew":null,"sourceOld":"  public void testNumeric() throws Exception {\n    // floating point, serial, model numbers, ip addresses, etc.\n    // every other segment must have at least one digit\n    assertAnalyzesTo(a, \"21.35\", new String[]{\"21.35\"});\n    assertAnalyzesTo(a, \"R2D2 C3PO\", new String[]{\"r2d2\", \"c3po\"});\n    assertAnalyzesTo(a, \"216.239.63.104\", new String[]{\"216.239.63.104\"});\n    assertAnalyzesTo(a, \"1-2-3\", new String[]{\"1-2-3\"});\n    assertAnalyzesTo(a, \"a1-b2-c3\", new String[]{\"a1-b2-c3\"});\n    assertAnalyzesTo(a, \"a1-b-c3\", new String[]{\"a1-b-c3\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29189b79757c6eaf9bf3236db39656fbd2a43827":["8e191901ff30c9f34f5e72d2e7b6f6c975eb9b4e"],"0dc8095dc7b1ad6aca3955dd0d4bc9e98ea0fc70":["29189b79757c6eaf9bf3236db39656fbd2a43827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e191901ff30c9f34f5e72d2e7b6f6c975eb9b4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0dc8095dc7b1ad6aca3955dd0d4bc9e98ea0fc70"]},"commit2Childs":{"29189b79757c6eaf9bf3236db39656fbd2a43827":["0dc8095dc7b1ad6aca3955dd0d4bc9e98ea0fc70"],"0dc8095dc7b1ad6aca3955dd0d4bc9e98ea0fc70":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8e191901ff30c9f34f5e72d2e7b6f6c975eb9b4e"],"8e191901ff30c9f34f5e72d2e7b6f6c975eb9b4e":["29189b79757c6eaf9bf3236db39656fbd2a43827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}