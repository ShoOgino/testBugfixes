{"path":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testMultiValuedDateRanges().mjava","commits":[{"id":"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef","date":1407258295,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DateRangeFieldTest#testMultiValuedDateRanges().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiValuedDateRanges() {\n    assertU(delQ(\"*:*\"));\n    assertU(adoc(\"id\", \"0\", \"dateRange\", \"[2000 TO 2010]\", \"dateRange\", \"[2011 TO 2014]\"));\n    assertU(adoc(\"id\", \"1\", \"dateRange\", \"[2000-01 TO 2010-10]\", \"dateRange\", \"[2010-11 TO 2014-12]\"));\n    assertU(adoc(\"id\", \"2\", \"dateRange\", \"[2000-01-01 TO 2010-08-01]\", \"dateRange\", \"[2010-08-01 TO 2014-12-01]\"));\n    assertU(adoc(\"id\", \"3\", \"dateRange\", \"[1990 TO 1995]\", \"dateRange\", \"[1997 TO 1999]\"));\n    assertU(commit());\n\n    String[] commonParams = {\"q\", \"{!field f=dateRange op=$op v=$qq}\", \"sort\", \"id asc\"};\n\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2014]\", \"op\", \"IsWithin\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2013]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2014]\", \"op\", \"Contains\"), xpathMatches(0, 1));\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2015]\", \"op\", \"Contains\"), xpathMatches());\n\n    assertQ(req(commonParams, \"qq\", \"[2000-01 TO 2014-12]\", \"op\", \"IsWithin\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2014-11]\", \"op\", \"IsWithin\"), xpathMatches());\n    assertQ(req(commonParams, \"qq\", \"[2000-01 TO 2014-12]\", \"op\", \"Contains\"), xpathMatches(0, 1));\n\n    assertQ(req(commonParams, \"qq\", \"[2000-01-01 TO 2014-12-31]\", \"op\", \"IsWithin\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"[2000-01-01 TO 2014-12-01]\", \"op\", \"Contains\"), xpathMatches(0, 1, 2));\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2000]\", \"op\", \"Contains\"), xpathMatches(0, 1, 2));\n\n    assertQ(req(commonParams, \"qq\", \"[2000 TO 2000]\", \"op\", \"Contains\"), xpathMatches(0, 1, 2));\n\n    assertQ(req(commonParams, \"qq\", \"[1996-01-01 TO 1996-12-31]\", \"op\", \"Contains\"), xpathMatches());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cc041a5200818c3e7a1b3b4feb0f649c595f8ef"]},"commit2Childs":{"8cc041a5200818c3e7a1b3b4feb0f649c595f8ef":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cc041a5200818c3e7a1b3b4feb0f649c595f8ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}