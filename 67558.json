{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLocalFSCloudBackupRestore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestLocalFSCloudBackupRestore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab6131420a270c49b653c969cc1dbbaf7d1b36e7","date":1550697886,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .addConfig(\"confFaulty\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + \"confFaulty\" + Path.SEPARATOR + \"solrconfig.xml\", -1, true);\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e0874ad402c6721aa4fd13232f38ff0be227c6b","date":1563703488,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML;\n    String poisioned = \n        \"    <repository  name=\\\"\"+TestLocalFSCloudBackupRestore.poisioned+\"\\\" default=\\\"true\\\" \"\n        + \"class=\\\"org.apache.solr.cloud.api.collections.TestLocalFSCloudBackupRestore$PoinsionedRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    String local = \n        \"    <repository  name=\\\"local\\\" \"\n        + \"class=\\\"org.apache.solr.core.backup.repository.LocalFileSystemRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    solrXml = solrXml.replace(\"</solr>\",\n        \"<backup>\" + (random().nextBoolean() ? poisioned+local: local+poisioned)\n        + \"</backup>\"+ \"</solr>\");\n    \n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .addConfig(\"confFaulty\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .withSolrXml(solrXml)\n        .configure();\n    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + \"confFaulty\" + Path.SEPARATOR + \"solrconfig.xml\", -1, true);\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .addConfig(\"confFaulty\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + \"confFaulty\" + Path.SEPARATOR + \"solrconfig.xml\", -1, true);\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestLocalFSCloudBackupRestore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML;\n    String poisioned = \n        \"    <repository  name=\\\"\"+TestLocalFSCloudBackupRestore.poisioned+\"\\\" default=\\\"true\\\" \"\n        + \"class=\\\"org.apache.solr.cloud.api.collections.TestLocalFSCloudBackupRestore$PoinsionedRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    String local = \n        \"    <repository  name=\\\"local\\\" \"\n        + \"class=\\\"org.apache.solr.core.backup.repository.LocalFileSystemRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    solrXml = solrXml.replace(\"</solr>\",\n        \"<backup>\" + (random().nextBoolean() ? poisioned+local: local+poisioned)\n        + \"</backup>\"+ \"</solr>\");\n    \n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .addConfig(\"confFaulty\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .withSolrXml(solrXml)\n        .configure();\n    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + \"/\" + \"confFaulty\" + \"/\" + \"solrconfig.xml\", -1, true);\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML;\n    String poisioned = \n        \"    <repository  name=\\\"\"+TestLocalFSCloudBackupRestore.poisioned+\"\\\" default=\\\"true\\\" \"\n        + \"class=\\\"org.apache.solr.cloud.api.collections.TestLocalFSCloudBackupRestore$PoinsionedRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    String local = \n        \"    <repository  name=\\\"local\\\" \"\n        + \"class=\\\"org.apache.solr.core.backup.repository.LocalFileSystemRepository\\\"> \\n\" +\n        \"    </repository>\\n\";\n    solrXml = solrXml.replace(\"</solr>\",\n        \"<backup>\" + (random().nextBoolean() ? poisioned+local: local+poisioned)\n        + \"</backup>\"+ \"</solr>\");\n    \n    configureCluster(NUM_SHARDS)// nodes\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .addConfig(\"confFaulty\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .withSolrXml(solrXml)\n        .configure();\n    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + Path.SEPARATOR + \"confFaulty\" + Path.SEPARATOR + \"solrconfig.xml\", -1, true);\n\n    boolean whitespacesInPath = random().nextBoolean();\n    if (whitespacesInPath) {\n      backupLocation = createTempDir(\"my backup\").toAbsolutePath().toString();\n    } else {\n      backupLocation = createTempDir(\"mybackup\").toAbsolutePath().toString();\n    }\n  }\n\n","bugFix":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["2e0874ad402c6721aa4fd13232f38ff0be227c6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e0874ad402c6721aa4fd13232f38ff0be227c6b":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"]},"commit2Childs":{"ab6131420a270c49b653c969cc1dbbaf7d1b36e7":["2e0874ad402c6721aa4fd13232f38ff0be227c6b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"2e0874ad402c6721aa4fd13232f38ff0be227c6b":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}