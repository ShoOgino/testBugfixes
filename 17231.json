{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testFragmentAlignmentConstructor().mjava","commits":[{"id":"9ab9796b8ce55058e483d2f195ac9b1942fcf478","date":1577858220,"type":0,"author":"Nándor Mátravölgyi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testFragmentAlignmentConstructor().mjava","pathOld":"/dev/null","sourceNew":"  public void testFragmentAlignmentConstructor() throws IOException {\n    BreakIterator baseBI = new CustomSeparatorBreakIterator('.');\n    // test fragmentAlignment validation\n    float[] valid_aligns = {0.f, 0.3333f, 0.5f, 0.99f, 1.f};\n    for (float alignment : valid_aligns) {\n      LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);\n    }\n    float[] invalid_aligns = {-0.01f, -1.f, 1.5f, Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY};\n    for (float alignment : invalid_aligns) {\n      expectThrows(IllegalArgumentException.class, () -> {\n        LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);\n      });\n    }\n    // test backwards compatibility constructors\n    String backwardCompString = LengthGoalBreakIterator.createClosestToLength(baseBI, 50).toString();\n    assertTrue(backwardCompString, backwardCompString.contains(\"fragAlign=0.0\"));\n    backwardCompString = LengthGoalBreakIterator.createMinLength(baseBI, 50).toString();\n    assertTrue(backwardCompString, backwardCompString.contains(\"fragAlign=0.0\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c606b777c4250f3f3f6f66d659c7c4c403679b71","date":1577958559,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest#testFragmentAlignmentConstructor().mjava","pathOld":"/dev/null","sourceNew":"  public void testFragmentAlignmentConstructor() throws IOException {\n    BreakIterator baseBI = new CustomSeparatorBreakIterator('.');\n    // test fragmentAlignment validation\n    float[] valid_aligns = {0.f, 0.3333f, 0.5f, 0.99f, 1.f};\n    for (float alignment : valid_aligns) {\n      LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);\n    }\n    float[] invalid_aligns = {-0.01f, -1.f, 1.5f, Float.NaN, Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY};\n    for (float alignment : invalid_aligns) {\n      expectThrows(IllegalArgumentException.class, () -> {\n        LengthGoalBreakIterator.createClosestToLength(baseBI, 50, alignment);\n      });\n    }\n    // test backwards compatibility constructors\n    String backwardCompString = LengthGoalBreakIterator.createClosestToLength(baseBI, 50).toString();\n    assertTrue(backwardCompString, backwardCompString.contains(\"fragAlign=0.0\"));\n    backwardCompString = LengthGoalBreakIterator.createMinLength(baseBI, 50).toString();\n    assertTrue(backwardCompString, backwardCompString.contains(\"fragAlign=0.0\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9ab9796b8ce55058e483d2f195ac9b1942fcf478"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ab9796b8ce55058e483d2f195ac9b1942fcf478"]},"commit2Childs":{"9ab9796b8ce55058e483d2f195ac9b1942fcf478":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c606b777c4250f3f3f6f66d659c7c4c403679b71":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab9796b8ce55058e483d2f195ac9b1942fcf478","c606b777c4250f3f3f6f66d659c7c4c403679b71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c606b777c4250f3f3f6f66d659c7c4c403679b71","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}