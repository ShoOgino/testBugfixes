{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initChildrenSiblings(ParallelTaxonomyArrays).mjava","commits":[{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initChildrenSiblings(ParallelTaxonomyArrays).mjava","pathOld":"/dev/null","sourceNew":"  private final synchronized void initChildrenSiblings(ParallelTaxonomyArrays copyFrom) {\n    if (!initializedChildren) { // must do this check !\n      children = new int[parents.length];\n      siblings = new int[parents.length];\n      if (copyFrom != null) {\n        // called from the ctor, after we know copyFrom has initialized children/siblings\n        System.arraycopy(copyFrom.children(), 0, children, 0, copyFrom.children().length);\n        System.arraycopy(copyFrom.siblings(), 0, siblings, 0, copyFrom.siblings().length);\n      }\n      computeChildrenSiblings(parents, 0);\n      initializedChildren = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initChildrenSiblings(ParallelTaxonomyArrays).mjava","pathOld":"/dev/null","sourceNew":"  private final synchronized void initChildrenSiblings(ParallelTaxonomyArrays copyFrom) {\n    if (!initializedChildren) { // must do this check !\n      children = new int[parents.length];\n      siblings = new int[parents.length];\n      if (copyFrom != null) {\n        // called from the ctor, after we know copyFrom has initialized children/siblings\n        System.arraycopy(copyFrom.children(), 0, children, 0, copyFrom.children().length);\n        System.arraycopy(copyFrom.siblings(), 0, siblings, 0, copyFrom.siblings().length);\n      }\n      computeChildrenSiblings(parents, 0);\n      initializedChildren = true;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2ae7e371df56ccde467b71db7e82066f05a5972","date":1363620258,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#initChildrenSiblings(TaxonomyIndexArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#initChildrenSiblings(ParallelTaxonomyArrays).mjava","sourceNew":"  private final synchronized void initChildrenSiblings(TaxonomyIndexArrays copyFrom) {\n    if (!initializedChildren) { // must do this check !\n      children = new int[parents.length];\n      siblings = new int[parents.length];\n      if (copyFrom != null) {\n        // called from the ctor, after we know copyFrom has initialized children/siblings\n        System.arraycopy(copyFrom.children(), 0, children, 0, copyFrom.children().length);\n        System.arraycopy(copyFrom.siblings(), 0, siblings, 0, copyFrom.siblings().length);\n      }\n      computeChildrenSiblings(parents, 0);\n      initializedChildren = true;\n    }\n  }\n\n","sourceOld":"  private final synchronized void initChildrenSiblings(ParallelTaxonomyArrays copyFrom) {\n    if (!initializedChildren) { // must do this check !\n      children = new int[parents.length];\n      siblings = new int[parents.length];\n      if (copyFrom != null) {\n        // called from the ctor, after we know copyFrom has initialized children/siblings\n        System.arraycopy(copyFrom.children(), 0, children, 0, copyFrom.children().length);\n        System.arraycopy(copyFrom.siblings(), 0, siblings, 0, copyFrom.siblings().length);\n      }\n      computeChildrenSiblings(parents, 0);\n      initializedChildren = true;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d58d08788c3fd51172ba34474cca42499d6391b"],"3d58d08788c3fd51172ba34474cca42499d6391b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2ae7e371df56ccde467b71db7e82066f05a5972"]},"commit2Childs":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["f2ae7e371df56ccde467b71db7e82066f05a5972","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}