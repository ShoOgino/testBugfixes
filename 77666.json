{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#extend(IntervalsSource,int,int).mjava","commits":[{"id":"f272fe1542bca669076ff8ed44b298b316ab4aa5","date":1546365319,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#extend(IntervalsSource,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create an {@link IntervalsSource} that wraps another source, extending its\n   * intervals by a number of positions before and after.\n   *\n   * This can be useful for adding defined gaps in a block query; for example,\n   * to find 'a b [2 arbitrary terms] c', you can call:\n   * <pre>\n   *   Intervals.phrase(Intervals.term(\"a\"), Intervals.extend(Intervals.term(\"b\"), 0, 2), Intervals.term(\"c\"));\n   * </pre>\n   *\n   * Note that calling {@link IntervalIterator#gaps()} on iterators returned by this source\n   * delegates directly to the wrapped iterator, and does not include the extensions.\n   *\n   * @param source the source to extend\n   * @param before how many positions to extend before the delegated interval\n   * @param after  how many positions to extend after the delegated interval\n   */\n  public static IntervalsSource extend(IntervalsSource source, int before, int after) {\n    return new ExtendedIntervalsSource(source, before, after);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#extend(IntervalsSource,int,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Intervals#extend(IntervalsSource,int,int).mjava","sourceNew":"  /**\n   * Create an {@link IntervalsSource} that wraps another source, extending its\n   * intervals by a number of positions before and after.\n   *\n   * This can be useful for adding defined gaps in a block query; for example,\n   * to find 'a b [2 arbitrary terms] c', you can call:\n   * <pre>\n   *   Intervals.phrase(Intervals.term(\"a\"), Intervals.extend(Intervals.term(\"b\"), 0, 2), Intervals.term(\"c\"));\n   * </pre>\n   *\n   * Note that calling {@link IntervalIterator#gaps()} on iterators returned by this source\n   * delegates directly to the wrapped iterator, and does not include the extensions.\n   *\n   * @param source the source to extend\n   * @param before how many positions to extend before the delegated interval\n   * @param after  how many positions to extend after the delegated interval\n   */\n  public static IntervalsSource extend(IntervalsSource source, int before, int after) {\n    return new ExtendedIntervalsSource(source, before, after);\n  }\n\n","sourceOld":"  /**\n   * Create an {@link IntervalsSource} that wraps another source, extending its\n   * intervals by a number of positions before and after.\n   *\n   * This can be useful for adding defined gaps in a block query; for example,\n   * to find 'a b [2 arbitrary terms] c', you can call:\n   * <pre>\n   *   Intervals.phrase(Intervals.term(\"a\"), Intervals.extend(Intervals.term(\"b\"), 0, 2), Intervals.term(\"c\"));\n   * </pre>\n   *\n   * Note that calling {@link IntervalIterator#gaps()} on iterators returned by this source\n   * delegates directly to the wrapped iterator, and does not include the extensions.\n   *\n   * @param source the source to extend\n   * @param before how many positions to extend before the delegated interval\n   * @param after  how many positions to extend after the delegated interval\n   */\n  public static IntervalsSource extend(IntervalsSource source, int before, int after) {\n    return new ExtendedIntervalsSource(source, before, after);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}