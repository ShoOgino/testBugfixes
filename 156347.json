{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25d862725cffd5d4d62fd002b5dc320f92c53365","date":1534448650,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testListeners().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testListeners().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testListeners() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'test1','class':'\" + TestDummyAction.class.getName() + \"'},\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test', 'test1'],\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand1 = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'bar',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['FAILED','SUCCEEDED'],\" +\n        \"'beforeAction' : ['test', 'test1'],\" +\n        \"'afterAction' : 'test',\" +\n        \"'class' : '\" + TestTriggerListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    listenerEvents.clear();\n    failDummyAction = false;\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n\n    assertEquals(\"both listeners should have fired\", 2, listenerEvents.size());\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    List<CapturedEvent> testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 5, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(4).stage);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.SUCCEEDED, testEvents.get(3).stage);\n\n    // check global ordering of events (SOLR-12668)\n    int fooIdx = -1;\n    int barIdx = -1;\n    for (int i = 0; i < allListenerEvents.size(); i++) {\n      CapturedEvent ev = allListenerEvents.get(i);\n      if (ev.stage == TriggerEventProcessorStage.BEFORE_ACTION && ev.actionName.equals(\"test\")) {\n        if (ev.config.name.equals(\"foo\")) {\n          fooIdx = i;\n        } else if (ev.config.name.equals(\"bar\")) {\n          barIdx = i;\n        }\n      }\n    }\n    assertTrue(\"fooIdx not found\", fooIdx != -1);\n    assertTrue(\"barIdx not found\", barIdx != -1);\n    assertTrue(\"foo fired later than bar: fooIdx=\" + fooIdx + \", barIdx=\" + barIdx, fooIdx < barIdx);\n\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    listenerEvents.clear();\n    failDummyAction = true;\n\n    newNode = cluster.simAddNode();\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    cluster.getTimeSource().sleep(2000);\n\n    // check foo events\n    testEvents = listenerEvents.get(\"foo\");\n    assertNotNull(\"foo events: \" + testEvents, testEvents);\n    assertEquals(\"foo events: \" + testEvents, 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.STARTED, testEvents.get(0).stage);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n\n    // check bar events\n    testEvents = listenerEvents.get(\"bar\");\n    assertNotNull(\"bar events\", testEvents);\n    assertEquals(\"bar events\", 4, testEvents.size());\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(0).stage);\n    assertEquals(\"test\", testEvents.get(0).actionName);\n\n    assertEquals(TriggerEventProcessorStage.AFTER_ACTION, testEvents.get(1).stage);\n    assertEquals(\"test\", testEvents.get(1).actionName);\n\n    assertEquals(TriggerEventProcessorStage.BEFORE_ACTION, testEvents.get(2).stage);\n    assertEquals(\"test1\", testEvents.get(2).actionName);\n\n    assertEquals(TriggerEventProcessorStage.FAILED, testEvents.get(3).stage);\n    assertEquals(\"test1\", testEvents.get(3).actionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["25d862725cffd5d4d62fd002b5dc320f92c53365"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"25d862725cffd5d4d62fd002b5dc320f92c53365":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}