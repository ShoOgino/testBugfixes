{"path":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","commits":[{"id":"0caf86b778fe22b63626ba65f24f7b69c5c5b384","date":1432213473,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          PerSegCacheKey key = new PerSegCacheKey(readerContext.reader().getCoreCacheKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32b9119890a8e82252b6cc341ac491d18fa1e49b","date":1498575219,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public ShapeValues getValues(LeafReaderContext readerContext) throws IOException {\n      final ShapeValues targetFuncValues = targetValueSource.getValues(readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new ShapeValues() {\n        int docId = -1;\n\n        @Override\n        public Shape value() throws IOException {\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), docId);\n          Shape shape = cache.get(key);\n          if (shape == null) {\n            shape = targetFuncValues.value();\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n          return shape;\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          this.docId = doc;\n          return targetFuncValues.advanceExact(doc);\n        }\n\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":"    @Override\n    public ShapeValues getValues(LeafReaderContext readerContext) throws IOException {\n      final ShapeValues targetFuncValues = targetValueSource.getValues(readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new ShapeValues() {\n        int docId = -1;\n\n        @Override\n        public Shape value() throws IOException {\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), docId);\n          Shape shape = cache.get(key);\n          if (shape == null) {\n            shape = targetFuncValues.value();\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n          return shape;\n        }\n\n        @Override\n        public boolean advanceExact(int doc) throws IOException {\n          this.docId = doc;\n          return targetFuncValues.advanceExact(doc);\n        }\n\n      };\n\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/RptWithGeometrySpatialField.CachingShapeValuesource#getValues(Map,LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n      final FunctionValues targetFuncValues = targetValueSource.getValues(context, readerContext);\n      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.\n      final SolrCache<PerSegCacheKey,Shape> cache =\n          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);\n      if (cache == null) {\n        return targetFuncValues; // no caching; no configured cache\n      }\n\n      return new FunctionValues() {\n        int docId = -1;\n        Shape shape = null;\n\n        private void setShapeFromDoc(int doc) throws IOException {\n          if (docId == doc) {\n            return;\n          }\n          docId = doc;\n          //lookup in cache\n          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();\n          if (cacheHelper == null) {\n            throw new IllegalStateException(\"Leaf \" + readerContext.reader() + \" is not suited for caching\");\n          }\n          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), doc);\n          shape = cache.get(key);\n          if (shape == null) {\n            shape = (Shape) targetFuncValues.objectVal(doc);\n            if (shape != null) {\n              cache.put(key, shape);\n            }\n          } else {\n            //optimize shape on a cache hit if possible. This must be thread-safe and it is.\n            if (shape instanceof JtsGeometry) {\n              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast\n            }\n          }\n        }\n\n        // Use the cache for exists & objectVal;\n\n        @Override\n        public boolean exists(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape != null;\n        }\n\n        @Override\n        public Object objectVal(int doc) throws IOException {\n          setShapeFromDoc(doc);\n          return shape;\n        }\n\n        @Override\n        public Explanation explain(int doc) throws IOException {\n          return targetFuncValues.explain(doc);\n        }\n\n        @Override\n        public String toString(int doc) throws IOException {\n          return targetFuncValues.toString(doc);\n        }\n      };\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["d211216c83f01894810543d1c107160a9ae3650b"],"d211216c83f01894810543d1c107160a9ae3650b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0caf86b778fe22b63626ba65f24f7b69c5c5b384","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d211216c83f01894810543d1c107160a9ae3650b","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["d211216c83f01894810543d1c107160a9ae3650b","32b9119890a8e82252b6cc341ac491d18fa1e49b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0caf86b778fe22b63626ba65f24f7b69c5c5b384","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"32b9119890a8e82252b6cc341ac491d18fa1e49b":["28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"d211216c83f01894810543d1c107160a9ae3650b":["32b9119890a8e82252b6cc341ac491d18fa1e49b","28288370235ed02234a64753cdbf0c6ec096304a","98f11c416d30e556e0004a9a84960702d12d35b1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d211216c83f01894810543d1c107160a9ae3650b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0caf86b778fe22b63626ba65f24f7b69c5c5b384"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0caf86b778fe22b63626ba65f24f7b69c5c5b384":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}