{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    final int[] termIDs = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      final char[] text2 = charBuffers[postings.textStarts[termID] >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = postings.textStarts[termID] & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n\n    final RawPostingList[] postings = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final TermVectorsTermsWriter.PostingList posting = (TermVectorsTermsWriter.PostingList) postings[j];\n      final int freq = posting.freq;\n          \n      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, posting, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, posting, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    final int[] termIDs = termsHashPerField.sortPostings();\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int encoderUpto = 0;\n    int lastTermBytesCount = 0;\n\n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final char[][] charBuffers = perThread.termsHashPerThread.charPool.buffers;\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      final char[] text2 = charBuffers[postings.textStarts[termID] >> DocumentsWriter.CHAR_BLOCK_SHIFT];\n      final int start2 = postings.textStarts[termID] & DocumentsWriter.CHAR_BLOCK_MASK;\n\n      // We swap between two encoders to save copying\n      // last Term's byte array\n      final UnicodeUtil.UTF8Result utf8Result = perThread.utf8Results[encoderUpto];\n\n      // TODO: we could do this incrementally\n      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);\n      final int termBytesCount = utf8Result.length;\n\n      // TODO: UTF16toUTF8 could tell us this prefix\n      // Compute common prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        final byte[] lastTermBytes = perThread.utf8Results[1-encoderUpto].result;\n        final byte[] termBytes = perThread.utf8Results[encoderUpto].result;\n        while(prefix < lastTermBytesCount && prefix < termBytesCount) {\n          if (lastTermBytes[prefix] != termBytes[prefix])\n            break;\n          prefix++;\n        }\n      }\n      encoderUpto = 1-encoderUpto;\n      lastTermBytesCount = termBytesCount;\n\n      final int suffix = termBytesCount - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(utf8Result.result, prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = termsWriter.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    termsWriter.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    termsHashPerField.termsHash.reset();\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = termsWriter.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    termsWriter.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    termsHashPerField.termsHash.reset();\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = termsWriter.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    termsWriter.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUTF16Comparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    termsHashPerField.termsHash.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.numPostings == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = termsWriter.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = termsWriter.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert termsWriter.vectorFieldsInOrder(fieldInfo);\n\n    termsWriter.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = termsWriter.vectorSliceReader;\n    final ByteBlockPool termBytePool = termsHashPerField.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    termsHashPerField.termsHash.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b852c2640a2b634ad26fa5ec5ad9948c63718615","date":1285148689,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  * the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.numPostings;\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.numPostings == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */\n  @Override\n  void finish() throws IOException {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.finish start\");\n\n    final int numPostings = termsHashPerField.bytesHash.size();\n\n    final BytesRef flushTerm = perThread.flushTerm;\n\n    assert numPostings >= 0;\n\n    if (!doVectors || numPostings == 0)\n      return;\n\n    if (numPostings > maxNumPostings)\n      maxNumPostings = numPostings;\n\n    final IndexOutput tvf = perThread.doc.perDocTvf;\n\n    // This is called once, after inverting all occurrences\n    // of a given field in the doc.  At this point we flush\n    // our hash into the DocWriter.\n\n    assert fieldInfo.storeTermVector;\n    assert perThread.vectorFieldsInOrder(fieldInfo);\n\n    perThread.doc.addField(termsHashPerField.fieldInfo.number);\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    // TODO: we may want to make this sort in same order\n    // as Codec's terms dict?\n    final int[] termIDs = termsHashPerField.sortPostings(BytesRef.getUTF8SortedAsUnicodeComparator());\n\n    tvf.writeVInt(numPostings);\n    byte bits = 0x0;\n    if (doVectorPositions)\n      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;\n    if (doVectorOffsets) \n      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;\n    tvf.writeByte(bits);\n\n    int lastLen = 0;\n    byte[] lastBytes = null;\n    int lastStart = 0;\n      \n    final ByteSliceReader reader = perThread.vectorSliceReader;\n    final ByteBlockPool termBytePool = perThread.termsHashPerThread.termBytePool;\n\n    for(int j=0;j<numPostings;j++) {\n      final int termID = termIDs[j];\n      final int freq = postings.freqs[termID];\n          \n      // Get BytesRef\n      termBytePool.setBytesRef(flushTerm, postings.textStarts[termID]);\n\n      // Compute common byte prefix between last term and\n      // this term\n      int prefix = 0;\n      if (j > 0) {\n        while(prefix < lastLen && prefix < flushTerm.length) {\n          if (lastBytes[lastStart+prefix] != flushTerm.bytes[flushTerm.offset+prefix]) {\n            break;\n          }\n          prefix++;\n        }\n      }\n\n      lastLen = flushTerm.length;\n      lastBytes = flushTerm.bytes;\n      lastStart = flushTerm.offset;\n\n      final int suffix = flushTerm.length - prefix;\n      tvf.writeVInt(prefix);\n      tvf.writeVInt(suffix);\n      tvf.writeBytes(flushTerm.bytes, lastStart+prefix, suffix);\n      tvf.writeVInt(freq);\n\n      if (doVectorPositions) {\n        termsHashPerField.initReader(reader, termID, 0);\n        reader.writeTo(tvf);\n      }\n\n      if (doVectorOffsets) {\n        termsHashPerField.initReader(reader, termID, 1);\n        reader.writeTo(tvf);\n      }\n    }\n\n    termsHashPerField.reset();\n\n    // NOTE: we clear, per-field, at the thread level,\n    // because term vectors fully write themselves on each\n    // field; this saves RAM (eg if large doc has two large\n    // fields w/ term vectors on) because we recycle/reuse\n    // all RAM after each field:\n    perThread.termsHashPerThread.reset(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#finish().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriterPerField#finish().mjava","sourceNew":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","sourceOld":"  /** Called once per field per document if term vectors\n   *  are enabled, to write the vectors to\n   *  RAMOutputStream, which is then quickly flushed to\n   *  the real term vectors files in the Directory. */  @Override\n  void finish() throws IOException {\n    if (!doVectors || termsHashPerField.bytesHash.size() == 0)\n      return;\n\n    termsWriter.addFieldToFlush(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["b852c2640a2b634ad26fa5ec5ad9948c63718615"],"b852c2640a2b634ad26fa5ec5ad9948c63718615":["08932c793647a36953d1816b1060121f48820d3f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5f4e87790277826a2aea119328600dfb07761f32":["6c18273ea5b3974d2f30117f46f1ae416c28f727","08932c793647a36953d1816b1060121f48820d3f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["833a7987bc1c94455fde83e3311f72bddedcfb93","5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"08932c793647a36953d1816b1060121f48820d3f":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["5f4e87790277826a2aea119328600dfb07761f32"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"b852c2640a2b634ad26fa5ec5ad9948c63718615":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["5f4e87790277826a2aea119328600dfb07761f32"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6c18273ea5b3974d2f30117f46f1ae416c28f727","08932c793647a36953d1816b1060121f48820d3f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","3cc749c053615f5871f3b95715fe292f34e70a53","a3776dccca01c11e7046323cfad46a3b4a471233"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"08932c793647a36953d1816b1060121f48820d3f":["b852c2640a2b634ad26fa5ec5ad9948c63718615","5f4e87790277826a2aea119328600dfb07761f32"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}