{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"9227359ab3bd86e5b85fab89a99332da7d5bacb1","date":1490341270,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error trying to find Action: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Error trying to find Action: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7415f9791648efe2ead7b59a5447227f179add31","date":1490357663,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(\"actions\", actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb6a4d0a88fea57ec3a4044266f6ed46659457a5","date":1490362041,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(\"actions\", actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      char c = waitForStr.charAt(waitForStr.length() - 1);\n      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));\n      int seconds;\n      switch (c) {\n        case 'h':\n          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);\n          break;\n        case 'm':\n          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);\n          break;\n        case 's':\n          seconds = (int) waitForValue;\n          break;\n        default:\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(\"actions\", actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(\"event\");\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(\"waitFor\", null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(\"waitFor\", seconds);\n    }\n\n    Integer lowerBound = op.getInt(\"lowerBound\", null);\n    Integer upperBound = op.getInt(\"upperBound\", null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(\"actions\");\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(\"actions\", actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(\"name\") || !action.containsKey(\"class\")) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(\"class\");\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    // we're going to modify the op - use a copy\n    op = new CommandOperation(op.name, Utils.getDeepCopy((Map)op.getCommandData(), 10));\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value '\" + waitForStr + \"' in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, op.getValuesExcluding(\"name\"));\n    currentConfig = currentConfig.withTriggerConfig(trigger);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String eventTypeStr = op.getStr(EVENT);\n    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The event type cannot be null or empty in trigger: \" + triggerName);\n    }\n    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n\n    String waitForStr = op.getStr(WAIT_FOR, null);\n    if (waitForStr != null) {\n      int seconds = 0;\n      try {\n        seconds = parseHumanTime(waitForStr);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'waitFor' value in trigger: \" + triggerName);\n      }\n      op.getDataMap().put(WAIT_FOR, seconds);\n    }\n\n    Integer lowerBound = op.getInt(LOWER_BOUND, null);\n    Integer upperBound = op.getInt(UPPER_BOUND, null);\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);\n    if (actions == null) {\n      actions = DEFAULT_ACTIONS;\n      op.getDataMap().put(ACTIONS, actions);\n    }\n\n    // validate that we can load all the actions\n    // todo nocommit -- what about MemClassLoader?\n    for (Map<String, String> action : actions) {\n      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No 'name' or 'class' specified for action: \" + action);\n      }\n      String klass = action.get(CLASS);\n      try {\n        container.getResourceLoader().findClass(klass, TriggerAction.class);\n      } catch (Exception e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action not found: \" + klass, e);\n      }\n    }\n\n    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7415f9791648efe2ead7b59a5447227f179add31":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["7415f9791648efe2ead7b59a5447227f179add31"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["7415f9791648efe2ead7b59a5447227f179add31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","9227359ab3bd86e5b85fab89a99332da7d5bacb1"],"7415f9791648efe2ead7b59a5447227f179add31":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"9227359ab3bd86e5b85fab89a99332da7d5bacb1":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}