{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","commits":[{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment(Token).mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment(org.apache.lucene.analysis.Token)\n   */\n  public boolean isNewFragment(Token token) {\n    position += token.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(token.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = token.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - token.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = spanScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (((PositionSpan) positionSpans.get(i)).start == position) {\n          waitForPos = ((PositionSpan) positionSpans.get(i)).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.term());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}