{"path":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"/dev/null","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig, nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n       QParserPlugin plugin = clazz.newInstance();\n       qParserPlugins.put(name, plugin);\n       plugin.init(null);\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9539806685e2ba386282310178c96551b9359753"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n       QParserPlugin plugin = clazz.newInstance();\n       qParserPlugins.put(name, plugin);\n       plugin.init(null);\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig, nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n       QParserPlugin plugin = clazz.newInstance();\n       qParserPlugins.put(name, plugin);\n       plugin.init(null);\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9539806685e2ba386282310178c96551b9359753","date":1220465000,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n       QParserPlugin plugin = clazz.newInstance();\n       qParserPlugins.put(name, plugin);\n       plugin.init(null);\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b338a77d735377ad6a2b02379ce3000377ff8631","date":1244447757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(solrConfig.getQueryParserInfo(),qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    String xpath = \"queryParser\";\n    NodeList nodes = (NodeList) solrConfig.evaluate(xpath, XPathConstants.NODESET);\n\n    NamedListPluginLoader<QParserPlugin> loader =\n      new NamedListPluginLoader<QParserPlugin>( \"[solrconfig.xml] \"+xpath, qParserPlugins);\n\n    loader.load( solrConfig.getResourceLoader(), nodes );\n\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(solrConfig.getQueryParserInfo(),qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#initQParsers().mjava","sourceNew":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","sourceOld":"  /** Configure the query parsers. */\n  private void initQParsers() {\n    initPlugins(qParserPlugins,QParserPlugin.class);\n    // default parsers\n    for (int i=0; i<QParserPlugin.standardPlugins.length; i+=2) {\n     try {\n       String name = (String)QParserPlugin.standardPlugins[i];\n       if (null == qParserPlugins.get(name)) {\n         Class<QParserPlugin> clazz = (Class<QParserPlugin>)QParserPlugin.standardPlugins[i+1];\n         QParserPlugin plugin = clazz.newInstance();\n         qParserPlugins.put(name, plugin);\n         plugin.init(null);\n       }\n     } catch (Exception e) {\n       throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n     }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9539806685e2ba386282310178c96551b9359753":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["28a016ae2abf4934515e45810192aa4350e3092b"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"28a016ae2abf4934515e45810192aa4350e3092b":["b338a77d735377ad6a2b02379ce3000377ff8631"],"b338a77d735377ad6a2b02379ce3000377ff8631":["9539806685e2ba386282310178c96551b9359753"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9539806685e2ba386282310178c96551b9359753":["b338a77d735377ad6a2b02379ce3000377ff8631"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["9539806685e2ba386282310178c96551b9359753"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["ad94625fb8d088209f46650c8097196fec67f00c"],"b338a77d735377ad6a2b02379ce3000377ff8631":["28a016ae2abf4934515e45810192aa4350e3092b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}