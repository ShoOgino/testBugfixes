{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","commits":[{"id":"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3","date":1361060670,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b1c945cfc8af87215a4f5375353ccc7269e6aca","date":1361412810,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // compare per-segment\n    // NOTE: we must do this before deleting, because FC.getDocTermsOrds/UninvertedField\n    // \"bakes in\" the deletes at the time it was first called.\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":["2ac70df4ea6e1a73f0f9414138622eb5d6b19b4e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(1000);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = _TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(_TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<String>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<String>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<String>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\", null);\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\", null);\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheVsDocValues#doTestSortedSetVsUninvertedField(int,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#doTestSortedSetVsUninvertedField(int,int).mjava","sourceNew":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\", null);\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\", null);\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSortedSetVsUninvertedField(int minLength, int maxLength) throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n    \n    // index some docs\n    int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      Field idField = new StringField(\"id\", Integer.toString(i), Field.Store.NO);\n      doc.add(idField);\n      final int length;\n      if (minLength == maxLength) {\n        length = minLength; // fixed length\n      } else {\n        length = TestUtil.nextInt(random(), minLength, maxLength);\n      }\n      int numValues = random().nextInt(17);\n      // create a random list of strings\n      List<String> values = new ArrayList<>();\n      for (int v = 0; v < numValues; v++) {\n        values.add(TestUtil.randomSimpleString(random(), length));\n      }\n      \n      // add in any order to the indexed field\n      ArrayList<String> unordered = new ArrayList<>(values);\n      Collections.shuffle(unordered, random());\n      for (String v : values) {\n        doc.add(newStringField(\"indexed\", v, Field.Store.NO));\n      }\n\n      // add in any order to the dv field\n      ArrayList<String> unordered2 = new ArrayList<>(values);\n      Collections.shuffle(unordered2, random());\n      for (String v : unordered2) {\n        doc.add(new SortedSetDocValuesField(\"dv\", new BytesRef(v)));\n      }\n\n      writer.addDocument(doc);\n      if (random().nextInt(31) == 0) {\n        writer.commit();\n      }\n    }\n    \n    // delete some docs\n    int numDeletions = random().nextInt(numDocs/10);\n    for (int i = 0; i < numDeletions; i++) {\n      int id = random().nextInt(numDocs);\n      writer.deleteDocuments(new Term(\"id\", Integer.toString(id)));\n    }\n    \n    // compare per-segment\n    DirectoryReader ir = writer.getReader();\n    for (AtomicReaderContext context : ir.leaves()) {\n      AtomicReader r = context.reader();\n      SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(r, \"indexed\");\n      SortedSetDocValues actual = r.getSortedSetDocValues(\"dv\");\n      assertEquals(r.maxDoc(), expected, actual);\n    }\n    ir.close();\n    \n    writer.forceMerge(1);\n    \n    // now compare again after the merge\n    ir = writer.getReader();\n    AtomicReader ar = getOnlySegmentReader(ir);\n    SortedSetDocValues expected = FieldCache.DEFAULT.getDocTermOrds(ar, \"indexed\");\n    SortedSetDocValues actual = ar.getSortedSetDocValues(\"dv\");\n    assertEquals(ir.maxDoc(), expected, actual);\n    ir.close();\n    \n    writer.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"1b1c945cfc8af87215a4f5375353ccc7269e6aca":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["1b1c945cfc8af87215a4f5375353ccc7269e6aca"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddbb72a33557d2b5bc22ee95daf3281c43560502","eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["1b1c945cfc8af87215a4f5375353ccc7269e6aca"],"eaa9cc5fd5ad1b5f7be93da05bdbd3ccf4be4bb3":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"1b1c945cfc8af87215a4f5375353ccc7269e6aca":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}