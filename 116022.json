{"path":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testQueryResultKeyUnSortedFiltersWithDups().mjava","commits":[{"id":"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f","date":1389311746,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/QueryResultKeyTest#testQueryResultKeyUnSortedFiltersWithDups().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryResultKeyUnSortedFiltersWithDups() {\n    Query query = new TermQuery(new Term(\"main\", \"val\"));\n\n    // we need Query clauses that have identical hashCodes \n    // but are not equal unless the term is equals\n    Query fq_aa = new FlatHashTermQuery(\"fq_a\");\n    Query fq_ab = new FlatHashTermQuery(\"fq_a\");\n    Query fq_ac = new FlatHashTermQuery(\"fq_a\");\n    Query fq_zz = new FlatHashTermQuery(\"fq_z\");\n\n    assertEquals(fq_aa.hashCode(), fq_ab.hashCode());\n    assertEquals(fq_aa.hashCode(), fq_ac.hashCode());\n    assertEquals(fq_aa.hashCode(), fq_zz.hashCode());\n\n    assertEquals(fq_aa, fq_ab);\n    assertEquals(fq_aa, fq_ac);\n    assertEquals(fq_ab, fq_aa);\n    assertEquals(fq_ab, fq_ac);\n    assertEquals(fq_ac, fq_aa);\n    assertEquals(fq_ac, fq_ab);\n\n    assertTrue( ! fq_aa.equals(fq_zz) );\n    assertTrue( ! fq_ab.equals(fq_zz) );\n    assertTrue( ! fq_ac.equals(fq_zz) );\n    assertTrue( ! fq_zz.equals(fq_aa) );\n    assertTrue( ! fq_zz.equals(fq_ab) );\n    assertTrue( ! fq_zz.equals(fq_ac) );\n\n    List<Query> filters1 = Arrays.asList(fq_aa, fq_ab);\n    List<Query> filters2 = Arrays.asList(fq_zz, fq_ac);\n\n    QueryResultKey key1 = new QueryResultKey(query, filters1, null, 0);\n    QueryResultKey key2 = new QueryResultKey(query, filters2, null, 0);\n    \n    assertEquals(key1.hashCode(), key2.hashCode());\n\n    assertKeyNotEquals(key1, key2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f"],"e8a8ec7bd407ce5ad65fe8d53fd69d9cd597f58f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}