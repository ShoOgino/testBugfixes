{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440 \n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\", \n        collectionName, clusterShape(numShards, numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440 \n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\", \n        collectionName, clusterShape(numShards, numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","sourceNew":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\",\n        collectionName, clusterShape(numShards, numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","sourceOld":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Why is this needed? see SOLR-9440 \n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\", \n        collectionName, clusterShape(numShards, numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","sourceNew":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\",\n        collectionName, clusterShape(numShards, numShards * numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","sourceOld":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\",\n        collectionName, clusterShape(numShards, numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#createAndWaitForCollection(int,int,int,int).mjava","sourceNew":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\",\n        collectionName, clusterShape(numShards, numShards * numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","sourceOld":"  private DocCollection createAndWaitForCollection(int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas) throws SolrServerException, IOException, KeeperException, InterruptedException {\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", numShards, numNrtReplicas, numTlogReplicas, numPullReplicas)\n    .setMaxShardsPerNode(100)\n    .process(cluster.getSolrClient());\n    int numReplicasPerShard = numNrtReplicas + numTlogReplicas + numPullReplicas;\n    waitForState(\"Expected collection to be created with \" + numShards + \" shards and  \" + numReplicasPerShard + \" replicas\",\n        collectionName, clusterShape(numShards, numShards * numReplicasPerShard));\n    return assertNumberOfReplicas(numNrtReplicas*numShards, numTlogReplicas*numShards, numPullReplicas*numShards, false, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["61c45e99cf6676da48f19d7511c73712ad39402b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}