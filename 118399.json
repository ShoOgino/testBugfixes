{"path":"src/test/org/apache/solr/util/TestOpenBitSet#testEquals().mjava","commits":[{"id":"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f","date":1155410084,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestOpenBitSet#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestOpenBitSet#testEquals().mjava","pathOld":"src/test/org/apache/solr/util/TestOpenBitSet#testEquals().mjava","sourceNew":"  public void testEquals() {\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(1));\n  }\n\n","sourceOld":"  public void testEquals() {\n    OpenBitSet b1 = new OpenBitSet(1111);\n    OpenBitSet b2 = new OpenBitSet(2222);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b1.set(10);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b2.set(10);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n    b2.set(2221);\n    assertFalse(b1.equals(b2));\n    assertFalse(b2.equals(b1));\n    b1.set(2221);\n    assertTrue(b1.equals(b2));\n    assertTrue(b2.equals(b1));\n\n    // try different type of object\n    assertFalse(b1.equals(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f"],"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"92fbd1a3636fbb7f40cb6fdf1524a4eb5b773f6f":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}