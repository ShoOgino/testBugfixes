{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","pathOld":"/dev/null","sourceNew":"  private static Comparator<Tuple> getComp(List<SortItem> sortItems) {\n    Comparator<Tuple>[] comps = new Comparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultiComp(comps);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e431b0806b8db369da896b66a74e304a49953c7b","date":1434740037,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","sourceNew":"  private static Comparator<Tuple> getComp(List<SortItem> sortItems) {\n    Comparator<Tuple>[] comps = new Comparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new StreamComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultiComp(comps);\n    }\n  }\n\n","sourceOld":"  private static Comparator<Tuple> getComp(List<SortItem> sortItems) {\n    Comparator<Tuple>[] comps = new Comparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultiComp(comps);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0891a6931fc352fc7e61f2752ef9add758d3fb89","date":1435151229,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","sourceNew":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","sourceOld":"  private static Comparator<Tuple> getComp(List<SortItem> sortItems) {\n    Comparator<Tuple>[] comps = new Comparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new StreamComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultiComp(comps);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","sourceNew":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripSingleQuotes(stripQuotes(sortKey)), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","sourceOld":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripQuotes(sortKey), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","sourceNew":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = getSortField(sortItem);\n      comps[i] = new FieldComparator(sortKey, comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","sourceOld":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = sortItem.getSortKey().toString();\n      comps[i] = new FieldComparator(stripSingleQuotes(stripQuotes(sortKey)), comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler#getComp(List[SortItem]).mjava","sourceNew":"  private static StreamComparator getComp(List<SortItem> sortItems, Map<String, String> reverseColumnAliases) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = getSortField(sortItem, reverseColumnAliases);\n      comps[i] = new FieldComparator(sortKey, comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","sourceOld":"  private static StreamComparator getComp(List<SortItem> sortItems) {\n    FieldComparator[] comps = new FieldComparator[sortItems.size()];\n    for(int i=0; i<sortItems.size(); i++) {\n      SortItem sortItem = sortItems.get(i);\n      String ordering = sortItem.getOrdering().toString();\n      ComparatorOrder comparatorOrder = ascDescComp(ordering);\n      String sortKey = getSortField(sortItem);\n      comps[i] = new FieldComparator(sortKey, comparatorOrder);\n    }\n\n    if(comps.length == 1) {\n      return comps[0];\n    } else {\n      return new MultipleFieldComparator(comps);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["e431b0806b8db369da896b66a74e304a49953c7b"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e431b0806b8db369da896b66a74e304a49953c7b":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"0891a6931fc352fc7e61f2752ef9add758d3fb89":["36479872320bb00635cb97ca6757614c88562e1b"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["e431b0806b8db369da896b66a74e304a49953c7b"],"e431b0806b8db369da896b66a74e304a49953c7b":["0891a6931fc352fc7e61f2752ef9add758d3fb89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}