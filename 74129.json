{"path":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"/dev/null","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    server.getLbClient().getHttpClient().getParams()\n        .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30000);\n    return server;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    server.getLbClient().getHttpClient().getParams()\n        .setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30000);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = new CloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BaseCdcrDistributedZkTest#createCloudClient(String).mjava","sourceNew":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","sourceOld":"  protected CloudSolrClient createCloudClient(String defaultCollection) {\n    CloudSolrClient server = getCloudSolrClient(zkServer.getZkAddress(), random().nextBoolean());\n    server.setParallelUpdates(random().nextBoolean());\n    if (defaultCollection != null) server.setDefaultCollection(defaultCollection);\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"859081acf00749f5dd462772c571d611d4a4d2db":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"e7da9d8536c11576df10e348efa79d2739170936":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["859081acf00749f5dd462772c571d611d4a4d2db"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["e7da9d8536c11576df10e348efa79d2739170936"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}