{"path":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","commits":[{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd","date":1320399315,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSubScorerFreqs#testPhraseQuery().mjava","sourceNew":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPhraseQuery() throws Exception {\n    PhraseQuery q = new PhraseQuery();\n    q.add(new Term(\"f\", \"b\"));\n    q.add(new Term(\"f\", \"c\"));\n    CountingCollector c = new CountingCollector(TopScoreDocCollector.create(10,\n        true));\n    s.search(q, null, c);\n    final int maxDocs = s.getIndexReader().maxDoc();\n    assertEquals(maxDocs, c.docCounts.size());\n    for (int i = 0; i < maxDocs; i++) {\n      Map<Query, Float> doc0 = c.docCounts.get(i);\n      assertEquals(1, doc0.size());\n      assertEquals(2.0F, doc0.get(q), FLOAT_TOLERANCE);\n\n      Map<Query, Float> doc1 = c.docCounts.get(++i);\n      assertEquals(1, doc1.size());\n      assertEquals(1.0F, doc1.get(q), FLOAT_TOLERANCE);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4946500259641951dbd7f8a61956bf14bef3f60"],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4946500259641951dbd7f8a61956bf14bef3f60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f4c236b7b2d1cb61683f5ba02d09249fdb42a7fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}