{"path":"sandbox/contributions/lucli/src/lucli/Completer#completer(String,int).mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/Completer#completer(String,int).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t\tReturn possible completion. Implements org.gnu.readline.ReadlineCompleter.\n\t\t*/\n\n\tpublic String completer (String text, int state) {\n\n\t\tString ret = null; //what we're returning\n\t\tfor (int ii = currentPosition; ii < words.length; ii++) {\n\t\t\tif (words[ii].startsWith(text)) {\n\t\t\t\tint next = ii + 1;\n\t\t\t\tif ((next < words.length) && words[next].startsWith(text)) {\n\t\t\t\t\t//more than one word match\n\t\t\t\t\tcurrentPosition = ii + 1; //next time start with next one\n\t\t\t\t\tret = words[ii];\n\t\t\t\t\tbreak;\n\t\t\t\t} else { //found the last one\n\t\t\t\t\tif (state == 0) { //if it's the only one\n\t\t\t\t\t\tret = words[ii];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret = null; //there were previous ones\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ret == null)\n\t\t\tcurrentPosition = 0; //for next search\n\t\t//System.out.println(\"returned:\" + ret);\n\t\treturn (ret); //no more matches\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/Completer#completer(String,int).mjava","pathOld":"sandbox/contributions/lucli/src/lucli/Completer#completer(String,int).mjava","sourceNew":"\t/**\n\t\tReturn possible completion. Implements org.gnu.readline.ReadlineCompleter.\n\t\t*/\n\n\tpublic String completer (String text, int state) {\n\n\t\tString ret = null; //what we're returning\n\t\tfor (int ii = currentPosition; ii < words.length; ii++) {\n\t\t\tif (words[ii].startsWith(text)) {\n\t\t\t\tint next = ii + 1;\n\t\t\t\tif ((next < words.length) && words[next].startsWith(text)) {\n\t\t\t\t\t//more than one word match\n\t\t\t\t\tcurrentPosition = ii + 1; //next time start with next one\n\t\t\t\t\tret = words[ii];\n\t\t\t\t\tbreak;\n\t\t\t\t} else { //found the last one\n\t\t\t\t\tif (state == 0) { //if it's the only one\n\t\t\t\t\t\tret = words[ii];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret = null; //there were previous ones\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ret == null)\n\t\t\tcurrentPosition = 0; //for next search\n\t\t//System.out.println(\"returned:\" + ret);\n\t\treturn (ret); //no more matches\n\t}\n\n","sourceOld":"\t/**\n\t\tReturn possible completion. Implements org.gnu.readline.ReadlineCompleter.\n\t\t*/\n\n\tpublic String completer (String text, int state) {\n\n\t\tString ret = null; //what we're returning\n\t\tfor (int ii = currentPosition; ii < words.length; ii++) {\n\t\t\tif (words[ii].startsWith(text)) {\n\t\t\t\tint next = ii + 1;\n\t\t\t\tif ((next < words.length) && words[next].startsWith(text)) {\n\t\t\t\t\t//more than one word match\n\t\t\t\t\tcurrentPosition = ii + 1; //next time start with next one\n\t\t\t\t\tret = words[ii];\n\t\t\t\t\tbreak;\n\t\t\t\t} else { //found the last one\n\t\t\t\t\tif (state == 0) { //if it's the only one\n\t\t\t\t\t\tret = words[ii];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tret = null; //there were previous ones\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ret == null)\n\t\t\tcurrentPosition = 0; //for next search\n\t\t//System.out.println(\"returned:\" + ret);\n\t\treturn (ret); //no more matches\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["66a601acf439105252becef7e0f1cb6b2e296bce"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}