{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_INT_NUM_BYTES_PER_ARC, VERSION_INT_NUM_BYTES_PER_ARC);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":["651a27b35167c2ea81f87f4749722e52b7d5b750"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b3d500d9caea2bb55ac8d2399642dc13b88d739","date":1326050845,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_SHORT_BYTE2_LABELS, VERSION_SHORT_BYTE2_LABELS);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_INT_NUM_BYTES_PER_ARC, VERSION_INT_NUM_BYTES_PER_ARC);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":["651a27b35167c2ea81f87f4749722e52b7d5b750"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  /** Load a previously saved FST. */\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_PACKED, VERSION_PACKED);\n    packed = in.readByte() == 1;\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      if (packed) {\n        emptyOutput = outputs.read(getBytesReader(0));\n      } else {\n        emptyOutput = outputs.read(getBytesReader(numBytes-1));\n      }\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    if (packed) {\n      final int nodeRefCount = in.readVInt();\n      nodeRefToAddress = new int[nodeRefCount];\n      for(int idx=0;idx<nodeRefCount;idx++) {\n        nodeRefToAddress[idx] = in.readVInt();\n      }\n    } else {\n      nodeRefToAddress = null;\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_SHORT_BYTE2_LABELS, VERSION_SHORT_BYTE2_LABELS);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":["651a27b35167c2ea81f87f4749722e52b7d5b750"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  /** Load a previously saved FST. */\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_PACKED, VERSION_PACKED);\n    packed = in.readByte() == 1;\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      if (packed) {\n        emptyOutput = outputs.read(getBytesReader(0));\n      } else {\n        emptyOutput = outputs.read(getBytesReader(numBytes-1));\n      }\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    if (packed) {\n      final int nodeRefCount = in.readVInt();\n      nodeRefToAddress = new int[nodeRefCount];\n      for(int idx=0;idx<nodeRefCount;idx++) {\n        nodeRefToAddress[idx] = in.readVInt();\n      }\n    } else {\n      nodeRefToAddress = null;\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_SHORT_BYTE2_LABELS, VERSION_SHORT_BYTE2_LABELS);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  /** Load a previously saved FST. */\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_PACKED, VERSION_PACKED);\n    packed = in.readByte() == 1;\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      if (packed) {\n        emptyOutput = outputs.read(getBytesReader(0));\n      } else {\n        emptyOutput = outputs.read(getBytesReader(numBytes-1));\n      }\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    if (packed) {\n      final int nodeRefCount = in.readVInt();\n      nodeRefToAddress = new int[nodeRefCount];\n      for(int idx=0;idx<nodeRefCount;idx++) {\n        nodeRefToAddress[idx] = in.readVInt();\n      }\n    } else {\n      nodeRefToAddress = null;\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_SHORT_BYTE2_LABELS, VERSION_SHORT_BYTE2_LABELS);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  /** Load a previously saved FST. */\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_PACKED, VERSION_PACKED);\n    packed = in.readByte() == 1;\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      if (packed) {\n        emptyOutput = outputs.read(getBytesReader(0));\n      } else {\n        emptyOutput = outputs.read(getBytesReader(numBytes-1));\n      }\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    if (packed) {\n      final int nodeRefCount = in.readVInt();\n      nodeRefToAddress = new int[nodeRefCount];\n      for(int idx=0;idx<nodeRefCount;idx++) {\n        nodeRefToAddress[idx] = in.readVInt();\n      }\n    } else {\n      nodeRefToAddress = null;\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","sourceOld":"  /** Load a previously saved FST. */\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    // NOTE: only reads most recent format; we don't have\n    // back-compat promise for FSTs (they are experimental):\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_PACKED, VERSION_PACKED);\n    packed = in.readByte() == 1;\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      if (packed) {\n        emptyOutput = outputs.read(getBytesReader(0));\n      } else {\n        emptyOutput = outputs.read(getBytesReader(numBytes-1));\n      }\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    if (packed) {\n      final int nodeRefCount = in.readVInt();\n      nodeRefToAddress = new int[nodeRefCount];\n      for(int idx=0;idx<nodeRefCount;idx++) {\n        nodeRefToAddress[idx] = in.readVInt();\n      }\n    } else {\n      nodeRefToAddress = null;\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n\n    cacheRootArcs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["8b3d500d9caea2bb55ac8d2399642dc13b88d739"],"8b3d500d9caea2bb55ac8d2399642dc13b88d739":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["8b3d500d9caea2bb55ac8d2399642dc13b88d739","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["8b3d500d9caea2bb55ac8d2399642dc13b88d739","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"8b3d500d9caea2bb55ac8d2399642dc13b88d739":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["8b3d500d9caea2bb55ac8d2399642dc13b88d739"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}