{"path":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":null,"sourceOld":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"/dev/null","sourceNew":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"398bfcb539107b92d9af0013294b442326b314a6","date":1269035614,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","sourceOld":"  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46","date":1287338316,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","pathOld":"solr/src/test/org/apache/solr/BasicFunctionalityTest#testSolrParams().mjava","sourceNew":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSolrParams() throws Exception {\n    NamedList nl = new NamedList();\n    nl.add(\"i\",555);\n    nl.add(\"s\",\"bbb\");\n    nl.add(\"bt\",\"true\");\n    nl.add(\"bf\",\"false\");\n\n    Map<String,String> m = new HashMap<String,String>();\n    m.put(\"f.field1.i\", \"1000\");\n    m.put(\"s\", \"BBB\");\n    m.put(\"ss\", \"SSS\");\n\n    LocalSolrQueryRequest req = new LocalSolrQueryRequest(null,nl);\n    SolrParams p = req.getParams();\n\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"555\");\n\n    req.setParams(new DefaultSolrParams(p, new MapSolrParams(m)));\n    p = req.getParams();\n    assertEquals(req.getOriginalParams().get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"i\"), \"555\");\n    assertEquals(p.getInt(\"i\").intValue(), 555);\n    assertEquals(p.getInt(\"i\",5), 555);\n    assertEquals(p.getInt(\"iii\",5), 5);\n\n    assertEquals(p.getFieldParam(\"field1\",\"i\"), \"1000\");\n    assertEquals(p.get(\"s\"), \"bbb\");\n    assertEquals(p.get(\"ss\"), \"SSS\");\n\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n    assertEquals(p.getBool(\"foo\",true), true);\n    assertEquals(p.getBool(\"foo\",false), false);\n    assertEquals(!!p.getBool(\"bt\"), !p.getBool(\"bf\"));\n\n    NamedList more = new NamedList();\n    more.add(\"s\", \"aaa\");\n    more.add(\"s\", \"ccc\");\n    more.add(\"ss\",\"YYY\");\n    more.add(\"xx\",\"XXX\");\n    p = new AppendedSolrParams(p, SolrParams.toSolrParams(more));\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"bbb\", p.getParams(\"s\")[0]);\n    assertEquals(\"aaa\", p.getParams(\"s\")[1]);\n    assertEquals(\"ccc\", p.getParams(\"s\")[2]);\n    assertEquals(3, p.getParams(\"s\").length);\n    assertEquals(\"SSS\", p.get(\"ss\"));\n    assertEquals(\"XXX\", p.get(\"xx\"));\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"398bfcb539107b92d9af0013294b442326b314a6":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["398bfcb539107b92d9af0013294b442326b314a6","1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46"],"1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46":["398bfcb539107b92d9af0013294b442326b314a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["398bfcb539107b92d9af0013294b442326b314a6","1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"398bfcb539107b92d9af0013294b442326b314a6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["398bfcb539107b92d9af0013294b442326b314a6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"1262a22a04ad7dbd8abdca1f3fb178d6bba0dd46":["c26f00b574427b55127e869b935845554afde1fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}