{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":null,"sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ce83f0d72db4660fd277a9d357698004d8f4336","date":1269047368,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68759a52d8da5c4ac149c4484a1dbc071b480bb3","date":1276544744,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":["97c30bd1b976a5291cf9c0ca2773c5c46e936a7b","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbacbb60f995079ca6bdfef735fd4881040ec3cf","date":1292341298,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = new Random();\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97c30bd1b976a5291cf9c0ca2773c5c46e936a7b","date":1306157463,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","72ec6c7587d2da4bfac762c58d0d6b8552d2102d","7d6b8491b15b391062b53404b4af3c8f18924090"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(adoc(\"id\", \"10001\")); // will get same reader if no index change\n      assertU(commit());\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalField().mjava","sourceNew":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  @Test\n  public void testExternalField() throws Exception {\n    String field = \"foo_extf\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(field, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(field, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n    singleTest(field, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n\n    Random r = random;\n    for (int i=0; i<10; i++) {   // do more iterations for a thorough test\n      int len = r.nextInt(ids.length+1);\n      boolean sorted = r.nextBoolean();\n      // shuffle ids\n      for (int j=0; j<ids.length; j++) {\n        int other=r.nextInt(ids.length);\n        float v=ids[0];\n        ids[0] = ids[other];\n        ids[other] = v;\n      }\n\n      if (sorted) {\n        // sort only the first elements\n        Arrays.sort(ids,0,len);\n      }\n\n      // make random values\n      float[] vals = new float[len];\n      for (int j=0; j<len; j++) {\n        vals[j] = r.nextInt(200)-100;\n      }\n\n      // make and write the external file\n      StringBuilder sb = new StringBuilder();\n      for (int j=0; j<len; j++) {\n        sb.append(\"\" + ids[j] + \"=\" + vals[j]+\"\\n\");        \n      }\n      makeExternalFile(field, sb.toString(),\"UTF-8\");\n\n      // make it visible\n      assertU(h.query(\"/reloadCache\",lrf.makeRequest(\"\",\"\")));\n\n      // test it\n      float[] answers = new float[ids.length*2];\n      for (int j=0; j<len; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = vals[j];\n      }\n      for (int j=len; j<ids.length; j++) {\n        answers[j*2] = ids[j];\n        answers[j*2+1] = 1;  // the default values\n      }\n\n      singleTest(field, \"\\0\", answers);\n      // System.out.println(\"Done test \"+i);\n    }\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["97c30bd1b976a5291cf9c0ca2773c5c46e936a7b","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"97c30bd1b976a5291cf9c0ca2773c5c46e936a7b":["bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"5f4e87790277826a2aea119328600dfb07761f32":["9ce83f0d72db4660fd277a9d357698004d8f4336","68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["bbacbb60f995079ca6bdfef735fd4881040ec3cf","97c30bd1b976a5291cf9c0ca2773c5c46e936a7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["97c30bd1b976a5291cf9c0ca2773c5c46e936a7b"],"bbacbb60f995079ca6bdfef735fd4881040ec3cf":["68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","97c30bd1b976a5291cf9c0ca2773c5c46e936a7b"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"97c30bd1b976a5291cf9c0ca2773c5c46e936a7b":["c26f00b574427b55127e869b935845554afde1fa","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a258fbb26824fd104ed795e5d9033d2d040049ee","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1da8d55113b689b06716246649de6f62430f15c0":["9ce83f0d72db4660fd277a9d357698004d8f4336"],"9ce83f0d72db4660fd277a9d357698004d8f4336":["5f4e87790277826a2aea119328600dfb07761f32","68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","5f4e87790277826a2aea119328600dfb07761f32","bbacbb60f995079ca6bdfef735fd4881040ec3cf"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"bbacbb60f995079ca6bdfef735fd4881040ec3cf":["97c30bd1b976a5291cf9c0ca2773c5c46e936a7b","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}