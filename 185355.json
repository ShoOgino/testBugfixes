{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","commits":[{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum) +\n                                                       \" (resource=\" + in + \")\");\n    }\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n    return actualChecksum;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum) +\n                                                       \" (resource=\" + in + \")\");\n    }\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n    return actualChecksum;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","sourceNew":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum), in);\n    }\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length(), in);\n    }\n    return actualChecksum;\n  }\n\n","sourceOld":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum) +\n                                                       \" (resource=\" + in + \")\");\n    }\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length() + \" (resource: \" + in + \")\");\n    }\n    return actualChecksum;\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","sourceNew":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum), in);\n    }\n    return actualChecksum;\n  }\n\n","sourceOld":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum), in);\n    }\n    if (in.getFilePointer() != in.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file: read \" + in.getFilePointer() + \" vs size \" + in.length(), in);\n    }\n    return actualChecksum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","date":1434509375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkFooter(ChecksumIndexInput).mjava","sourceNew":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = readCRC(in);\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum), in);\n    }\n    return actualChecksum;\n  }\n\n","sourceOld":"  /** \n   * Validates the codec footer previously written by {@link #writeFooter}. \n   * @return actual checksum value\n   * @throws IOException if the footer is invalid, if the checksum does not match, \n   *                     or if {@code in} is not properly positioned before the footer\n   *                     at the end of the stream.\n   */\n  public static long checkFooter(ChecksumIndexInput in) throws IOException {\n    validateFooter(in);\n    long actualChecksum = in.getChecksum();\n    long expectedChecksum = in.readLong();\n    if (expectedChecksum != actualChecksum) {\n      throw new CorruptIndexException(\"checksum failed (hardware problem?) : expected=\" + Long.toHexString(expectedChecksum) +  \n                                                       \" actual=\" + Long.toHexString(actualChecksum), in);\n    }\n    return actualChecksum;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}