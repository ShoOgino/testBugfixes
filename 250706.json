{"path":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testComponentQuery(Component2D,Object).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testComponentQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testComponentQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85e78a520ab9228dc6353193f15d2c86ca717ae0","date":1584944808,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestLatLonMultiPolygonShapeQueries.MultiPolygonValidator#testComponentQuery(Component2D,Object).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Polygon[] polygons = (Polygon[]) shape;\n      if (queryRelation == QueryRelation.CONTAINS) {\n        return testWithinPolygon(query, polygons);\n      }\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testComponentQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","sourceOld":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Polygon[] polygons = (Polygon[])shape;\n      for (Polygon p : polygons) {\n        boolean b = POLYGONVALIDATOR.testComponentQuery(query, p);\n        if (b == true && queryRelation == QueryRelation.INTERSECTS) {\n          return true;\n        } else if (b == true && queryRelation == QueryRelation.CONTAINS) {\n          return true;\n        } else if (b == false && queryRelation == QueryRelation.DISJOINT) {\n          return false;\n        } else if (b == false && queryRelation == QueryRelation.WITHIN) {\n          return false;\n        }\n      }\n      return queryRelation != QueryRelation.INTERSECTS && queryRelation != QueryRelation.CONTAINS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85e78a520ab9228dc6353193f15d2c86ca717ae0":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85e78a520ab9228dc6353193f15d2c86ca717ae0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["85e78a520ab9228dc6353193f15d2c86ca717ae0"],"85e78a520ab9228dc6353193f15d2c86ca717ae0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}