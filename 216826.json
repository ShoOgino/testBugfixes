{"path":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p/>\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peekElements(int,long,Predicate[String]).mjava","sourceNew":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * <p>\n   * Package-private to support {@link OverseerTaskQueue} specifically.</p>\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Return the currently-known set of elements, using child names from memory. If no children are found, or no\n   * children pass {@code acceptFilter}, waits up to {@code waitMillis} for at least one child to become available.\n   * Package-private to support {@link OverseerTaskQueue} specifically.\n   */\n  @Override\n  public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws KeeperException, InterruptedException {\n    List<String> foundChildren = new ArrayList<>();\n    long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);\n    boolean first = true;\n    while (true) {\n      // Trigger a refresh, but only force it if this is not the first iteration.\n      firstChild(false, !first);\n\n      updateLock.lockInterruptibly();\n      try {\n        for (String child : knownChildren) {\n          if (acceptFilter.test(child)) {\n            foundChildren.add(child);\n          }\n        }\n        if (!foundChildren.isEmpty()) {\n          break;\n        }\n        if (waitNanos <= 0) {\n          break;\n        }\n\n        // If this is our first time through, force a refresh before waiting.\n        if (first) {\n          first = false;\n          continue;\n        }\n\n        waitNanos = changed.awaitNanos(waitNanos);\n      } finally {\n        updateLock.unlock();\n      }\n\n      if (!foundChildren.isEmpty()) {\n        break;\n      }\n    }\n\n    // Technically we could restart the method if we fail to actually obtain any valid children\n    // from ZK, but this is a super rare case, and the latency of the ZK fetches would require\n    // much more sophisticated waitNanos tracking.\n    List<Pair<String, byte[]>> result = new ArrayList<>();\n    for (String child : foundChildren) {\n      if (result.size() >= max) {\n        break;\n      }\n      try {\n        byte[] data = zookeeper.getData(dir + \"/\" + child, null, null, true);\n        result.add(new Pair<>(child, data));\n      } catch (KeeperException.NoNodeException e) {\n        // Another client deleted the node first, remove the in-memory and continue.\n        updateLock.lockInterruptibly();\n        try {\n          knownChildren.remove(child);\n        } finally {\n          updateLock.unlock();\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}