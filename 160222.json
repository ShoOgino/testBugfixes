{"path":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","commits":[{"id":"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02","date":1244977984,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter (indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    writer.setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#getIndex(boolean,boolean).mjava","sourceNew":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","sourceOld":"  // create an index of all the documents, or just the x, or just the y documents\n  private Searcher getIndex (boolean even, boolean odd)\n  throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(1000);\n    for (int i=0; i<data.length; ++i) {\n      if (((i%2)==0 && even) || ((i%2)==1 && odd)) {\n        Document doc = new Document();\n        doc.add (new Field (\"tracer\",   data[i][0], Field.Store.YES, Field.Index.NO));\n        doc.add (new Field (\"contents\", data[i][1], Field.Store.NO, Field.Index.ANALYZED));\n        if (data[i][2] != null) doc.add (new Field (\"int\",      data[i][2], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][3] != null) doc.add (new Field (\"float\",    data[i][3], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][4] != null) doc.add (new Field (\"string\",   data[i][4], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][5] != null) doc.add (new Field (\"custom\",   data[i][5], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][6] != null) doc.add (new Field (\"i18n\",     data[i][6], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][7] != null) doc.add (new Field (\"long\",     data[i][7], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][8] != null) doc.add (new Field (\"double\",     data[i][8], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][9] != null) doc.add (new Field (\"short\",     data[i][9], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][10] != null) doc.add (new Field (\"byte\",     data[i][10], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        if (data[i][11] != null) doc.add (new Field (\"parser\",     data[i][11], Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.setBoost(2);  // produce some scores above 1.0\n        writer.addDocument (doc);\n      }\n    }\n    //writer.optimize ();\n    writer.close ();\n    IndexSearcher s = new IndexSearcher (indexStore, false);\n    s.setDefaultFieldSortScoring(true, true);\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"1474a58d42cdf3b9e16ffe07bce31e4abffe5e02":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1474a58d42cdf3b9e16ffe07bce31e4abffe5e02"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}