{"path":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    return getConfig(solrConfig, node);\n  }\n\n","bugFix":null,"bugIntro":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc809283a68a1108c6c8f7adc03ceec7a1475ad5","date":1484044538,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","bugFix":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053c4cbd30d228154839dc536ca5a15a5f0c48bf","date":1564559417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      return new CacheConfig(m);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs));\n\n    }\n\n\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      return new CacheConfig(m);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs));\n\n    }\n\n\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      List<String> pieces = StrUtils.splitSmart(xpath, '/');\n      String name = pieces.get(pieces.size() - 1);\n      m = Utils.getDeepCopy(m, 2);\n      m.put(NAME, name);\n      return new CacheConfig(m);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs));\n\n    }\n\n\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      return new CacheConfig(m);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs));\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      List<String> pieces = StrUtils.splitSmart(xpath, '/');\n      String name = pieces.get(pieces.size() - 1);\n      m = Utils.getDeepCopy(m, 2);\n      m.put(NAME, name);\n      return new CacheConfig(m, xpath);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs), xpath);\n\n    }\n\n\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      List<String> pieces = StrUtils.splitSmart(xpath, '/');\n      String name = pieces.get(pieces.size() - 1);\n      m = Utils.getDeepCopy(m, 2);\n      m.put(NAME, name);\n      return new CacheConfig(m);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs));\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      List<String> pieces = StrUtils.splitSmart(xpath, '/');\n      String name = pieces.get(pieces.size() - 1);\n      m = Utils.getDeepCopy(m, 2);\n      m.put(NAME, name);\n      return new CacheConfig(m, xpath);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs), xpath);\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if (node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if (m == null) return null;\n      List<String> pieces = StrUtils.splitSmart(xpath, '/');\n      String name = pieces.get(pieces.size() - 1);\n      m = Utils.getDeepCopy(m, 2);\n      m.put(NAME, name);\n      return new CacheConfig(m, xpath);\n    } else {\n      Map<String, String> attrs = DOMUtil.toMap(node.getAttributes());\n      attrs.put(NAME, node.getNodeName());\n      return new CacheConfig(applyOverlay(xpath, solrConfig.getOverlay(), attrs), xpath);\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String xpath) {\n    Node node = solrConfig.getNode(xpath, false);\n    if(node == null || !\"true\".equals(DOMUtil.getAttrOrDefault(node, \"enabled\", \"true\"))) {\n      Map<String, String> m = solrConfig.getOverlay().getEditableSubProperties(xpath);\n      if(m==null) return null;\n      List<String> parts = StrUtils.splitSmart(xpath, '/');\n      return getConfig(solrConfig,parts.get(parts.size()-1) , Collections.EMPTY_MAP,xpath);\n    }\n    return getConfig(solrConfig, node.getNodeName(),DOMUtil.toMap(node.getAttributes()), xpath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["c26f00b574427b55127e869b935845554afde1fa"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["531fe719c7218235a679452eb3d137bfd8fc6af1","dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"c44cc06c26e456fe9c215072b79fce30babe3975":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"f8061ddd97f3352007d927dae445884a6f3d857b":["dc809283a68a1108c6c8f7adc03ceec7a1475ad5","053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"dc809283a68a1108c6c8f7adc03ceec7a1475ad5":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","dc809283a68a1108c6c8f7adc03ceec7a1475ad5"],"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["39dabfd19b49b248d63cedbb01ea144ee5ad071c","f8061ddd97f3352007d927dae445884a6f3d857b"],"c26f00b574427b55127e869b935845554afde1fa":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["50dfd19525c8d73e856dca6edb64b7aea074037f","b0b597c65628ca9e73913a07e81691f8229bae35"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"dc809283a68a1108c6c8f7adc03ceec7a1475ad5":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","f8061ddd97f3352007d927dae445884a6f3d857b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","f8061ddd97f3352007d927dae445884a6f3d857b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}