{"path":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f1bb14a86a1d53b30fdfc242827ac38ef18d184","date":1295398557,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":["b94eb480792512e506a8eceb3d907fa9523d67e3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/PHPSerializedWriter[PHPSerializedResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    ArrayList<Fieldable> single = new ArrayList<Fieldable>();\n    LinkedHashMap<String, MultiValueField> multi \n      = new LinkedHashMap<String, MultiValueField>();\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        single.add(ff);\n      }\n    }\n\n    // obtain number of fields in doc\n    writeArrayOpener(single.size() + multi.size() + ((pseudoFields!=null) ? pseudoFields.size() : 0));\n\n    // output single value fields\n    for(Fieldable ff : single) {\n      SchemaField sf = schema.getField(ff.name());\n      writeKey(ff.name(),true);\n      sf.write(this, ff.name(), ff);\n    }\n    \n    // output multi value fields\n    for(MultiValueField mvf : multi.values()) {\n      writeKey(mvf.sfield.getName(), true);\n      writeArrayOpener(mvf.fields.size());\n      int i = 0;\n      for (Fieldable ff : mvf.fields) {\n        writeKey(i++, false);\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n    }\n\n    // output pseudo fields\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,false);\n    }\n    writeArrayCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["1da8d55113b689b06716246649de6f62430f15c0","9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["e79a6d080bdd5b2a8f56342cf571b5476de04180","6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"9f1bb14a86a1d53b30fdfc242827ac38ef18d184":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aedf81f068e430dec27d94310415cc6ff52731c"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1da8d55113b689b06716246649de6f62430f15c0":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","9f1bb14a86a1d53b30fdfc242827ac38ef18d184"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"9f1bb14a86a1d53b30fdfc242827ac38ef18d184":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","6aedf81f068e430dec27d94310415cc6ff52731c"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}