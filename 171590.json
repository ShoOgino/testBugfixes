{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bae0bbf5dfabb3daa76f77f636f38310a28de18a","date":1456970732,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e697e346b573b1b58353f45be00090a4f2de91e7","date":1457002125,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-6867\")\n  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"760628478e121972168791a2afa6af915192c4a6","date":1459842108,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09af2c9610ce53a4b25fd99344299b40318a4a1a","date":1459876565,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        while (true) {\n          try {\n            final GeoPath path = new GeoPath(planetModel, width);\n            for (int i = 0; i < pointCount; i++) {\n              final Point nextPoint = randomPointIn(pointZone);\n              path.addPoint(nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n            }\n            path.done();\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ac273b4e4637e6dd8cf5f2d90a474f897884d7","date":1505963386,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoPath path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoPath path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoShape path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(planetModel, path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85da33268a9a33d1a1dc71ad826ff61037f42cbf","date":1513200768,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase#testGeoPathRect().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase#testGeoPathRect().mjava","sourceNew":"  @Test\n  public void testGeoPathRect() {\n    new AbstractRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Shape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(maxRadius -20) + 20;\n        final Circle pointZone = ctx.getShapeFactory().circle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final ShapeFactory.LineStringBuilder builder = ctx.getShapeFactory().lineString();\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            builder.pointXY(nextPoint.getX(), nextPoint.getY());\n          }\n          builder.buffer(width);\n          try {\n            return builder.build();\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Shape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","sourceOld":"  @Test\n  public void testGeoPathRect() {\n    new Geo3dRectIntersectionTestHelper(ctx) {\n\n      @Override\n      protected Geo3dShape generateRandomShape(Point nearP) {\n        final Point centerPoint = randomPoint();\n        final int maxDistance = random().nextInt(160) + 20;\n        final Circle pointZone = ctx.makeCircle(centerPoint, maxDistance);\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = (random().nextInt(89)+1) * DEGREES_TO_RADIANS;\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        while (true) {\n          for (int i = 0; i < pointCount; i++) {\n            final Point nextPoint = randomPointIn(pointZone);\n            points[i] = new GeoPoint(planetModel, nextPoint.getY() * DEGREES_TO_RADIANS, nextPoint.getX() * DEGREES_TO_RADIANS);\n          }\n          \n          try {\n            final GeoPath path = GeoPathFactory.makeGeoPath(planetModel, width, points);\n            return new Geo3dShape(path, ctx);\n          } catch (IllegalArgumentException e) {\n            // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n            // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n            continue;\n          }\n        }\n      }\n\n      @Override\n      protected Point randomPointInEmptyShape(Geo3dShape shape) {\n        throw new IllegalStateException(\"unexpected; need to finish test code\");\n      }\n\n      @Override\n      protected int getWithinMinimum(int laps) {\n        // Long/thin so lets just find 1.\n        return 1;\n      }\n\n    }.testRelateWithRectangle();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"760628478e121972168791a2afa6af915192c4a6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["112d77ac8d3e10a362516ad834c9a11d35c94234"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","760628478e121972168791a2afa6af915192c4a6"],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["760628478e121972168791a2afa6af915192c4a6","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["760628478e121972168791a2afa6af915192c4a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e697e346b573b1b58353f45be00090a4f2de91e7":["112d77ac8d3e10a362516ad834c9a11d35c94234","bae0bbf5dfabb3daa76f77f636f38310a28de18a"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["af2638813028b254a88b418ebeafb541afb49653","e697e346b573b1b58353f45be00090a4f2de91e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85da33268a9a33d1a1dc71ad826ff61037f42cbf"]},"commit2Childs":{"760628478e121972168791a2afa6af915192c4a6":["09af2c9610ce53a4b25fd99344299b40318a4a1a","6240b74b884c5587f2a4062dd27d6c32bf228889","57ac273b4e4637e6dd8cf5f2d90a474f897884d7"],"af2638813028b254a88b418ebeafb541afb49653":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"bae0bbf5dfabb3daa76f77f636f38310a28de18a":["e697e346b573b1b58353f45be00090a4f2de91e7"],"09af2c9610ce53a4b25fd99344299b40318a4a1a":[],"85da33268a9a33d1a1dc71ad826ff61037f42cbf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"57ac273b4e4637e6dd8cf5f2d90a474f897884d7":["85da33268a9a33d1a1dc71ad826ff61037f42cbf","6240b74b884c5587f2a4062dd27d6c32bf228889"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"e697e346b573b1b58353f45be00090a4f2de91e7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653","bae0bbf5dfabb3daa76f77f636f38310a28de18a","e697e346b573b1b58353f45be00090a4f2de91e7"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["760628478e121972168791a2afa6af915192c4a6","09af2c9610ce53a4b25fd99344299b40318a4a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09af2c9610ce53a4b25fd99344299b40318a4a1a","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}