{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":null,"sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n      segment = si.name;\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n        TermInfosReader reader = new TermInfosReader(cfsDir, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n        if (termsIndexDivisor == -1) {\n          tisNoIndex = reader;\n        } else {\n          tis = reader;\n          tisNoIndex = null;\n        }\n\n        // make sure that all index files have been read or are kept open\n        // so that if an index update removes them we'll still have them\n        freqStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.FREQ_EXTENSION), readBufferSize);\n\n        if (fieldInfos.hasProx()) {\n          proxStream = cfsDir.openInput(IndexFileNames.segmentFileName(segment, IndexFileNames.PROX_EXTENSION), readBufferSize);\n        } else {\n          proxStream = null;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int,CodecProvider).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor, CodecProvider codecs) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      if (codecs == null) {\n        codecs = CodecProvider.getDefault();\n      }\n      this.codecs = codecs;      \n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n\n        this.termsIndexDivisor = termsIndexDivisor;\n\n        // Ask codec for its Fields\n        fields = si.getCodec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bc084aae57b2027dcd1e8786dabc47987dce76b","date":1289596643,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c498d3f8d75170b121f5eda2c6210ac5beb5d411","date":1289726298,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs codecInfo = si.getCodecInfo();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = codecInfo.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"/dev/null","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = new FieldInfos(cfsDir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.FIELD_INFOS_EXTENSION));\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor);\n        fields = segmentCodecs.codec().fieldsProducer(segmentReadState);\n        assert fields != null;\n        perDocProducer = segmentCodecs.codec().docsProducer(segmentReadState);\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe19cbe25754c715a0232f453039383119fc122c","date":1306110991,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":null,"sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":null,"sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        fields = segmentCodecs.codec().fieldsProducer(new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor));\n        assert fields != null;\n\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#CoreReaders(SegmentReader,Directory,SegmentInfo,int,int).mjava","sourceNew":null,"sourceOld":"    CoreReaders(SegmentReader origInstance, Directory dir, SegmentInfo si, int readBufferSize, int termsIndexDivisor) throws IOException {\n\n      if (termsIndexDivisor == 0) {\n        throw new IllegalArgumentException(\"indexDivisor must be < 0 (don't load terms index) or greater than 0 (got 0)\");\n      }\n\n      segment = si.name;\n      final SegmentCodecs segmentCodecs = si.getSegmentCodecs();\n      this.readBufferSize = readBufferSize;\n      this.dir = dir;\n\n      boolean success = false;\n\n      try {\n        Directory dir0 = dir;\n        if (si.getUseCompoundFile()) {\n          cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          dir0 = cfsReader;\n        }\n        cfsDir = dir0;\n        si.loadFieldInfos(cfsDir, false); // prevent opening the CFS to load fieldInfos\n        fieldInfos = si.getFieldInfos();\n        \n        this.termsIndexDivisor = termsIndexDivisor;\n        \n        // Ask codec for its Fields\n        final SegmentReadState segmentReadState = new SegmentReadState(cfsDir, si, fieldInfos, readBufferSize, termsIndexDivisor);\n        fields = segmentCodecs.codec().fieldsProducer(segmentReadState);\n        assert fields != null;\n        perDocProducer = segmentCodecs.codec().docsProducer(segmentReadState);\n        success = true;\n      } finally {\n        if (!success) {\n          decRef();\n        }\n      }\n\n      // Must assign this at the end -- if we hit an\n      // exception above core, we don't want to attempt to\n      // purge the FieldCache (will hit NPE because core is\n      // not assigned yet).\n      this.origInstance = origInstance;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["1224a4027481acce15495b03bce9b48b93b42722","fe19cbe25754c715a0232f453039383119fc122c"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["135621f3a0670a9394eb563224a3b76cc4dddc0f","fe19cbe25754c715a0232f453039383119fc122c"],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["85a883878c0af761245ab048babc63d099f835f3","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"8bc084aae57b2027dcd1e8786dabc47987dce76b":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["8bc084aae57b2027dcd1e8786dabc47987dce76b"],"fe19cbe25754c715a0232f453039383119fc122c":["1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe19cbe25754c715a0232f453039383119fc122c"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"c498d3f8d75170b121f5eda2c6210ac5beb5d411":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"85a883878c0af761245ab048babc63d099f835f3":["c498d3f8d75170b121f5eda2c6210ac5beb5d411"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","8bc084aae57b2027dcd1e8786dabc47987dce76b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8bc084aae57b2027dcd1e8786dabc47987dce76b":["c498d3f8d75170b121f5eda2c6210ac5beb5d411","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fe19cbe25754c715a0232f453039383119fc122c":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","135621f3a0670a9394eb563224a3b76cc4dddc0f","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","fe19cbe25754c715a0232f453039383119fc122c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}