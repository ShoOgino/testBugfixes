{"path":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","commits":[{"id":"39899cd24f88f2d580857d57be8aebc1f467f5c6","date":1363793635,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"/dev/null","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<String,Integer>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<String,Integer>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = new IndexSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<String,Integer>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<String,Integer>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518","date":1398331323,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      if (VERBOSE) System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d524d41bd211f811312cf6639e3792dae4df6cbb","date":1398850727,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      if (VERBOSE) System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument#testLazy().mjava","sourceNew":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      Document d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (IndexableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      if (VERBOSE) System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final IndexableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (IndexableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (IndexableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  public void testLazy() throws Exception {\n    final int id = random().nextInt(NUM_DOCS);\n    IndexReader reader = DirectoryReader.open(dir);\n    try {\n      Query q = new TermQuery(new Term(\"docid\", \"\"+id));\n      IndexSearcher searcher = newSearcher(reader);\n      ScoreDoc[] hits = searcher.search(q, 100).scoreDocs;\n      assertEquals(\"Too many docs\", 1, hits.length);\n      LazyTestingStoredFieldVisitor visitor \n        = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                            FIELDS);\n      reader.document(hits[0].doc, visitor);\n      StoredDocument d = visitor.doc;\n\n      int numFieldValues = 0;\n      Map<String,Integer> fieldValueCounts = new HashMap<>();\n\n      // at this point, all FIELDS should be Lazy and unrealized\n      for (StorableField f : d) {\n        numFieldValues++;   \n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded on first pass\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          int count = fieldValueCounts.containsKey(f.name()) ?\n            fieldValueCounts.get(f.name()) : 0;\n          count++;\n          fieldValueCounts.put(f.name(), count);\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertFalse(f.name() + \" is loaded\", lf.hasBeenLoaded());\n        }\n      }\n      if (VERBOSE) System.out.println(\"numFieldValues == \" + numFieldValues);\n      assertEquals(\"numFieldValues\", 1 + (NUM_VALUES * FIELDS.length), \n                   numFieldValues);\n        \n      for (String fieldName : fieldValueCounts.keySet()) {\n        assertEquals(\"fieldName count: \" + fieldName, \n                     NUM_VALUES, (int)fieldValueCounts.get(fieldName));\n      }\n\n      // pick a single field name to load a single value\n      final String fieldName = FIELDS[random().nextInt(FIELDS.length)];\n      final StorableField[] fieldValues = d.getFields(fieldName);\n      assertEquals(\"#vals in field: \" + fieldName, \n                   NUM_VALUES, fieldValues.length);\n      final int valNum = random().nextInt(fieldValues.length);\n      assertEquals(id + \"_\" + fieldName + \"_\" + valNum,\n                   fieldValues[valNum].stringValue());\n      \n      // now every value of fieldName should be loaded\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"load_later\")) {\n          fail(\"load_later was loaded too soon\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // use the same LazyDoc to ask for one more lazy field\n      visitor = new LazyTestingStoredFieldVisitor(new LazyDocument(reader, hits[0].doc),\n                                                  \"load_later\");\n      reader.document(hits[0].doc, visitor);\n      d = visitor.doc;\n      \n      // ensure we have all the values we expect now, and that\n      // adding one more lazy field didn't \"unload\" the existing LazyField's\n      // we already loaded.\n      for (StorableField f : d) {\n        if (f.name().equals(\"never_load\")) {\n          fail(\"never_load was loaded\");\n        }\n        if (f.name().equals(\"docid\")) {\n          assertFalse(f.name(), f instanceof LazyDocument.LazyField);\n        } else {\n          assertTrue(f.name() + \" is \" + f.getClass(),\n                     f instanceof LazyDocument.LazyField);\n          LazyDocument.LazyField lf = (LazyDocument.LazyField) f;\n          assertEquals(f.name() + \" is loaded?\", \n                       lf.name().equals(fieldName), lf.hasBeenLoaded());\n        }\n      }\n\n      // even the underlying doc shouldn't have never_load\n      assertNull(\"never_load was loaded in wrapped doc\",\n                 visitor.lazyDoc.getDocument().getField(\"never_load\"));\n\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["d524d41bd211f811312cf6639e3792dae4df6cbb"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d524d41bd211f811312cf6639e3792dae4df6cbb","e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518"],"d524d41bd211f811312cf6639e3792dae4df6cbb":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"e0d0750f8e3774f13e9bd9f7f9fcb51f7114d518":["d524d41bd211f811312cf6639e3792dae4df6cbb"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}