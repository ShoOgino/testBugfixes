{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#appendBlock().mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#appendBlock().mjava","pathOld":"/dev/null","sourceNew":"  private void appendBlock() {\n    if (blocks.size() >= MAX_BLOCKS_BEFORE_BLOCK_EXPANSION && blockBits < maxBitsPerBlock) {\n      rewriteToBlockSize(blockBits + 1);\n      if (blocks.getLast().hasRemaining()) {\n        return;\n      }\n    }\n\n    final int requiredBlockSize = 1 << blockBits;\n    currentBlock = blockAllocate.apply(requiredBlockSize);\n    assert currentBlock.capacity() == requiredBlockSize;\n    blocks.add(currentBlock);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"679def3e975e7c840728e0f1123a2785fc68b3f9","date":1601298488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#appendBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#appendBlock().mjava","sourceNew":"  private void appendBlock() {\n    if (blocks.size() >= MAX_BLOCKS_BEFORE_BLOCK_EXPANSION && blockBits < maxBitsPerBlock) {\n      rewriteToBlockSize(blockBits + 1);\n      if (blocks.getLast().hasRemaining()) {\n        return;\n      }\n    }\n\n    final int requiredBlockSize = 1 << blockBits;\n    currentBlock = blockAllocate.apply(requiredBlockSize);\n    assert currentBlock.capacity() == requiredBlockSize;\n    blocks.add(currentBlock);\n    ramBytesUsed += RamUsageEstimator.NUM_BYTES_OBJECT_REF + currentBlock.capacity();\n  }\n\n","sourceOld":"  private void appendBlock() {\n    if (blocks.size() >= MAX_BLOCKS_BEFORE_BLOCK_EXPANSION && blockBits < maxBitsPerBlock) {\n      rewriteToBlockSize(blockBits + 1);\n      if (blocks.getLast().hasRemaining()) {\n        return;\n      }\n    }\n\n    final int requiredBlockSize = 1 << blockBits;\n    currentBlock = blockAllocate.apply(requiredBlockSize);\n    assert currentBlock.capacity() == requiredBlockSize;\n    blocks.add(currentBlock);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"679def3e975e7c840728e0f1123a2785fc68b3f9":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["679def3e975e7c840728e0f1123a2785fc68b3f9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"679def3e975e7c840728e0f1123a2785fc68b3f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["679def3e975e7c840728e0f1123a2785fc68b3f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}