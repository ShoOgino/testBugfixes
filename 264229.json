{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testAnalyzeEvaluator().mjava","sourceNew":"    @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"    @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7ced979f39d7651addfc7d805e1d9bfac215822","date":1589391432,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","sourceNew":"  @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"    @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":["39e68504a385449bfdc498cfda2909b581df36f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testAnalyzeEvaluator().mjava","sourceNew":"  @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      @SuppressWarnings({\"rawtypes\"})\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAnalyzeEvaluator() throws Exception {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"test_t\", \"l b c d c\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n\n    SolrClientCache cache = new SolrClientCache();\n    try {\n\n      String expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n      SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n      StreamContext context = new StreamContext();\n      solrStream.setStreamContext(context);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      Tuple t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      expr = \"analyze(\\\"hello world\\\", test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertEquals(tuples.size(), 1);\n      List terms = (List)tuples.get(0).get(\"return-value\");\n      assertTrue(terms.get(0).equals(\"hello\"));\n      assertTrue(terms.get(1).equals(\"world\"));\n\n      //Try with single param\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 5);\n\n      t = tuples.get(0);\n      assertTrue(t.getString(\"test_t\").equals(\"l\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(1);\n      assertTrue(t.getString(\"test_t\").equals(\"b\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(2);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n\n      t = tuples.get(3);\n      assertTrue(t.getString(\"test_t\").equals(\"d\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      t = tuples.get(4);\n      assertTrue(t.getString(\"test_t\").equals(\"c\"));\n      assertTrue(t.getString(\"id\").equals(\"1\"));\n\n      //Try with null in the test_t field\n      expr = \"cartesianProduct(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n\n      //Test annotating tuple\n      expr = \"select(search(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", fl=\\\"id, test_t\\\", sort=\\\"id desc\\\"), analyze(test_t, test_t) as test1_t)\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", expr);\n      paramsLoc.set(\"qt\", \"/stream\");\n\n      solrStream = new SolrStream(url, paramsLoc);\n\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      assertTrue(tuples.size() == 1);\n      List l = (List)tuples.get(0).get(\"test1_t\");\n      assertTrue(l.get(0).equals(\"l\"));\n      assertTrue(l.get(1).equals(\"b\"));\n      assertTrue(l.get(2).equals(\"c\"));\n      assertTrue(l.get(3).equals(\"d\"));\n      assertTrue(l.get(4).equals(\"c\"));\n    } finally {\n      cache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d7ced979f39d7651addfc7d805e1d9bfac215822":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"d7ced979f39d7651addfc7d805e1d9bfac215822":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["d7ced979f39d7651addfc7d805e1d9bfac215822"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}