{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/StreamingTest#testTuple().mjava","sourceNew":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  private void testTuple() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\", \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n    del(\"*:*\");\n    commit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\",\"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assert(s.equals(\"hello0\")) ;\n\n    long l = tuple.getLong(\"a_i\");\n    assert(l == 0);\n\n    double d = tuple.getDouble(\"a_f\");\n    assert(d == 5.1);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assert(stringList.get(0).equals(\"a\"));\n    assert(stringList.get(1).equals(\"b\"));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assert(longList.get(0).longValue() == 1);\n    assert(longList.get(1).longValue() == 2);\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assert(doubleList.get(0).doubleValue() == 1.2);\n    assert(doubleList.get(1).doubleValue() == 1.3);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n            \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      Tuple tuple = tuples.get(0);\n\n      String s = tuple.getString(\"a_s\");\n      assertEquals(\"hello0\", s);\n\n\n      long l = tuple.getLong(\"a_i\");\n      assertEquals(0, l);\n\n      double d = tuple.getDouble(\"a_f\");\n      assertEquals(5.1, d, 0.001);\n\n\n      List<String> stringList = tuple.getStrings(\"s_multi\");\n      assertEquals(\"a\", stringList.get(0));\n      assertEquals(\"b\", stringList.get(1));\n\n      List<Long> longList = tuple.getLongs(\"i_multi\");\n      assertEquals(1, longList.get(0).longValue());\n      assertEquals(2, longList.get(1).longValue());\n\n      List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n      assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n      assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTuple().mjava","sourceNew":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n            \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n      stream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(stream);\n      Tuple tuple = tuples.get(0);\n\n      String s = tuple.getString(\"a_s\");\n      assertEquals(\"hello0\", s);\n\n\n      long l = tuple.getLong(\"a_i\");\n      assertEquals(0, l);\n\n      double d = tuple.getDouble(\"a_f\");\n      assertEquals(5.1, d, 0.001);\n\n\n      List<String> stringList = tuple.getStrings(\"s_multi\");\n      assertEquals(\"a\", stringList.get(0));\n      assertEquals(\"b\", stringList.get(1));\n\n      List<Long> longList = tuple.getLongs(\"i_multi\");\n      assertEquals(1, longList.get(0).longValue());\n      assertEquals(2, longList.get(1).longValue());\n\n      List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n      assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n      assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTuple() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"5.1\", \"s_multi\", \"a\", \"s_multi\", \"b\", \"i_multi\",\n                 \"1\", \"i_multi\", \"2\", \"f_multi\", \"1.2\", \"f_multi\", \"1.3\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f,s_multi,i_multi,f_multi\", \"sort\", \"a_s asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    List<Tuple> tuples = getTuples(stream);\n    Tuple tuple = tuples.get(0);\n\n    String s = tuple.getString(\"a_s\");\n    assertEquals(\"hello0\", s);\n    ;\n\n    long l = tuple.getLong(\"a_i\");\n    assertEquals(0, l);\n\n    double d = tuple.getDouble(\"a_f\");\n    assertEquals(5.1, d, 0.001);\n\n\n    List<String> stringList = tuple.getStrings(\"s_multi\");\n    assertEquals(\"a\", stringList.get(0));\n    assertEquals(\"b\", stringList.get(1));\n\n    List<Long> longList = tuple.getLongs(\"i_multi\");\n    assertEquals(1, longList.get(0).longValue());\n    assertEquals(2, longList.get(1).longValue());\n\n    List<Double> doubleList = tuple.getDoubles(\"f_multi\");\n    assertEquals(1.2, doubleList.get(0).doubleValue(), 0.001);\n    assertEquals(1.3, doubleList.get(1).doubleValue(), 0.001);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"73450c0955930295d34703e7ddbfc6973b7a121a":["f00f1c5fad501b66705121feb623f8cfbb6712f9","b940572a59da1b42b6c20ab5278155b12816807a"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"b940572a59da1b42b6c20ab5278155b12816807a":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"58bb411852ed0249bf624e9fc223b4973776d357":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["f00f1c5fad501b66705121feb623f8cfbb6712f9","b940572a59da1b42b6c20ab5278155b12816807a"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58bb411852ed0249bf624e9fc223b4973776d357"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["f00f1c5fad501b66705121feb623f8cfbb6712f9","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["58bb411852ed0249bf624e9fc223b4973776d357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"58bb411852ed0249bf624e9fc223b4973776d357":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}