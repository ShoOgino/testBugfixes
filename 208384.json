{"path":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","commits":[{"id":"17aa383cdefa6c6eb46c3288753026d489892e36","date":1114593391,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"sandbox/contributions/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"\tpublic static void main(String[] args) throws Exception {\n\t\tIndexReader reader = null;\n\t\tif (args.length == 1) {\n\t\t\treader = IndexReader.open(args[0]);\n\t\t} else {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tTermInfoQueue tiq = new TermInfoQueue(numTerms);\n\t\tTermEnum terms = reader.terms();\n\n\t\twhile (terms.next()) {\n\t\t\ttiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n\t\t}\n\n\t\twhile (tiq.size() != 0) {\n\t\t\tTermInfo termInfo = (TermInfo) tiq.pop();\n\t\t\tSystem.out.println(termInfo.term + \" \" + termInfo.docFreq);\n\t\t}\n\n\t\treader.close();\n\t}\n\n","sourceOld":"\tpublic static void main(String[] args) throws Exception {\n\t\tIndexReader reader = null;\n\t\tif (args.length == 1) {\n\t\t\treader = IndexReader.open(args[0]);\n\t\t} else {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tTermInfoQueue tiq = new TermInfoQueue(numTerms);\n\t\tTermEnum terms = reader.terms();\n\n\t\twhile (terms.next()) {\n\t\t\ttiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n\t\t}\n\n\t\twhile (tiq.size() != 0) {\n\t\t\tTermInfo termInfo = (TermInfo) tiq.pop();\n\t\t\tSystem.out.println(termInfo.term + \" \" + termInfo.docFreq);\n\t\t}\n\n\t\treader.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c348b53523fee77a032d6c031aa5bae3e7f4545","date":1139512634,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"\tpublic static void main(String[] args) throws Exception {\n\t\tIndexReader reader = null;\n\t\tif (args.length == 1) {\n\t\t\treader = IndexReader.open(args[0]);\n\t\t} else {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tTermInfoQueue tiq = new TermInfoQueue(numTerms);\n\t\tTermEnum terms = reader.terms();\n\n\t\twhile (terms.next()) {\n\t\t\ttiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n\t\t}\n\n\t\twhile (tiq.size() != 0) {\n\t\t\tTermInfo termInfo = (TermInfo) tiq.pop();\n\t\t\tSystem.out.println(termInfo.term + \" \" + termInfo.docFreq);\n\t\t}\n\n\t\treader.close();\n\t}\n\n","bugFix":null,"bugIntro":["f0aae73ca2eeb899108e9fe36611ddf5a83ec790"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/HighFreqTerms#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    IndexReader reader = null;\n    String field = null;\n    if (args.length == 1) {\n      reader = IndexReader.open(args[0]);\n    } else if (args.length == 2) {\n      reader = IndexReader.open(args[0]);\n      field = args[1];\n    } else {\n      usage();\n      System.exit(1);\n    }\n\n    TermInfoQueue tiq = new TermInfoQueue(numTerms);\n    TermEnum terms = reader.terms();\n\n    if (field != null) { \n      while (terms.next()) {\n        if (terms.term().field().equals(field)) {\n          tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n        }\n      }\n    }\n    else {\n      while (terms.next()) {\n        tiq.insert(new TermInfo(terms.term(), terms.docFreq()));\n      }\n    }\n    while (tiq.size() != 0) {\n      TermInfo termInfo = (TermInfo) tiq.pop();\n      System.out.println(termInfo.term + \" \" + termInfo.docFreq);\n    }\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9c348b53523fee77a032d6c031aa5bae3e7f4545":["17aa383cdefa6c6eb46c3288753026d489892e36"],"17aa383cdefa6c6eb46c3288753026d489892e36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9c348b53523fee77a032d6c031aa5bae3e7f4545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"9c348b53523fee77a032d6c031aa5bae3e7f4545":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"17aa383cdefa6c6eb46c3288753026d489892e36":["9c348b53523fee77a032d6c031aa5bae3e7f4545"],"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17aa383cdefa6c6eb46c3288753026d489892e36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}