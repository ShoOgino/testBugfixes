{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae862628c7a5275e1ff00ff3bc9803dedf124a9","date":1358939646,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","sourceNew":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","sourceNew":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      assertEquals(\"invalid residue\", 0, (int) root.residue);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsAggregatorTest#testDifferentNumResults().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testDifferentNumResults().mjava","sourceNew":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = FacetsCollector.create(randomAccumulator(fsp, indexReader, taxoReader));\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","sourceOld":"  @Test\n  public void testDifferentNumResults() throws Exception {\n    // test the collector w/ FacetRequests and different numResults\n    DirectoryReader indexReader = DirectoryReader.open(indexDir);\n    TaxonomyReader taxoReader = new DirectoryTaxonomyReader(taxoDir);\n    IndexSearcher searcher = new IndexSearcher(indexReader);\n    \n    FacetSearchParams fsp = new FacetSearchParams(new CountFacetRequest(CP_A, NUM_CHILDREN_CP_A), \n        new CountFacetRequest(CP_B, NUM_CHILDREN_CP_B));\n    FacetsCollector fc = new CountingFacetsCollector(fsp , taxoReader);\n    TermQuery q = new TermQuery(A);\n    searcher.search(q, fc);\n    \n    List<FacetResult> facetResults = fc.getFacetResults();\n    assertEquals(\"invalid number of facet results\", 2, facetResults.size());\n    for (FacetResult res : facetResults) {\n      FacetResultNode root = res.getFacetResultNode();\n      assertEquals(\"wrong count for \" + root.label, termExpectedCounts.get(root.label), (int) root.value);\n      for (FacetResultNode child : root.subResults) {\n        assertEquals(\"wrong count for \" + child.label, termExpectedCounts.get(child.label), (int) child.value);\n      }\n    }\n    \n    IOUtils.close(indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["dae862628c7a5275e1ff00ff3bc9803dedf124a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","dae862628c7a5275e1ff00ff3bc9803dedf124a9"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["dae862628c7a5275e1ff00ff3bc9803dedf124a9","07155cdd910937cdf6877e48884d5782845c8b8b"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["571abba77e55fea386a38c0024f72ffa5b37a9ad","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}