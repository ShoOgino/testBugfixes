{"path":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","commits":[{"id":"e0d0e8297e9b3e015826cdb7e42404953c339851","date":1215099614,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3600cc523749f65697a76d2d0166cb0df07e458a","date":1229590227,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","sourceNew":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**\n   * @param in Token stream to be filtered.\n   * @param generateWordParts If 1, causes parts of words to be generated: \"PowerShot\", \"Power-Shot\" => \"Power\" \"Shot\"\n   * @param generateNumberParts If 1, causes number subwords to be generated: \"500-42\" => \"500\" \"42\"\n   * @param catenateWords  1, causes maximum runs of word parts to be catenated: \"wi-fi\" => \"wifi\"\n   * @param catenateNumbers If 1, causes maximum runs of number parts to be catenated: \"500-42\" => \"50042\"\n   * @param catenateAll If 1, causes all subword parts to be catenated: \"wi-fi-4000\" => \"wifi4000\"\n   * @param splitOnCaseChange 1, causes \"PowerShot\" to be two tokens; (\"Power-Shot\" remains two parts regards)\n   * @param preserveOriginal If 1, includes original words in subwords: \"500-42\" => \"500\" \"42\" \"500-42\"\n   */\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660378637a9b6a034e3c28b6ee5bca287f414435","date":1247254833,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","sourceNew":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","sourceNew":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in, int generateWordParts, int generateNumberParts, int catenateWords, int catenateNumbers, int catenateAll, int splitOnCaseChange, int preserveOriginal) {\n    this(in, defaultWordDelimTable, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","pathOld":"src/java/org/apache/solr/analysis/WordDelimiterFilter#WordDelimiterFilter(TokenStream,int,int,int,int,int,int,int).mjava","sourceNew":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","sourceOld":"  /**   * Compatibility constructor\n   * \n   * @deprecated Use\n   *             {@link #WordDelimiterFilter(TokenStream, int, int, int, int, int, int, int, int, int, CharArraySet)}\n   *             instead.\n   */\n  @Deprecated\n  public WordDelimiterFilter(TokenStream in,\n                             int generateWordParts,\n                             int generateNumberParts,\n                             int catenateWords,\n                             int catenateNumbers,\n                             int catenateAll,\n                             int splitOnCaseChange,\n                             int preserveOriginal) {\n    this(in, WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE, generateWordParts, generateNumberParts, catenateWords, catenateNumbers, catenateAll, splitOnCaseChange, preserveOriginal);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3600cc523749f65697a76d2d0166cb0df07e458a":["e0d0e8297e9b3e015826cdb7e42404953c339851"],"e0d0e8297e9b3e015826cdb7e42404953c339851":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["660378637a9b6a034e3c28b6ee5bca287f414435"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"660378637a9b6a034e3c28b6ee5bca287f414435":["3600cc523749f65697a76d2d0166cb0df07e458a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3600cc523749f65697a76d2d0166cb0df07e458a":["660378637a9b6a034e3c28b6ee5bca287f414435"],"e0d0e8297e9b3e015826cdb7e42404953c339851":["3600cc523749f65697a76d2d0166cb0df07e458a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e0d0e8297e9b3e015826cdb7e42404953c339851"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"660378637a9b6a034e3c28b6ee5bca287f414435":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}