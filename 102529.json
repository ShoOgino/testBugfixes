{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestSort#testOutOfOrderDocsScoringSort().mjava","sourceNew":null,"sourceOld":"  public void testOutOfOrderDocsScoringSort() throws Exception {\n\n    // Two Sort criteria to instantiate the multi/single comparators.\n    Sort[] sort = new Sort[] {new Sort(SortField.FIELD_DOC), new Sort() };\n    boolean[][] tfcOptions = new boolean[][] {\n        new boolean[] { false, false, false },\n        new boolean[] { false, false, true },\n        new boolean[] { false, true, false },\n        new boolean[] { false, true, true },\n        new boolean[] { true, false, false },\n        new boolean[] { true, false, true },\n        new boolean[] { true, true, false },\n        new boolean[] { true, true, true },\n    };\n    String[] actualTFCClasses = new String[] {\n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorNonScoringCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringNoMaxScoreCollector\", \n        \"OutOfOrderOneComparatorScoringMaxScoreCollector\" \n    };\n    \n    BooleanQuery bq = new BooleanQuery();\n    // Add a Query with SHOULD, since bw.scorer() returns BooleanScorer2\n    // which delegates to BS if there are no mandatory clauses.\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    // Set minNrShouldMatch to 1 so that BQ will not optimize rewrite to return\n    // the clause instead of BQ.\n    bq.setMinimumNumberShouldMatch(1);\n    for (int i = 0; i < sort.length; i++) {\n      for (int j = 0; j < tfcOptions.length; j++) {\n        TopDocsCollector tdc = TopFieldCollector.create(sort[i], 10,\n            tfcOptions[j][0], tfcOptions[j][1], tfcOptions[j][2], false);\n\n        assertTrue(tdc.getClass().getName().endsWith(\"$\"+actualTFCClasses[j]));\n        \n        full.search(bq, tdc);\n        \n        TopDocs td = tdc.topDocs();\n        ScoreDoc[] sd = td.scoreDocs;\n        assertEquals(10, sd.length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}