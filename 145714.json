{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","commits":[{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7","date":1499927883,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"586e44d7060ae173c208852763edfcb4b86bb15d","date":1499930272,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['WAITING', 'STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.xyz:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}',\" +\n        \"'xyz': 'foo'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/foo/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/foo/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/foo/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/foo/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2010e2591e2d11678b59291d2ab31bd30e3ac7","date":1559150835,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(mockService.requests.toString(), 0, mockService.requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(mockService.requests.toString(), 4, mockService.requests.size());\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = mockService.requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = mockService.requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(mockService.requests.toString(), 0, mockService.requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(mockService.requests.toString(), 4, mockService.requests.size());\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = mockService.requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = mockService.requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(requests.toString(), 0, requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(requests.toString(), 4, requests.size());\n    requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(mockService.requests.toString(), 0, mockService.requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(mockService.requests.toString(), 4, mockService.requests.size());\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = mockService.requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = mockService.requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(mockService.requests.toString(), 0, mockService.requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(mockService.requests.toString(), 4, mockService.requests.size());\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = mockService.requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = mockService.requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/HttpTriggerListenerTest#testHttpListenerIntegration().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHttpListenerIntegration() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [\" +\n        \"{'name':'test','class':'\" + TestDummyAction.class.getName() + \"'}\" +\n        \"]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_added_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : 'test',\" +\n        \"'afterAction' : ['test'],\" +\n        \"'class' : '\" + HttpTriggerListener.class.getName() + \"',\" +\n        \"'url' : '\" + mockService.server.getURI().toString() + \"/${config.name:invalid}/${config.properties.beforeAction:invalid}/${stage}',\" +\n        \"'payload': 'actionName=${actionName}, source=${event.source}, type=${event.eventType}',\" +\n        \"'header.X-Foo' : '${config.name:invalid}'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertEquals(mockService.requests.toString(), 0, mockService.requests.size());\n\n    cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n\n    Thread.sleep(5000);\n\n    assertEquals(mockService.requests.toString(), 4, mockService.requests.size());\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"Content-Type: application/json\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"X-Foo: foo\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"source=node_added_trigger\")));\n    mockService.requests.forEach(s -> assertTrue(s.contains(\"type=NODEADDED\")));\n\n    String request = mockService.requests.get(0);\n    assertTrue(request, request.startsWith(\"/foo/test/STARTED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n\n    request = mockService.requests.get(1);\n    assertTrue(request, request.startsWith(\"/foo/test/BEFORE_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(2);\n    assertTrue(request, request.startsWith(\"/foo/test/AFTER_ACTION\"));\n    assertTrue(request, request.contains(\"actionName=test,\")); // actionName\n\n    request = mockService.requests.get(3);\n    assertTrue(request, request.startsWith(\"/foo/test/SUCCEEDED\"));\n    assertTrue(request, request.contains(\"actionName=,\")); // empty actionName\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7":["c5fd294da67452cd8d116692194908de00eb5209"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"c5fd294da67452cd8d116692194908de00eb5209":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["89948af0461fead48f44ba8fb7866f107ce83f22","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["89948af0461fead48f44ba8fb7866f107ce83f22"],"586e44d7060ae173c208852763edfcb4b86bb15d":["c5fd294da67452cd8d116692194908de00eb5209","fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7":["c304e97e7c1d472bc70e801b35ee78583916c6cd","586e44d7060ae173c208852763edfcb4b86bb15d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"c5fd294da67452cd8d116692194908de00eb5209":["fbb79fd29b0642f24ed7c07bb1ab4665dfc0b2a7","586e44d7060ae173c208852763edfcb4b86bb15d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","c5fd294da67452cd8d116692194908de00eb5209","560c18d71dad43d675158783c3840f8c80d6d39c"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"586e44d7060ae173c208852763edfcb4b86bb15d":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"89948af0461fead48f44ba8fb7866f107ce83f22":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","586e44d7060ae173c208852763edfcb4b86bb15d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}