{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#addClass(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#addClass(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#addClass(String).mjava","sourceNew":"  /**\n   * Add a character class to the tree. It is used by\n   * {@link PatternParser PatternParser} as callback to add character classes.\n   * Character classes define the valid word characters for hyphenation. If a\n   * word contains a character not defined in any of the classes, it is not\n   * hyphenated. It also defines a way to normalize the characters in order to\n   * compare them with the stored patterns. Usually pattern files use only lower\n   * case characters, in this case a class for letter 'a', for example, should\n   * be defined as \"aA\", the first character being the normalization char.\n   */\n  public void addClass(String chargroup) {\n    if (chargroup.length() > 0) {\n      char equivChar = chargroup.charAt(0);\n      char[] key = new char[2];\n      key[1] = 0;\n      for (int i = 0; i < chargroup.length(); i++) {\n        key[0] = chargroup.charAt(i);\n        classmap.insert(key, 0, equivChar);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a character class to the tree. It is used by\n   * {@link PatternParser PatternParser} as callback to add character classes.\n   * Character classes define the valid word characters for hyphenation. If a\n   * word contains a character not defined in any of the classes, it is not\n   * hyphenated. It also defines a way to normalize the characters in order to\n   * compare them with the stored patterns. Usually pattern files use only lower\n   * case characters, in this case a class for letter 'a', for example, should\n   * be defined as \"aA\", the first character being the normalization char.\n   */\n  public void addClass(String chargroup) {\n    if (chargroup.length() > 0) {\n      char equivChar = chargroup.charAt(0);\n      char[] key = new char[2];\n      key[1] = 0;\n      for (int i = 0; i < chargroup.length(); i++) {\n        key[0] = chargroup.charAt(i);\n        classmap.insert(key, 0, equivChar);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#addClass(String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/HyphenationTree#addClass(String).mjava","sourceNew":"  /**\n   * Add a character class to the tree. It is used by\n   * {@link PatternParser PatternParser} as callback to add character classes.\n   * Character classes define the valid word characters for hyphenation. If a\n   * word contains a character not defined in any of the classes, it is not\n   * hyphenated. It also defines a way to normalize the characters in order to\n   * compare them with the stored patterns. Usually pattern files use only lower\n   * case characters, in this case a class for letter 'a', for example, should\n   * be defined as \"aA\", the first character being the normalization char.\n   */\n  public void addClass(String chargroup) {\n    if (chargroup.length() > 0) {\n      char equivChar = chargroup.charAt(0);\n      char[] key = new char[2];\n      key[1] = 0;\n      for (int i = 0; i < chargroup.length(); i++) {\n        key[0] = chargroup.charAt(i);\n        classmap.insert(key, 0, equivChar);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add a character class to the tree. It is used by\n   * {@link PatternParser PatternParser} as callback to add character classes.\n   * Character classes define the valid word characters for hyphenation. If a\n   * word contains a character not defined in any of the classes, it is not\n   * hyphenated. It also defines a way to normalize the characters in order to\n   * compare them with the stored patterns. Usually pattern files use only lower\n   * case characters, in this case a class for letter 'a', for example, should\n   * be defined as \"aA\", the first character being the normalization char.\n   */\n  public void addClass(String chargroup) {\n    if (chargroup.length() > 0) {\n      char equivChar = chargroup.charAt(0);\n      char[] key = new char[2];\n      key[1] = 0;\n      for (int i = 0; i < chargroup.length(); i++) {\n        key[0] = chargroup.charAt(i);\n        classmap.insert(key, 0, equivChar);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}