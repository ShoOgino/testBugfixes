{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","commits":[{"id":"74fe524b3f952dcace4fd46ad5e69b16d5090c57","date":1338527592,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,BufferedReader,String).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          BufferedReader reader,\n                          String conditionPattern) throws IOException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fc791afc075c00a9ce29ca03eca7a6c143c28a","date":1341671452,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#parseAffix(TreeMap[String,List[Character]],String,LineNumberReader,String,Map[String,Integer]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#parseAffix(CharArrayMap[List[HunspellAffix]],String,LineNumberReader,String,boolean).mjava","sourceNew":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @param seenPatterns map from condition -> index of patterns, for deduplication.\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(TreeMap<String,List<Character>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          Map<String,Integer> seenPatterns) throws IOException, ParseException {\n    \n    BytesRef scratch = new BytesRef();\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    affixData = ArrayUtil.grow(affixData, (currentAffix << 3) + (numLines << 3));\n    ByteArrayDataOutput affixWriter = new ByteArrayDataOutput(affixData, currentAffix << 3, numLines << 3);\n    \n    for (int i = 0; i < numLines; i++) {\n      if (currentAffix > Short.MAX_VALUE) {\n        throw new UnsupportedOperationException(\"Too many affixes, please report this to dev@lucene.apache.org\");\n      }\n      assert affixWriter.getPosition() == currentAffix << 3;\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n      }\n      \n      char flag = flagParsingStrategy.parseFlag(ruleArgs[1]);\n      String strip = ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2];\n      String affixArg = ruleArgs[3];\n      char appendFlags[] = null;\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        affixArg = affixArg.substring(0, flagSep);\n\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        appendFlags = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n      }\n\n      String condition = ruleArgs[4];\n      // at least the gascon affix file has this issue\n      if (condition.startsWith(\"[\") && !condition.endsWith(\"]\")) {\n        condition = condition + \"]\";\n      }\n      // \"dash hasn't got special meaning\" (we must escape it)\n      if (condition.indexOf('-') >= 0) {\n        condition = condition.replace(\"-\", \"\\\\-\");\n      }\n\n      String regex = String.format(Locale.ROOT, conditionPattern, condition);\n      \n      // deduplicate patterns\n      Integer patternIndex = seenPatterns.get(regex);\n      if (patternIndex == null) {\n        patternIndex = patterns.size();\n        seenPatterns.put(regex, patternIndex);\n        Pattern pattern = Pattern.compile(regex);\n        patterns.add(pattern);\n      }\n      \n      scratch.copyChars(strip);\n      int stripOrd = stripLookup.add(scratch);\n      if (stripOrd < 0) {\n        // already exists in our hash\n        stripOrd = (-stripOrd)-1;\n      }\n\n      if (appendFlags == null) {\n        appendFlags = NOFLAGS;\n      }\n      \n      final int hashCode = encodeFlagsWithHash(scratch, appendFlags);\n      int appendFlagsOrd = flagLookup.add(scratch, hashCode);\n      if (appendFlagsOrd < 0) {\n        // already exists in our hash\n        appendFlagsOrd = (-appendFlagsOrd)-1;\n      } else if (appendFlagsOrd > Short.MAX_VALUE) {\n        // this limit is probably flexible, but its a good sanity check too\n        throw new UnsupportedOperationException(\"Too many unique flags, please report this to dev@lucene.apache.org\");\n      }\n      \n      affixWriter.writeShort((short)flag);\n      affixWriter.writeShort((short)stripOrd);\n      // encode crossProduct into patternIndex\n      int patternOrd = patternIndex.intValue() << 1 | (crossProduct ? 1 : 0);\n      affixWriter.writeShort((short)patternOrd);\n      affixWriter.writeShort((short)appendFlagsOrd);\n      \n      List<Character> list = affixes.get(affixArg);\n      if (list == null) {\n        list = new ArrayList<Character>();\n        affixes.put(affixArg, list);\n      }\n      \n      list.add((char)currentAffix);\n      currentAffix++;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a specific affix rule putting the result into the provided affix map\n   * \n   * @param affixes Map where the result of the parsing will be put\n   * @param header Header line of the affix rule\n   * @param reader BufferedReader to read the content of the rule from\n   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex\n   *                         pattern\n   * @throws IOException Can be thrown while reading the rule\n   */\n  private void parseAffix(CharArrayMap<List<HunspellAffix>> affixes,\n                          String header,\n                          LineNumberReader reader,\n                          String conditionPattern,\n                          boolean strict) throws IOException, ParseException {\n    String args[] = header.split(\"\\\\s+\");\n\n    boolean crossProduct = args[2].equals(\"Y\");\n    \n    int numLines = Integer.parseInt(args[3]);\n    for (int i = 0; i < numLines; i++) {\n      String line = reader.readLine();\n      String ruleArgs[] = line.split(\"\\\\s+\");\n\n      if (ruleArgs.length < 5) {\n        if (strict) {\n          throw new ParseException(\"The affix file contains a rule with less than five elements\", reader.getLineNumber());\n        }\n        continue;\n      }\n\n      HunspellAffix affix = new HunspellAffix();\n      \n      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));\n      affix.setStrip(ruleArgs[2].equals(\"0\") ? \"\" : ruleArgs[2]);\n\n      String affixArg = ruleArgs[3];\n      \n      int flagSep = affixArg.lastIndexOf('/');\n      if (flagSep != -1) {\n        String flagPart = affixArg.substring(flagSep + 1);\n        \n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(appendFlags);\n        affix.setAppendFlags(appendFlags);\n        affix.setAppend(affixArg.substring(0, flagSep));\n      } else {\n        affix.setAppend(affixArg);\n      }\n\n      String condition = ruleArgs[4];\n      affix.setCondition(condition, String.format(Locale.ROOT, conditionPattern, condition));\n      affix.setCrossProduct(crossProduct);\n      \n      List<HunspellAffix> list = affixes.get(affix.getAppend());\n      if (list == null) {\n        list = new ArrayList<HunspellAffix>();\n        affixes.put(affix.getAppend(), list);\n      }\n      \n      list.add(affix);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["2acf500f78aa12b92e371fd89c719291986b6b90","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","c1fc791afc075c00a9ce29ca03eca7a6c143c28a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46d8ada1fff8d18cb197c38c7983225162599948":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"c1fc791afc075c00a9ce29ca03eca7a6c143c28a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"2acf500f78aa12b92e371fd89c719291986b6b90":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","fe33227f6805edab2036cbb80645cc4e2d1fa424","46d8ada1fff8d18cb197c38c7983225162599948"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["c1fc791afc075c00a9ce29ca03eca7a6c143c28a","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}