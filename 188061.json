{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"/dev/null","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4708e7bf7695781d702d204d178627b4faddc03f","date":1326982060,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (FST.Arc<T>[]) new FST.Arc[0x80];\n    final FST.Arc<T> arc = new FST.Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#cacheRootArcs().mjava","sourceNew":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","sourceOld":"  // Caches first 128 labels\n  @SuppressWarnings(\"unchecked\")\n  private void cacheRootArcs() throws IOException {\n    cachedRootArcs = (Arc<T>[]) new Arc[0x80];\n    final Arc<T> arc = new Arc<T>();\n    getFirstArc(arc);\n    final BytesReader in = getBytesReader(0);\n    if (targetHasArcs(arc)) {\n      readFirstRealTargetArc(arc.target, arc, in);\n      while(true) {\n        assert arc.label != END_LABEL;\n        if (arc.label < cachedRootArcs.length) {\n          cachedRootArcs[arc.label] = new Arc<T>().copyFrom(arc);\n        } else {\n          break;\n        }\n        if (arc.isLast()) {\n          break;\n        }\n        readNextRealArc(arc, in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["4708e7bf7695781d702d204d178627b4faddc03f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["4708e7bf7695781d702d204d178627b4faddc03f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4708e7bf7695781d702d204d178627b4faddc03f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["4708e7bf7695781d702d204d178627b4faddc03f"],"4708e7bf7695781d702d204d178627b4faddc03f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}