{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","sourceNew":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","sourceNew":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","sourceNew":"  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","sourceNew":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCharArraySet#testCopyCharArraySetBWCompat().mjava","sourceNew":"  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIgnoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIgnoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIgnoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIgnoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIgnoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIgnoreCase.contains(string));\n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecated\")\n  public void testCopyCharArraySetBWCompat() {\n    CharArraySet setIngoreCase = new CharArraySet(10, true);\n    CharArraySet setCaseSensitive = new CharArraySet(10, false);\n\n    List<String> stopwords = Arrays.asList(TEST_STOP_WORDS);\n    List<String> stopwordsUpper = new ArrayList<>();\n    for (String string : stopwords) {\n      stopwordsUpper.add(string.toUpperCase(Locale.ROOT));\n    }\n    setIngoreCase.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setIngoreCase.add(Integer.valueOf(1));\n    setCaseSensitive.addAll(Arrays.asList(TEST_STOP_WORDS));\n    setCaseSensitive.add(Integer.valueOf(1));\n\n    CharArraySet copy = CharArraySet.copy(setIngoreCase);\n    CharArraySet copyCaseSens = CharArraySet.copy(setCaseSensitive);\n\n    assertEquals(setIngoreCase.size(), copy.size());\n    assertEquals(setCaseSensitive.size(), copy.size());\n\n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copyCaseSens.containsAll(stopwords));\n    for (String string : stopwordsUpper) {\n      assertFalse(copyCaseSens.contains(string));\n    }\n    // test adding terms to the copy\n    List<String> newWords = new ArrayList<>();\n    for (String string : stopwords) {\n      newWords.add(string+\"_1\");\n    }\n    copy.addAll(newWords);\n    \n    assertTrue(copy.containsAll(stopwords));\n    assertTrue(copy.containsAll(stopwordsUpper));\n    assertTrue(copy.containsAll(newWords));\n    // new added terms are not in the source set\n    for (String string : newWords) {\n      assertFalse(setIngoreCase.contains(string));  \n      assertFalse(setCaseSensitive.contains(string));  \n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42210058b8ae092085fa2658880b69931512e8bf":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42210058b8ae092085fa2658880b69931512e8bf"]},"commit2Childs":{"42210058b8ae092085fa2658880b69931512e8bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["42210058b8ae092085fa2658880b69931512e8bf"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}