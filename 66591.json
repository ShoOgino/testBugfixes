{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","commits":[{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final ReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits delDocs = context.reader.getDeletedDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(delDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.set(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final OpenBitSet bits = new OpenBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.fastSet(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/CartesianShapeFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(acceptDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(acceptDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.set(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIdSet(final AtomicReaderContext context) throws IOException {\n    final Bits liveDocs = context.reader.getLiveDocs();\n    final List<Double> area = shape.getArea();\n    final int sz = area.size();\n    \n    // iterate through each boxid\n    final BytesRef bytesRef = new BytesRef(NumericUtils.BUF_SIZE_LONG);\n    if (sz == 1) {\n      double boxId = area.get(0).doubleValue();\n      NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n      return new DocIdSet() {\n        @Override\n        public DocIdSetIterator iterator() throws IOException {\n          return context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        }\n        \n        @Override\n        public boolean isCacheable() {\n          return false;\n        }\n      };\n    } else {\n      final FixedBitSet bits = new FixedBitSet(context.reader.maxDoc());\n      for (int i =0; i< sz; i++) {\n        double boxId = area.get(i).doubleValue();\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(boxId), 0, bytesRef);\n        final DocsEnum docsEnum = context.reader.termDocsEnum(liveDocs, fieldName, bytesRef);\n        if (docsEnum == null) continue;\n        // iterate through all documents\n        // which have this boxId\n        int doc;\n        while ((doc = docsEnum.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          bits.set(doc);\n        }\n      }\n      return bits;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6620df8541b174097b1133a4fc370adb2e570524"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","868da859b43505d9d2a023bfeae6dd0c795f5295"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["6620df8541b174097b1133a4fc370adb2e570524"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}