{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","commits":[{"id":"b2262f0d8ead49d04485950fba849e166dbe28fb","date":1451569279,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","sourceNew":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","sourceNew":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, true);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, true);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","sourceNew":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testOptimizeProhibitedClauses().mjava","sourceNew":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createWeight(searcher.rewrite(query), ScoreMode.COMPLETE, 1);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOptimizeProhibitedClauses() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StringField(\"foo\", \"bar\", Store.NO));\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"foo\", \"baz\", Store.NO));\n    w.addDocument(doc);\n    w.forceMerge(1);\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.setQueryCache(null); // so that weights are not wrapped\n    final LeafReaderContext ctx = reader.leaves().get(0);\n\n    Query query = new BooleanQuery.Builder()\n      .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n      .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n      .build();\n    Weight weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    BulkScorer scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.SHOULD)\n        .add(new MatchAllDocsQuery(), Occur.SHOULD)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.MUST)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    query = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"foo\", \"baz\")), Occur.FILTER)\n        .add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.MUST_NOT)\n        .build();\n    weight = searcher.createNormalizedWeight(query, ScoreMode.COMPLETE);\n    scorer = ((BooleanWeight) weight).booleanScorer(ctx);\n    assertTrue(scorer instanceof ReqExclBulkScorer);\n\n    w.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"417142ff08fda9cf0b72d5133e63097a166c6458":["b2262f0d8ead49d04485950fba849e166dbe28fb","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2262f0d8ead49d04485950fba849e166dbe28fb"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"b2262f0d8ead49d04485950fba849e166dbe28fb":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["d58e44159788900f4a2113b84463dc3fbbf80f20","475584d5e08a22ad3fc7babefe006d77bc744567"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}