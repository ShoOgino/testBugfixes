{"path":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","commits":[{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(String field) throws IOException {\n    Term term = fieldTerms.get(field);\n    if (term == null) {\n      return super.getDocsWithField(field);\n    } else {\n      // we shouldn't return null, even if the term does not exist or has no\n      // payloads, since we already marked the field as having DocValues.\n      return new Bits.MatchAllBits(maxDoc());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(String field) throws IOException {\n    Term term = fieldTerms.get(field);\n    if (term == null) {\n      return super.getDocsWithField(field);\n    } else {\n      // we shouldn't return null, even if the term does not exist or has no\n      // payloads, since we already marked the field as having DocValues.\n      return new Bits.MatchAllBits(maxDoc());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Bits getDocsWithField(String field) throws IOException {\n    Term term = fieldTerms.get(field);\n    if (term == null) {\n      return super.getDocsWithField(field);\n    } else {\n      // we shouldn't return null, even if the term does not exist or has no\n      // payloads, since we already marked the field as having DocValues.\n      return new Bits.MatchAllBits(maxDoc());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(String field) throws IOException {\n    Term term = fieldTerms.get(field);\n    if (term == null) {\n      return super.getDocsWithField(field);\n    } else {\n      // we shouldn't return null, even if the term does not exist or has no\n      // payloads, since we already marked the field as having DocValues.\n      return new Bits.MatchAllBits(maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getDocsWithField(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Bits getDocsWithField(String field) throws IOException {\n    Term term = fieldTerms.get(field);\n    if (term == null) {\n      return super.getDocsWithField(field);\n    } else {\n      // we shouldn't return null, even if the term does not exist or has no\n      // payloads, since we already marked the field as having DocValues.\n      return new Bits.MatchAllBits(maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","d33e19a97046248623a7591aeaa6547233fd15e2"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d33e19a97046248623a7591aeaa6547233fd15e2","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}