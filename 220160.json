{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":null,"sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":null,"sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case REGEXPTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#Query(String).mjava","sourceNew":null,"sourceOld":"  final public Query Query(String field) throws ParseException {\n  List<BooleanClause> clauses = new ArrayList<BooleanClause>();\n  Query q, firstQuery=null;\n  boolean orPresent = false;\n  int modifier;\n    modifier = Modifier();\n    q = andExpression(field);\n    addClause(clauses, CONJ_NONE, modifier, q);\n    if (modifier == MOD_NONE)\n      firstQuery = q;\n    label_1:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n      case NOT:\n      case PLUS:\n      case MINUS:\n      case LPAREN:\n      case QUOTED:\n      case TERM:\n      case PREFIXTERM:\n      case WILDTERM:\n      case RANGEIN_START:\n      case RANGEEX_START:\n      case NUMBER:\n        ;\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        break label_1;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case OR:\n        jj_consume_token(OR);\n            orPresent=true;\n        break;\n      default:\n        jj_la1[5] = jj_gen;\n        ;\n      }\n      modifier = Modifier();\n      q = andExpression(field);\n      addClause(clauses, orPresent ? CONJ_OR : CONJ_NONE, modifier, q);\n    }\n      if (clauses.size() == 1 && firstQuery != null)\n        {if (true) return firstQuery;}\n      else {\n        {if (true) return getBooleanQuery(clauses);}\n      }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["d94d6afa51157e490fc169e192a154ffc4cdad0b","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["d94d6afa51157e490fc169e192a154ffc4cdad0b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}