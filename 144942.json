{"path":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","commits":[{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0a4b0a1a70bab61b0b350e7641408db7c79e17b","date":1309889067,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":"  /** Returns the total number of occurrences of this term\n   *  across all documents (the sum of the freq() for each\n   *  doc that has this term).  This will be -1 if the\n   *  codec doesn't support this measure.  Note that, like\n   *  other term measures, this measure does not take\n   *  deleted documents into account. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":"  /** Returns the total number of occurrences of this term\n   *  across all documents (the sum of the freq() for each\n   *  doc that has this term).  This will be -1 if the\n   *  codec doesn't support this measure.  Note that, like\n   *  other term measures, this measure does not take\n   *  deleted documents into account. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":"  /** Returns the total number of occurrences of this term\n   *  across all documents (the sum of the freq() for each\n   *  doc that has this term).  This will be -1 if the\n   *  codec doesn't support this measure.  Note that, like\n   *  other term measures, this measure does not take\n   *  deleted documents into account. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  /** Returns the number of documents containing the\n   *  specified term text.  Returns 0 if the term does not\n   *  exist. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seek(text) == TermsEnum.SeekStatus.FOUND) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/Terms#totalTermFreq(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Returns the total number of occurrences of this term\n   *  across all documents (the sum of the freq() for each\n   *  doc that has this term).  This will be -1 if the\n   *  codec doesn't support this measure.  Note that, like\n   *  other term measures, this measure does not take\n   *  deleted documents into account. */\n  public long totalTermFreq(BytesRef text) throws IOException {\n    final TermsEnum termsEnum = getThreadTermsEnum();\n    if (termsEnum.seekExact(text, true)) {\n      return termsEnum.totalTermFreq();\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0a4b0a1a70bab61b0b350e7641408db7c79e17b":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"e2297162a22c55456e200caef2cbcb00fe381120":["f0a4b0a1a70bab61b0b350e7641408db7c79e17b"],"2553b00f699380c64959ccb27991289aae87be2e":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","f0a4b0a1a70bab61b0b350e7641408db7c79e17b"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","f0a4b0a1a70bab61b0b350e7641408db7c79e17b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"f0a4b0a1a70bab61b0b350e7641408db7c79e17b":["e2297162a22c55456e200caef2cbcb00fe381120","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"16843358872ed92ba92888ab99df297550b9a36a":[],"e2297162a22c55456e200caef2cbcb00fe381120":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["f0a4b0a1a70bab61b0b350e7641408db7c79e17b","2553b00f699380c64959ccb27991289aae87be2e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","16843358872ed92ba92888ab99df297550b9a36a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}