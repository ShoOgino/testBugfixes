{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \"\n          + topLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \"\n          + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \"\n          + topLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \"\n          + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \" + topLevelOrdinals[i], \n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \" + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \"\n          + topLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \"\n          + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","sourceNew":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \" + topLevelOrdinals[i], \n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \" + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(\n          components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy\n        .shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \"\n          + topLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \"\n          + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66644845192a1c92d87d5324cc0b5af16ad31b42","date":1358970583,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \" + topLevelOrdinals[i], \n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \" + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/categorypolicy/OrdinalPolicyTest#testNonTopLevelOrdinalPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNonTopLevelOrdinalPolicy() throws Exception {\n    Directory dir = newDirectory();\n    TaxonomyWriter taxonomy = null;\n    taxonomy = new DirectoryTaxonomyWriter(dir);\n\n    int[] topLevelOrdinals = new int[10];\n    String[] topLevelStrings = new String[10];\n    for (int i = 0; i < 10; i++) {\n      topLevelStrings[i] = Integer.valueOf(random().nextInt(30)).toString();\n      topLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(topLevelStrings[i]));\n    }\n    int[] nonTopLevelOrdinals = new int[300];\n    for (int i = 0; i < 300; i++) {\n      int nComponents = 2 + random().nextInt(10);\n      String[] components = new String[nComponents];\n      components[0] = topLevelStrings[i % 10];\n      for (int j = 1; j < components.length; j++) {\n        components[j] = (Integer.valueOf(random().nextInt(30))).toString();\n      }\n      nonTopLevelOrdinals[i] = taxonomy.addCategory(new CategoryPath(components));\n    }\n    // check ordinal policy\n    OrdinalPolicy ordinalPolicy = new NonTopLevelOrdinalPolicy();\n    ordinalPolicy.init(taxonomy);\n    assertFalse(\"top level ordinal policy should not match root\", ordinalPolicy.shouldAdd(TaxonomyReader.ROOT_ORDINAL));\n    for (int i = 0; i < 10; i++) {\n      assertFalse(\"top level ordinal policy should not match \" + topLevelOrdinals[i], \n          ordinalPolicy.shouldAdd(topLevelOrdinals[i]));\n    }\n    for (int i = 0; i < 300; i++) {\n      assertTrue(\"top level ordinal policy should match \" + nonTopLevelOrdinals[i],\n          ordinalPolicy.shouldAdd(nonTopLevelOrdinals[i]));\n    }\n\n    // check illegal ordinal\n    assertFalse(\"Should not add illegal ordinal\", ordinalPolicy.shouldAdd(100000));\n    taxonomy.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66644845192a1c92d87d5324cc0b5af16ad31b42"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","66644845192a1c92d87d5324cc0b5af16ad31b42"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"66644845192a1c92d87d5324cc0b5af16ad31b42":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}