{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      log.info(\"remove feature store config file in {}\",\n          fstore.getAbsolutePath());\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      log.info(\"remove model store config file in {}\",\n          mstore.getAbsolutePath());\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\",\n        ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\",\n        SolrSchemaRestApi.class.getCanonicalName());\n    solrRestApi.setInitParameter(\"storageIO\",\n        ManagedResourceStorage.InMemoryStorageIO.class.getCanonicalName());\n    extraServlets.put(solrRestApi, PARENT_ENDPOINT);\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    return extraServlets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      log.info(\"remove feature store config file in {}\",\n          fstore.getAbsolutePath());\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      log.info(\"remove model store config file in {}\",\n          mstore.getAbsolutePath());\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\",\n        ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\",\n        SolrSchemaRestApi.class.getCanonicalName());\n    solrRestApi.setInitParameter(\"storageIO\",\n        ManagedResourceStorage.InMemoryStorageIO.class.getCanonicalName());\n    extraServlets.put(solrRestApi, PARENT_ENDPOINT);\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    return extraServlets;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","sourceNew":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove feature store config file in {}\", fstore.getAbsolutePath());\n      }\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove model store config file in {}\", mstore.getAbsolutePath());\n      }\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\",\n        ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\",\n        SolrSchemaRestApi.class.getCanonicalName());\n    solrRestApi.setInitParameter(\"storageIO\",\n        ManagedResourceStorage.InMemoryStorageIO.class.getCanonicalName());\n    extraServlets.put(solrRestApi, PARENT_ENDPOINT);\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    return extraServlets;\n  }\n\n","sourceOld":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      log.info(\"remove feature store config file in {}\",\n          fstore.getAbsolutePath());\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      log.info(\"remove model store config file in {}\",\n          mstore.getAbsolutePath());\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\",\n        ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\",\n        SolrSchemaRestApi.class.getCanonicalName());\n    solrRestApi.setInitParameter(\"storageIO\",\n        ManagedResourceStorage.InMemoryStorageIO.class.getCanonicalName());\n    extraServlets.put(solrRestApi, PARENT_ENDPOINT);\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    return extraServlets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestRerankBase#setupTestInit(String,String,boolean).mjava","sourceNew":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove feature store config file in {}\", fstore.getAbsolutePath());\n      }\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove model store config file in {}\", mstore.getAbsolutePath());\n      }\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    return extraServlets;\n  }\n\n","sourceOld":"  protected static SortedMap<ServletHolder,String>  setupTestInit(\n      String solrconfig, String schema,\n      boolean isPersistent) throws Exception {\n    tmpSolrHome = createTempDir().toFile();\n    tmpConfDir = new File(tmpSolrHome, CONF_DIR);\n    tmpConfDir.deleteOnExit();\n    FileUtils.copyDirectory(new File(TEST_HOME()),\n        tmpSolrHome.getAbsoluteFile());\n\n    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);\n    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);\n\n    if (isPersistent) {\n      fstorefile = fstore;\n      mstorefile = mstore;\n    }\n\n    if (fstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove feature store config file in {}\", fstore.getAbsolutePath());\n      }\n      Files.delete(fstore.toPath());\n    }\n    if (mstore.exists()) {\n      if (log.isInfoEnabled()) {\n        log.info(\"remove model store config file in {}\", mstore.getAbsolutePath());\n      }\n      Files.delete(mstore.toPath());\n    }\n    if (!solrconfig.equals(\"solrconfig.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + solrconfig),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/solrconfig.xml\"));\n    }\n    if (!schema.equals(\"schema.xml\")) {\n      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()\n          + \"/collection1/conf/\" + schema),\n          new File(tmpSolrHome.getAbsolutePath()\n              + \"/collection1/conf/schema.xml\"));\n    }\n\n    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();\n    final ServletHolder solrRestApi = new ServletHolder(\"SolrSchemaRestApi\",\n        ServerServlet.class);\n    solrRestApi.setInitParameter(\"org.restlet.application\",\n        SolrSchemaRestApi.class.getCanonicalName());\n    solrRestApi.setInitParameter(\"storageIO\",\n        ManagedResourceStorage.InMemoryStorageIO.class.getCanonicalName());\n    extraServlets.put(solrRestApi, PARENT_ENDPOINT);\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n\n    return extraServlets;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}