{"path":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","commits":[{"id":"b3a5de1f264cc577bcb0bbb6fa6577df667974ca","date":1497957674,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fd01fb9d2dfbf352be17f9c0972778ce638bfd","date":1498952169,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","date":1499066739,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertEquals(\"/tmp/inst1/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/tmp/inst1\"), cp, zkAware)));\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertEquals(\"/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n\n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertEquals(\"/solr/home/solrdata/inst_dir/data\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"inst_dir\"), cp, zkAware)));\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertEquals(\"/solr/home/solrdata/myinst/mydata\", rdf.getDataHome(new CoreDescriptor(\"core_name\", Paths.get(\"/path/to/myinst\"), cp, zkAware, \"dataDir\", \"mydata\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76ee69c1ab922a45b03e3f1f9989847f66c269bc","date":1500448164,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    cc = new MockCoreContainer(\"/solr/home\");\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed","date":1500471853,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    NodeConfig config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    CoreContainer cc = new CoreContainer(config);\n    Properties cp = cc.getContainerProperties();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(solrHome.resolve(\"solrdata/inst_dir/data\").toAbsolutePath().toString(), \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(solrHome.resolve(\"solrdata/myinst/mydata\").toAbsolutePath().toString(), \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n    // solr.data.home set but also solrDataHome set in solr.xml, which should override the former\n    System.setProperty(\"test.solr.data.home\", \"/foo\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(\"/foo/inst_dir/data\", \"inst_dir\", rdf, cc);\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    cc = new MockCoreContainer(\"/solr/home\");\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  @Test\n  public void testGetDataHome() throws Exception {\n    NodeConfig config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    CoreContainer cc = new CoreContainer(config);\n    Properties cp = cc.getContainerProperties();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(solrHome.resolve(\"solrdata/inst_dir/data\").toAbsolutePath().toString(), \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(solrHome.resolve(\"solrdata/myinst/mydata\").toAbsolutePath().toString(), \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n    // solr.data.home set but also solrDataHome set in solr.xml, which should override the former\n    System.setProperty(\"test.solr.data.home\", \"/foo\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(\"/foo/inst_dir/data\", \"inst_dir\", rdf, cc);\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    MockCoreContainer cc = new MockCoreContainer(\"/solr/home\");\n    Properties cp = cc.getContainerProperties();\n    boolean zkAware = cc.isZooKeeperAware();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    rdf.init(new NamedList());\n    assertDataHome(\"/solr/home/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(\"/solr/home/solrdata/myinst/mydata\", \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43d618262c616423ed79f226c5c49f708999b06","date":1540815794,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#doTestGetDataHome(Class[#-extends-DirectoryFactory]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest#testGetDataHome().mjava","sourceNew":"  private void doTestGetDataHome(Class<? extends DirectoryFactory> directoryFactoryClass) throws Exception {\n    NodeConfig config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    CoreContainer cc = new CoreContainer(config);\n    Properties cp = cc.getContainerProperties();\n    DirectoryFactory df = directoryFactoryClass.newInstance();\n    df.initCoreContainer(cc);\n    df.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", df, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    df.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", df, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    df = directoryFactoryClass.newInstance();\n    df.initCoreContainer(cc);\n    df.init(new NamedList());\n    assertDataHome(solrHome.resolve(\"solrdata/inst_dir/data\").toAbsolutePath().toString(), \"inst_dir\", df, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(solrHome.resolve(\"solrdata/myinst/mydata\").toAbsolutePath().toString(), \"/path/to/myinst\", df, cc, \"dataDir\", \"mydata\");\n    // solr.data.home set but also solrDataHome set in solr.xml, which should override the former\n    System.setProperty(\"test.solr.data.home\", \"/foo\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    df = directoryFactoryClass.newInstance();\n    df.initCoreContainer(cc);\n    df.init(new NamedList());\n    assertDataHome(\"/foo/inst_dir/data\", \"inst_dir\", df, cc);\n  }\n\n","sourceOld":"  @Test\n  public void testGetDataHome() throws Exception {\n    NodeConfig config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    CoreContainer cc = new CoreContainer(config);\n    Properties cp = cc.getContainerProperties();\n    RAMDirectoryFactory rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n\n    // No solr.data.home property set. Absolute instanceDir\n    assertDataHome(\"/tmp/inst1/data\", \"/tmp/inst1\", rdf, cc);\n\n    // Simulate solr.data.home set in solrconfig.xml <directoryFactory> tag\n    NamedList args = new NamedList();\n    args.add(\"solr.data.home\", \"/solrdata/\");\n    rdf.init(args);\n    assertDataHome(\"/solrdata/inst_dir/data\", \"inst_dir\", rdf, cc);\n    \n    // solr.data.home set with System property, and relative path\n    System.setProperty(\"solr.data.home\", \"solrdata\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(solrHome.resolve(\"solrdata/inst_dir/data\").toAbsolutePath().toString(), \"inst_dir\", rdf, cc);\n    // Test parsing last component of instanceDir, and using custom dataDir\n    assertDataHome(solrHome.resolve(\"solrdata/myinst/mydata\").toAbsolutePath().toString(), \"/path/to/myinst\", rdf, cc, \"dataDir\", \"mydata\");\n    // solr.data.home set but also solrDataHome set in solr.xml, which should override the former\n    System.setProperty(\"test.solr.data.home\", \"/foo\");\n    config = loadNodeConfig(\"/solr/solr-solrDataHome.xml\");\n    cc = new CoreContainer(config);\n    rdf = new RAMDirectoryFactory();\n    rdf.initCoreContainer(cc);\n    rdf.init(new NamedList());\n    assertDataHome(\"/foo/inst_dir/data\", \"inst_dir\", rdf, cc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15fd01fb9d2dfbf352be17f9c0972778ce638bfd":["28288370235ed02234a64753cdbf0c6ec096304a"],"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed":["76ee69c1ab922a45b03e3f1f9989847f66c269bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["30c8e5574b55d57947e989443dfde611646530ee","d6603c6e525c9b2e1c32eb74e553f9b1c7102bed"],"76ee69c1ab922a45b03e3f1f9989847f66c269bc":["15fd01fb9d2dfbf352be17f9c0972778ce638bfd"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","15fd01fb9d2dfbf352be17f9c0972778ce638bfd"],"b3a5de1f264cc577bcb0bbb6fa6577df667974ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e43d618262c616423ed79f226c5c49f708999b06":["d6603c6e525c9b2e1c32eb74e553f9b1c7102bed"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":["28288370235ed02234a64753cdbf0c6ec096304a","15fd01fb9d2dfbf352be17f9c0972778ce638bfd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3a5de1f264cc577bcb0bbb6fa6577df667974ca"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3a5de1f264cc577bcb0bbb6fa6577df667974ca"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e43d618262c616423ed79f226c5c49f708999b06"]},"commit2Childs":{"15fd01fb9d2dfbf352be17f9c0972778ce638bfd":["76ee69c1ab922a45b03e3f1f9989847f66c269bc","30c8e5574b55d57947e989443dfde611646530ee","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"d6603c6e525c9b2e1c32eb74e553f9b1c7102bed":["936cdd5882761db3b844afd6f84ab81cbb011a75","e43d618262c616423ed79f226c5c49f708999b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a5de1f264cc577bcb0bbb6fa6577df667974ca","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"76ee69c1ab922a45b03e3f1f9989847f66c269bc":["d6603c6e525c9b2e1c32eb74e553f9b1c7102bed"],"30c8e5574b55d57947e989443dfde611646530ee":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"b3a5de1f264cc577bcb0bbb6fa6577df667974ca":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"e43d618262c616423ed79f226c5c49f708999b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35":[],"28288370235ed02234a64753cdbf0c6ec096304a":["15fd01fb9d2dfbf352be17f9c0972778ce638bfd","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","6324f236dd5a5430f2ff91ebd6cb3f0ae8d34a35","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}