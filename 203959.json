{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":2,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":2,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) throws IOException {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) throws IOException {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) throws IOException {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene84/Lucene84SkipReader#init(long,long,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipReader#init(long,long,long,long,int).mjava","sourceNew":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) throws IOException {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","sourceOld":"  public void init(long skipPointer, long docBasePointer, long posBasePointer, long payBasePointer, int df) throws IOException {\n    super.init(skipPointer, trim(df));\n    lastDocPointer = docBasePointer;\n    lastPosPointer = posBasePointer;\n    lastPayPointer = payBasePointer;\n\n    Arrays.fill(docPointer, docBasePointer);\n    if (posPointer != null) {\n      Arrays.fill(posPointer, posBasePointer);\n      if (payPointer != null) {\n        Arrays.fill(payPointer, payBasePointer);\n      }\n    } else {\n      assert posBasePointer == 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}