{"path":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","commits":[{"id":"80ae2aa7d57f5ae78c575525926f7647f23e9f58","date":1311232167,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUniqFields() throws Exception {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n      .getUpdateProcessingChain(\"uniq-fields\");\n    UniqFieldsUpdateProcessorFactory factory = ((UniqFieldsUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    assertNotNull(chained);\n\n    addDoc(adoc(\"id\", \"1a\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2a\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value3\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\"));\n    addDoc(adoc(\"id\", \"1b\", \n                \"uniq3\", \"value1\", \n                \"uniq3\", \"value1\"));\n    addDoc(adoc(\"id\", \"1c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value1\"));\n\n    assertU(commit());\n    assertQ(req(\"id:1a\"), \"count(//*[@name='uniq']/*)=2\",\n        \"//arr[@name='uniq']/str[1][.='value1']\",\n        \"//arr[@name='uniq']/str[2][.='value2']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq2']/*)=3\",\n        \"//arr[@name='uniq2']/str[1][.='value1']\",\n        \"//arr[@name='uniq2']/str[2][.='value2']\",\n        \"//arr[@name='uniq2']/str[3][.='value3']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq']/*)=1\");\n    assertQ(req(\"id:1b\"), \"count(//*[@name='uniq3'])=1\");\n    assertQ(req(\"id:1c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='uniq2']/*)=1\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","sourceNew":"  @Test\n  public void testUniqFields() throws Exception {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n      .getUpdateProcessingChain(\"uniq-fields\");\n    UniqFieldsUpdateProcessorFactory factory = ((UniqFieldsUpdateProcessorFactory) chained.getProcessors().get(0));\n    assertNotNull(chained);\n\n    addDoc(adoc(\"id\", \"1a\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2a\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value3\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\"));\n    addDoc(adoc(\"id\", \"1b\", \n                \"uniq3\", \"value1\", \n                \"uniq3\", \"value1\"));\n    addDoc(adoc(\"id\", \"1c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value1\"));\n\n    assertU(commit());\n    assertQ(req(\"id:1a\"), \"count(//*[@name='uniq']/*)=2\",\n        \"//arr[@name='uniq']/str[1][.='value1']\",\n        \"//arr[@name='uniq']/str[2][.='value2']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq2']/*)=3\",\n        \"//arr[@name='uniq2']/str[1][.='value1']\",\n        \"//arr[@name='uniq2']/str[2][.='value2']\",\n        \"//arr[@name='uniq2']/str[3][.='value3']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq']/*)=1\");\n    assertQ(req(\"id:1b\"), \"count(//*[@name='uniq3'])=1\");\n    assertQ(req(\"id:1c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='uniq2']/*)=1\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqFields() throws Exception {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n      .getUpdateProcessingChain(\"uniq-fields\");\n    UniqFieldsUpdateProcessorFactory factory = ((UniqFieldsUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    assertNotNull(chained);\n\n    addDoc(adoc(\"id\", \"1a\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2a\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value3\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\"));\n    addDoc(adoc(\"id\", \"1b\", \n                \"uniq3\", \"value1\", \n                \"uniq3\", \"value1\"));\n    addDoc(adoc(\"id\", \"1c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value1\"));\n\n    assertU(commit());\n    assertQ(req(\"id:1a\"), \"count(//*[@name='uniq']/*)=2\",\n        \"//arr[@name='uniq']/str[1][.='value1']\",\n        \"//arr[@name='uniq']/str[2][.='value2']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq2']/*)=3\",\n        \"//arr[@name='uniq2']/str[1][.='value1']\",\n        \"//arr[@name='uniq2']/str[2][.='value2']\",\n        \"//arr[@name='uniq2']/str[3][.='value3']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq']/*)=1\");\n    assertQ(req(\"id:1b\"), \"count(//*[@name='uniq3'])=1\");\n    assertQ(req(\"id:1c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='uniq2']/*)=1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UniqFieldsUpdateProcessorFactoryTest#testUniqFields().mjava","sourceNew":"  @Test\n  public void testUniqFields() throws Exception {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n      .getUpdateProcessingChain(\"uniq-fields\");\n    UniqFieldsUpdateProcessorFactory factory = ((UniqFieldsUpdateProcessorFactory) chained.getProcessors().get(0));\n    assertNotNull(chained);\n\n    addDoc(adoc(\"id\", \"1a\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2a\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value3\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\"));\n    addDoc(adoc(\"id\", \"1b\", \n                \"uniq3\", \"value1\", \n                \"uniq3\", \"value1\"));\n    addDoc(adoc(\"id\", \"1c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value1\"));\n\n    assertU(commit());\n    assertQ(req(\"id:1a\"), \"count(//*[@name='uniq']/*)=2\",\n        \"//arr[@name='uniq']/str[1][.='value1']\",\n        \"//arr[@name='uniq']/str[2][.='value2']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq2']/*)=3\",\n        \"//arr[@name='uniq2']/str[1][.='value1']\",\n        \"//arr[@name='uniq2']/str[2][.='value2']\",\n        \"//arr[@name='uniq2']/str[3][.='value3']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq']/*)=1\");\n    assertQ(req(\"id:1b\"), \"count(//*[@name='uniq3'])=1\");\n    assertQ(req(\"id:1c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='uniq2']/*)=1\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testUniqFields() throws Exception {\n    SolrCore core = h.getCore();\n    UpdateRequestProcessorChain chained = core\n      .getUpdateProcessingChain(\"uniq-fields\");\n    UniqFieldsUpdateProcessorFactory factory = ((UniqFieldsUpdateProcessorFactory) chained\n        .getFactories()[0]);\n    assertNotNull(chained);\n\n    addDoc(adoc(\"id\", \"1a\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2a\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value3\", \n                \"uniq\", \"value1\", \n                \"uniq\", \"value1\"));\n    addDoc(adoc(\"id\", \"1b\", \n                \"uniq3\", \"value1\", \n                \"uniq3\", \"value1\"));\n    addDoc(adoc(\"id\", \"1c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\"));\n    addDoc(adoc(\"id\", \"2c\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value1\", \n                \"nouniq\", \"value2\", \n                \"uniq2\", \"value1\", \n                \"uniq2\", \"value1\"));\n\n    assertU(commit());\n    assertQ(req(\"id:1a\"), \"count(//*[@name='uniq']/*)=2\",\n        \"//arr[@name='uniq']/str[1][.='value1']\",\n        \"//arr[@name='uniq']/str[2][.='value2']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq2']/*)=3\",\n        \"//arr[@name='uniq2']/str[1][.='value1']\",\n        \"//arr[@name='uniq2']/str[2][.='value2']\",\n        \"//arr[@name='uniq2']/str[3][.='value3']\");\n    assertQ(req(\"id:2a\"), \"count(//*[@name='uniq']/*)=1\");\n    assertQ(req(\"id:1b\"), \"count(//*[@name='uniq3'])=1\");\n    assertQ(req(\"id:1c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='nouniq']/*)=3\");\n    assertQ(req(\"id:2c\"), \"count(//*[@name='uniq2']/*)=1\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"80ae2aa7d57f5ae78c575525926f7647f23e9f58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["80ae2aa7d57f5ae78c575525926f7647f23e9f58","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["80ae2aa7d57f5ae78c575525926f7647f23e9f58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"80ae2aa7d57f5ae78c575525926f7647f23e9f58":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ae2aa7d57f5ae78c575525926f7647f23e9f58"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}