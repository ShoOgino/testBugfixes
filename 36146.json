{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3532ef9e3edcbdf674841a5f549101f5416c62a5","date":1416413081,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        LOG.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        // back-compat name\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n        // now register it also under new name\n        String beanName = createBeanName(infoBean, key);\n        name = nameFactory.createName(null, registryName, beanName);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: key=\" + key + \", infoBean=\" + infoBean, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        // back-compat name\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n        // now register it also under new name\n        String beanName = createBeanName(infoBean, key);\n        name = nameFactory.createName(null, registryName, beanName);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: key=\" + key + \", infoBean=\" + infoBean, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: \" + key, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        // back-compat name\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n        // now register it also under new name\n        String beanName = createBeanName(infoBean, key);\n        name = nameFactory.createName(null, registryName, beanName);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: key=\" + key + \", infoBean=\" + infoBean, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#put(String,SolrInfoMBean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds the SolrInfoMBean to the map and registers the given SolrInfoMBean\n   * instance with the MBeanServer defined for this core. If a SolrInfoMBean is\n   * already registered with the MBeanServer then it is unregistered and then\n   * re-registered.\n   *\n   * @param key      the JMX type name for this SolrInfoMBean\n   * @param infoBean the SolrInfoMBean instance to be registered\n   */\n  @Override\n  public SolrInfoMBean put(String key, SolrInfoMBean infoBean) {\n    if (server != null && infoBean != null) {\n      try {\n        // back-compat name\n        ObjectName name = getObjectName(key, infoBean);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        SolrDynamicMBean mbean = new SolrDynamicMBean(coreHashCode, infoBean, useCachedStatsBetweenGetMBeanInfoCalls);\n        server.registerMBean(mbean, name);\n        // now register it also under new name\n        String beanName = createBeanName(infoBean, key);\n        name = nameFactory.createName(null, registryName, beanName);\n        if (server.isRegistered(name))\n          server.unregisterMBean(name);\n        server.registerMBean(mbean, name);\n      } catch (Exception e) {\n        log.warn( \"Failed to register info bean: key=\" + key + \", infoBean=\" + infoBean, e);\n      }\n    }\n\n    return super.put(key, infoBean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["c26f00b574427b55127e869b935845554afde1fa"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"816521ebaad5add9cb96bb88c577394e2938c40b":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["3532ef9e3edcbdf674841a5f549101f5416c62a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3532ef9e3edcbdf674841a5f549101f5416c62a5","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"126d6ad24eed13163ba0959435d5a80e5672837c":["3532ef9e3edcbdf674841a5f549101f5416c62a5","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3532ef9e3edcbdf674841a5f549101f5416c62a5","126d6ad24eed13163ba0959435d5a80e5672837c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"3532ef9e3edcbdf674841a5f549101f5416c62a5":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["3532ef9e3edcbdf674841a5f549101f5416c62a5"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","816521ebaad5add9cb96bb88c577394e2938c40b"],"c26f00b574427b55127e869b935845554afde1fa":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}