{"path":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","commits":[{"id":"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","date":1497937593,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    V2Response response = v2Request.process(cluster.getSolrClient());\n    assertEquals(getStatus(response), expectedCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    V2Response response = v2Request.process(cluster.getSolrClient());\n    assertEquals(getStatus(response), expectedCode);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    try {\n      v2Request.process(cluster.getSolrClient());\n      fail(\"expected an exception with error code: \"+expectedCode);\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertEquals(expectedCode, e.code());\n\n    }\n  }\n\n","sourceOld":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    V2Response response = v2Request.process(cluster.getSolrClient());\n    assertEquals(getStatus(response), expectedCode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    try {\n      v2Request.process(cluster.getSolrClient());\n      fail(\"expected an exception with error code: \"+expectedCode);\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertEquals(expectedCode, e.code());\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    HttpSolrClient.RemoteSolrException ex =  expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> v2Request.process(cluster.getSolrClient()));\n    assertEquals(expectedCode, ex.code());\n  }\n\n","sourceOld":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    try {\n      v2Request.process(cluster.getSolrClient());\n      fail(\"expected an exception with error code: \"+expectedCode);\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertEquals(expectedCode, e.code());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    HttpSolrClient.RemoteSolrException ex =  expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> v2Request.process(cluster.getSolrClient()));\n    assertEquals(expectedCode, ex.code());\n  }\n\n","sourceOld":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    try {\n      v2Request.process(cluster.getSolrClient());\n      fail(\"expected an exception with error code: \"+expectedCode);\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertEquals(expectedCode, e.code());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    HttpSolrClient.RemoteSolrException ex =  expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> v2Request.process(cluster.getSolrClient()));\n    assertEquals(expectedCode, ex.code());\n  }\n\n","sourceOld":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    try {\n      v2Request.process(cluster.getSolrClient());\n      fail(\"expected an exception with error code: \"+expectedCode);\n    } catch (HttpSolrClient.RemoteExecutionException e) {\n      assertEquals(expectedCode, e.code());\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db96734b79e26d948b59f68bd4564c4836a71acf","date":1585375566,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest#testException(ResponseParser,int,String,String).mjava","sourceNew":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    BaseHttpSolrClient.RemoteSolrException ex =  expectThrows(BaseHttpSolrClient.RemoteSolrException.class,\n        () -> v2Request.process(cluster.getSolrClient()));\n    assertEquals(expectedCode, ex.code());\n  }\n\n","sourceOld":"  private void testException(ResponseParser responseParser, int expectedCode, String path, String payload) throws IOException, SolrServerException {\n    V2Request v2Request = new V2Request.Builder(path)\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(payload)\n        .build();\n    v2Request.setResponseParser(responseParser);\n    HttpSolrClient.RemoteSolrException ex =  expectThrows(HttpSolrClient.RemoteSolrException.class,\n        () -> v2Request.process(cluster.getSolrClient()));\n    assertEquals(expectedCode, ex.code());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db96734b79e26d948b59f68bd4564c4836a71acf":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db96734b79e26d948b59f68bd4564c4836a71acf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"db96734b79e26d948b59f68bd4564c4836a71acf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["db96734b79e26d948b59f68bd4564c4836a71acf","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}