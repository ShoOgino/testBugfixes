{"path":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    cc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      cc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector());\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector(false));\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      cc.replay(new NoOpCollector());\n    });\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    try {\n      cc.replay(new NoOpCollector());\n      fail(\"replay should fail if CachingCollector is not cached\");\n    } catch (IllegalStateException e) {\n      // expected\n    }\n  }\n\n","bugFix":["e77feb4ffb7321af961c838aeafdd07ef1f307d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCachingCollector#testIllegalStateOnReplay().mjava","sourceNew":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorable());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      cc.replay(new NoOpCollector());\n    });\n  }\n\n","sourceOld":"  public void testIllegalStateOnReplay() throws Exception {\n    CachingCollector cc = CachingCollector.create(new NoOpCollector(), true, 50 * ONE_BYTE);\n    LeafCollector acc = cc.getLeafCollector(null);\n    acc.setScorer(new MockScorer());\n    \n    // collect 130 docs, this should be enough for triggering cache abort.\n    for (int i = 0; i < 130; i++) {\n      acc.collect(i);\n    }\n    \n    assertFalse(\"CachingCollector should not be cached due to low memory limit\", cc.isCached());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      cc.replay(new NoOpCollector());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["ae73da626f97850c922c42736f808d0378e165f0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["19275ba31e621f6da1b83bf13af75233876fd3d4","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"ae73da626f97850c922c42736f808d0378e165f0":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["05fe562aa248790944d43cdd478f512572835ba0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05fe562aa248790944d43cdd478f512572835ba0":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}