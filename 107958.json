{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","commits":[{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testAppendingLongBuffer().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, 1000000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        try {\n          buf.add(random().nextLong());\n          fail(\"expected an exception\");\n        } catch (IllegalStateException e) {\n          // ok\n        }\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testAppendingLongBuffer() {\n\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, 1000000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : DataType.values()) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        final int initialPageCount = TestUtil.nextInt(random(), 0, 16);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        AbstractAppendingLongBuffer buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = new AppendingPackedLongBuffer(initialPageCount, pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = new AppendingDeltaPackedLongBuffer(initialPageCount, pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = new MonotonicAppendingLongBuffer(initialPageCount, pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n        }\n        assertEquals(arr.length, buf.size());\n        if (random().nextBoolean()) {\n          buf.freeze();\n          if (random().nextBoolean()) {\n            // Make sure double freeze doesn't break anything\n            buf.freeze();\n          }\n        }\n        assertEquals(arr.length, buf.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], buf.get(i));\n        }\n\n        final AbstractAppendingLongBuffer.Iterator it = buf.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n\n        long[] target = new long[arr.length + 1024]; // check the request for more is OK.\n        for (int i = 0; i < arr.length; i += TestUtil.nextInt(random(), 0, 10000)) {\n          int lenToRead = random().nextInt(buf.pageSize() * 2) + 1;\n          lenToRead = Math.min(lenToRead, target.length - i);\n          int lenToCheck = Math.min(lenToRead, arr.length - i);\n          int off = i;\n          while (off < arr.length && lenToRead > 0) {\n            int read = buf.get(off, target, off, lenToRead);\n            assertTrue(read > 0);\n            assertTrue(read <= lenToRead);\n            lenToRead -= read;\n            off += read;\n          }\n\n          for (int j = 0; j < lenToCheck; j++) {\n            assertEquals(arr[j + i], target[j + i]);\n          }\n        }\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n        final long computedBytesUsed = buf.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d209368a36457e41f5200a77a35a074db72a454b","date":1428899355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        try {\n          buf.add(random().nextLong());\n          fail(\"expected an exception\");\n        } catch (IllegalStateException e) {\n          // ok\n        }\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, 1000000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        try {\n          buf.add(random().nextLong());\n          fail(\"expected an exception\");\n        } catch (IllegalStateException e) {\n          // ok\n        }\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        try {\n          buf.add(random().nextLong());\n          fail(\"expected an exception\");\n        } catch (IllegalStateException e) {\n          // ok\n        }\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6448f67be45147de82a85cd903fec34e8930da75","date":1477041277,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomInts.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomInts.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50bf8e497bdce20ef77d2006b198d2b352ceaf4b","date":1578055618,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely() && !TEST_NIGHTLY) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"271db8e69c1a7fc3464094f86877dd9219b9a1ec","date":1578057201,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely() && !TEST_NIGHTLY) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely()) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testPackedLongValues().mjava","sourceNew":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 10000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely() && !TEST_NIGHTLY) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","sourceOld":"  public void testPackedLongValues() {\n    final long[] arr = new long[RandomNumbers.randomIntBetween(random(), 1, TEST_NIGHTLY ? 1000000 : 100000)];\n    float[] ratioOptions = new float[]{PackedInts.DEFAULT, PackedInts.COMPACT, PackedInts.FAST};\n    for (int bpv : new int[]{0, 1, 63, 64, RandomNumbers.randomIntBetween(random(), 2, 62)}) {\n      for (DataType dataType : Arrays.asList(DataType.DELTA_PACKED)) {\n        final int pageSize = 1 << TestUtil.nextInt(random(), 6, 20);\n        float acceptableOverheadRatio = ratioOptions[TestUtil.nextInt(random(), 0, ratioOptions.length - 1)];\n        PackedLongValues.Builder buf;\n        final int inc;\n        switch (dataType) {\n          case PACKED:\n            buf = PackedLongValues.packedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case DELTA_PACKED:\n            buf = PackedLongValues.deltaPackedBuilder(pageSize, acceptableOverheadRatio);\n            inc = 0;\n            break;\n          case MONOTONIC:\n            buf = PackedLongValues.monotonicBuilder(pageSize, acceptableOverheadRatio);\n            inc = TestUtil.nextInt(random(), -1000, 1000);\n            break;\n          default:\n            throw new RuntimeException(\"added a type and forgot to add it here?\");\n\n        }\n\n        if (bpv == 0) {\n          arr[0] = random().nextLong();\n          for (int i = 1; i < arr.length; ++i) {\n            arr[i] = arr[i - 1] + inc;\n          }\n        } else if (bpv == 64) {\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = random().nextLong();\n          }\n        } else {\n          final long minValue = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE - PackedInts.maxValue(bpv));\n          for (int i = 0; i < arr.length; ++i) {\n            arr[i] = minValue + inc * i + random().nextLong() & PackedInts.maxValue(bpv); // _TestUtil.nextLong is too slow\n          }\n        }\n\n        for (int i = 0; i < arr.length; ++i) {\n          buf.add(arr[i]);\n          if (rarely() && !TEST_NIGHTLY) {\n            final long expectedBytesUsed = RamUsageTester.sizeOf(buf);\n            final long computedBytesUsed = buf.ramBytesUsed();\n            assertEquals(expectedBytesUsed, computedBytesUsed);\n          }\n        }\n        assertEquals(arr.length, buf.size());\n        final PackedLongValues values = buf.build();\n        expectThrows(IllegalStateException.class, () -> {\n          buf.add(random().nextLong());\n        });\n        assertEquals(arr.length, values.size());\n\n        for (int i = 0; i < arr.length; ++i) {\n          assertEquals(arr[i], values.get(i));\n        }\n\n        final PackedLongValues.Iterator it = values.iterator();\n        for (int i = 0; i < arr.length; ++i) {\n          if (random().nextBoolean()) {\n            assertTrue(it.hasNext());\n          }\n          assertEquals(arr[i], it.next());\n        }\n        assertFalse(it.hasNext());\n\n        final long expectedBytesUsed = RamUsageTester.sizeOf(values);\n        final long computedBytesUsed = values.ramBytesUsed();\n        assertEquals(expectedBytesUsed, computedBytesUsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d209368a36457e41f5200a77a35a074db72a454b":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"57c6c784f777a2cc8fa014507ea129526822714d":["50bf8e497bdce20ef77d2006b198d2b352ceaf4b"],"6448f67be45147de82a85cd903fec34e8930da75":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["05fe562aa248790944d43cdd478f512572835ba0","6448f67be45147de82a85cd903fec34e8930da75"],"05fe562aa248790944d43cdd478f512572835ba0":["d209368a36457e41f5200a77a35a074db72a454b"],"50bf8e497bdce20ef77d2006b198d2b352ceaf4b":["6448f67be45147de82a85cd903fec34e8930da75"],"271db8e69c1a7fc3464094f86877dd9219b9a1ec":["6448f67be45147de82a85cd903fec34e8930da75","50bf8e497bdce20ef77d2006b198d2b352ceaf4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d209368a36457e41f5200a77a35a074db72a454b":["05fe562aa248790944d43cdd478f512572835ba0"],"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6448f67be45147de82a85cd903fec34e8930da75":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","50bf8e497bdce20ef77d2006b198d2b352ceaf4b","271db8e69c1a7fc3464094f86877dd9219b9a1ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"05fe562aa248790944d43cdd478f512572835ba0":["6448f67be45147de82a85cd903fec34e8930da75","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"50bf8e497bdce20ef77d2006b198d2b352ceaf4b":["57c6c784f777a2cc8fa014507ea129526822714d","271db8e69c1a7fc3464094f86877dd9219b9a1ec"],"271db8e69c1a7fc3464094f86877dd9219b9a1ec":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["d209368a36457e41f5200a77a35a074db72a454b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","271db8e69c1a7fc3464094f86877dd9219b9a1ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}