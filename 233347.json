{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92","8620c64e323e74078214cf931e505179d14c888e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sindexVersion = params.get(CMD_INDEX_VERSION);\n      if (sindexVersion != null) indexVersion = Long.parseLong(sindexVersion);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexVersion != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexVersion, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.LocalFsFileStream#write(OutputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler.FileStream#write(OutputStream).mjava","sourceNew":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n  \n        //if if is a conf file read from config diectory\n        file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","sourceOld":"    public void write(OutputStream out) throws IOException {\n      String fileName = params.get(FILE);\n      String cfileName = params.get(CONF_FILE_SHORT);\n      String sOffset = params.get(OFFSET);\n      String sLen = params.get(LEN);\n      String compress = params.get(COMPRESSION);\n      String sChecksum = params.get(CHECKSUM);\n      String sGen = params.get(GENERATION);\n      if (sGen != null) indexGen = Long.parseLong(sGen);\n      if (Boolean.parseBoolean(compress)) {\n        fos = new FastOutputStream(new DeflaterOutputStream(out));\n      } else {\n        fos = new FastOutputStream(out);\n      }\n      FileInputStream inputStream = null;\n      int packetsWritten = 0;\n      try {\n        long offset = -1;\n        int len = -1;\n        //check if checksum is requested\n        boolean useChecksum = Boolean.parseBoolean(sChecksum);\n        if (sOffset != null)\n          offset = Long.parseLong(sOffset);\n        if (sLen != null)\n          len = Integer.parseInt(sLen);\n        if (fileName == null && cfileName == null) {\n          //no filename do nothing\n          writeNothing();\n        }\n\n        File file = null;\n        if (cfileName != null) {\n          //if if is a conf file read from config diectory\n          file = new File(core.getResourceLoader().getConfigDir(), cfileName);\n        } else {\n          //else read from the indexdirectory\n          file = new File(core.getIndexDir(), fileName);\n        }\n        if (file.exists() && file.canRead()) {\n          inputStream = new FileInputStream(file);\n          FileChannel channel = inputStream.getChannel();\n          //if offset is mentioned move the pointer to that point\n          if (offset != -1)\n            channel.position(offset);\n          byte[] buf = new byte[(len == -1 || len > PACKET_SZ) ? PACKET_SZ : len];\n          Checksum checksum = null;\n          if (useChecksum)\n            checksum = new Adler32();\n          ByteBuffer bb = ByteBuffer.wrap(buf);\n\n          while (true) {\n            bb.clear();\n            long bytesRead = channel.read(bb);\n            if (bytesRead <= 0) {\n              writeNothing();\n              fos.close();\n              break;\n            }\n            fos.writeInt((int) bytesRead);\n            if (useChecksum) {\n              checksum.reset();\n              checksum.update(buf, 0, (int) bytesRead);\n              fos.writeLong(checksum.getValue());\n            }\n            fos.write(buf, 0, (int) bytesRead);\n            fos.flush();\n            if (indexGen != null && (packetsWritten % 5 == 0)) {\n              //after every 5 packets reserve the commitpoint for some time\n              delPolicy.setReserveDuration(indexGen, reserveCommitDuration);\n            }\n            packetsWritten++;\n          }\n        } else {\n          writeNothing();\n        }\n      } catch (IOException e) {\n        LOG.warn(\"Exception while writing response for params: \" + params, e);\n      } finally {\n        IOUtils.closeQuietly(inputStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c26f00b574427b55127e869b935845554afde1fa","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9405f486872f1e416304dfe389741f4ee2f8a4d"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"c26f00b574427b55127e869b935845554afde1fa":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}