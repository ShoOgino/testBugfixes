{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","commits":[{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n  }\n\n","sourceOld":"  private SolrIndexWriter(String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(schema).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    runningMajorMergesGauge = () -> runningMajorMerges.get();\n    runningMinorMergesGauge = () -> runningMinorMerges.get();\n    runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n    runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n    runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n    runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n    metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (mergeDetails) {\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      } else {\n        majorMergedDocs = null;\n        majorDeletedDocs = null;\n      }\n    } else {\n      mergeDetails = false;\n      majorMergedDocs = null;\n      majorDeletedDocs = null;\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a","e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    runningMajorMergesGauge = () -> runningMajorMerges.get();\n    runningMinorMergesGauge = () -> runningMinorMerges.get();\n    runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n    runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n    runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n    runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n    metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (mergeDetails) {\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      } else {\n        majorMergedDocs = null;\n        majorDeletedDocs = null;\n      }\n    } else {\n      mergeDetails = false;\n      majorMergedDocs = null;\n      majorDeletedDocs = null;\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","date":1487166948,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        runningMajorMergesGauge = () -> runningMajorMerges.get();\n        runningMinorMergesGauge = () -> runningMinorMerges.get();\n        runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n        runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n        runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n        runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n        metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n    runningMajorMergesGauge = () -> runningMajorMerges.get();\n    runningMinorMergesGauge = () -> runningMinorMerges.get();\n    runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n    runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n    runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n    runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n    metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n    metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n    flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (mergeDetails) {\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      } else {\n        majorMergedDocs = null;\n        majorDeletedDocs = null;\n      }\n    } else {\n      mergeDetails = false;\n      majorMergedDocs = null;\n      majorDeletedDocs = null;\n    }\n  }\n\n","bugFix":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        runningMajorMergesGauge = () -> runningMajorMerges.get();\n        runningMinorMergesGauge = () -> runningMinorMerges.get();\n        runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n        runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n        runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n        runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n        metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        runningMajorMergesGauge = () -> runningMajorMerges.get();\n        runningMinorMergesGauge = () -> runningMinorMerges.get();\n        runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n        runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n        runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n        runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n        metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        runningMajorMergesGauge = () -> runningMajorMerges.get();\n        runningMinorMergesGauge = () -> runningMinorMerges.get();\n        runningMajorMergesDocsGauge = () -> runningMajorMergesDocs.get();\n        runningMinorMergesDocsGauge = () -> runningMinorMergesDocs.get();\n        runningMajorMergesSegmentsGauge = () -> runningMajorMergesSegments.get();\n        runningMinorMergesSegmentsGauge = () -> runningMinorMergesSegments.get();\n        metricManager.register(registry, runningMajorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesGauge, true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesDocsGauge, true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.register(registry, runningMajorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.register(registry, runningMinorMergesSegmentsGauge, true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreDescriptor().getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(registry, \"docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(registry, \"deletedDocs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(registry, \"minor\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(registry, \"major\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(registry, \"errors\", SolrInfoMBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoMBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(registry, \"flush\", SolrInfoMBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registryName, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registryName, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registryName, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registryName, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registryName, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        metricManager.registerGauge(null, registryName, () -> runningMajorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registryName, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","729cb470f975115d4c60517b2cb7c42e37a7a2e1","816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registryName, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registryName, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registryName, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registryName, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registryName, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        metricManager.registerGauge(null, registryName, () -> runningMajorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registryName, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    SolrMetricManager metricManager = core.getCoreContainer().getMetricManager();\n    String registry = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registry, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registry, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registry, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registry, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registry, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registry, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registry, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registry, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = solrMetricsContext.meter(null, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = solrMetricsContext.meter(null, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = solrMetricsContext.timer(null, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = solrMetricsContext.timer(null, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = solrMetricsContext.counter(null, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        solrMetricsContext.gauge(null, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(null, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(null, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = solrMetricsContext.meter(null, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    metricManager = core.getCoreContainer().getMetricManager();\n    registryName = core.getCoreMetricManager().getRegistryName();\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = metricManager.meter(null, registryName, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = metricManager.meter(null, registryName, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = metricManager.timer(null, registryName, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = metricManager.timer(null, registryName, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = metricManager.counter(null, registryName, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        metricManager.registerGauge(null, registryName, () -> runningMajorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMerges.get(), tag, true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesDocs.get(), tag, true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        metricManager.registerGauge(null, registryName, () -> runningMajorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        metricManager.registerGauge(null, registryName, () -> runningMinorMergesSegments.get(), tag, true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = metricManager.meter(null, registryName, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = solrMetricsContext.meter(\"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = solrMetricsContext.meter(\"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = solrMetricsContext.timer(\"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = solrMetricsContext.timer(\"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = solrMetricsContext.counter(\"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        solrMetricsContext.gauge(() -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = solrMetricsContext.meter(\"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = solrMetricsContext.meter(null, \"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = solrMetricsContext.meter(null, \"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = solrMetricsContext.timer(null, \"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = solrMetricsContext.timer(null, \"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = solrMetricsContext.counter(null, \"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        solrMetricsContext.gauge(null, () -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(null, () -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(null, () -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(null, () -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = solrMetricsContext.meter(null, \"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#SolrIndexWriter(SolrCore,String,String,Directory,boolean,IndexSchema,SolrIndexConfig,IndexDeletionPolicy,Codec).mjava","sourceNew":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer {}\", name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = solrMetricsContext.meter(\"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = solrMetricsContext.meter(\"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = solrMetricsContext.timer(\"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = solrMetricsContext.timer(\"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = solrMetricsContext.counter(\"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        solrMetricsContext.gauge(() -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = solrMetricsContext.meter(\"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","sourceOld":"  private SolrIndexWriter(SolrCore core, String name, String path, Directory directory, boolean create, IndexSchema schema, SolrIndexConfig config, IndexDeletionPolicy delPolicy, Codec codec) throws IOException {\n    super(directory,\n          config.toIndexWriterConfig(core).\n          setOpenMode(create ? IndexWriterConfig.OpenMode.CREATE : IndexWriterConfig.OpenMode.APPEND).\n          setIndexDeletionPolicy(delPolicy).setCodec(codec)\n          );\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    infoStream = getConfig().getInfoStream();\n    this.directory = directory;\n    numOpens.incrementAndGet();\n    solrMetricsContext = core.getSolrMetricsContext().getChildContext(this);\n    if (config.metricsInfo != null && config.metricsInfo.initArgs != null) {\n      Object v = config.metricsInfo.initArgs.get(\"majorMergeDocs\");\n      if (v != null) {\n        try {\n          majorMergeDocs = Long.parseLong(String.valueOf(v));\n        } catch (Exception e) {\n          log.warn(\"Invalid 'majorMergeDocs' argument, using default 512k\", e);\n        }\n      }\n      Boolean Totals = config.metricsInfo.initArgs.getBooleanArg(\"merge\");\n      Boolean Details = config.metricsInfo.initArgs.getBooleanArg(\"mergeDetails\");\n      if (Details != null) {\n        mergeDetails = Details;\n      } else {\n        mergeDetails = false;\n      }\n      if (Totals != null) {\n        mergeTotals = Totals;\n      } else {\n        mergeTotals = false;\n      }\n      if (mergeDetails) {\n        mergeTotals = true; // override\n        majorMergedDocs = solrMetricsContext.meter(\"docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        majorDeletedDocs = solrMetricsContext.meter(\"deletedDocs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n      }\n      if (mergeTotals) {\n        minorMerge = solrMetricsContext.timer(\"minor\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        majorMerge = solrMetricsContext.timer(\"major\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        mergeErrors = solrMetricsContext.counter(\"errors\", SolrInfoBean.Category.INDEX.toString(), \"merge\");\n        String tag = core.getMetricTag();\n        solrMetricsContext.gauge(() -> runningMajorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMerges.get(), true, \"running\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesDocs.get(), true, \"running.docs\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        solrMetricsContext.gauge(() -> runningMajorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"major\");\n        solrMetricsContext.gauge(() -> runningMinorMergesSegments.get(), true, \"running.segments\", SolrInfoBean.Category.INDEX.toString(), \"merge\", \"minor\");\n        flushMeter = solrMetricsContext.meter(\"flush\", SolrInfoBean.Category.INDEX.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"740d649f013f07efbeb73ca854f106c60166e7c0":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","bfc52860e6d13d034226a760813c59d984c6817a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"bfc52860e6d13d034226a760813c59d984c6817a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"43564cbb30b064675027cfb569564e8531096e97":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["f03e4bed5023ec3ef93a771b8888cae991cf448d","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["f03e4bed5023ec3ef93a771b8888cae991cf448d","e1a852c0a44dbc28501a84f489c6ed85d1fb1ee8"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}