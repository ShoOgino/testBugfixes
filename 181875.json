{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","sourceOld":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","sourceOld":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","sourceOld":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    \n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty\n        .getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        causeConnectionLoss(jetty, cores.getZkController().getClientTimeout() + 200);\n      }\n    }\n    \n\n//    Thread thread = new Thread() {\n//      {\n//        setDaemon(true);\n//      }\n//      public void run() {\n//        SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n//        if (solrDispatchFilter != null) {\n//          CoreContainer cores = solrDispatchFilter.getCores();\n//          if (cores != null) {\n//            try {\n//              Thread.sleep(ZkTestServer.TICK_TIME * 2 + 800);\n//            } catch (InterruptedException e) {\n//              // we act as only connection loss\n//              return;\n//            }\n//            long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n//            zkServer.expire(sessionId);\n//          }\n//        }\n//      }\n//    };\n//    thread.start();\n\n  }\n\n","sourceOld":"  public void expireSession(JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be9f7175e1703e31f8d8de32612b7212db6acf76","date":1408660152,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    \n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty\n        .getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        causeConnectionLoss(jetty);\n        long sessionId = cores.getZkController().getZkClient()\n            .getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    \n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty\n        .getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        causeConnectionLoss(jetty, cores.getZkController().getClientTimeout() + 200);\n      }\n    }\n    \n\n//    Thread thread = new Thread() {\n//      {\n//        setDaemon(true);\n//      }\n//      public void run() {\n//        SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty.getDispatchFilter().getFilter();\n//        if (solrDispatchFilter != null) {\n//          CoreContainer cores = solrDispatchFilter.getCores();\n//          if (cores != null) {\n//            try {\n//              Thread.sleep(ZkTestServer.TICK_TIME * 2 + 800);\n//            } catch (InterruptedException e) {\n//              // we act as only connection loss\n//              return;\n//            }\n//            long sessionId = cores.getZkController().getZkClient().getSolrZooKeeper().getSessionId();\n//            zkServer.expire(sessionId);\n//          }\n//        }\n//      }\n//    };\n//    thread.start();\n\n  }\n\n","bugFix":["a6378064655e76cd7b908b1cab4ce425b384b508"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1088b72b3b4cc45316b7595bd09023c859cd2327","date":1447150009,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      causeConnectionLoss(jetty);\n      long sessionId = cores.getZkController().getZkClient()\n          .getSolrZooKeeper().getSessionId();\n      zkServer.expire(sessionId);\n    }\n\n  }\n\n","sourceOld":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n    \n    SolrDispatchFilter solrDispatchFilter = (SolrDispatchFilter) jetty\n        .getDispatchFilter().getFilter();\n    if (solrDispatchFilter != null) {\n      CoreContainer cores = solrDispatchFilter.getCores();\n      if (cores != null) {\n        causeConnectionLoss(jetty);\n        long sessionId = cores.getZkController().getZkClient()\n            .getSolrZooKeeper().getSessionId();\n        zkServer.expire(sessionId);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n      causeConnectionLoss(jetty);\n      long sessionId = cores.getZkController().getZkClient()\n          .getSolrZooKeeper().getSessionId();\n      zkServer.expire(sessionId);\n    }\n\n  }\n\n","sourceOld":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      causeConnectionLoss(jetty);\n      long sessionId = cores.getZkController().getZkClient()\n          .getSolrZooKeeper().getSessionId();\n      zkServer.expire(sessionId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#expireSession(JettySolrRunner).mjava","sourceNew":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n      causeConnectionLoss(jetty);\n      long sessionId = cores.getZkController().getZkClient()\n          .getSolrZooKeeper().getSessionId();\n      zkServer.expire(sessionId);\n    }\n\n  }\n\n","sourceOld":"  // TODO: expire all clients at once?\n  public void expireSession(final JettySolrRunner jetty) {\n    monkeyLog(\"expire session for \" + jetty.getLocalPort() + \" !\");\n\n    CoreContainer cores = jetty.getCoreContainer();\n    if (cores != null) {\n      causeConnectionLoss(jetty);\n      long sessionId = cores.getZkController().getZkClient()\n          .getSolrZooKeeper().getSessionId();\n      zkServer.expire(sessionId);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["1088b72b3b4cc45316b7595bd09023c859cd2327","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"a6378064655e76cd7b908b1cab4ce425b384b508":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"1088b72b3b4cc45316b7595bd09023c859cd2327":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"be9f7175e1703e31f8d8de32612b7212db6acf76":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6378064655e76cd7b908b1cab4ce425b384b508":["be9f7175e1703e31f8d8de32612b7212db6acf76"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"1088b72b3b4cc45316b7595bd09023c859cd2327":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"be9f7175e1703e31f8d8de32612b7212db6acf76":["1088b72b3b4cc45316b7595bd09023c859cd2327"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a6378064655e76cd7b908b1cab4ce425b384b508","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}