{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#descendWithPrefix(Arc[Object],BytesRef).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#descendWithPrefix(Arc[Object],String).mjava","sourceNew":"  /**\n   * Descend along the path starting at <code>arc</code> and going through bytes\n   * in the argument.\n   * \n   * @param arc\n   *          The starting arc. This argument is modified in-place.\n   * @param utf8\n   *          The term to descend along.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc\n   *         matching last byte of <code>term</code>. <code>false</code> is\n   *         returned if no such prefix exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, BytesRef utf8)\n      throws IOException {\n    final int max = utf8.offset + utf8.length;\n    for (int i = utf8.offset; i < max; i++) {\n      if (automaton.findTargetArc(utf8.bytes[i] & 0xff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Descend along the path starting at <code>arc</code> and going through\n   * bytes in <code>utf8</code> argument.\n   *  \n   * @param arc The starting arc. This argument is modified in-place.\n   * @param term The term to descend with.\n   * @return If <code>true</code>, <code>arc</code> will be set to the arc matching\n   * last byte of <code>utf8</code>. <code>false</code> is returned if no such \n   * prefix <code>utf8</code> exists.\n   */\n  private boolean descendWithPrefix(Arc<Object> arc, String term) throws IOException {\n    final int max = term.length();\n\n    for (int i = 0; i < max; i++) {\n      if (automaton.findTargetArc(term.charAt(i) & 0xffff, arc, arc) == null) {\n        // No matching prefixes, return an empty result.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["e230a61047bc041516c811baa08a7174d6f8322a"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["7bf07f4ebadc7539de83a531e64678350d78ca26","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}