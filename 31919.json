{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(1);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(1);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deea3439de4f487ae553317e50d5d641ca386374","date":1537522941,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(1);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1fec8b37cbb6884a64d39565e9dd7b4522a0598","date":1537699559,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(1);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea","date":1538045138,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingHandlerTest.createAutoScalingRequest(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudTestUtils.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudTestUtils.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .setMaxShardsPerNode(-1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimPolicyCloud#testCreateCollectionAddShardWithReplicaTypeUsingPolicy().mjava","sourceNew":null,"sourceOld":"  public void testCreateCollectionAddShardWithReplicaTypeUsingPolicy() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    List<String> nodes = new ArrayList<>(cluster.getClusterStateProvider().getLiveNodes());\n    String nrtNodeName = nodes.get(0);\n    int nrtPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(nrtNodeName, ImplicitSnitch.PORT);\n\n\n    String pullNodeName = nodes.get(1);\n    int pullPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(pullNodeName, ImplicitSnitch.PORT);\n\n    String tlogNodeName = nodes.get(2);\n    int tlogPort = (Integer)cluster.getSimNodeStateProvider().simGetNodeValue(tlogNodeName, ImplicitSnitch.PORT);\n    log.info(\"NRT {} PULL {} , TLOG {} \", nrtNodeName, pullNodeName, tlogNodeName);\n\n    String commands = \"{set-cluster-policy :[\" +\n        \"{replica:0 , shard:'#EACH', type: NRT, port: '!\" + nrtPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: PULL, port: '!\" + pullPort + \"'}\" +\n        \"{replica:0 , shard:'#EACH', type: TLOG, port: '!\" + tlogPort + \"'}\" +\n        \"]}\";\n\n\n    solrClient.request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));\n    Map<String, Object> json = Utils.getJson(cluster.getDistribStateManager(), ZkStateReader.SOLR_AUTOSCALING_CONF_PATH);\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + nrtPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[0]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + pullPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[1]/port\"));\n    assertEquals(\"full json:\" + Utils.toJSONString(json), \"!\" + tlogPort,\n        Utils.getObjectByPath(json, true, \"cluster-policy[2]/port\"));\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(\"policiesTest\", \"conf\", \"s1\", 1, 1, 1)\n        .process(solrClient);\n    CloudUtil.waitForState(cluster, \"Timeout waiting for collection to become active\", \"policiesTest\",\n        CloudUtil.clusterShape(1, 3, false, true));\n\n    DocCollection coll = getCollectionState(\"policiesTest\");\n\n\n    BiConsumer<String, Replica> verifyReplicas = (s, replica) -> {\n      switch (replica.getType()) {\n        case NRT: {\n          assertTrue(\"NRT replica should be in \" + nrtNodeName, replica.getNodeName().equals(nrtNodeName));\n          break;\n        }\n        case TLOG: {\n          assertTrue(\"TLOG replica should be in \" + tlogNodeName, replica.getNodeName().equals(tlogNodeName));\n          break;\n        }\n        case PULL: {\n          assertTrue(\"PULL replica should be in \" + pullNodeName, replica.getNodeName().equals(pullNodeName));\n          break;\n        }\n      }\n\n    };\n    coll.forEachReplica(verifyReplicas);\n\n    CollectionAdminRequest.createShard(\"policiesTest\", \"s3\").\n        process(solrClient);\n    coll = getCollectionState(\"policiesTest\");\n    assertEquals(3, coll.getSlice(\"s3\").getReplicas().size());\n    coll.forEachReplica(verifyReplicas);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["a6a5c1c40529f15b445e6720dfde1967e139bff1","deea3439de4f487ae553317e50d5d641ca386374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["89948af0461fead48f44ba8fb7866f107ce83f22"],"deea3439de4f487ae553317e50d5d641ca386374":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598","deea3439de4f487ae553317e50d5d641ca386374"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9f71a1c6c905e9489b4d25c83c8d628d978a8ea":["89948af0461fead48f44ba8fb7866f107ce83f22"],"f1fec8b37cbb6884a64d39565e9dd7b4522a0598":["e9f71a1c6c905e9489b4d25c83c8d628d978a8ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"deea3439de4f487ae553317e50d5d641ca386374":["f1fec8b37cbb6884a64d39565e9dd7b4522a0598"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"89948af0461fead48f44ba8fb7866f107ce83f22":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}