{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","commits":[{"id":"8179b8076771d18179c95bd365eab8cda618f84a","date":1348552364,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","pathOld":"/dev/null","sourceNew":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r,\n      TaxonomyReader tr, FacetSearchParams fsp, final SamplingParams params)\n          throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new FacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","sourceNew":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new StandardFacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","sourceOld":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r,\n      TaxonomyReader tr, FacetSearchParams fsp, final SamplingParams params)\n          throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new FacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","sourceNew":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new StandardFacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","sourceOld":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r,\n      TaxonomyReader tr, FacetSearchParams fsp, final SamplingParams params)\n          throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new FacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","sourceNew":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    Sampler sampler = new RandomSampler(params, random());\n    StandardFacetsAccumulator sfa = new SamplingAccumulator(sampler, fsp, r, tr);\n    FacetsCollector fcWithSampling = FacetsCollector.create(sfa);\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","sourceOld":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    FacetsCollector fcWithSampling = new StandardFacetsCollector(fsp, r, tr) {\n      @Override\n      protected FacetsAccumulator initFacetsAccumulator(FacetSearchParams facetSearchParams, IndexReader indexReader,\n          TaxonomyReader taxonomyReader) {\n        Sampler sampler = new RandomSampler(params, random());\n        return new SamplingAccumulator(sampler, facetSearchParams, indexReader, taxonomyReader);\n      }\n    };\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/sampling/OversampleWithDepthTest#searchWithFacets(IndexReader,TaxonomyReader,FacetSearchParams,SamplingParams).mjava","sourceNew":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    Sampler sampler = new RandomSampler(params, random());\n    StandardFacetsAccumulator sfa = new SamplingAccumulator(sampler, fsp, r, tr);\n    FacetsCollector fcWithSampling = FacetsCollector.create(sfa);\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","sourceOld":"  /** search reader <code>r</code>*/\n  private FacetResult searchWithFacets(IndexReader r, TaxonomyReader tr, FacetSearchParams fsp, \n      final SamplingParams params) throws IOException {\n    // a FacetsCollector with a sampling accumulator\n    Sampler sampler = new RandomSampler(params, random());\n    StandardFacetsAccumulator sfa = new SamplingAccumulator(sampler, fsp, r, tr);\n    FacetsCollector fcWithSampling = FacetsCollector.create(sfa);\n    \n    IndexSearcher s = new IndexSearcher(r);\n    s.search(new MatchAllDocsQuery(), fcWithSampling);\n    \n    // there's only one expected result, return just it.\n    return fcWithSampling.getFacetResults().get(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["8179b8076771d18179c95bd365eab8cda618f84a"],"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8179b8076771d18179c95bd365eab8cda618f84a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["8179b8076771d18179c95bd365eab8cda618f84a","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8179b8076771d18179c95bd365eab8cda618f84a":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8179b8076771d18179c95bd365eab8cda618f84a"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}