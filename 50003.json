{"path":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, IOContext.DEFAULT);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(false, sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(false, sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = SegmentReader.get(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = SegmentReader.get(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd328b3cdb3f944c5c765d81bb246545f85932dd","date":1327857991,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiReader#openReader().mjava","sourceNew":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","sourceOld":"  @Override\n  protected IndexReader openReader() throws IOException {\n    IndexReader reader;\n\n    sis.read(dir);\n    SegmentReader reader1 = new SegmentReader(sis.info(0), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    SegmentReader reader2 = new SegmentReader(sis.info(1), DirectoryReader.DEFAULT_TERMS_INDEX_DIVISOR, newIOContext(random));\n    readers[0] = reader1;\n    readers[1] = reader2;\n    assertTrue(reader1 != null);\n    assertTrue(reader2 != null);\n\n    reader = new MultiReader(readers);\n\n    assertTrue(dir != null);\n    assertTrue(sis != null);\n    \n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["ddc4c914be86e34b54f70023f45a60fa7f04e929","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9ce667c6d3400b22523701c549c0d35e26da8b46","bd328b3cdb3f944c5c765d81bb246545f85932dd"],"bd328b3cdb3f944c5c765d81bb246545f85932dd":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ddc4c914be86e34b54f70023f45a60fa7f04e929","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["9454a6510e2db155fb01faa5c049b06ece95fab9","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["9454a6510e2db155fb01faa5c049b06ece95fab9","b6f9be74ca7baaef11857ad002cad40419979516"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bd328b3cdb3f944c5c765d81bb246545f85932dd":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9ce667c6d3400b22523701c549c0d35e26da8b46"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","5d004d0e0b3f65bb40da76d476d659d7888270e8","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["5cab9a86bd67202d20b6adc463008c8e982b070a","bd328b3cdb3f944c5c765d81bb246545f85932dd"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}