{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#rewrite(IndexReader).mjava","sourceNew":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","sourceOld":"  /** Optimize our representation and our subqueries representations\n   * @param reader the IndexReader we query\n   * @return an optimized copy of us (which may not be a copy if there is nothing to optimize) */\n  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    int numDisjunctions = disjuncts.size();\n    if (numDisjunctions == 1) {\n      Query singleton = disjuncts.get(0);\n      Query result = singleton.rewrite(reader);\n      if (getBoost() != 1.0f) {\n        if (result == singleton) result = (Query)result.clone();\n        result.setBoost(getBoost() * result.getBoost());\n      }\n      return result;\n    }\n    DisjunctionMaxQuery clone = null;\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query clause = disjuncts.get(i);\n      Query rewrite = clause.rewrite(reader);\n      if (rewrite != clause) {\n        if (clone == null) clone = (DisjunctionMaxQuery)this.clone();\n        clone.disjuncts.set(i, rewrite);\n      }\n    }\n    if (clone != null) return clone;\n    else return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}