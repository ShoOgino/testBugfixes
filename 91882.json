{"path":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","commits":[{"id":"182a54c797bc7bc946c631e8ebdb8bdf8807814b","date":1065658404,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"/dev/null","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    Token token = tokenStream.next();\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 token.termText());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    token = tokenStream.next();\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 token.termText());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    final Token reusableToken = new Token();\n    Token nextToken = tokenStream.next(reusableToken);\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 nextToken.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    nextToken = tokenStream.next(reusableToken);\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 nextToken.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    Token token = tokenStream.next();\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 token.termText());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    token = tokenStream.next();\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 token.termText());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    final Token reusableToken = new Token();\n    Token nextToken = tokenStream.next(reusableToken);\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 nextToken.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    nextToken = tokenStream.next(reusableToken);\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 nextToken.term());\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = (TermAttribute) tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer());\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer());\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestPerFieldAnalzyerWrapper#testPerField().mjava","sourceNew":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","sourceOld":"  public void testPerField() throws Exception {\n    String text = \"Qwerty\";\n    PerFieldAnalyzerWrapper analyzer =\n              new PerFieldAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    analyzer.addAnalyzer(\"special\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n\n    TokenStream tokenStream = analyzer.tokenStream(\"field\",\n                                            new StringReader(text));\n    TermAttribute termAtt = tokenStream.getAttribute(TermAttribute.class);\n\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"WhitespaceAnalyzer does not lowercase\",\n                 \"Qwerty\",\n                 termAtt.term());\n\n    tokenStream = analyzer.tokenStream(\"special\",\n                                            new StringReader(text));\n    termAtt = tokenStream.getAttribute(TermAttribute.class);\n    assertTrue(tokenStream.incrementToken());\n    assertEquals(\"SimpleAnalyzer lowercases\",\n                 \"qwerty\",\n                 termAtt.term());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["182a54c797bc7bc946c631e8ebdb8bdf8807814b"],"182a54c797bc7bc946c631e8ebdb8bdf8807814b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"182a54c797bc7bc946c631e8ebdb8bdf8807814b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["182a54c797bc7bc946c631e8ebdb8bdf8807814b"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}