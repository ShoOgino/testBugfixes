{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName,\n          Reader reader) {\n        Tokenizer t = new KeywordTokenizer(reader);\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataFile(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String zipfile)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(zipfile), \"voc.txt\", \"output.txt\");\n    a.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(final String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    \n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer t = new KeywordTokenizer();\n        return new TokenStreamComponents(t, new SnowballFilter(t, snowballLanguage));\n      }  \n    };\n    \n    assertVocabulary(a, getDataPath(\"TestSnowballVocabData.zip\"), \n        dataDirectory + \"/voc.txt\", dataDirectory + \"/output.txt\");\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09479cd2de06c67a115b7346a8e5de8af4d62e81"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}