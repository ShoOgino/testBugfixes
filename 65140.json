{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add1e7dd742ea533ff4318cea83ca0a1f669f662","date":1585262285,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#testCollectionCreateWithoutCoresThenDelete().mjava","sourceNew":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, 330);\n  }\n\n","sourceOld":"  @Test\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testCollectionCreateWithoutCoresThenDelete() throws Exception {\n\n    final String collectionName = \"testSolrCloudCollectionWithoutCores\";\n    final CloudSolrClient client = cluster.getSolrClient();\n\n    assertNotNull(cluster.getZkServer());\n    assertFalse(cluster.getJettySolrRunners().isEmpty());\n\n    // create collection\n    createCollection(collectionName, OverseerCollectionMessageHandler.CREATE_NODE_SET_EMPTY);\n\n    // check the collection's corelessness\n    int coreCount = 0;\n    DocCollection docCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n    for (Map.Entry<String,Slice> entry : docCollection.getSlicesMap().entrySet()) {\n      coreCount += entry.getValue().getReplicasMap().entrySet().size();\n    }\n    assertEquals(0, coreCount);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(collectionName).process(client);\n    AbstractDistribZkTestBase.waitForCollectionToDisappear\n        (collectionName, client.getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["6b87d1f8719d7f05be003f3477450b74af13706a","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["b94236357aaa22b76c10629851fe4e376e0cea82","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add1e7dd742ea533ff4318cea83ca0a1f669f662"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["6b87d1f8719d7f05be003f3477450b74af13706a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["6b87d1f8719d7f05be003f3477450b74af13706a","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6b87d1f8719d7f05be003f3477450b74af13706a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"add1e7dd742ea533ff4318cea83ca0a1f669f662":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","add1e7dd742ea533ff4318cea83ca0a1f669f662","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}