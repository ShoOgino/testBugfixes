{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetsErrorCases().mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetsErrorCases().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeFacetsErrorCases() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\");\n\n    // invalid format for ranges\n    SolrException ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,start:-10,end:10,gap:2,\" +\n            \"ranges:[{key:\\\"0-200\\\", to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Cannot set gap/start/end and ranges params together\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:bleh}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected List for ranges but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[bleh]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected Map for range but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_to' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_from:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_from' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:bleh, to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:200, to:0}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'from' is higher than 'to' in range for key: [200,0)\", ex.getMessage());\n\n    // with old format\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"empty facet range\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid start character b in facet range bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid end character l in facet range (bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bleh,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(12,bleh)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(200,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'start' is higher than 'end' in range for key: (200,12)\", ex.getMessage());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a067727e528e9edadcd1704b7a3a10912e5d95c1","date":1584973258,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetErrors#testRangeFacetsErrorCases().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testRangeFacetsErrorCases().mjava","sourceNew":"  @Test\n  public void testRangeFacetsErrorCases() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\");\n\n    // invalid format for ranges\n    SolrException ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,start:-10,end:10,gap:2,\" +\n            \"ranges:[{key:\\\"0-200\\\", to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Cannot set gap/start/end and ranges params together\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:bleh}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected List for ranges but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[bleh]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected Map for range but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_to' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_from:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_from' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:bleh, to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:200, to:0}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'from' is higher than 'to' in range for key: [200,0)\", ex.getMessage());\n\n    // with old format\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"empty facet range\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid start character b in facet range bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid end character l in facet range (bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bleh,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(12,bleh)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(200,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'start' is higher than 'end' in range for key: (200,12)\", ex.getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacetsErrorCases() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    indexSimple(client);\n\n    SolrParams params = params(\"q\", \"*:*\", \"rows\", \"0\");\n\n    // invalid format for ranges\n    SolrException ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,start:-10,end:10,gap:2,\" +\n            \"ranges:[{key:\\\"0-200\\\", to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Cannot set gap/start/end and ranges params together\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:bleh}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected List for ranges but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[bleh]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected Map for range but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_to' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:200, inclusive_from:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Expected boolean type for param 'inclusive_from' but got String\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:bleh, to:200}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:0, to:bleh}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{from:200, to:0}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'from' is higher than 'to' in range for key: [200,0)\", ex.getMessage());\n\n    // with old format\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"empty facet range\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid start character b in facet range bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bl\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertTrue(ex.getMessage().contains(\"Invalid end character l in facet range (bl\"));\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(bleh,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(12,bleh)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"Can't parse value bleh for field: num_i\", ex.getMessage());\n\n    ex = expectThrows(SolrException.class,\n        () -> h.query(req(params, \"json.facet\", \"{price:{type :range, field : num_i,\" +\n            \"ranges:[{range:\\\"(200,12)\\\"}]}}\"))\n    );\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    assertEquals(\"'start' is higher than 'end' in range for key: (200,12)\", ex.getMessage());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a067727e528e9edadcd1704b7a3a10912e5d95c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a067727e528e9edadcd1704b7a3a10912e5d95c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}