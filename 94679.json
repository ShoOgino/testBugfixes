{"path":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setValue(ref);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setValue(ref);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setValue(ref);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setValue(ref);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random.nextBoolean()) {\n          values[i] = random.nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random.nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setValue(ref);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setValue(ref);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setIntValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setIntValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random.nextBoolean()) {\n          values[i] = random.nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random.nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random.nextBoolean()) {\n          values[i] = random.nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random.nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":["e0f5e4b06eda9c2996435d90659faa1a8601d196","fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setIntValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setIntValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setIntValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setIntValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random.nextBoolean()) {\n          values[i] = random.nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random.nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final DocValuesField valField;\n    switch (valueType) {\n    case FIXED_INTS_8:\n      valField = new DocValuesField(\"promote\", (byte) 0, valueType);\n      break;\n    case FIXED_INTS_16:\n      valField = new DocValuesField(\"promote\", (short) 0, valueType);\n      break;\n    case FIXED_INTS_32:\n      valField = new DocValuesField(\"promote\", 0, valueType);\n      break;\n    case VAR_INTS:\n      valField = new DocValuesField(\"promote\", 0L, valueType);\n      break;\n    case FIXED_INTS_64:\n      valField = new DocValuesField(\"promote\", (long) 0, valueType);\n      break;\n    case FLOAT_64:\n      valField = new DocValuesField(\"promote\", (double) 0, valueType);\n      break;\n    case FLOAT_32:\n      valField = new DocValuesField(\"promote\", (float) 0, valueType);\n      break;\n    case BYTES_FIXED_DEREF:\n    case BYTES_FIXED_SORTED:\n    case BYTES_FIXED_STRAIGHT:\n    case BYTES_VAR_DEREF:\n    case BYTES_VAR_SORTED:\n    case BYTES_VAR_STRAIGHT:\n      valField = new DocValuesField(\"promote\", new BytesRef(), valueType);\n      break;\n    default:\n      fail(\"unexpected value \" + valueType);\n      valField = null;\n    }\n\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setIntValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setIntValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","629c38c4ae4e303d0617e05fbfe508140b32f0a3","fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18","date":1339188570,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],Type[],int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTypePromotion#index(IndexWriter,Type,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, Type[] sourceTypes, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      sourceTypes[i] = valueType;\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    final Field valField;\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: add docs \" + offset + \"-\" + (offset+num) + \" valType=\" + valueType);\n    }\n\n    switch(valueType) {\n    case VAR_INTS:\n      valField = new PackedLongDocValuesField(\"promote\", (long) 0);\n      break;\n    case FIXED_INTS_8:\n      valField = new ByteDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FIXED_INTS_16:\n      valField = new ShortDocValuesField(\"promote\", (short) 0);\n      break;\n    case FIXED_INTS_32:\n      valField = new IntDocValuesField(\"promote\", 0);\n      break;\n    case FIXED_INTS_64:\n      valField = new LongDocValuesField(\"promote\", (byte) 0);\n      break;\n    case FLOAT_32:\n      valField = new FloatDocValuesField(\"promote\", 0f);\n      break;\n    case FLOAT_64:\n      valField = new DoubleDocValuesField(\"promote\", 0d);\n      break;\n    case BYTES_FIXED_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_STRAIGHT:\n      valField = new StraightBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_DEREF:\n      valField = new DerefBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    case BYTES_FIXED_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), true);\n      break;\n    case BYTES_VAR_SORTED:\n      valField = new SortedBytesDocValuesField(\"promote\", new BytesRef(), false);\n      break;\n    default:\n      throw new IllegalStateException(\"unknown Type: \" + valueType);\n    }\n\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        // TODO: can we do nextLong()?\n        values[i] = random().nextInt();\n        valField.setLongValue(values[i]);\n        break;\n      case FIXED_INTS_16:\n        // TODO: negatives too?\n        values[i] = random().nextInt(Short.MAX_VALUE);\n        valField.setShortValue((short) values[i]);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random().nextInt();\n        valField.setIntValue((int) values[i]);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random().nextLong();\n        valField.setLongValue(values[i]);\n        break;\n      case FLOAT_64:\n        final double nextDouble = random().nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setDoubleValue(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random().nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloatValue(nextFloat);\n        break;\n      case FIXED_INTS_8:\n        values[i] = (byte) i;\n        valField.setByteValue((byte)values[i]);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random().nextLong();\n        byte bytes[] = new byte[8];\n        ByteArrayDataOutput out = new ByteArrayDataOutput(bytes, 0, 8);\n        out.writeLong(values[i]);\n        valField.setBytesValue(new BytesRef(bytes));\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        byte lbytes[] = new byte[8];\n        ByteArrayDataOutput lout = new ByteArrayDataOutput(lbytes, 0, 8);\n        final int len;\n        if (random().nextBoolean()) {\n          values[i] = random().nextInt();\n          lout.writeInt((int)values[i]);\n          len = 4;\n        } else {\n          values[i] = random().nextLong();\n          lout.writeLong(values[i]);\n          len = 8;\n        }\n        valField.setBytesValue(new BytesRef(lbytes, 0, len));\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n      }\n      if (VERBOSE) {\n        System.out.println(\"  doc \" + i + \" has val=\" + valField);\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random().nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["cc8f931c07d7930ebee666cf6d69b1b6d9f9cd18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}