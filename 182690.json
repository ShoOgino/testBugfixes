{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * </p>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/WordlistLoader#getSnowballWordSet(Reader,CharArraySet).mjava","sourceNew":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Reads stopwords from a stopword list in Snowball format.\n   * <p>\n   * The snowball format is the following:\n   * <ul>\n   * <li>Lines may contain multiple words separated by whitespace.\n   * <li>The comment character is the vertical line (&#124;).\n   * <li>Lines may contain trailing comments.\n   * </ul>\n   * \n   * @param reader Reader containing a Snowball stopword list\n   * @param result the {@link CharArraySet} to fill with the readers words\n   * @return the given {@link CharArraySet} with the reader's words\n   */\n  public static CharArraySet getSnowballWordSet(Reader reader, CharArraySet result)\n      throws IOException {\n    BufferedReader br = null;\n    try {\n      br = getBufferedReader(reader);\n      String line = null;\n      while ((line = br.readLine()) != null) {\n        int comment = line.indexOf('|');\n        if (comment >= 0) line = line.substring(0, comment);\n        String words[] = line.split(\"\\\\s+\");\n        for (int i = 0; i < words.length; i++)\n          if (words[i].length() > 0) result.add(words[i]);\n      }\n    } finally {\n      IOUtils.close(br);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["14600834a1fbc7c12faf344466e00cca8cc67de4","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}