{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","commits":[{"id":"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b","date":1478629715,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(cmd.getOptionValue(SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(cmd.getOptionValue(SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2","date":1485828282,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(requiredArg(options, cmd, SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(cmd.getOptionValue(SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(requiredArg(options, cmd, SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(cmd.getOptionValue(SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = cmd.getOptionValue(COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotsTool#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      CLIO.out(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(requiredArg(options, cmd, SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              CLIO.out(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      CLIO.out(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) throws IOException {\n    CommandLineParser parser = new PosixParser();\n    Options options = new Options();\n\n    options.addOption(null, CREATE, true, \"This command will create a snapshot with the specified name\");\n    options.addOption(null, DELETE, true, \"This command will delete a snapshot with the specified name\");\n    options.addOption(null, LIST, false, \"This command will list all the named snapshots for the specified collection.\");\n    options.addOption(null, DESCRIBE, true, \"This command will print details for a named snapshot for the specified collection.\");\n    options.addOption(null, PREPARE_FOR_EXPORT, true, \"This command will prepare copylistings for the specified snapshot.\"\n        + \" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared\"\n        + \" file-system e.g. HDFS\");\n    options.addOption(null, EXPORT_SNAPSHOT, true, \"This command will create a backup for the specified snapshot.\");\n    options.addOption(null, HELP, false, \"This command will print the help message for the snapshots related commands.\");\n    options.addOption(TEMP_DIR, true, \"This parameter specifies the path of a temporary directory on local filesystem\"\n        + \" during prepare-snapshot-export command.\");\n    options.addOption(DEST_DIR, true, \"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related\"\n        + \" information should be stored.\");\n    options.addOption(COLLECTION, true, \"This parameter specifies the name of the collection to be used during snapshot operation\");\n    options.addOption(SOLR_ZK_ENSEMBLE, true, \"This parameter specifies the Solr Zookeeper ensemble address\");\n    options.addOption(HDFS_PATH_PREFIX, true, \"This parameter specifies the HDFS URI prefix to be used\"\n        + \" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS.\");\n    options.addOption(BACKUP_REPO_NAME, true, \"This parameter specifies the name of the backup repository to be used\"\n        + \" during snapshot export preparation\");\n    options.addOption(ASYNC_REQ_ID, true, \"This parameter specifies the async request identifier to be used\"\n        + \" during snapshot export preparation\");\n\n    CommandLine cmd = null;\n    try {\n      cmd = parser.parse(options, args);\n    } catch (ParseException e) {\n      System.out.println(e.getLocalizedMessage());\n      printHelp(options);\n      System.exit(1);\n    }\n\n    if (cmd.hasOption(CREATE) || cmd.hasOption(DELETE) || cmd.hasOption(LIST) || cmd.hasOption(DESCRIBE)\n        || cmd.hasOption(PREPARE_FOR_EXPORT) || cmd.hasOption(EXPORT_SNAPSHOT)) {\n      try (SolrSnapshotsTool tool = new SolrSnapshotsTool(requiredArg(options, cmd, SOLR_ZK_ENSEMBLE))) {\n        if (cmd.hasOption(CREATE)) {\n          String snapshotName = cmd.getOptionValue(CREATE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.createSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(DELETE)) {\n          String snapshotName = cmd.getOptionValue(DELETE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.deleteSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(LIST)) {\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.listSnapshots(collectionName);\n\n        } else if (cmd.hasOption(DESCRIBE)) {\n          String snapshotName = cmd.getOptionValue(DESCRIBE);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          tool.describeSnapshot(collectionName, snapshotName);\n\n        } else if (cmd.hasOption(PREPARE_FOR_EXPORT)) {\n          String snapshotName = cmd.getOptionValue(PREPARE_FOR_EXPORT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String localFsDir = requiredArg(options, cmd, TEMP_DIR);\n          String hdfsOpDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> pathPrefix = Optional.ofNullable(cmd.getOptionValue(HDFS_PATH_PREFIX));\n\n          if (pathPrefix.isPresent()) {\n            try {\n              new URI(pathPrefix.get());\n            } catch (URISyntaxException e) {\n              System.out.println(\n                  \"The specified File system path prefix \" + pathPrefix.get()\n                      + \" is invalid. The error is \" + e.getLocalizedMessage());\n              System.exit(1);\n            }\n          }\n          tool.prepareForExport(collectionName, snapshotName, localFsDir, pathPrefix, hdfsOpDir);\n\n        }  else if (cmd.hasOption(EXPORT_SNAPSHOT)) {\n          String snapshotName = cmd.getOptionValue(EXPORT_SNAPSHOT);\n          String collectionName = requiredArg(options, cmd, COLLECTION);\n          String destDir = requiredArg(options, cmd, DEST_DIR);\n          Optional<String> backupRepo = Optional.ofNullable(cmd.getOptionValue(BACKUP_REPO_NAME));\n          Optional<String> asyncReqId = Optional.ofNullable(cmd.getOptionValue(ASYNC_REQ_ID));\n\n          tool.exportSnapshot(collectionName, snapshotName, destDir, backupRepo, asyncReqId);\n        }\n      }\n    } else if (cmd.hasOption(HELP))  {\n      printHelp(options);\n    } else {\n      System.out.println(\"Unknown command specified.\");\n      printHelp(options);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["199dfa410f1fdbfd3294106b04096cce5ed34b21","23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b"],"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2":["2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"2f42765a8ec9db88d334d2931fb3df8c5a2c4c3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21","23ee9ee847c92f9e0395e1ff6655ec464e0a57a2"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"23ee9ee847c92f9e0395e1ff6655ec464e0a57a2":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}