{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(newRandom(), dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Random random = newRandom();\n    Directory dir1 = newDirectory(random);\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(newRandom(), dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Random random = newRandom();\n    Directory dir1 = newDirectory(random);\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = new MockRAMDirectory();\n    createIndex(dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = SegmentReader.getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = SegmentReader.getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", Similarity.getDefault().encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.setNorm(1, \"field1\", 50);\n    modifier.setNorm(1, \"field2\", 50);\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a31c91eda919456f5f9237b086174385292f9935","date":1299074041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    SimilarityProvider sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.get(\"field1\").encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.get(\"field2\").encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    Similarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = IndexReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = IndexReader.openIfChanged(reader2);\n    assertNotNull(reader3);\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader4);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader5);\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = reader1.reopen();\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = reader2.reopen();\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = reader3.reopen();\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = reader3.reopen();\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":null,"sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = IndexReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = IndexReader.openIfChanged(reader2);\n    assertNotNull(reader3);\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader4);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader5);\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":null,"sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = IndexReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = IndexReader.openIfChanged(reader2);\n    assertNotNull(reader3);\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader4);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader5);\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#testNormsRefCounting().mjava","sourceNew":null,"sourceOld":"  public void testNormsRefCounting() throws IOException {\n    Directory dir1 = newDirectory();\n    createIndex(random, dir1, false);\n    \n    IndexReader reader1 = IndexReader.open(dir1, false);\n    SegmentReader segmentReader1 = getOnlySegmentReader(reader1);\n    IndexReader modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(0);\n    modifier.close();\n    \n    IndexReader reader2 = IndexReader.openIfChanged(reader1);\n    assertNotNull(reader2);\n    modifier = IndexReader.open(dir1, false);\n    DefaultSimilarity sim = new DefaultSimilarity();\n    modifier.setNorm(1, \"field1\", sim.encodeNormValue(50f));\n    modifier.setNorm(1, \"field2\", sim.encodeNormValue(50f));\n    modifier.close();\n    \n    IndexReader reader3 = IndexReader.openIfChanged(reader2);\n    assertNotNull(reader3);\n    SegmentReader segmentReader3 = getOnlySegmentReader(reader3);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(2);\n    modifier.close();\n\n    IndexReader reader4 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader4);\n    modifier = IndexReader.open(dir1, false);\n    modifier.deleteDocument(3);\n    modifier.close();\n\n    IndexReader reader5 = IndexReader.openIfChanged(reader3);\n    assertNotNull(reader5);\n    \n    // Now reader2-reader5 references reader1. reader1 and reader2\n    // share the same norms. reader3, reader4, reader5 also share norms.\n    assertRefCountEquals(1, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader1.close();\n\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader1.normsClosed());\n\n    reader2.close();\n    assertRefCountEquals(0, reader1);\n\n    // now the norms for field1 and field2 should be closed\n    assertTrue(segmentReader1.normsClosed(\"field1\"));\n    assertTrue(segmentReader1.normsClosed(\"field2\"));\n\n    // but the norms for field3 and field4 should still be open\n    assertFalse(segmentReader1.normsClosed(\"field3\"));\n    assertFalse(segmentReader1.normsClosed(\"field4\"));\n    \n    reader3.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader5.close();\n    assertRefCountEquals(0, reader1);\n    assertFalse(segmentReader3.normsClosed());\n    reader4.close();\n    assertRefCountEquals(0, reader1);\n    \n    // and now all norms that reader1 used should be closed\n    assertTrue(segmentReader1.normsClosed());\n    \n    // now that reader3, reader4 and reader5 are closed,\n    // the norms that those three readers shared should be\n    // closed as well\n    assertTrue(segmentReader3.normsClosed());\n\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["a31c91eda919456f5f9237b086174385292f9935"],"a31c91eda919456f5f9237b086174385292f9935":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"1291e4568eb7d9463d751627596ef14baf4c1603":["a31c91eda919456f5f9237b086174385292f9935","0f3cee3d20b0c786e6fca20539454262e29edcab"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","a31c91eda919456f5f9237b086174385292f9935"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a31c91eda919456f5f9237b086174385292f9935","0f3cee3d20b0c786e6fca20539454262e29edcab"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a31c91eda919456f5f9237b086174385292f9935"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","4122a26e1fd0457a340616673a3d3aada370f713"],"4122a26e1fd0457a340616673a3d3aada370f713":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["8a8259c922a83abc544609227a60d48e5ee93e7e","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a31c91eda919456f5f9237b086174385292f9935":["0f3cee3d20b0c786e6fca20539454262e29edcab","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["a31c91eda919456f5f9237b086174385292f9935","bb9b72f7c3d7827c64dd4ec580ded81778da361d","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4122a26e1fd0457a340616673a3d3aada370f713":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1291e4568eb7d9463d751627596ef14baf4c1603","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f0b9507caf22f292ac0e5e59f62db4275adf4511","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}