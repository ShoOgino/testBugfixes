{"path":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","a6378064655e76cd7b908b1cab4ce425b384b508","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1","d8469c0c0b45f7e3da74918efc8ede2ad2efe2b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0c46c486d300cbb600e170f5b68cd8e42e94ea0","date":1342363102,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ef6348b84bf0f8a649826b69a70ac815ff560e2","date":1343106054,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n \n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        \n        System.out.println(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<JettySolrRunner> deadPool = new ArrayList<JettySolrRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index);\n               try {\n                 jetty.start();\n               } catch (BindException e) {\n                 jetty.stop();\n                 sleep(2000);\n                 try {\n                   jetty.start();\n                 } catch (BindException e2) {\n                   jetty.stop();\n                   sleep(5000);\n                   try {\n                     jetty.start();\n                   } catch (BindException e3) {\n                     // we coud not get the port\n                     jetty.stop();\n                     continue;\n                   }\n                 }\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            JettySolrRunner jetty;\n            if (random.nextBoolean()) {\n              jetty = stopRandomShard();\n            } else {\n              jetty = killRandomShard();\n            }\n            if (jetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(jetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkey#startTheMonkey(boolean,int).mjava","sourceNew":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","sourceOld":"  // synchronously starts and stops shards randomly, unless there is only one\n  // active shard up for a slice or if there is one active and others recovering\n  public void startTheMonkey(boolean killLeaders, final int roundPause) {\n    monkeyLog(\"starting\");\n    this.aggressivelyKillLeaders = killLeaders;\n    startTime = System.currentTimeMillis();\n    // TODO: when kill leaders is on, lets kill a higher percentage of leaders\n    \n    stop = false;\n    new Thread() {\n      private List<CloudJettyRunner> deadPool = new ArrayList<CloudJettyRunner>();\n\n      @Override\n      public void run() {\n        while (!stop) {\n          try {\n            Thread.sleep(roundPause);\n            Random random = LuceneTestCase.random();\n            if (random.nextBoolean()) {\n             if (!deadPool.isEmpty()) {\n               int index = random.nextInt(deadPool.size());\n               JettySolrRunner jetty = deadPool.get(index).jetty;\n               if (!ChaosMonkey.start(jetty)) {\n                 continue;\n               }\n               //System.out.println(\"started on port:\" + jetty.getLocalPort());\n               deadPool.remove(index);\n               starts.incrementAndGet();\n               continue;\n             }\n            }\n            \n            int rnd = random.nextInt(10);\n\n            if (expireSessions && rnd < EXPIRE_PERCENT) {\n              expireRandomSession();\n            } \n            \n            if (causeConnectionLoss && rnd < CONLOSS_PERCENT) {\n              randomConnectionLoss();\n              randomConnectionLoss();\n            }\n            \n            CloudJettyRunner cjetty;\n            if (random.nextBoolean()) {\n              cjetty = stopRandomShard();\n            } else {\n              cjetty = killRandomShard();\n            }\n            if (cjetty == null) {\n              // we cannot kill\n            } else {\n              deadPool.add(cjetty);\n            }\n            \n          } catch (InterruptedException e) {\n            //\n          } catch (Exception e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n          }\n        }\n        monkeyLog(\"finished\");\n        monkeyLog(\"I ran for \" + (System.currentTimeMillis() - startTime)/1000.0f + \"sec. I stopped \" + stops + \" and I started \" + starts\n            + \". I also expired \" + expires.get() + \" and caused \" + connloss\n            + \" connection losses\");\n      }\n    }.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","c0c46c486d300cbb600e170f5b68cd8e42e94ea0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","6ef6348b84bf0f8a649826b69a70ac815ff560e2"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["6ef6348b84bf0f8a649826b69a70ac815ff560e2"]},"commit2Childs":{"c0c46c486d300cbb600e170f5b68cd8e42e94ea0":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"6ef6348b84bf0f8a649826b69a70ac815ff560e2":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","6ef6348b84bf0f8a649826b69a70ac815ff560e2","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c0c46c486d300cbb600e170f5b68cd8e42e94ea0","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}