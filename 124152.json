{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.shutdown();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.shutdown();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery q = new BooleanQuery();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92b4a131f1796dd57cc6698aae3d589d32a29deb","date":1457087316,"type":3,"author":"Luc Vanlerberghe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery.Builder troubleBuilder = new MultiPhraseQuery.Builder();\n    troubleBuilder.add(new Term(\"body\", \"a\"));\n    troubleBuilder\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(troubleBuilder.build(), BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#testPhrasePrefixWithBooleanQuery().mjava","sourceNew":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery.Builder troubleBuilder = new MultiPhraseQuery.Builder();\n    troubleBuilder.add(new Term(\"body\", \"a\"));\n    troubleBuilder\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(troubleBuilder.build(), BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testPhrasePrefixWithBooleanQuery() throws IOException {\n    Directory indexStore = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), indexStore);\n    add(\"This is a test\", \"object\", writer);\n    add(\"a note\", \"note\", writer);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    // This query will be equivalent to +type:note +body:\"a t*\"\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.add(new TermQuery(new Term(\"type\", \"note\")), BooleanClause.Occur.MUST);\n    \n    MultiPhraseQuery trouble = new MultiPhraseQuery();\n    trouble.add(new Term(\"body\", \"a\"));\n    trouble\n        .add(new Term[] {new Term(\"body\", \"test\"), new Term(\"body\", \"this\")});\n    q.add(trouble, BooleanClause.Occur.MUST);\n    \n    // exception will be thrown here without fix for #35626:\n    ScoreDoc[] hits = searcher.search(q.build(), 1000).scoreDocs;\n    assertEquals(\"Wrong number of hits\", 0, hits.length);\n    writer.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","92b4a131f1796dd57cc6698aae3d589d32a29deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["92b4a131f1796dd57cc6698aae3d589d32a29deb","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"92b4a131f1796dd57cc6698aae3d589d32a29deb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}