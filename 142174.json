{"path":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b52553b383e6cf68c783d177daafd0b32d6347a","date":1327690866,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int upto = 0;\n    for(int i=0;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        bytes[upto++] = (byte) code;\n      else if (code < 0x800) {\n        bytes[upto++] = (byte) (0xC0 | (code >> 6));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        bytes[upto++] = (byte)(0xE0 | (code >> 12));\n        bytes[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        bytes[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            bytes[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            bytes[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        bytes[upto++] = (byte) 0xEF;\n        bytes[upto++] = (byte) 0xBF;\n        bytes[upto++] = (byte) 0xBD;\n      }\n    }\n    writeTag(STR, upto);\n    daos.write(bytes, 0, upto);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fe6873bfa67bf0243c71e386265ae909a02e1c1","date":1440520367,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 3; // 3 is enough, see SOLR-7971\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 4;\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d9fc178be3022bbd023370506ccb3b2fded03d","date":1441309358,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * 3; // 3 is enough, see SOLR-7971\n    if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n    int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n\n    writeTag(STR, sz);\n    daos.write(bytes, 0, sz);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87bed47fd547f864e7fe055b2a3df19fa4b151dc","date":1478615788,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(CharSequence).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JavaBinCodec#writeStr(String).mjava","sourceNew":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(CharSequence s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","sourceOld":"  /**\n   * write the string as tag+length, with length being the number of UTF-8 bytes\n   */\n  public void writeStr(String s) throws IOException {\n    if (s == null) {\n      writeTag(NULL);\n      return;\n    }\n    int end = s.length();\n    int maxSize = end * ByteUtils.MAX_UTF8_BYTES_PER_CHAR;\n\n    if (maxSize <= MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY) {\n      if (bytes == null || bytes.length < maxSize) bytes = new byte[maxSize];\n      int sz = ByteUtils.UTF16toUTF8(s, 0, end, bytes, 0);\n      writeTag(STR, sz);\n      daos.write(bytes, 0, sz);\n    } else {\n      // double pass logic for large strings, see SOLR-7971\n      int sz = ByteUtils.calcUTF16toUTF8Length(s, 0, end);\n      writeTag(STR, sz);\n      if (bytes == null || bytes.length < 8192) bytes = new byte[8192];\n      ByteUtils.writeUTF16toUTF8(s, 0, end, daos, bytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fe6873bfa67bf0243c71e386265ae909a02e1c1":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["1b52553b383e6cf68c783d177daafd0b32d6347a","19275ba31e621f6da1b83bf13af75233876fd3d4"],"1b52553b383e6cf68c783d177daafd0b32d6347a":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["c26f00b574427b55127e869b935845554afde1fa","1b52553b383e6cf68c783d177daafd0b32d6347a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["22d9fc178be3022bbd023370506ccb3b2fded03d","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["1b52553b383e6cf68c783d177daafd0b32d6347a"],"22d9fc178be3022bbd023370506ccb3b2fded03d":["0fe6873bfa67bf0243c71e386265ae909a02e1c1"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["22d9fc178be3022bbd023370506ccb3b2fded03d"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["c26f00b574427b55127e869b935845554afde1fa","1b52553b383e6cf68c783d177daafd0b32d6347a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87bed47fd547f864e7fe055b2a3df19fa4b151dc"]},"commit2Childs":{"0fe6873bfa67bf0243c71e386265ae909a02e1c1":["22d9fc178be3022bbd023370506ccb3b2fded03d"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"1b52553b383e6cf68c783d177daafd0b32d6347a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fd92b8bcc88e969302510acf77bd6970da3994c4","19275ba31e621f6da1b83bf13af75233876fd3d4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"c26f00b574427b55127e869b935845554afde1fa":["1b52553b383e6cf68c783d177daafd0b32d6347a","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0fe6873bfa67bf0243c71e386265ae909a02e1c1","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"22d9fc178be3022bbd023370506ccb3b2fded03d":["199dfa410f1fdbfd3294106b04096cce5ed34b21","87bed47fd547f864e7fe055b2a3df19fa4b151dc"],"87bed47fd547f864e7fe055b2a3df19fa4b151dc":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fd92b8bcc88e969302510acf77bd6970da3994c4","199dfa410f1fdbfd3294106b04096cce5ed34b21","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}