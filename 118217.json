{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdatingDocValues().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdatingDocValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdatingDocValues() throws Exception {\n    long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\", \"inplace_updatable_float\", 41), null);\n    long version2 = addAndGetVersion(sdoc(\"id\", \"2\", \"title_s\", \"second\", \"inplace_updatable_float\", 42), null);\n    long version3 = addAndGetVersion(sdoc(\"id\", \"3\", \"title_s\", \"third\", \"inplace_updatable_float\", 43), null);\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='3']\");\n\n    // the reason we're fetching these docids is to validate that the subsequent updates \n    // are done in place and don't cause the docids to change\n    int docid1 = getDocId(\"1\");\n    int docid2 = getDocId(\"2\");\n    int docid3 = getDocId(\"3\");\n\n    // Check docValues were \"set\"\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", 200));\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"inplace_updatable_float\", map(\"set\", 300));\n    version3 = addAndAssertVersion(version3, \"id\", \"3\", \"inplace_updatable_float\", map(\"set\", 100));\n    assertU(commit(\"softCommit\", \"false\"));\n\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"fl\", \"*,[docid]\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='300.0']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='100.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[2]/long[@name='_version_'][.='\"+version2+\"']\",\n        \"//result/doc[3]/long[@name='_version_'][.='\"+version3+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\",\n        \"//result/doc[2]/int[@name='[docid]'][.='\"+docid2+\"']\",\n        \"//result/doc[3]/int[@name='[docid]'][.='\"+docid3+\"']\"\n        );\n\n    // Check docValues are \"inc\"ed\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 1));\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"inplace_updatable_float\", map(\"inc\", -2));\n    version3 = addAndAssertVersion(version3, \"id\", \"3\", \"inplace_updatable_float\", map(\"inc\", 3));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"fl\", \"*,[docid]\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='201.0']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='298.0']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[2]/long[@name='_version_'][.='\"+version2+\"']\",\n        \"//result/doc[3]/long[@name='_version_'][.='\"+version3+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\",\n        \"//result/doc[2]/int[@name='[docid]'][.='\"+docid2+\"']\",\n        \"//result/doc[3]/int[@name='[docid]'][.='\"+docid3+\"']\"\n        );\n\n    // Check back to back \"inc\"s are working (off the transaction log)\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 1));\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 2)); // new value should be 204\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"*,[docid]\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\");\n\n    // Now let the document be atomically updated (non-inplace), ensure the old docvalue is part of new doc\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"title_s\", map(\"set\", \"new first\"));\n    assertU(commit(\"softCommit\", \"false\"));\n    int newDocid1 = getDocId(\"1\");\n    assertTrue(newDocid1 != docid1);\n    docid1 = newDocid1;\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']\",\n        \"//result/doc[1]/str[@name='title_s'][.='new first']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\");\n\n    // Check if atomic update with \"inc\" to a docValue works\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"title_s\", map(\"set\", \"new second\"), \"inplace_updatable_float\", map(\"inc\", 2));\n    assertU(commit(\"softCommit\", \"false\"));\n    int newDocid2 = getDocId(\"2\");\n    assertTrue(newDocid2 != docid2);\n    docid2 = newDocid2;\n\n    assertQ(req(\"q\", \"id:2\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='300.0']\",\n        \"//result/doc[1]/str[@name='title_s'][.='new second']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version2+\"']\");\n\n    // Check if docvalue \"inc\" update works for a newly created document, which is not yet committed\n    // Case1: docvalue was supplied during add of new document\n    long version4 = addAndGetVersion(sdoc(\"id\", \"4\", \"title_s\", \"fourth\", \"inplace_updatable_float\", \"400\"), params());\n    version4 = addAndAssertVersion(version4, \"id\", \"4\", \"inplace_updatable_float\", map(\"inc\", 1));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:4\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='401.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version4+\"']\");\n\n    // Check if docvalue \"inc\" update works for a newly created document, which is not yet committed\n    // Case2: docvalue was not supplied during add of new document, should assume default\n    long version5 = addAndGetVersion(sdoc(\"id\", \"5\", \"title_s\", \"fifth\"), params());\n    version5 = addAndAssertVersion(version5, \"id\", \"5\", \"inplace_updatable_float\", map(\"inc\", 1));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:5\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version5+\"']\");\n\n    // Check if docvalue \"set\" update works for a newly created document, which is not yet committed\n    long version6 = addAndGetVersion(sdoc(\"id\", \"6\", \"title_s\", \"sixth\"), params());\n    version6 = addAndAssertVersion(version6, \"id\", \"6\", \"inplace_updatable_float\", map(\"set\", 600));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:6\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='600.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version6+\"']\");\n\n    // Check optimistic concurrency works\n    long v20 = addAndGetVersion(sdoc(\"id\", \"20\", \"title_s\",\"first\", \"inplace_updatable_float\", 100), params());    \n    SolrException exception = expectThrows(SolrException.class, () -> {\n      addAndGetVersion(sdoc(\"id\",\"20\", \"_version_\", -1, \"inplace_updatable_float\", map(\"inc\", 1)), null);\n    });\n    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());\n    assertThat(exception.getMessage(), containsString(\"expected=-1\"));\n    assertThat(exception.getMessage(), containsString(\"actual=\"+v20));\n\n\n    long oldV20 = v20;\n    v20 = addAndAssertVersion(v20, \"id\",\"20\", \"_version_\", v20, \"inplace_updatable_float\", map(\"inc\", 1));\n    exception = expectThrows(SolrException.class, () -> {\n      addAndGetVersion(sdoc(\"id\",\"20\", \"_version_\", oldV20, \"inplace_updatable_float\", map(\"inc\", 1)), null);\n    });\n    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());\n    assertThat(exception.getMessage(), containsString(\"expected=\"+oldV20));\n    assertThat(exception.getMessage(), containsString(\"actual=\"+v20));\n\n    v20 = addAndAssertVersion(v20, \"id\",\"20\", \"_version_\", v20, \"inplace_updatable_float\", map(\"inc\", 1));\n    // RTG before a commit\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"20\", \"fl\",\"id,inplace_updatable_float,_version_\"),\n        \"=={'doc':{'id':'20', 'inplace_updatable_float':\" + 102.0 + \",'_version_':\" + v20 + \"}}\");\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:20\"), \n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+v20+\"']\");\n\n    // Check if updated DVs can be used for search\n    assertQ(req(\"q\", \"inplace_updatable_float:102\"), \n        \"//result/doc[1]/str[@name='id'][.='20']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+v20+\"']\");\n\n    // Check if updated DVs can be used for sorting\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"inplace_updatable_float asc\"), \n        \"//result/doc[4]/str[@name='id'][.='1']\",\n        \"//result/doc[4]/float[@name='inplace_updatable_float'][.='204.0']\",\n\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/float[@name='inplace_updatable_float'][.='300.0']\",\n\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']\",\n\n        \"//result/doc[6]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/float[@name='inplace_updatable_float'][.='401.0']\",\n\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']\",\n\n        \"//result/doc[7]/str[@name='id'][.='6']\",\n        \"//result/doc[7]/float[@name='inplace_updatable_float'][.='600.0']\",\n\n        \"//result/doc[2]/str[@name='id'][.='20']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='102.0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testUpdatingDocValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdatingDocValues() throws Exception {\n    long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\", \"inplace_updatable_float\", 41), null);\n    long version2 = addAndGetVersion(sdoc(\"id\", \"2\", \"title_s\", \"second\", \"inplace_updatable_float\", 42), null);\n    long version3 = addAndGetVersion(sdoc(\"id\", \"3\", \"title_s\", \"third\", \"inplace_updatable_float\", 43), null);\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='3']\");\n\n    // the reason we're fetching these docids is to validate that the subsequent updates \n    // are done in place and don't cause the docids to change\n    int docid1 = getDocId(\"1\");\n    int docid2 = getDocId(\"2\");\n    int docid3 = getDocId(\"3\");\n\n    // Check docValues were \"set\"\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", 200));\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"inplace_updatable_float\", map(\"set\", 300));\n    version3 = addAndAssertVersion(version3, \"id\", \"3\", \"inplace_updatable_float\", map(\"set\", 100));\n    assertU(commit(\"softCommit\", \"false\"));\n\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"fl\", \"*,[docid]\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='300.0']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='100.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[2]/long[@name='_version_'][.='\"+version2+\"']\",\n        \"//result/doc[3]/long[@name='_version_'][.='\"+version3+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\",\n        \"//result/doc[2]/int[@name='[docid]'][.='\"+docid2+\"']\",\n        \"//result/doc[3]/int[@name='[docid]'][.='\"+docid3+\"']\"\n        );\n\n    // Check docValues are \"inc\"ed\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 1));\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"inplace_updatable_float\", map(\"inc\", -2));\n    version3 = addAndAssertVersion(version3, \"id\", \"3\", \"inplace_updatable_float\", map(\"inc\", 3));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"id asc\", \"fl\", \"*,[docid]\"),\n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='201.0']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='298.0']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[2]/long[@name='_version_'][.='\"+version2+\"']\",\n        \"//result/doc[3]/long[@name='_version_'][.='\"+version3+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\",\n        \"//result/doc[2]/int[@name='[docid]'][.='\"+docid2+\"']\",\n        \"//result/doc[3]/int[@name='[docid]'][.='\"+docid3+\"']\"\n        );\n\n    // Check back to back \"inc\"s are working (off the transaction log)\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 1));\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"inc\", 2)); // new value should be 204\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:1\", \"fl\", \"*,[docid]\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\",\n        \"//result/doc[1]/int[@name='[docid]'][.='\"+docid1+\"']\");\n\n    // Now let the document be atomically updated (non-inplace), ensure the old docvalue is part of new doc\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"title_s\", map(\"set\", \"new first\"));\n    assertU(commit(\"softCommit\", \"false\"));\n    int newDocid1 = getDocId(\"1\");\n    assertTrue(newDocid1 != docid1);\n    docid1 = newDocid1;\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']\",\n        \"//result/doc[1]/str[@name='title_s'][.='new first']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version1+\"']\");\n\n    // Check if atomic update with \"inc\" to a docValue works\n    version2 = addAndAssertVersion(version2, \"id\", \"2\", \"title_s\", map(\"set\", \"new second\"), \"inplace_updatable_float\", map(\"inc\", 2));\n    assertU(commit(\"softCommit\", \"false\"));\n    int newDocid2 = getDocId(\"2\");\n    assertTrue(newDocid2 != docid2);\n    docid2 = newDocid2;\n\n    assertQ(req(\"q\", \"id:2\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='300.0']\",\n        \"//result/doc[1]/str[@name='title_s'][.='new second']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version2+\"']\");\n\n    // Check if docvalue \"inc\" update works for a newly created document, which is not yet committed\n    // Case1: docvalue was supplied during add of new document\n    long version4 = addAndGetVersion(sdoc(\"id\", \"4\", \"title_s\", \"fourth\", \"inplace_updatable_float\", \"400\"), params());\n    version4 = addAndAssertVersion(version4, \"id\", \"4\", \"inplace_updatable_float\", map(\"inc\", 1));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:4\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='401.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version4+\"']\");\n\n    // Check if docvalue \"inc\" update works for a newly created document, which is not yet committed\n    // Case2: docvalue was not supplied during add of new document, should assume default\n    long version5 = addAndGetVersion(sdoc(\"id\", \"5\", \"title_s\", \"fifth\"), params());\n    version5 = addAndAssertVersion(version5, \"id\", \"5\", \"inplace_updatable_float\", map(\"inc\", 1));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:5\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version5+\"']\");\n\n    // Check if docvalue \"set\" update works for a newly created document, which is not yet committed\n    long version6 = addAndGetVersion(sdoc(\"id\", \"6\", \"title_s\", \"sixth\"), params());\n    version6 = addAndAssertVersion(version6, \"id\", \"6\", \"inplace_updatable_float\", map(\"set\", 600));\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:6\"),\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='600.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+version6+\"']\");\n\n    // Check optimistic concurrency works\n    long v20 = addAndGetVersion(sdoc(\"id\", \"20\", \"title_s\",\"first\", \"inplace_updatable_float\", 100), params());    \n    SolrException exception = expectThrows(SolrException.class, () -> {\n      addAndGetVersion(sdoc(\"id\",\"20\", \"_version_\", -1, \"inplace_updatable_float\", map(\"inc\", 1)), null);\n    });\n    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());\n    assertThat(exception.getMessage(), containsString(\"expected=-1\"));\n    assertThat(exception.getMessage(), containsString(\"actual=\"+v20));\n\n\n    long oldV20 = v20;\n    v20 = addAndAssertVersion(v20, \"id\",\"20\", \"_version_\", v20, \"inplace_updatable_float\", map(\"inc\", 1));\n    exception = expectThrows(SolrException.class, () -> {\n      addAndGetVersion(sdoc(\"id\",\"20\", \"_version_\", oldV20, \"inplace_updatable_float\", map(\"inc\", 1)), null);\n    });\n    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());\n    assertThat(exception.getMessage(), containsString(\"expected=\"+oldV20));\n    assertThat(exception.getMessage(), containsString(\"actual=\"+v20));\n\n    v20 = addAndAssertVersion(v20, \"id\",\"20\", \"_version_\", v20, \"inplace_updatable_float\", map(\"inc\", 1));\n    // RTG before a commit\n    assertJQ(req(\"qt\",\"/get\", \"id\",\"20\", \"fl\",\"id,inplace_updatable_float,_version_\"),\n        \"=={'doc':{'id':'20', 'inplace_updatable_float':\" + 102.0 + \",'_version_':\" + v20 + \"}}\");\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"id:20\"), \n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+v20+\"']\");\n\n    // Check if updated DVs can be used for search\n    assertQ(req(\"q\", \"inplace_updatable_float:102\"), \n        \"//result/doc[1]/str[@name='id'][.='20']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']\",\n        \"//result/doc[1]/long[@name='_version_'][.='\"+v20+\"']\");\n\n    // Check if updated DVs can be used for sorting\n    assertQ(req(\"q\", \"*:*\", \"sort\", \"inplace_updatable_float asc\"), \n        \"//result/doc[4]/str[@name='id'][.='1']\",\n        \"//result/doc[4]/float[@name='inplace_updatable_float'][.='204.0']\",\n\n        \"//result/doc[5]/str[@name='id'][.='2']\",\n        \"//result/doc[5]/float[@name='inplace_updatable_float'][.='300.0']\",\n\n        \"//result/doc[3]/str[@name='id'][.='3']\",\n        \"//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']\",\n\n        \"//result/doc[6]/str[@name='id'][.='4']\",\n        \"//result/doc[6]/float[@name='inplace_updatable_float'][.='401.0']\",\n\n        \"//result/doc[1]/str[@name='id'][.='5']\",\n        \"//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']\",\n\n        \"//result/doc[7]/str[@name='id'][.='6']\",\n        \"//result/doc[7]/float[@name='inplace_updatable_float'][.='600.0']\",\n\n        \"//result/doc[2]/str[@name='id'][.='20']\",\n        \"//result/doc[2]/float[@name='inplace_updatable_float'][.='102.0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}