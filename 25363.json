{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#rewind().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#rewind().mjava","pathOld":"/dev/null","sourceNew":"  void rewind() {\n\n    // Force reload:\n    fp = fpOrig;\n    termOrd = termOrdOrig;\n    nextEnt = -1;\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n      floorDataReader.rewind();\n      numFollowFloorBlocks = floorDataReader.readVInt();\n      assert numFollowFloorBlocks > 0;\n      nextFloorLabel = floorDataReader.readByte() & 0xff;\n      nextFloorTermOrd = termOrdOrig + floorDataReader.readVLong();\n      //System.out.println(\"  frame.rewind nextFloorTermOrd=\" + nextFloorTermOrd);\n    }\n\n    /*\n    //System.out.println(\"rewind\");\n    // Keeps the block loaded, but rewinds its state:\n    if (nextEnt > 0 || fp != fpOrig) {\n    if (DEBUG) {\n    System.out.println(\"      rewind frame ord=\" + ord + \" fpOrig=\" + fpOrig + \" fp=\" + fp + \" hasTerms?=\" + hasTerms + \" isFloor?=\" + isFloor + \" nextEnt=\" + nextEnt + \" prefixLen=\" + prefix);\n    }\n    if (fp != fpOrig) {\n    fp = fpOrig;\n    nextEnt = -1;\n    } else {\n    nextEnt = 0;\n    }\n    hasTerms = hasTermsOrig;\n    if (isFloor) {\n    floorDataReader.rewind();\n    numFollowFloorBlocks = floorDataReader.readVInt();\n    nextFloorLabel = floorDataReader.readByte() & 0xff;\n    }\n    assert suffixBytes != null;\n    suffixesReader.rewind();\n    assert statBytes != null;\n    statsReader.rewind();\n    metaDataUpto = 0;\n    state.termBlockOrd = 0;\n    // TODO: skip this if !hasTerms?  Then postings\n    // impl wouldn't have to write useless 0 byte\n    postingsReader.resetTermsBlock(fieldInfo, state);\n    lastSubFP = -1;\n    } else if (DEBUG) {\n    System.out.println(\"      skip rewind fp=\" + fp + \" fpOrig=\" + fpOrig + \" nextEnt=\" + nextEnt + \" ord=\" + ord);\n    }\n    */\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}