{"path":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","commits":[{"id":"5a664b1395d4341b88e32d36297d7670f1a665ac","date":1166527887,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, creating it first if it does not\n   * already exist, otherwise appending to the existing\n   * index.  Text will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws IOException if the directory cannot be\n   *  created or read/written to\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, false);\n    } else {\n      init(d, a, true, false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, creating it first if it does not\n   * already exist, otherwise appending to the existing\n   * index.  Text will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, false);\n    } else {\n      init(d, a, true, false);\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, creating it first if it does not\n   * already exist, otherwise appending to the existing\n   * index.  Text will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws IOException if the directory cannot be\n   *  created or read/written to\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, false);\n    } else {\n      init(d, a, true, false);\n    }\n  }\n\n","bugFix":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, creating it first if it does not\n   * already exist, otherwise appending to the existing\n   * index.  Text will be analyzed with <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    if (IndexReader.indexExists(d)) {\n      init(d, a, false, false);\n    } else {\n      init(d, a, true, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(Directory,Analyzer,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a) \n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link #IndexWriter(Directory,Analyzer,MaxFieldLength)} instead.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99092e7a9892440b9da55d5b75d3d77206ee80e","date":1224496135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an IndexWriter for the index in\n   * <code>d</code>, first creating it if it does not\n   * already exist.  Text will be analyzed with\n   * <code>a</code>.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be\n   *  read/written to or if there is any other low-level\n   *  IO error\n   * @deprecated This constructor will be removed in the 3.0 release.\n   *  Use {@link\n   *  #IndexWriter(Directory,Analyzer,MaxFieldLength)}\n   *  instead, and call {@link #commit()} when needed.\n   */\n  public IndexWriter(Directory d, Analyzer a)\n    throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, null, true, DEFAULT_MAX_FIELD_LENGTH, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["8b6187898fc4413ccd18229711786550a280383c"],"1b54a9bc667895a2095a886184bf69a3179e63df":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87c966e9308847938a7c905c2e46a56d8df788b8"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["c4ae99f08f69aa3acba7cd75134e8447eb747559"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["d99092e7a9892440b9da55d5b75d3d77206ee80e"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a664b1395d4341b88e32d36297d7670f1a665ac"],"8b6187898fc4413ccd18229711786550a280383c":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"5a664b1395d4341b88e32d36297d7670f1a665ac":["1b54a9bc667895a2095a886184bf69a3179e63df"],"87c966e9308847938a7c905c2e46a56d8df788b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d99092e7a9892440b9da55d5b75d3d77206ee80e":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}