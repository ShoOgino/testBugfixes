{"path":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","sourceNew":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","sourceOld":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testIntersectOptimization().mjava","sourceNew":null,"sourceOld":"  public void testIntersectOptimization() {\n    byte[] minTriangle = box(0, 0, 10, 5);\n    byte[] maxTriangle = box(20, 10, 30, 15);\n\n    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));\n    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n\n    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,\n        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}