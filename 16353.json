{"path":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","commits":[{"id":"aa75c94645bfc8da99a503e2018fd71899cbf9f2","date":1404877329,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    SchemaField sf = new SchemaField(name, fieldType);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a44d91ba112b5986f9411955e116445c92a37f0","date":1416887019,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","sourceNew":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    SchemaField sf = new SchemaField(name, fieldType);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","sourceOld":"  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    SchemaField sf = new SchemaField(name, fieldType);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd9337765a81404997b5f631d110864550dda04","date":1424925516,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","sourceNew":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    int props = fieldType.properties;\n    props &= ~MULTIVALUED; // must not be multivalued\n    if(storeSubFields) {\n      props |= STORED;\n    }\n    else {\n      props &= ~STORED;\n    }\n    SchemaField sf = new SchemaField(name, fieldType, props, null);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","sourceOld":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    SchemaField sf = new SchemaField(name, fieldType);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac54975dc826c9730045d8c516b31de08f6ee59","date":1424927211,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","sourceNew":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    int props = fieldType.properties;\n    if(storeSubFields) {\n      props |= STORED;\n    }\n    else {\n      props &= ~STORED;\n    }\n    SchemaField sf = new SchemaField(name, fieldType, props, null);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","sourceOld":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    int props = fieldType.properties;\n    props &= ~MULTIVALUED; // must not be multivalued\n    if(storeSubFields) {\n      props |= STORED;\n    }\n    else {\n      props &= ~STORED;\n    }\n    SchemaField sf = new SchemaField(name, fieldType, props, null);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/BBoxField#register(IndexSchema,String,FieldType).mjava","sourceNew":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    int props = fieldType.properties;\n    if(storeSubFields) {\n      props |= STORED;\n    }\n    else {\n      props &= ~STORED;\n    }\n    SchemaField sf = new SchemaField(name, fieldType, props, null);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","sourceOld":"  // note: Registering the field is probably optional; it makes it show up in the schema browser and may have other\n  //  benefits.\n  private void register(IndexSchema schema, String name, FieldType fieldType) {\n    SchemaField sf = new SchemaField(name, fieldType);\n    schema.getFields().put(sf.getName(), sf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ac54975dc826c9730045d8c516b31de08f6ee59":["ecd9337765a81404997b5f631d110864550dda04"],"ecd9337765a81404997b5f631d110864550dda04":["2a44d91ba112b5986f9411955e116445c92a37f0"],"aa75c94645bfc8da99a503e2018fd71899cbf9f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2a44d91ba112b5986f9411955e116445c92a37f0","3ac54975dc826c9730045d8c516b31de08f6ee59"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a44d91ba112b5986f9411955e116445c92a37f0":["aa75c94645bfc8da99a503e2018fd71899cbf9f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ac54975dc826c9730045d8c516b31de08f6ee59"]},"commit2Childs":{"3ac54975dc826c9730045d8c516b31de08f6ee59":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecd9337765a81404997b5f631d110864550dda04":["3ac54975dc826c9730045d8c516b31de08f6ee59"],"aa75c94645bfc8da99a503e2018fd71899cbf9f2":["2a44d91ba112b5986f9411955e116445c92a37f0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa75c94645bfc8da99a503e2018fd71899cbf9f2"],"2a44d91ba112b5986f9411955e116445c92a37f0":["ecd9337765a81404997b5f631d110864550dda04","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}