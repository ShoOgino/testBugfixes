{"path":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","commits":[{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"/dev/null","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FixedBitSet#get(int).mjava","sourceNew":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  public boolean get(int index) {\n    assert index >= 0 && index < numBits: \"index=\" + index;\n    int i = index >> 6;               // div 64\n    // signed shift will keep a negative index and force an\n    // array-index-out-of-bounds-exception, removing the need for an explicit check.\n    int bit = index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}