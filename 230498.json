{"path":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","commits":[{"id":"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb","date":1244526657,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,List[String]).mjava","sourceNew":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       result.add(new PluginInfo(nodes.item(i) ,\"[solrconfig.xml] \"+tag,requireName));\n     }\n    return Collections.unmodifiableList(result) ;\n  }\n\n","sourceOld":"  private List<PluginInfo> loadPluginInfo(String tag, List<String> reqFields) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       result.add(new PluginInfo(nodes.item(i) ,\"[solrconfig.xml] \"+tag,reqFields));\n     }\n    return Collections.unmodifiableList(result) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f","date":1251097036,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","sourceNew":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       result.add(new PluginInfo(nodes.item(i) ,\"[solrconfig.xml] \"+tag,requireName));\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","sourceOld":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       result.add(new PluginInfo(nodes.item(i) ,\"[solrconfig.xml] \"+tag,requireName));\n     }\n    return Collections.unmodifiableList(result) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b","date":1251710201,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","sourceNew":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","sourceOld":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       result.add(new PluginInfo(nodes.item(i) ,\"[solrconfig.xml] \"+tag,requireName));\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8963910260f4ff9adfecbdcff7bc9a94f9db03ef","date":1252220279,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean).mjava","sourceNew":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","sourceOld":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":["b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b":["986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f"],"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb":["986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f"],"8963910260f4ff9adfecbdcff7bc9a94f9db03ef":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a6af9d3dcf0f33c88d1363e243ab89fb68c0ffdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef"],"986f33d5953398c55a9b1d8fdd55ff0c50a2cf1f":["b50bf6f90ef93e393dc53fdbb0c8ed8332ce710b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8963910260f4ff9adfecbdcff7bc9a94f9db03ef","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}