{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getOrComputeActualEndForRefinement().mjava","commits":[{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#getOrComputeActualEndForRefinement().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#getOrComputeActualEndForRefinement().mjava","sourceNew":"  /**\n   * Returns the \"Actual End\" value sent from the merge as part of the refinement request (if any)\n   * or re-computes it as needed using the Calc and caches the result for re-use\n   */\n  @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n  private Comparable getOrComputeActualEndForRefinement() {\n    if (null != actual_end) {\n      return actual_end;\n    }\n\n    if (freq.hardend) {\n      actual_end = this.end;\n    } else if (fcontext.facetInfo.containsKey(FacetRange.ACTUAL_END_JSON_KEY)) {\n      actual_end = calc.getValue(fcontext.facetInfo.get(FacetRange.ACTUAL_END_JSON_KEY).toString());\n    } else {\n      // a quick and dirty loop over the ranges (we don't need) to compute the actual_end...\n      Comparable low = start;\n      while (low.compareTo(end) < 0) {\n        Comparable high = calc.addGap(low, gap);\n        if (end.compareTo(high) < 0) {\n          actual_end = high;\n          break;\n        }\n        if (high.compareTo(low) <= 0) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"Garbage input for facet refinement w/o \" + FacetRange.ACTUAL_END_JSON_KEY);\n        }\n        low = high;\n      }\n    }\n\n    assert null != actual_end;\n    return actual_end;\n  }\n\n","sourceOld":"  /** \n   * Returns the \"Actual End\" value sent from the merge as part of the refinement request (if any) \n   * or re-computes it as needed using the Calc and caches the result for re-use\n   */\n  private Comparable getOrComputeActualEndForRefinement() {\n    if (null != actual_end) {\n      return actual_end;\n    }\n    \n    if (freq.hardend) {\n      actual_end = this.end;\n    } else if (fcontext.facetInfo.containsKey(FacetRange.ACTUAL_END_JSON_KEY)) {\n      actual_end = calc.getValue(fcontext.facetInfo.get(FacetRange.ACTUAL_END_JSON_KEY).toString());\n    } else {\n      // a quick and dirty loop over the ranges (we don't need) to compute the actual_end...\n      Comparable low = start;\n      while (low.compareTo(end) < 0) {\n        Comparable high = calc.addGap(low, gap);\n        if (end.compareTo(high) < 0) {\n          actual_end = high;\n          break;\n        }\n        if (high.compareTo(low) <= 0) {\n          throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n             \"Garbage input for facet refinement w/o \" + FacetRange.ACTUAL_END_JSON_KEY);\n        }\n        low = high;\n      }\n    }\n    \n    assert null != actual_end;\n    return actual_end;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}