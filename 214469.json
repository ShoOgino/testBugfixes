{"path":"backwards/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","pathOld":"backwards/src/java/org/apache/lucene/store/FSDirectory#open(File).mjava","sourceNew":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","sourceOld":"  /** Creates an FSDirectory instance, trying to pick the\n   *  best implementation given the current environment.\n   *  The directory returned uses the {@link NativeFSLockFactory}.\n   *\n   *  <p>Currently this returns {@link NIOFSDirectory}\n   *  on non-Windows JREs and {@link SimpleFSDirectory}\n   *  on Windows.\n   *\n   * <p><b>NOTE</b>: this method may suddenly change which\n   * implementation is returned from release to release, in\n   * the event that higher performance defaults become\n   * possible; if the precise implementation is important to\n   * your application, please instantiate it directly,\n   * instead. On 64 bit systems, it may also good to\n   * return {@link MMapDirectory}, but this is disabled\n   * because of officially missing unmap support in Java.\n   * For optimal performance you should consider using\n   * this implementation on 64 bit JVMs.\n   *\n   * <p>See <a href=\"#subclasses\">above</a> */\n  public static FSDirectory open(File path) throws IOException {\n    return open(path, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}