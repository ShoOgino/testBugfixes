{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],int[],byte[],long[],int[]).mjava","commits":[{"id":"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7","date":1588412059,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],int[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],int[],byte[],long[],int[]).mjava","sourceNew":"  /** The point writer contains the data that is going to be splitted using radix selection.\n  /*  This method is used when we are merging previously written segments, in the numDims > 1 case. */\n  private void build(int nodeID, int leavesOffset, int numLeaves,\n                     BKDRadixSelector.PathSlice points,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     int[] parentSplits,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (numLeaves == 1) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n      HeapPointWriter heapSource;\n      if (points.writer instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. merging big segments with most of the points deleted\n        heapSource = switchToHeap(points.writer);\n      } else {\n        heapSource = (HeapPointWriter) points.writer;\n      }\n\n      int from = Math.toIntExact(points.start);\n      int to = Math.toIntExact(points.start + points.count);\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1, from, to);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = from; i < to; ++i) {\n            PointValue value = heapSource.getPackedValueSlice(i);\n            BytesRef packedValue = value.packedValue();\n            int bucket = packedValue.bytes[packedValue.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality =usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort the chosen dimension\n      radixSelector.heapRadixSort(heapSource, from, to, sortedDim, commonPrefixLengths[sortedDim]);\n      // compute cardinality\n      int leafCardinality = heapSource.computeCardinality(from ,to, numDataDims, bytesPerDim, commonPrefixLengths);\n\n      // Save the block file pointer:\n      leafBlockFPs[leavesOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = to - from;\n      assert count > 0: \"nodeID=\" + nodeID + \" leavesOffset=\" + leavesOffset;\n      assert count <= spareDocIds.length : \"count=\" + count + \" > length=\" + spareDocIds.length;\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = 0; i < count; i++) {\n        docIDs[i] = heapSource.getPackedValueSlice(from + i).docID();\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the common prefixes:\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          PointValue value = heapSource.getPackedValueSlice(from + i);\n          return value.packedValue();\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues, leafCardinality);\n\n    } else {\n      // Inner node: partition/recurse\n\n      final int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        // for dimensions > 2 we recompute the bounds for the current inner node to help the algorithm choose best\n        // split dimensions. Because it is an expensive operation, the frequency we recompute the bounds is given\n        // by SPLITS_BEFORE_EXACT_BOUNDS.\n        if (nodeID > 1 && numIndexDims > 2 && Arrays.stream(parentSplits).sum() % SPLITS_BEFORE_EXACT_BOUNDS == 0) {\n          computePackedValueBounds(points, minPackedValue, maxPackedValue);\n        }\n        splitDim = split(minPackedValue, maxPackedValue, parentSplits);\n      }\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many leaves will be in the left tree:\n      int numLeftLeafNodes = getNumLeftLeafNodes(numLeaves);\n      // How many points will be in the left tree:\n      final long leftCount = numLeftLeafNodes * maxPointsInLeafNode;\n\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n\n      int commonPrefixLen = Arrays.mismatch(minPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim, maxPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim);\n      if (commonPrefixLen == -1) {\n        commonPrefixLen = bytesPerDim;\n      }\n\n      byte[] splitValue = radixSelector.select(points, slices, points.start, points.start + points.count,  points.start + leftCount, splitDim, commonPrefixLen);\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      parentSplits[splitDim]++;\n      // Recurse on left tree:\n      build(2 * nodeID, leavesOffset, numLeftLeafNodes, slices[0],\n          out, radixSelector, minPackedValue, maxSplitPackedValue,\n          parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      // Recurse on right tree:\n      build(2 * nodeID + 1, leavesOffset + numLeftLeafNodes, numLeaves - numLeftLeafNodes, slices[1],\n          out, radixSelector, minSplitPackedValue, maxPackedValue\n          , parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      parentSplits[splitDim]--;\n    }\n  }\n\n","sourceOld":"  /** The point writer contains the data that is going to be splitted using radix selection.\n  /*  This method is used when we are merging previously written segments, in the numDims > 1 case. */\n  private void build(int nodeID, int leafNodeOffset,\n                     BKDRadixSelector.PathSlice points,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     int[] parentSplits,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (nodeID >= leafNodeOffset) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n      HeapPointWriter heapSource;\n      if (points.writer instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. merging big segments with most of the points deleted\n        heapSource = switchToHeap(points.writer);\n      } else {\n        heapSource = (HeapPointWriter) points.writer;\n      }\n\n      int from = Math.toIntExact(points.start);\n      int to = Math.toIntExact(points.start + points.count);\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1, from, to);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = from; i < to; ++i) {\n            PointValue value = heapSource.getPackedValueSlice(i);\n            BytesRef packedValue = value.packedValue();\n            int bucket = packedValue.bytes[packedValue.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality =usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort the chosen dimension\n      radixSelector.heapRadixSort(heapSource, from, to, sortedDim, commonPrefixLengths[sortedDim]);\n      // compute cardinality\n      int leafCardinality = heapSource.computeCardinality(from ,to, numDataDims, bytesPerDim, commonPrefixLengths);\n\n      // Save the block file pointer:\n      leafBlockFPs[nodeID - leafNodeOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = to - from;\n      assert count > 0: \"nodeID=\" + nodeID + \" leafNodeOffset=\" + leafNodeOffset;\n      assert count <= spareDocIds.length : \"count=\" + count + \" > length=\" + spareDocIds.length;\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = 0; i < count; i++) {\n        docIDs[i] = heapSource.getPackedValueSlice(from + i).docID();\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the common prefixes:\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          PointValue value = heapSource.getPackedValueSlice(from + i);\n          return value.packedValue();\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues, leafCardinality);\n\n    } else {\n      // Inner node: partition/recurse\n\n      final int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        // for dimensions > 2 we recompute the bounds for the current inner node to help the algorithm choose best\n        // split dimensions. Because it is an expensive operation, the frequency we recompute the bounds is given\n        // by SPLITS_BEFORE_EXACT_BOUNDS.\n        if (nodeID > 1 && numIndexDims > 2 && Arrays.stream(parentSplits).sum() % SPLITS_BEFORE_EXACT_BOUNDS == 0) {\n          computePackedValueBounds(points, minPackedValue, maxPackedValue);\n        }\n        splitDim = split(minPackedValue, maxPackedValue, parentSplits);\n      }\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many points will be in the left tree:\n      long rightCount = points.count / 2;\n      long leftCount = points.count - rightCount;\n\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n\n      int commonPrefixLen = Arrays.mismatch(minPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim, maxPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim);\n      if (commonPrefixLen == -1) {\n        commonPrefixLen = bytesPerDim;\n      }\n\n      byte[] splitValue = radixSelector.select(points, slices, points.start, points.start + points.count,  points.start + leftCount, splitDim, commonPrefixLen);\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      parentSplits[splitDim]++;\n      // Recurse on left tree:\n      build(2 * nodeID, leafNodeOffset, slices[0],\n          out, radixSelector, minPackedValue, maxSplitPackedValue,\n          parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      // Recurse on right tree:\n      build(2 * nodeID + 1, leafNodeOffset, slices[1],\n          out, radixSelector, minSplitPackedValue, maxPackedValue\n          , parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      parentSplits[splitDim]--;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce","date":1589215155,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],int[],byte[],byte[],long[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#build(int,int,int,BKDRadixSelector.PathSlice,IndexOutput,BKDRadixSelector,byte[],byte[],int[],byte[],long[],int[]).mjava","sourceNew":"  /** The point writer contains the data that is going to be splitted using radix selection.\n  /*  This method is used when we are merging previously written segments, in the numDims > 1 case. */\n  private void build(int leavesOffset, int numLeaves,\n                     BKDRadixSelector.PathSlice points,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     int[] parentSplits,\n                     byte[] splitPackedValues,\n                     byte[] splitDimensionValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (numLeaves == 1) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n      HeapPointWriter heapSource;\n      if (points.writer instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. merging big segments with most of the points deleted\n        heapSource = switchToHeap(points.writer);\n      } else {\n        heapSource = (HeapPointWriter) points.writer;\n      }\n\n      int from = Math.toIntExact(points.start);\n      int to = Math.toIntExact(points.start + points.count);\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1, from, to);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = from; i < to; ++i) {\n            PointValue value = heapSource.getPackedValueSlice(i);\n            BytesRef packedValue = value.packedValue();\n            int bucket = packedValue.bytes[packedValue.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality =usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort the chosen dimension\n      radixSelector.heapRadixSort(heapSource, from, to, sortedDim, commonPrefixLengths[sortedDim]);\n      // compute cardinality\n      int leafCardinality = heapSource.computeCardinality(from ,to, numDataDims, bytesPerDim, commonPrefixLengths);\n\n      // Save the block file pointer:\n      leafBlockFPs[leavesOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = to - from;\n      assert count > 0: \"numLeaves=\" + numLeaves + \" leavesOffset=\" + leavesOffset;\n      assert count <= spareDocIds.length : \"count=\" + count + \" > length=\" + spareDocIds.length;\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = 0; i < count; i++) {\n        docIDs[i] = heapSource.getPackedValueSlice(from + i).docID();\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the common prefixes:\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          PointValue value = heapSource.getPackedValueSlice(from + i);\n          return value.packedValue();\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues, leafCardinality);\n\n    } else {\n      // Inner node: partition/recurse\n\n      final int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        // for dimensions > 2 we recompute the bounds for the current inner node to help the algorithm choose best\n        // split dimensions. Because it is an expensive operation, the frequency we recompute the bounds is given\n        // by SPLITS_BEFORE_EXACT_BOUNDS.\n        if (numLeaves != leafBlockFPs.length && numIndexDims > 2 && Arrays.stream(parentSplits).sum() % SPLITS_BEFORE_EXACT_BOUNDS == 0) {\n          computePackedValueBounds(points, minPackedValue, maxPackedValue);\n        }\n        splitDim = split(minPackedValue, maxPackedValue, parentSplits);\n      }\n\n      assert numLeaves <= leafBlockFPs.length : \"numLeaves=\" + numLeaves + \" leafBlockFPs.length=\" + leafBlockFPs.length;\n\n      // How many leaves will be in the left tree:\n      final int numLeftLeafNodes = getNumLeftLeafNodes(numLeaves);\n      // How many points will be in the left tree:\n      final long leftCount = numLeftLeafNodes * maxPointsInLeafNode;\n\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n\n      int commonPrefixLen = Arrays.mismatch(minPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim, maxPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim);\n      if (commonPrefixLen == -1) {\n        commonPrefixLen = bytesPerDim;\n      }\n\n      byte[] splitValue = radixSelector.select(points, slices, points.start, points.start + points.count,  points.start + leftCount, splitDim, commonPrefixLen);\n\n      final int rightOffset = leavesOffset + numLeftLeafNodes;\n      final int splitValueOffset = rightOffset - 1;\n\n      splitDimensionValues[splitValueOffset] = (byte) splitDim;\n      int address = splitValueOffset * bytesPerDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      parentSplits[splitDim]++;\n      // Recurse on left tree:\n      build(leavesOffset, numLeftLeafNodes, slices[0],\n          out, radixSelector, minPackedValue, maxSplitPackedValue,\n          parentSplits, splitPackedValues, splitDimensionValues, leafBlockFPs, spareDocIds);\n\n      // Recurse on right tree:\n      build(rightOffset, numLeaves - numLeftLeafNodes, slices[1],\n          out, radixSelector, minSplitPackedValue, maxPackedValue,\n          parentSplits, splitPackedValues, splitDimensionValues, leafBlockFPs, spareDocIds);\n\n      parentSplits[splitDim]--;\n    }\n  }\n\n","sourceOld":"  /** The point writer contains the data that is going to be splitted using radix selection.\n  /*  This method is used when we are merging previously written segments, in the numDims > 1 case. */\n  private void build(int nodeID, int leavesOffset, int numLeaves,\n                     BKDRadixSelector.PathSlice points,\n                     IndexOutput out,\n                     BKDRadixSelector radixSelector,\n                     byte[] minPackedValue, byte[] maxPackedValue,\n                     int[] parentSplits,\n                     byte[] splitPackedValues,\n                     long[] leafBlockFPs,\n                     int[] spareDocIds) throws IOException {\n\n    if (numLeaves == 1) {\n\n      // Leaf node: write block\n      // We can write the block in any order so by default we write it sorted by the dimension that has the\n      // least number of unique bytes at commonPrefixLengths[dim], which makes compression more efficient\n      HeapPointWriter heapSource;\n      if (points.writer instanceof HeapPointWriter == false) {\n        // Adversarial cases can cause this, e.g. merging big segments with most of the points deleted\n        heapSource = switchToHeap(points.writer);\n      } else {\n        heapSource = (HeapPointWriter) points.writer;\n      }\n\n      int from = Math.toIntExact(points.start);\n      int to = Math.toIntExact(points.start + points.count);\n      //we store common prefix on scratch1\n      computeCommonPrefixLength(heapSource, scratch1, from, to);\n\n      int sortedDim = 0;\n      int sortedDimCardinality = Integer.MAX_VALUE;\n      FixedBitSet[] usedBytes = new FixedBitSet[numDataDims];\n      for (int dim = 0; dim < numDataDims; ++dim) {\n        if (commonPrefixLengths[dim] < bytesPerDim) {\n          usedBytes[dim] = new FixedBitSet(256);\n        }\n      }\n      //Find the dimension to compress\n      for (int dim = 0; dim < numDataDims; dim++) {\n        int prefix = commonPrefixLengths[dim];\n        if (prefix < bytesPerDim) {\n          int offset = dim * bytesPerDim;\n          for (int i = from; i < to; ++i) {\n            PointValue value = heapSource.getPackedValueSlice(i);\n            BytesRef packedValue = value.packedValue();\n            int bucket = packedValue.bytes[packedValue.offset + offset + prefix] & 0xff;\n            usedBytes[dim].set(bucket);\n          }\n          int cardinality =usedBytes[dim].cardinality();\n          if (cardinality < sortedDimCardinality) {\n            sortedDim = dim;\n            sortedDimCardinality = cardinality;\n          }\n        }\n      }\n\n      // sort the chosen dimension\n      radixSelector.heapRadixSort(heapSource, from, to, sortedDim, commonPrefixLengths[sortedDim]);\n      // compute cardinality\n      int leafCardinality = heapSource.computeCardinality(from ,to, numDataDims, bytesPerDim, commonPrefixLengths);\n\n      // Save the block file pointer:\n      leafBlockFPs[leavesOffset] = out.getFilePointer();\n      //System.out.println(\"  write leaf block @ fp=\" + out.getFilePointer());\n\n      // Write docIDs first, as their own chunk, so that at intersect time we can add all docIDs w/o\n      // loading the values:\n      int count = to - from;\n      assert count > 0: \"nodeID=\" + nodeID + \" leavesOffset=\" + leavesOffset;\n      assert count <= spareDocIds.length : \"count=\" + count + \" > length=\" + spareDocIds.length;\n      // Write doc IDs\n      int[] docIDs = spareDocIds;\n      for (int i = 0; i < count; i++) {\n        docIDs[i] = heapSource.getPackedValueSlice(from + i).docID();\n      }\n      writeLeafBlockDocs(out, docIDs, 0, count);\n\n      // TODO: minor opto: we don't really have to write the actual common prefixes, because BKDReader on recursing can regenerate it for us\n      // from the index, much like how terms dict does so from the FST:\n\n      // Write the common prefixes:\n      writeCommonPrefixes(out, commonPrefixLengths, scratch1);\n\n      // Write the full values:\n      IntFunction<BytesRef> packedValues = new IntFunction<BytesRef>() {\n        final BytesRef scratch = new BytesRef();\n\n        {\n          scratch.length = packedBytesLength;\n        }\n\n        @Override\n        public BytesRef apply(int i) {\n          PointValue value = heapSource.getPackedValueSlice(from + i);\n          return value.packedValue();\n        }\n      };\n      assert valuesInOrderAndBounds(count, sortedDim, minPackedValue, maxPackedValue, packedValues,\n          docIDs, 0);\n      writeLeafBlockPackedValues(out, commonPrefixLengths, count, sortedDim, packedValues, leafCardinality);\n\n    } else {\n      // Inner node: partition/recurse\n\n      final int splitDim;\n      if (numIndexDims == 1) {\n        splitDim = 0;\n      } else {\n        // for dimensions > 2 we recompute the bounds for the current inner node to help the algorithm choose best\n        // split dimensions. Because it is an expensive operation, the frequency we recompute the bounds is given\n        // by SPLITS_BEFORE_EXACT_BOUNDS.\n        if (nodeID > 1 && numIndexDims > 2 && Arrays.stream(parentSplits).sum() % SPLITS_BEFORE_EXACT_BOUNDS == 0) {\n          computePackedValueBounds(points, minPackedValue, maxPackedValue);\n        }\n        splitDim = split(minPackedValue, maxPackedValue, parentSplits);\n      }\n\n      assert nodeID < splitPackedValues.length : \"nodeID=\" + nodeID + \" splitValues.length=\" + splitPackedValues.length;\n\n      // How many leaves will be in the left tree:\n      int numLeftLeafNodes = getNumLeftLeafNodes(numLeaves);\n      // How many points will be in the left tree:\n      final long leftCount = numLeftLeafNodes * maxPointsInLeafNode;\n\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n\n      int commonPrefixLen = Arrays.mismatch(minPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim, maxPackedValue, splitDim * bytesPerDim,\n          splitDim * bytesPerDim + bytesPerDim);\n      if (commonPrefixLen == -1) {\n        commonPrefixLen = bytesPerDim;\n      }\n\n      byte[] splitValue = radixSelector.select(points, slices, points.start, points.start + points.count,  points.start + leftCount, splitDim, commonPrefixLen);\n\n      int address = nodeID * (1 + bytesPerDim);\n      splitPackedValues[address] = (byte) splitDim;\n      System.arraycopy(splitValue, 0, splitPackedValues, address + 1, bytesPerDim);\n\n      byte[] minSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(minPackedValue, 0, minSplitPackedValue, 0, packedIndexBytesLength);\n\n      byte[] maxSplitPackedValue = new byte[packedIndexBytesLength];\n      System.arraycopy(maxPackedValue, 0, maxSplitPackedValue, 0, packedIndexBytesLength);\n\n      System.arraycopy(splitValue, 0, minSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n      System.arraycopy(splitValue, 0, maxSplitPackedValue, splitDim * bytesPerDim, bytesPerDim);\n\n      parentSplits[splitDim]++;\n      // Recurse on left tree:\n      build(2 * nodeID, leavesOffset, numLeftLeafNodes, slices[0],\n          out, radixSelector, minPackedValue, maxSplitPackedValue,\n          parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      // Recurse on right tree:\n      build(2 * nodeID + 1, leavesOffset + numLeftLeafNodes, numLeaves - numLeftLeafNodes, slices[1],\n          out, radixSelector, minSplitPackedValue, maxPackedValue\n          , parentSplits, splitPackedValues, leafBlockFPs, spareDocIds);\n\n      parentSplits[splitDim]--;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"]},"commit2Childs":{"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7"],"d3929a60a731a8848bb9bc0bbfd3c5e3d59195e7":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}