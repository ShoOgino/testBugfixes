{"path":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fb5dc223475059e18daa29ecbc9ee827971f72c","date":1424359649,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    if (positions.size() > 0) {\n      final int previousPosition = positions.get(positions.size()-1);\n      if (position < previousPosition) {\n        throw new IllegalArgumentException(\"Positions must be added in order. Got position=\"\n            + position + \" while previous position was \" + previousPosition);\n      }\n    } else if (position < 0) {\n      throw new IllegalArgumentException(\"Positions must be positive, got \" + position);\n    }\n\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    Objects.requireNonNull(term, \"Term must not be null\");\n    if (positions.size() > 0) {\n      final int previousPosition = positions.get(positions.size()-1);\n      if (position < previousPosition) {\n        throw new IllegalArgumentException(\"Positions must be added in order. Got position=\"\n            + position + \" while previous position was \" + previousPosition);\n      }\n    } else if (position < 0) {\n      throw new IllegalArgumentException(\"Positions must be positive, got \" + position);\n    }\n\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    if (positions.size() > 0) {\n      final int previousPosition = positions.get(positions.size()-1);\n      if (position < previousPosition) {\n        throw new IllegalArgumentException(\"Positions must be added in order. Got position=\"\n            + position + \" while previous position was \" + previousPosition);\n      }\n    } else if (position < 0) {\n      throw new IllegalArgumentException(\"Positions must be positive, got \" + position);\n    }\n\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   */\n  public void add(Term term, int position) {\n    Objects.requireNonNull(term, \"Term must not be null\");\n    if (positions.size() > 0) {\n      final int previousPosition = positions.get(positions.size()-1);\n      if (position < previousPosition) {\n        throw new IllegalArgumentException(\"Positions must be added in order. Got position=\"\n            + position + \" while previous position was \" + previousPosition);\n      }\n    } else if (position < 0) {\n      throw new IllegalArgumentException(\"Positions must be positive, got \" + position);\n    }\n\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e9e1499c5d26c936238506df90a3c02c76707722":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["e9e1499c5d26c936238506df90a3c02c76707722"],"6fb5dc223475059e18daa29ecbc9ee827971f72c":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}