{"path":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","commits":[{"id":"78197b4b249c8d5358f86b1aa76f8ddfacefea19","date":1315507242,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = r.reopen();\n      if (r2 != r) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.w.setInfoStream(VERBOSE ? System.out : null);\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1d75215522553e01f7755f23e7e119ce4e50443","date":1327857324,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    IndexReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      IndexReader r2 = IndexReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNeverDelete#testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    final File tmpDir = _TestUtil.getTempDir(\"TestNeverDelete\");\n    final MockDirectoryWrapper d = newFSDirectory(tmpDir);\n\n    // We want to \"see\" files removed if Lucene removed\n    // them.  This is still worth running on Windows since\n    // some files the IR opens and closes.\n    d.setNoDeleteOpenFile(false);\n    final RandomIndexWriter w = new RandomIndexWriter(random,\n                                                      d,\n                                                      newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                           new MockAnalyzer(random))\n                                                      .setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE));\n    w.w.getConfig().setMaxBufferedDocs(_TestUtil.nextInt(random, 5, 30));\n\n    w.commit();\n    Thread[] indexThreads = new Thread[random.nextInt(4)];\n    final long stopTime = System.currentTimeMillis() + atLeast(1000);\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              int docCount = 0;\n              while (System.currentTimeMillis() < stopTime) {\n                final Document doc = new Document();\n                doc.add(newField(\"dc\", \"\"+docCount, StringField.TYPE_STORED));\n                doc.add(newField(\"field\", \"here is some text\", TextField.TYPE_STORED));\n                w.addDocument(doc);\n\n                if (docCount % 13 == 0) {\n                  w.commit();\n                }\n                docCount++;\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(e);\n            }\n          }\n        };\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }\n\n    final Set<String> allFiles = new HashSet<String>();\n\n    DirectoryReader r = IndexReader.open(d);\n    while(System.currentTimeMillis() < stopTime) {\n      final IndexCommit ic = r.getIndexCommit();\n      if (VERBOSE) {\n        System.out.println(\"TEST: check files: \" + ic.getFileNames());\n      }\n      allFiles.addAll(ic.getFileNames());\n      // Make sure no old files were removed\n      for(String fileName : allFiles) {\n        assertTrue(\"file \" + fileName + \" does not exist\", d.fileExists(fileName));\n      }\n      DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n      if (r2 != null) {\n        r.close();\n        r = r2;\n      }\n      Thread.sleep(1);\n    }\n    r.close();\n\n    for(Thread t : indexThreads) {\n      t.join();\n    }\n    w.close();\n    d.close();\n\n    _TestUtil.rmDir(tmpDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["78197b4b249c8d5358f86b1aa76f8ddfacefea19"],"78197b4b249c8d5358f86b1aa76f8ddfacefea19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1d75215522553e01f7755f23e7e119ce4e50443":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["06584e6e98d592b34e1329b384182f368d2025e8","d1d75215522553e01f7755f23e7e119ce4e50443"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["06584e6e98d592b34e1329b384182f368d2025e8"],"78197b4b249c8d5358f86b1aa76f8ddfacefea19":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"d1d75215522553e01f7755f23e7e119ce4e50443":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"06584e6e98d592b34e1329b384182f368d2025e8":["d1d75215522553e01f7755f23e7e119ce4e50443","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78197b4b249c8d5358f86b1aa76f8ddfacefea19"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}