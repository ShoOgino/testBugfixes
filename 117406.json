{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","sourceNew":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","sourceNew":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    //Processes all shard responses\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n\n    //If request is async wait for the core admin to complete before returning\n    if (asyncId != null) {\n      waitForAsyncCallsToComplete(requestMap, results);\n      requestMap.clear();\n    }\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3bbb741690cdafda7f1f7549c26351c912917a69":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bbb741690cdafda7f1f7549c26351c912917a69"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["3bbb741690cdafda7f1f7549c26351c912917a69"],"3bbb741690cdafda7f1f7549c26351c912917a69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}