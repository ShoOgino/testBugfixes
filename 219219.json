{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        queue.add(term, slice);\n        assertTrue(slice.isTailItem(term));\n        slice.apply(deletes, BufferedDeletes.MAX_INT);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        queue.add(term, slice);\n        assertTrue(slice.isTailItem(term));\n        slice.apply(deletes, BufferedDeletes.MAX_INT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        queue.add(term, slice);\n        assertTrue(slice.isTailItem(term));\n        slice.apply(deletes, BufferedUpdates.MAX_INT);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        queue.add(term, slice);\n        assertTrue(slice.isTailItem(term));\n        slice.apply(deletes, BufferedDeletes.MAX_INT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue.UpdateThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        DocumentsWriterDeleteQueue.Node<Term> termNode = DocumentsWriterDeleteQueue.newNode(term);\n        queue.add(termNode, slice);\n        assertTrue(slice.isTail(termNode));\n        slice.apply(deletes, BufferedUpdates.MAX_INT);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      try {\n        latch.await();\n      } catch (InterruptedException e) {\n        throw new ThreadInterruptedException(e);\n      }\n      int i = 0;\n      while ((i = index.getAndIncrement()) < ids.length) {\n        Term term = new Term(\"id\", ids[i].toString());\n        queue.add(term, slice);\n        assertTrue(slice.isTailItem(term));\n        slice.apply(deletes, BufferedUpdates.MAX_INT);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"110125c995236a7f61057dd04b039ed2d267f3a1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["110125c995236a7f61057dd04b039ed2d267f3a1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}