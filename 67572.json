{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}