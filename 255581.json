{"path":"src/java/org/apache/solr/util/test/TestNumberUtils#main(String[]).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/test/TestNumberUtils#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n    int iter=1000000;\n    int arrsz=100000;\n    int ret=0;\n    int num=0;\n\n    String test=\"b100\";\n    String clazz=\"NoClass\";\n\n    for (int argnum=0; argnum<args.length; argnum++) {\n      String arg = args[argnum];\n      if (\"-t\".equals(arg)) { test=args[++argnum]; }\n      if (\"-i\".equals(arg)) { iter=Integer.parseInt(args[++argnum]); }\n      if (\"-a\".equals(arg)) { arrsz=Integer.parseInt(args[++argnum]); }\n      if (\"-c\".equals(arg)) { clazz=args[++argnum]; }\n      if (\"-r\".equals(arg)) { rng.setSeed(Long.parseLong(args[++argnum])); };\n      if (\"-n\".equals(arg)) { num = Integer.parseInt(args[++argnum]); };\n\n    }\n\n    // Converter conv = (Converter)(Class.forName(clazz).newInstance());\n    Class cls=null;\n    try {\n      cls = Class.forName(clazz);\n    } catch (Exception e) {\n      cls = Class.forName(\"solr.util.test.\" + clazz);\n    }\n    Converter conv = (Converter)cls.newInstance();\n\n    long startTime = System.currentTimeMillis();\n\n    if (\"ispecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Integer i1 = getSpecial();\n        Integer i2 = getSpecial();\n        test(i1,i2,conv);\n      }\n    }\n    else if (\"lspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Long f1 = getLongSpecial();\n        Long f2 = getLongSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"fspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Float f1 = getFloatSpecial();\n        Float f2 = getFloatSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"dspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Double f1 = getDoubleSpecial();\n        Double f2 = getDoubleSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"10kout\".equals(test)) {\n      String n = Integer.toString(num);\n      char[] arr = new char[n.length()];\n      char[] arr2 = new char[n.length()+1];\n      n.getChars(0,n.length(),arr,0);\n      for (int i=0; i<iter; i++) {\n        ret += BCDUtils.base10toBase100SortableInt(arr,0,arr.length,arr2,arr2.length);\n      }\n\n    } else if (\"internal\".equals(test) || \"external\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n\n      if (\"external\".equals(test)) {\n        for (int i=0; i<arrsz; i++) {\n          int val = rng.nextInt();\n          // todo - move to between min and max...\n          arr[i] = Integer.toString(rng.nextInt());\n          internal[i] = conv.toInternal(arr[i]);\n        }\n        for (int i=0; i<iter; i++) {\n          int slot=i%arrsz;\n          arr[slot] = conv.toExternal(internal[slot]);\n          ret += arr[slot].length();\n        }\n      } else {\n        for (int i=0; i<arrsz; i++) {\n          int val = rng.nextInt();\n          // todo - move to between min and max...\n          arr[i] = Integer.toString(rng.nextInt());\n        }\n        for (int i=0; i<iter; i++) {\n          int slot=i%arrsz;\n          internal[slot] = conv.toInternal(arr[slot]);\n          ret += internal[slot].length();\n        }\n      }\n    } else if (\"itest\".equals(test) || \"ltest\".equals(test) || \"ftest\".equals(test)) {\n      long internalLen=0;\n      long externalLen=0;\n      for (int i=0; i<iter; i++) {\n        Comparable n1=null,n2=null;\n\n        if (\"itest\".equals(test)) {\n          Integer i1\n                  = rng.nextInt();\n          Integer i2\n                  = rng.nextInt();\n\n          // concentrate on small numbers for a while\n          // to try and hit boundary cases 0,1,-1,100,-100,etc\n          if (i < 10000) {\n            i1 = (i1 % 250)-125;\n            i2 = (i2 % 250)-125;\n          } else if (i < 500000) {\n            i1 = (i1 % 25000)-12500;\n            i2 = (i2 % 25000)-12500;\n          }\n\n          n1=i1;\n          n2=i2;\n        } else if (\"ltest\".equals(test)) {\n          Long i1 = rng.nextLong();\n          Long i2 = rng.nextLong();\n\n          // concentrate on small numbers for a while\n          // to try and hit boundary cases 0,1,-1,100,-100,etc\n          if (i < 10000) {\n            i1 = (long)(i1 % 250)-125;\n            i2 = (long)(i2 % 250)-125;\n          } else if (i < 500000) {\n            i1 = (long)(i1 % 25000)-12500;\n            i2 = (long)(i2 % 25000)-12500;\n          }\n\n          n1=i1;\n          n2=i2;\n        } else if (\"ftest\".equals(test)) {\n          Float i1;\n          Float i2;\n          if (i < 10000) {\n            i1 = (float)(rng.nextInt() % 250)-125;\n            i2 = (float)(rng.nextInt() % 250)-125;\n          } else if (i < 300000) {\n            i1 = (float)(rng.nextInt() % 2500)-1250;\n            i2 = (float)(rng.nextInt() % 2500)-1250;\n          } else if (i < 500000) {\n            i1 = rng.nextFloat() / rng.nextFloat();\n            i2 = rng.nextFloat() / rng.nextFloat();\n          } else {\n            i1 = Float.intBitsToFloat(rng.nextInt());\n            i2 = Float.intBitsToFloat(rng.nextInt());\n          }\n          n1=i1;\n          n2=i2;\n        }\n        String s1=n1.toString();\n        String s2=n2.toString();\n        String v1 = conv.toInternal(s1);\n        String v2 = conv.toInternal(s2);\n        String out1=conv.toExternal(v1);\n        String out2=conv.toExternal(v2);\n\n        externalLen += s1.length();\n        internalLen += v1.length();\n\n        int c1 = n1.compareTo(n2);\n        int c2 = v1.compareTo(v2);\n        if (c1==0 && !(c2==0) || c1 < 0 && !(c2<0) || c1>0 && !(c2>0)\n            || !out1.equals(s1) || !out2.equals(s2))\n        {\n          System.out.println(\"Comparison error:\"+s1+\",\"+s2);\n          System.out.print(\"v1=\");\n          for (int ii=0; ii<v1.length(); ii++) {\n            System.out.print(\" \" + (int)v1.charAt(ii));\n          }\n          System.out.print(\"\\nv2=\");\n          for (int ii=0; ii<v2.length(); ii++) {\n            System.out.print(\" \" + (int)v2.charAt(ii));\n          }\n          System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n\n        }\n      }\n    }\n\n\n    /******************\n    int sz=20;\n    char[] arr1 = new char[sz];\n    char[] arr2 = new char[sz];\n    char[] arr3 = new char[sz];\n    if (\"noconv\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        int val = rng.nextInt();\n        String istr = Integer.toString(val);\n        int n = istr.length();\n        Integer.toString(val).getChars(0, n, arr1, 0);\n        String nStr = new String(arr1,0,n);\n        if (!nStr.equals(istr)) {\n          System.out.println(\"ERROR! input=\"+istr+\" output=\"+nStr);\n          System.out.println(arrstr(arr1,0,n));\n        }\n      }\n    } else if (\"b100\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        int val = rng.nextInt();\n        String istr = Integer.toString(val);\n        int n = istr.length();\n        Integer.toString(val).getChars(0, n, arr1, 0);\n\n        int b100_start = NumberUtils.base10toBase100(arr1,0,n,arr2,sz);\n        int b10_len = NumberUtils.base100toBase10(arr2,b100_start,sz,arr3,0);\n\n        String nStr = new String(arr3,0,b10_len);\n        if (!nStr.equals(istr)) {\n          System.out.println(\"ERROR! input=\"+istr+\" output=\"+nStr);\n          System.out.println(arrstr(arr1,0,n));\n          System.out.println(arrstr(arr2,b100_start,sz));\n          System.out.println(arrstr(arr3,0,b10_len));\n        }\n\n      }\n    } else if (\"b100sParse\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n      for (int i=0; i<arrsz; i++) {\n        int val = rng.nextInt();\n        // todo - move to between min and max...\n        arr[i] = Integer.toString(rng.nextInt());\n      }\n      for (int i=0; i<iter; i++) {\n        int slot=i%arrsz;\n        internal[slot] = NumberUtils.base10toBase100SortableInt(arr[i%arrsz]);\n        ret += internal[slot].length();\n      }\n    } else if (\"intParse\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n      for (int i=0; i<arrsz; i++) {\n        int val = rng.nextInt();\n        // todo - move to between min and max...\n        arr[i] = Integer.toString(rng.nextInt());\n      }\n      for (int i=0; i<iter; i++) {\n        int slot=i%arrsz;\n        int val = Integer.parseInt(arr[i%arrsz]);\n        String sval = Integer.toString(val);\n        internal[slot] = sval;\n        ret += internal[slot].length();\n      }\n    } else if (\"b100s\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        Integer i1 = rng.nextInt();\n        Integer i2 = rng.nextInt();\n\n        // concentrate on small numbers for a while\n        // to try and hit boundary cases 0,1,-1,100,-100,etc\n        if (iter < 10000) {\n          i1 = (i1 % 250)-125;\n          i2 = (i2 % 250)-125;\n        } else if (iter < 500000) {\n          i1 = (i1 % 25000)-12500;\n          i2 = (i2 % 25000)-12500;\n        }\n\n        String s1=Integer.toString(i1);\n        String s2=Integer.toString(i2);\n        String v1 = NumberUtils.base10toBase10kSortableInt(s1);\n        String v2 = NumberUtils.base10toBase10kSortableInt(s2);\n        String out1=NumberUtils.base10kSortableIntToBase10(v1);\n        String out2=NumberUtils.base10kSortableIntToBase10(v2);\n\n        int c1 = i1.compareTo(i2);\n        int c2 = v1.compareTo(v2);\n        if (c1==0 && c2 !=0 || c1 < 0 && c2 >= 0 || c1 > 0 && c2 <=0\n            || !out1.equals(s1) || !out2.equals(s2))\n        {\n          System.out.println(\"Comparison error:\"+s1+\",\"+s2);\n          System.out.print(\"v1=\");\n          for (int ii=0; ii<v1.length(); ii++) {\n            System.out.print(\" \" + (int)v1.charAt(ii));\n          }\n          System.out.print(\"\\nv2=\");\n          for (int ii=0; ii<v2.length(); ii++) {\n            System.out.print(\" \" + (int)v2.charAt(ii));\n          }\n          System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n\n        }\n\n\n\n\n\n      }\n    }\n    ****/\n\n    long endTime = System.currentTimeMillis();\n    System.out.println(\"time=\"+(endTime-startTime));\n    System.out.println(\"ret=\"+ret);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a65a1a6171dfe798e06ba17f494a7a8747a11baa","date":1212716672,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/util/test/TestNumberUtils#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException {\n    int iter=1000000;\n    int arrsz=100000;\n    int ret=0;\n    int num=0;\n\n    String test=\"b100\";\n    String clazz=\"NoClass\";\n\n    for (int argnum=0; argnum<args.length; argnum++) {\n      String arg = args[argnum];\n      if (\"-t\".equals(arg)) { test=args[++argnum]; }\n      if (\"-i\".equals(arg)) { iter=Integer.parseInt(args[++argnum]); }\n      if (\"-a\".equals(arg)) { arrsz=Integer.parseInt(args[++argnum]); }\n      if (\"-c\".equals(arg)) { clazz=args[++argnum]; }\n      if (\"-r\".equals(arg)) { rng.setSeed(Long.parseLong(args[++argnum])); };\n      if (\"-n\".equals(arg)) { num = Integer.parseInt(args[++argnum]); };\n\n    }\n\n    // Converter conv = (Converter)(Class.forName(clazz).newInstance());\n    Class cls=null;\n    try {\n      cls = Class.forName(clazz);\n    } catch (Exception e) {\n      cls = Class.forName(\"solr.util.test.\" + clazz);\n    }\n    Converter conv = (Converter)cls.newInstance();\n\n    long startTime = System.currentTimeMillis();\n\n    if (\"ispecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Integer i1 = getSpecial();\n        Integer i2 = getSpecial();\n        test(i1,i2,conv);\n      }\n    }\n    else if (\"lspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Long f1 = getLongSpecial();\n        Long f2 = getLongSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"fspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Float f1 = getFloatSpecial();\n        Float f2 = getFloatSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"dspecial\".equals(test)) {\n     for (int i=0; i<iter; i++) {\n        Double f1 = getDoubleSpecial();\n        Double f2 = getDoubleSpecial();\n        test(f1,f2,conv);\n      }\n    }\n    else if (\"10kout\".equals(test)) {\n      String n = Integer.toString(num);\n      char[] arr = new char[n.length()];\n      char[] arr2 = new char[n.length()+1];\n      n.getChars(0,n.length(),arr,0);\n      for (int i=0; i<iter; i++) {\n        ret += BCDUtils.base10toBase100SortableInt(arr,0,arr.length,arr2,arr2.length);\n      }\n\n    } else if (\"internal\".equals(test) || \"external\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n\n      if (\"external\".equals(test)) {\n        for (int i=0; i<arrsz; i++) {\n          int val = rng.nextInt();\n          // todo - move to between min and max...\n          arr[i] = Integer.toString(rng.nextInt());\n          internal[i] = conv.toInternal(arr[i]);\n        }\n        for (int i=0; i<iter; i++) {\n          int slot=i%arrsz;\n          arr[slot] = conv.toExternal(internal[slot]);\n          ret += arr[slot].length();\n        }\n      } else {\n        for (int i=0; i<arrsz; i++) {\n          int val = rng.nextInt();\n          // todo - move to between min and max...\n          arr[i] = Integer.toString(rng.nextInt());\n        }\n        for (int i=0; i<iter; i++) {\n          int slot=i%arrsz;\n          internal[slot] = conv.toInternal(arr[slot]);\n          ret += internal[slot].length();\n        }\n      }\n    } else if (\"itest\".equals(test) || \"ltest\".equals(test) || \"ftest\".equals(test)) {\n      long internalLen=0;\n      long externalLen=0;\n      for (int i=0; i<iter; i++) {\n        Comparable n1=null,n2=null;\n\n        if (\"itest\".equals(test)) {\n          Integer i1\n                  = rng.nextInt();\n          Integer i2\n                  = rng.nextInt();\n\n          // concentrate on small numbers for a while\n          // to try and hit boundary cases 0,1,-1,100,-100,etc\n          if (i < 10000) {\n            i1 = (i1 % 250)-125;\n            i2 = (i2 % 250)-125;\n          } else if (i < 500000) {\n            i1 = (i1 % 25000)-12500;\n            i2 = (i2 % 25000)-12500;\n          }\n\n          n1=i1;\n          n2=i2;\n        } else if (\"ltest\".equals(test)) {\n          Long i1 = rng.nextLong();\n          Long i2 = rng.nextLong();\n\n          // concentrate on small numbers for a while\n          // to try and hit boundary cases 0,1,-1,100,-100,etc\n          if (i < 10000) {\n            i1 = (long)(i1 % 250)-125;\n            i2 = (long)(i2 % 250)-125;\n          } else if (i < 500000) {\n            i1 = (long)(i1 % 25000)-12500;\n            i2 = (long)(i2 % 25000)-12500;\n          }\n\n          n1=i1;\n          n2=i2;\n        } else if (\"ftest\".equals(test)) {\n          Float i1;\n          Float i2;\n          if (i < 10000) {\n            i1 = (float)(rng.nextInt() % 250)-125;\n            i2 = (float)(rng.nextInt() % 250)-125;\n          } else if (i < 300000) {\n            i1 = (float)(rng.nextInt() % 2500)-1250;\n            i2 = (float)(rng.nextInt() % 2500)-1250;\n          } else if (i < 500000) {\n            i1 = rng.nextFloat() / rng.nextFloat();\n            i2 = rng.nextFloat() / rng.nextFloat();\n          } else {\n            i1 = Float.intBitsToFloat(rng.nextInt());\n            i2 = Float.intBitsToFloat(rng.nextInt());\n          }\n          n1=i1;\n          n2=i2;\n        }\n        String s1=n1.toString();\n        String s2=n2.toString();\n        String v1 = conv.toInternal(s1);\n        String v2 = conv.toInternal(s2);\n        String out1=conv.toExternal(v1);\n        String out2=conv.toExternal(v2);\n\n        externalLen += s1.length();\n        internalLen += v1.length();\n\n        int c1 = n1.compareTo(n2);\n        int c2 = v1.compareTo(v2);\n        if (c1==0 && !(c2==0) || c1 < 0 && !(c2<0) || c1>0 && !(c2>0)\n            || !out1.equals(s1) || !out2.equals(s2))\n        {\n          System.out.println(\"Comparison error:\"+s1+\",\"+s2);\n          System.out.print(\"v1=\");\n          for (int ii=0; ii<v1.length(); ii++) {\n            System.out.print(\" \" + (int)v1.charAt(ii));\n          }\n          System.out.print(\"\\nv2=\");\n          for (int ii=0; ii<v2.length(); ii++) {\n            System.out.print(\" \" + (int)v2.charAt(ii));\n          }\n          System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n\n        }\n      }\n    }\n\n\n    /******************\n    int sz=20;\n    char[] arr1 = new char[sz];\n    char[] arr2 = new char[sz];\n    char[] arr3 = new char[sz];\n    if (\"noconv\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        int val = rng.nextInt();\n        String istr = Integer.toString(val);\n        int n = istr.length();\n        Integer.toString(val).getChars(0, n, arr1, 0);\n        String nStr = new String(arr1,0,n);\n        if (!nStr.equals(istr)) {\n          System.out.println(\"ERROR! input=\"+istr+\" output=\"+nStr);\n          System.out.println(arrstr(arr1,0,n));\n        }\n      }\n    } else if (\"b100\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        int val = rng.nextInt();\n        String istr = Integer.toString(val);\n        int n = istr.length();\n        Integer.toString(val).getChars(0, n, arr1, 0);\n\n        int b100_start = NumberUtils.base10toBase100(arr1,0,n,arr2,sz);\n        int b10_len = NumberUtils.base100toBase10(arr2,b100_start,sz,arr3,0);\n\n        String nStr = new String(arr3,0,b10_len);\n        if (!nStr.equals(istr)) {\n          System.out.println(\"ERROR! input=\"+istr+\" output=\"+nStr);\n          System.out.println(arrstr(arr1,0,n));\n          System.out.println(arrstr(arr2,b100_start,sz));\n          System.out.println(arrstr(arr3,0,b10_len));\n        }\n\n      }\n    } else if (\"b100sParse\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n      for (int i=0; i<arrsz; i++) {\n        int val = rng.nextInt();\n        // todo - move to between min and max...\n        arr[i] = Integer.toString(rng.nextInt());\n      }\n      for (int i=0; i<iter; i++) {\n        int slot=i%arrsz;\n        internal[slot] = NumberUtils.base10toBase100SortableInt(arr[i%arrsz]);\n        ret += internal[slot].length();\n      }\n    } else if (\"intParse\".equals(test)) {\n      int min=-1000000; int max=1000000;\n      String[] arr = new String[arrsz];\n      String[] internal = new String[arrsz];\n      for (int i=0; i<arrsz; i++) {\n        int val = rng.nextInt();\n        // todo - move to between min and max...\n        arr[i] = Integer.toString(rng.nextInt());\n      }\n      for (int i=0; i<iter; i++) {\n        int slot=i%arrsz;\n        int val = Integer.parseInt(arr[i%arrsz]);\n        String sval = Integer.toString(val);\n        internal[slot] = sval;\n        ret += internal[slot].length();\n      }\n    } else if (\"b100s\".equals(test)) {\n      for (int i=0; i<iter; i++) {\n        Integer i1 = rng.nextInt();\n        Integer i2 = rng.nextInt();\n\n        // concentrate on small numbers for a while\n        // to try and hit boundary cases 0,1,-1,100,-100,etc\n        if (iter < 10000) {\n          i1 = (i1 % 250)-125;\n          i2 = (i2 % 250)-125;\n        } else if (iter < 500000) {\n          i1 = (i1 % 25000)-12500;\n          i2 = (i2 % 25000)-12500;\n        }\n\n        String s1=Integer.toString(i1);\n        String s2=Integer.toString(i2);\n        String v1 = NumberUtils.base10toBase10kSortableInt(s1);\n        String v2 = NumberUtils.base10toBase10kSortableInt(s2);\n        String out1=NumberUtils.base10kSortableIntToBase10(v1);\n        String out2=NumberUtils.base10kSortableIntToBase10(v2);\n\n        int c1 = i1.compareTo(i2);\n        int c2 = v1.compareTo(v2);\n        if (c1==0 && c2 !=0 || c1 < 0 && c2 >= 0 || c1 > 0 && c2 <=0\n            || !out1.equals(s1) || !out2.equals(s2))\n        {\n          System.out.println(\"Comparison error:\"+s1+\",\"+s2);\n          System.out.print(\"v1=\");\n          for (int ii=0; ii<v1.length(); ii++) {\n            System.out.print(\" \" + (int)v1.charAt(ii));\n          }\n          System.out.print(\"\\nv2=\");\n          for (int ii=0; ii<v2.length(); ii++) {\n            System.out.print(\" \" + (int)v2.charAt(ii));\n          }\n          System.out.println(\"\\nout1='\"+out1+\"', out2='\" + out2 + \"'\");\n\n        }\n\n\n\n\n\n      }\n    }\n    ****/\n\n    long endTime = System.currentTimeMillis();\n    System.out.println(\"time=\"+(endTime-startTime));\n    System.out.println(\"ret=\"+ret);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a65a1a6171dfe798e06ba17f494a7a8747a11baa":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a65a1a6171dfe798e06ba17f494a7a8747a11baa":[],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["a65a1a6171dfe798e06ba17f494a7a8747a11baa"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a65a1a6171dfe798e06ba17f494a7a8747a11baa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}