{"path":"src/java/org/apache/lucene/search/FuzzyTermEnum#editDistance(String,String,int,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#editDistance(String,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     Levenshtein distance also known as edit distance is a measure of similiarity\n     between two strings where the distance is measured as the number of character \n     deletions, insertions or substitutions required to transform one string to \n     the other string. \n     <p>This method takes in four parameters; two strings and their respective \n     lengths to compute the Levenshtein distance between the two strings.\n     The result is returned as an integer.\n     */ \n    private final int editDistance(String s, String t, int n, int m) {\n        if (e.length <= n || e[0].length <= m) {\n            e = new int[Math.max(e.length, n+1)][Math.max(e.length, m+1)];\n        }\n        int d[][] = e; // matrix\n        int i; // iterates through s\n        int j; // iterates through t\n        char s_i; // ith character of s\n        \n        if (n == 0) return m;\n        if (m == 0) return n;\n        \n        // init matrix d\n        for (i = 0; i <= n; i++) d[i][0] = i;\n        for (j = 0; j <= m; j++) d[0][j] = j;\n        \n        // start computing edit distance\n        for (i = 1; i <= n; i++) {\n            s_i = s.charAt(i - 1);\n            for (j = 1; j <= m; j++) {\n                if (s_i != t.charAt(j-1))\n                    d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1])+1;\n                else d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]);\n            }\n        }\n        \n        // we got the result!\n        return d[n][m];\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cf7848101592cc414c95028a76a584c699389f5","date":1063274546,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FuzzyTermEnum#editDistance(String,String,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#editDistance(String,String,int,int).mjava","sourceNew":"    /**\n     Levenshtein distance also known as edit distance is a measure of similiarity\n     between two strings where the distance is measured as the number of character \n     deletions, insertions or substitutions required to transform one string to \n     the other string. \n     <p>This method takes in four parameters; two strings and their respective \n     lengths to compute the Levenshtein distance between the two strings.\n     The result is returned as an integer.\n     */ \n    private final int editDistance(String s, String t, int n, int m) {\n        if (e.length <= n || e[0].length <= m) {\n            e = new int[Math.max(e.length, n+1)][Math.max(e[0].length, m+1)];\n        }\n        int d[][] = e; // matrix\n        int i; // iterates through s\n        int j; // iterates through t\n        char s_i; // ith character of s\n        \n        if (n == 0) return m;\n        if (m == 0) return n;\n        \n        // init matrix d\n        for (i = 0; i <= n; i++) d[i][0] = i;\n        for (j = 0; j <= m; j++) d[0][j] = j;\n        \n        // start computing edit distance\n        for (i = 1; i <= n; i++) {\n            s_i = s.charAt(i - 1);\n            for (j = 1; j <= m; j++) {\n                if (s_i != t.charAt(j-1))\n                    d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1])+1;\n                else d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]);\n            }\n        }\n        \n        // we got the result!\n        return d[n][m];\n    }\n\n","sourceOld":"    /**\n     Levenshtein distance also known as edit distance is a measure of similiarity\n     between two strings where the distance is measured as the number of character \n     deletions, insertions or substitutions required to transform one string to \n     the other string. \n     <p>This method takes in four parameters; two strings and their respective \n     lengths to compute the Levenshtein distance between the two strings.\n     The result is returned as an integer.\n     */ \n    private final int editDistance(String s, String t, int n, int m) {\n        if (e.length <= n || e[0].length <= m) {\n            e = new int[Math.max(e.length, n+1)][Math.max(e.length, m+1)];\n        }\n        int d[][] = e; // matrix\n        int i; // iterates through s\n        int j; // iterates through t\n        char s_i; // ith character of s\n        \n        if (n == 0) return m;\n        if (m == 0) return n;\n        \n        // init matrix d\n        for (i = 0; i <= n; i++) d[i][0] = i;\n        for (j = 0; j <= m; j++) d[0][j] = j;\n        \n        // start computing edit distance\n        for (i = 1; i <= n; i++) {\n            s_i = s.charAt(i - 1);\n            for (j = 1; j <= m; j++) {\n                if (s_i != t.charAt(j-1))\n                    d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1])+1;\n                else d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]);\n            }\n        }\n        \n        // we got the result!\n        return d[n][m];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3af9908203648fa4313aca6c4913cb4864014bb","date":1099870044,"type":4,"author":"Daniel Naber","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/FuzzyTermEnum#editDistance(String,String,int,int).mjava","sourceNew":null,"sourceOld":"    /**\n     Levenshtein distance also known as edit distance is a measure of similiarity\n     between two strings where the distance is measured as the number of character \n     deletions, insertions or substitutions required to transform one string to \n     the other string. \n     <p>This method takes in four parameters; two strings and their respective \n     lengths to compute the Levenshtein distance between the two strings.\n     The result is returned as an integer.\n     */ \n    private final int editDistance(String s, String t, int n, int m) {\n        if (e.length <= n || e[0].length <= m) {\n            e = new int[Math.max(e.length, n+1)][Math.max(e[0].length, m+1)];\n        }\n        int d[][] = e; // matrix\n        int i; // iterates through s\n        int j; // iterates through t\n        char s_i; // ith character of s\n        \n        if (n == 0) return m;\n        if (m == 0) return n;\n        \n        // init matrix d\n        for (i = 0; i <= n; i++) d[i][0] = i;\n        for (j = 0; j <= m; j++) d[0][j] = j;\n        \n        // start computing edit distance\n        for (i = 1; i <= n; i++) {\n            s_i = s.charAt(i - 1);\n            for (j = 1; j <= m; j++) {\n                if (s_i != t.charAt(j-1))\n                    d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1])+1;\n                else d[i][j] = min(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1]);\n            }\n        }\n        \n        // we got the result!\n        return d[n][m];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cf7848101592cc414c95028a76a584c699389f5":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3af9908203648fa4313aca6c4913cb4864014bb":["5cf7848101592cc414c95028a76a584c699389f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3af9908203648fa4313aca6c4913cb4864014bb"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["5cf7848101592cc414c95028a76a584c699389f5"],"5cf7848101592cc414c95028a76a584c699389f5":["b3af9908203648fa4313aca6c4913cb4864014bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"b3af9908203648fa4313aca6c4913cb4864014bb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}