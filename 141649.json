{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      Long tip = (Long)t.get(fieldName);\n      if(tip.intValue() != val) {\n        throw new Exception(\"Found value:\"+tip.intValue()+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","sourceNew":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      String tip = t.getString(fieldName);\n      if(!tip.equals(Integer.toString(val))) {\n        throw new Exception(\"Found value:\"+tip+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","sourceOld":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      Long tip = (Long)t.get(fieldName);\n      if(tip.intValue() != val) {\n        throw new Exception(\"Found value:\"+tip.intValue()+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#assertOrderOf(List[Tuple],String,int...).mjava","sourceNew":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      String tip = t.getString(fieldName);\n      if(!tip.equals(Integer.toString(val))) {\n        throw new Exception(\"Found value:\"+tip+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","sourceOld":"  protected boolean assertOrderOf(List<Tuple> tuples, String fieldName, int... ids) throws Exception {\n    int i = 0;\n    for(int val : ids) {\n      Tuple t = tuples.get(i);\n      Long tip = (Long)t.get(fieldName);\n      if(tip.intValue() != val) {\n        throw new Exception(\"Found value:\"+tip.intValue()+\" expecting:\"+val);\n      }\n      ++i;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"915201312eef398482b3dffe8a297e1809f3b29a":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["915201312eef398482b3dffe8a297e1809f3b29a"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["915201312eef398482b3dffe8a297e1809f3b29a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"915201312eef398482b3dffe8a297e1809f3b29a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}