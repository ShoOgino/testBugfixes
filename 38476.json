{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase#getIdCacheData(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * If the where clause is present the cache is sql Vs Map of key Vs List of Rows. Only used by cache implementations.\n   *\n   * @param query the query string for which cached data is to be returned\n   *\n   * @return the cached row corresponding to the given query after all variables have been resolved\n   */\n  protected Map<String, Object> getIdCacheData(String query) {\n    Map<Object, List<Map<String, Object>>> rowIdVsRows = cacheWithWhereClause\n            .get(query);\n    List<Map<String, Object>> rows = null;\n    Object key = context.resolve(cacheVariableName);\n    if (key == null) {\n      throw new DataImportHandlerException(DataImportHandlerException.WARN,\n              \"The cache lookup value : \" + cacheVariableName + \" is resolved to be null in the entity :\" +\n                      context.getEntityAttribute(\"name\"));\n\n    }\n    if (rowIdVsRows != null) {\n      rows = rowIdVsRows.get(key);\n      if (rows == null)\n        return null;\n      dataSourceRowCache = new ArrayList<Map<String, Object>>(rows);\n      return getFromRowCacheTransformed();\n    } else {\n      rows = getAllNonCachedRows();\n      if (rows.isEmpty()) {\n        return null;\n      } else {\n        rowIdVsRows = new HashMap<Object, List<Map<String, Object>>>();\n        for (Map<String, Object> row : rows) {\n          Object k = row.get(cachePk);\n          if (k == null) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"No value available for the cache key : \" + cachePk + \" in the entity : \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (!k.getClass().equals(key.getClass())) {\n            throw new DataImportHandlerException(DataImportHandlerException.WARN,\n                    \"The key in the cache type : \" + k.getClass().getName() +\n                            \"is not same as the lookup value type \" + key.getClass().getName() + \" in the entity \" +\n                            context.getEntityAttribute(\"name\"));\n          }\n          if (rowIdVsRows.get(k) == null)\n            rowIdVsRows.put(k, new ArrayList<Map<String, Object>>());\n          rowIdVsRows.get(k).add(row);\n        }\n        cacheWithWhereClause.put(query, rowIdVsRows);\n        if (!rowIdVsRows.containsKey(key))\n          return null;\n        dataSourceRowCache = new ArrayList<Map<String, Object>>(rowIdVsRows.get(key));\n        if (dataSourceRowCache.isEmpty()) {\n          dataSourceRowCache = null;\n          return null;\n        }\n        return getFromRowCacheTransformed();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3337b86edd36607f0208321f1deee79c55e5fd21":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3337b86edd36607f0208321f1deee79c55e5fd21"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3337b86edd36607f0208321f1deee79c55e5fd21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"3337b86edd36607f0208321f1deee79c55e5fd21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}