{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroupsCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  /**\n   * Get the TopGroups recorded by this collector\n   * @param withinGroupOffset the offset within each group to start collecting documents\n   */\n  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<T> group : groups) {\n      TopDocsCollector<?> collector = (TopDocsCollector<?>) groupReducer.getCollector(group.groupValue);\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n          topDocs.getMaxScore(),\n          topDocs.totalHits,\n          topDocs.scoreDocs,\n          group.groupValue,\n          group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n        withinGroupSort.getSort(),\n        totalHitCount, totalGroupedHitCount, groupDocsResult,\n        maxScore);\n  }\n\n","sourceOld":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":null,"sourceOld":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}