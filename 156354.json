{"path":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#formGrams(String,int).mjava","sourceNew":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Form all ngrams for a given word.\n   * @param text the word to parse\n   * @param ng the ngram length e.g. 3\n   * @return an array of all ngrams in the word and note that duplicates are not removed\n   */\n  private static String[] formGrams(String text, int ng) {\n    int len = text.length();\n    String[] res = new String[len - ng + 1];\n    for (int i = 0; i < len - ng + 1; i++) {\n      res[i] = text.substring(i, i + ng);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}