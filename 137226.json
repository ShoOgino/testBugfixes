{"path":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"971c36528e9394e6a97c8703e4663f578e765eff","date":1310679787,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    \n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99b0859e3bd6884b73728b9c7f31082627c13541","date":1317155170,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", req(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", req(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", req(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", req(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(req(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(req(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(req(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(req(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0]);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47e414c9db7272f2ef36765dade3286dbc26790","date":1330789714,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4fd7ba8033bee578ba65741253c594ca0cbff8","date":1332868411,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a5469a71486c4c1e313c7fcb08188d7111195c2","date":1333407337,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor(), 8);\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bad6d9c88746be4a83822ab420b8c2398257cfb8","date":1341520565,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    IndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n\n    assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)writer.getConfig().getMergePolicy()).getMergeFactor());\n    \n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getCloudState().getLiveNodes().toString(),\n        zkController.getCloudState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n    \n   \n    \n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SAXParseException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SAXParseException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f5ecef308279cfa6c2c6e98487f14646b458839","date":1375744659,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n    \n    // test merge factor picked up\n    SolrCore core = h.getCore();\n\n    RefCounted<IndexWriter> iw = ((DirectUpdateHandler2)core.getUpdateHandler()).getSolrCoreState().getIndexWriter(core);\n    try {\n      assertEquals(\"Mergefactor was not picked up\", 8, ((LogMergePolicy)iw.get().getConfig().getMergePolicy()).getMergeFactor());\n    } finally {\n      iw.decref();\n    }\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92c8edb2962efc12c9f1afd38e0ab27621b7eb48","date":1412367419,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":["b374d78db8148ec6796fdf37148b33897ab40a8c","971c36528e9394e6a97c8703e4663f578e765eff","99b0859e3bd6884b73728b9c7f31082627c13541"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      SolrTestCaseJ4.ignoreException(\"SolrException\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      SolrTestCaseJ4.resetExceptionIgnores();\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      \n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n    \n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    NamedList stats = core.getStatistics();\n    assertEquals(\"collection1\", stats.get(\"coreName\"));\n    assertEquals(\"collection1\", stats.get(\"collection\"));\n    assertEquals(\"shard1\", stats.get(\"shard\"));\n    assertTrue(stats.get(\"refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//int[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f789dbd1886e4b468e61b0def88b29a3f55228","date":1533844010,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    SolrException e = expectThrows(SolrException.class,\n        \"The reloaded SolrCore did not pick up configs from zookeeper\",\n        () -> {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n    });\n    resetExceptionIgnores();\n    assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n    assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    try {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n      fail(\"The reloaded SolrCore did not pick up configs from zookeeper\");\n    } catch(SolrException e) {\n      resetExceptionIgnores();\n      assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n      assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    }\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run(false);\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    SolrException e = expectThrows(SolrException.class,\n        \"The reloaded SolrCore did not pick up configs from zookeeper\",\n        () -> {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n    });\n    resetExceptionIgnores();\n    assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n    assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run();\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    SolrException e = expectThrows(SolrException.class,\n        \"The reloaded SolrCore did not pick up configs from zookeeper\",\n        () -> {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n    });\n    resetExceptionIgnores();\n    assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n    assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicZkTest#testBasic().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testBasic() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    \n    // for the really slow/busy computer, we wait to make sure we have a leader before starting\n    h.getCoreContainer().getZkController().getZkStateReader().getLeaderUrl(\"collection1\", \"shard1\", 30000);\n    \n    ZkController zkController = h.getCoreContainer().getZkController();\n\n    SolrCore core = h.getCore();\n\n    // test that we got the expected config, not just hardcoded defaults\n    assertNotNull(core.getRequestHandler(\"/mock\"));\n\n    lrf.args.put(CommonParams.VERSION, \"2.2\");\n    assertQ(\"test query on empty index\", request(\"qlkciyopsbgzyvkylsjhchghjrdf\"),\n        \"//result[@numFound='0']\");\n\n    // test escaping of \";\"\n    assertU(\"deleting 42 for no reason at all\", delI(\"42\"));\n    assertU(\"adding doc#42\", adoc(\"id\", \"42\", \"val_s\", \"aa;bb\"));\n    assertU(\"does commit work?\", commit());\n\n    assertQ(\"backslash escaping semicolon\", request(\"id:42 AND val_s:aa\\\\;bb\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"quote escaping semicolon\", request(\"id:42 AND val_s:\\\"aa;bb\\\"\"),\n        \"//*[@numFound='1']\", \"//str[@name='id'][.='42']\");\n\n    assertQ(\"no escaping semicolon\", request(\"id:42 AND val_s:aa\"),\n        \"//*[@numFound='0']\");\n\n    assertU(delI(\"42\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='0']\");\n\n    // test overwrite default of true\n\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"AAA\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"BBB\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='BBB']\");\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"CCC\"));\n    assertU(adoc(\"id\", \"42\", \"val_s\", \"DDD\"));\n    assertU(commit());\n    assertQ(request(\"id:42\"), \"//*[@numFound='1']\", \"//str[.='DDD']\");\n\n    // test deletes\n    String[] adds = new String[] { add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"105\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"102\"), \"overwrite\", \"true\"),\n        add(doc(\"id\", \"103\"), \"overwrite\", \"false\"),\n        add(doc(\"id\", \"101\"), \"overwrite\", \"true\"), };\n    for (String a : adds) {\n      assertU(a, a);\n    }\n    assertU(commit());\n    int zkPort = zkServer.getPort();\n\n    zkServer.shutdown();\n\n    // document indexing shouldn't stop immediately after a ZK disconnect\n    assertU(adoc(\"id\", \"201\"));\n\n    Thread.sleep(300);\n    \n    // try a reconnect from disconnect\n    zkServer = new ZkTestServer(zkDir, zkPort);\n    zkServer.run(false);\n    \n    Thread.sleep(300);\n    \n    // ensure zk still thinks node is up\n    assertTrue(\n        zkController.getClusterState().getLiveNodes().toString(),\n        zkController.getClusterState().liveNodesContain(\n            zkController.getNodeName()));\n\n    // test maxint\n    assertQ(request(\"q\", \"id:[100 TO 110]\", \"rows\", \"2147483647\"),\n        \"//*[@numFound='4']\");\n\n    // test big limit\n    assertQ(request(\"q\", \"id:[100 TO 111]\", \"rows\", \"1147483647\"),\n        \"//*[@numFound='4']\");\n\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='4']\");\n    assertU(delI(\"102\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='3']\");\n    assertU(delI(\"105\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='2']\");\n    assertU(delQ(\"id:[100 TO 110]\"));\n    assertU(commit());\n    assertQ(request(\"id:[100 TO 110]\"), \"//*[@numFound='0']\");\n\n\n\n    // SOLR-2651: test that reload still gets config files from zookeeper \n    zkController.getZkClient().setData(\"/configs/conf1/solrconfig.xml\", new byte[0], true);\n \n    // we set the solrconfig to nothing, so this reload should fail\n    SolrException e = expectThrows(SolrException.class,\n        \"The reloaded SolrCore did not pick up configs from zookeeper\",\n        () -> {\n      ignoreException(\"solrconfig.xml\");\n      h.getCoreContainer().reload(h.getCore().getName());\n    });\n    resetExceptionIgnores();\n    assertTrue(e.getMessage().contains(\"Unable to reload core [collection1]\"));\n    assertTrue(e.getCause().getMessage().contains(\"Error loading solr config from solrconfig.xml\"));\n    \n    // test stats call\n    Map<String, Metric> metrics = h.getCore().getCoreMetricManager().getRegistry().getMetrics();\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.coreName\")).getValue());\n    assertEquals(\"collection1\", ((Gauge)metrics.get(\"CORE.collection\")).getValue());\n    assertEquals(\"shard1\", ((Gauge)metrics.get(\"CORE.shard\")).getValue());\n    assertTrue(metrics.get(\"CORE.refCount\") != null);\n\n    //zkController.getZkClient().printLayoutToStdOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","d47e414c9db7272f2ef36765dade3286dbc26790"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["92f789dbd1886e4b468e61b0def88b29a3f55228"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["816521ebaad5add9cb96bb88c577394e2938c40b"],"971c36528e9394e6a97c8703e4663f578e765eff":["c26f00b574427b55127e869b935845554afde1fa"],"bad6d9c88746be4a83822ab420b8c2398257cfb8":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["99b0859e3bd6884b73728b9c7f31082627c13541","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["bad6d9c88746be4a83822ab420b8c2398257cfb8","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"99b0859e3bd6884b73728b9c7f31082627c13541":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f789dbd1886e4b468e61b0def88b29a3f55228":["28288370235ed02234a64753cdbf0c6ec096304a"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48"],"92c8edb2962efc12c9f1afd38e0ab27621b7eb48":["1f5ecef308279cfa6c2c6e98487f14646b458839"],"d47e414c9db7272f2ef36765dade3286dbc26790":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["b374d78db8148ec6796fdf37148b33897ab40a8c","1f5ecef308279cfa6c2c6e98487f14646b458839"],"2d4fd7ba8033bee578ba65741253c594ca0cbff8":["d47e414c9db7272f2ef36765dade3286dbc26790"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["971c36528e9394e6a97c8703e4663f578e765eff"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["99b0859e3bd6884b73728b9c7f31082627c13541","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"30c8e5574b55d57947e989443dfde611646530ee":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","28288370235ed02234a64753cdbf0c6ec096304a"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["1f5ecef308279cfa6c2c6e98487f14646b458839","92c8edb2962efc12c9f1afd38e0ab27621b7eb48"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"28288370235ed02234a64753cdbf0c6ec096304a":["816521ebaad5add9cb96bb88c577394e2938c40b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["2d4fd7ba8033bee578ba65741253c594ca0cbff8"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4a5469a71486c4c1e313c7fcb08188d7111195c2","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["99b0859e3bd6884b73728b9c7f31082627c13541"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["bad6d9c88746be4a83822ab420b8c2398257cfb8"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["a71f63026529f3c1f03cfdd664910873ab2369ae"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"c26f00b574427b55127e869b935845554afde1fa":["971c36528e9394e6a97c8703e4663f578e765eff"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","5ff704ef91e9ae30ca59babb23ece85720701b60"],"971c36528e9394e6a97c8703e4663f578e765eff":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"bad6d9c88746be4a83822ab420b8c2398257cfb8":["aba371508186796cc6151d8223a5b4e16d02e26e","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"99b0859e3bd6884b73728b9c7f31082627c13541":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"92f789dbd1886e4b468e61b0def88b29a3f55228":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1f5ecef308279cfa6c2c6e98487f14646b458839"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","816521ebaad5add9cb96bb88c577394e2938c40b"],"92c8edb2962efc12c9f1afd38e0ab27621b7eb48":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0932eb10135843758b2ca508d5aa2b4798aa07f9","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d47e414c9db7272f2ef36765dade3286dbc26790":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2d4fd7ba8033bee578ba65741253c594ca0cbff8"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2d4fd7ba8033bee578ba65741253c594ca0cbff8":["4a5469a71486c4c1e313c7fcb08188d7111195c2"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["99b0859e3bd6884b73728b9c7f31082627c13541"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"30c8e5574b55d57947e989443dfde611646530ee":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["92f789dbd1886e4b468e61b0def88b29a3f55228","30c8e5574b55d57947e989443dfde611646530ee"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["b374d78db8148ec6796fdf37148b33897ab40a8c","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"1f5ecef308279cfa6c2c6e98487f14646b458839":["92c8edb2962efc12c9f1afd38e0ab27621b7eb48","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"4a5469a71486c4c1e313c7fcb08188d7111195c2":["bad6d9c88746be4a83822ab420b8c2398257cfb8","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","d47e414c9db7272f2ef36765dade3286dbc26790","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["30c8e5574b55d57947e989443dfde611646530ee"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","30c8e5574b55d57947e989443dfde611646530ee","d9a47902d6207303f5ed3e7aaca62ca33433af66","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}