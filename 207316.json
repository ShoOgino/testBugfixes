{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#Lucene40PostingsWriter(SegmentWriteState,int).mjava","sourceNew":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","sourceOld":"  public Lucene40PostingsWriter(SegmentWriteState state, int skipInterval) throws IOException {\n    super();\n    this.skipInterval = skipInterval;\n    this.skipMinimum = skipInterval; /* set to the same for now */\n    // this.segment = state.segmentName;\n    String fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.FREQ_EXTENSION);\n    freqOut = state.directory.createOutput(fileName, state.context);\n    boolean success = false;\n    try {\n      if (state.fieldInfos.hasProx()) {\n        // At least one field does not omit TF, so create the\n        // prox file\n        fileName = IndexFileNames.segmentFileName(state.segmentName, state.segmentSuffix, Lucene40PostingsFormat.PROX_EXTENSION);\n        proxOut = state.directory.createOutput(fileName, state.context);\n      } else {\n        // Every field omits TF so we will write no prox file\n        proxOut = null;\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(freqOut);\n      }\n    }\n\n    totalNumDocs = state.numDocs;\n\n    skipListWriter = new Lucene40SkipListWriter(skipInterval,\n                                               maxSkipLevels,\n                                               state.numDocs,\n                                               freqOut,\n                                               proxOut);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}