{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","commits":[{"id":"6a62f51fc98f22545b2c8453da582a2d8222a756","date":1287705676,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"/dev/null","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"/dev/null","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"/dev/null","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = 2000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestMinimize#testAgainstBrzozowski().mjava","sourceNew":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","sourceOld":"  /** compare minimized against minimized with a slower, simple impl.\n   * we check not only that they are the same, but that #states/#transitions\n   * are the same. */\n  public void testAgainstBrzozowski() {\n    int num = atLeast(200);\n    for (int i = 0; i < num; i++) {\n      Automaton a = AutomatonTestUtil.randomAutomaton(random);\n      AutomatonTestUtil.minimizeSimple(a);\n      Automaton b = a.clone();\n      MinimizationOperations.minimize(b);\n      assertTrue(BasicOperations.sameLanguage(a, b));\n      assertEquals(a.getNumberOfStates(), b.getNumberOfStates());\n      assertEquals(a.getNumberOfTransitions(), b.getNumberOfTransitions());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["6a62f51fc98f22545b2c8453da582a2d8222a756","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["6a62f51fc98f22545b2c8453da582a2d8222a756"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["b12d3e81e0f95a4527b5703953c503f71120ffcc","0762b640e0d0d12b6edb96db68986e13145c3484"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a62f51fc98f22545b2c8453da582a2d8222a756"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6a62f51fc98f22545b2c8453da582a2d8222a756"],"6a62f51fc98f22545b2c8453da582a2d8222a756":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","6a62f51fc98f22545b2c8453da582a2d8222a756"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"6a62f51fc98f22545b2c8453da582a2d8222a756":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}