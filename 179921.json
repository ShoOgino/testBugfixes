{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","sourceNew":"  public Payload encode(char[] buffer, int offset, int length) {\n    Payload result = new Payload();\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    result.setData(bytes);\n    return result;\n  }\n\n","sourceOld":"  public Payload encode(char[] buffer, int offset, int length) {\n    Payload result = new Payload();\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    result.setData(bytes);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","sourceNew":"  public BytesRef encode(char[] buffer, int offset, int length) {\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    BytesRef result = new BytesRef(bytes);\n    return result;\n  }\n\n","sourceOld":"  public Payload encode(char[] buffer, int offset, int length) {\n    Payload result = new Payload();\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    result.setData(bytes);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","sourceNew":"  @Override\n  public BytesRef encode(char[] buffer, int offset, int length) {\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    BytesRef result = new BytesRef(bytes);\n    return result;\n  }\n\n","sourceOld":"  public BytesRef encode(char[] buffer, int offset, int length) {\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    BytesRef result = new BytesRef(bytes);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/payloads/IntegerEncoder#encode(char[],int,int).mjava","sourceNew":"  @Override\n  public BytesRef encode(char[] buffer, int offset, int length) {\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    BytesRef result = new BytesRef(bytes);\n    return result;\n  }\n\n","sourceOld":"  public BytesRef encode(char[] buffer, int offset, int length) {\n    int payload = ArrayUtil.parseInt(buffer, offset, length);//TODO: improve this so that we don't have to new Strings\n    byte[] bytes = PayloadHelper.encodeInt(payload);\n    BytesRef result = new BytesRef(bytes);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["76fa9933adb0556e752e8af9734c4d0ae14622ff","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7530de27b87b961b51f01bd1299b7004d46e8823":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}