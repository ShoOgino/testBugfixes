{"path":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","commits":[{"id":"4926b5318ba4167d360445a0c5f3fc8af2cf8c49","date":1218678599,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Persists the multicore config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c28792ff7d1774c306e16afbd44ded91a417049b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2284f4281eb212e60f8318c30e1d67c7d25422a7","date":1218739496,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the multicore config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n      synchronized(cores) {\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n      }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a23d883b818d258c0eac4c2a49ef05ea534979","date":1219162051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persistFile(File).mjava","sourceNew":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","sourceOld":"  /** Persists the cores config file in a user provided file. */\n  public void persistFile(File file) {\n    log.info(\"Persisting cores config to \" + (file==null ? configFile : file));\n\n    File tmpFile = null;\n    try {\n      // write in temp first\n      if (file == null) {\n        file = tmpFile = File.createTempFile(\"solr\", \".xml\", configFile.getParentFile());\n      }\n      java.io.FileOutputStream out = new java.io.FileOutputStream(file);\n        Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n        persist(writer);\n        writer.flush();\n        writer.close();\n        out.close();\n        // rename over origin or copy it this fails\n        if (tmpFile != null) {\n          if (tmpFile.renameTo(configFile))\n            tmpFile = null;\n          else\n            fileCopy(tmpFile, configFile);\n        }\n    } \n    catch(java.io.FileNotFoundException xnf) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xnf);\n    } \n    catch(java.io.IOException xio) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, xio);\n    } \n    finally {\n      if (tmpFile != null) {\n        if (!tmpFile.delete())\n          tmpFile.deleteOnExit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2284f4281eb212e60f8318c30e1d67c7d25422a7":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"03a23d883b818d258c0eac4c2a49ef05ea534979":["c28792ff7d1774c306e16afbd44ded91a417049b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"ad94625fb8d088209f46650c8097196fec67f00c":["03a23d883b818d258c0eac4c2a49ef05ea534979"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2284f4281eb212e60f8318c30e1d67c7d25422a7":["c28792ff7d1774c306e16afbd44ded91a417049b"],"4926b5318ba4167d360445a0c5f3fc8af2cf8c49":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4926b5318ba4167d360445a0c5f3fc8af2cf8c49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03a23d883b818d258c0eac4c2a49ef05ea534979":["ad94625fb8d088209f46650c8097196fec67f00c"],"c28792ff7d1774c306e16afbd44ded91a417049b":["03a23d883b818d258c0eac4c2a49ef05ea534979"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}