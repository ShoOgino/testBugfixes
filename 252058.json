{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode)\n            .setStateFormat(2);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode)\n              .setStateFormat(2);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      @SuppressWarnings({\"rawtypes\"})\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"121de2b1a2f90238d017b11597526f7441dd0792","date":1598038996,"type":4,"author":"Anderson Dorow","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SimpleCollectionCreateDeleteTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  @ShardsFixed(num = 1)\n  public void test() throws Exception {\n    String overseerNode = OverseerCollectionConfigSetProcessor.getLeaderNode(cloudClient.getZkStateReader().getZkClient());\n    String notOverseerNode = null;\n    for (CloudJettyRunner cloudJetty : cloudJettys) {\n      if (!overseerNode.equals(cloudJetty.nodeName)) {\n        notOverseerNode = cloudJetty.nodeName;\n        break;\n      }\n    }\n    String collectionName = \"SimpleCollectionCreateDeleteTest\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,1,1)\n            .setCreateNodeSet(overseerNode);\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    if (request.get(\"success\") != null) {\n      assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n\n      @SuppressWarnings({\"rawtypes\"})\n      CollectionAdminRequest delete = CollectionAdminRequest.deleteCollection(collectionName);\n      cloudClient.request(delete);\n\n      assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collectionName, false));\n      \n      // currently, removing a collection does not wait for cores to be unloaded\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n      while (true) {\n        \n        if( timeout.hasTimedOut() ) {\n          throw new TimeoutException(\"Timed out waiting for all collections to be fully removed.\");\n        }\n        \n        boolean allContainersEmpty = true;\n        for(JettySolrRunner jetty : jettys) {\n          \n          Collection<SolrCore> cores = jetty.getCoreContainer().getCores();\n          for (SolrCore core : cores) {\n            CoreDescriptor cd = core.getCoreDescriptor();\n            if (cd != null) {\n              if (cd.getCloudDescriptor().getCollectionName().equals(collectionName)) {\n                allContainersEmpty = false;\n              }\n            }\n          }\n        }\n        if (allContainersEmpty) {\n          break;\n        }\n      }\n\n      // create collection again on a node other than the overseer leader\n      create = CollectionAdminRequest.createCollection(collectionName,1,1)\n              .setCreateNodeSet(notOverseerNode);\n      request = create.process(cloudClient).getResponse();\n      assertTrue(\"Collection creation should not have failed\", request.get(\"success\") != null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"121de2b1a2f90238d017b11597526f7441dd0792":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["121de2b1a2f90238d017b11597526f7441dd0792"]},"commit2Childs":{"121de2b1a2f90238d017b11597526f7441dd0792":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["121de2b1a2f90238d017b11597526f7441dd0792"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}