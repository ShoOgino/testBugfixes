{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestIndexReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random, 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    final Random rnd = random;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random, 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":["2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true, true);\n    }\n\n    assertReaderClosed(reader, true, true);\n    assertReaderClosed(firstReader, true, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = _TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(_TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.shutdown();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.shutdown();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.shutdown();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(\n         TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.shutdown();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    null, 1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReaderReopen#testThreadSafety().mjava","sourceNew":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    \n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testThreadSafety() throws Exception {\n    final Directory dir = newDirectory();\n    // NOTE: this also controls the number of threads!\n    final int n = TestUtil.nextInt(random(), 20, 40);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    for (int i = 0; i < n; i++) {\n      writer.addDocument(createDocument(i, 3));\n    }\n    writer.forceMerge(1);\n    writer.close();\n\n    final TestReopen test = new TestReopen() {      \n      @Override\n      protected void modifyIndex(int i) throws IOException {\n       IndexWriter modifier = new IndexWriter(dir, new IndexWriterConfig(new MockAnalyzer(random())));\n       modifier.addDocument(createDocument(n + i, 6));\n       modifier.close();\n      }\n\n      @Override\n      protected DirectoryReader openReader() throws IOException {\n        return DirectoryReader.open(dir);\n      }      \n    };\n    \n    final List<ReaderCouple> readers = Collections.synchronizedList(new ArrayList<ReaderCouple>());\n    DirectoryReader firstReader = DirectoryReader.open(dir);\n    DirectoryReader reader = firstReader;\n    \n    ReaderThread[] threads = new ReaderThread[n];\n    final Set<DirectoryReader> readersToClose = Collections.synchronizedSet(new HashSet<DirectoryReader>());\n    \n    for (int i = 0; i < n; i++) {\n      if (i % 2 == 0) {\n        DirectoryReader refreshed = DirectoryReader.openIfChanged(reader);\n        if (refreshed != null) {\n          readersToClose.add(reader);\n          reader = refreshed;\n        }\n      }\n      final DirectoryReader r = reader;\n      \n      final int index = i;    \n      \n      ReaderThreadTask task;\n      \n      if (i < 4 || (i >=10 && i < 14) || i > 18) {\n        task = new ReaderThreadTask() {\n          \n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              if (index % 2 == 0) {\n                // refresh reader synchronized\n                ReaderCouple c = (refreshReader(r, test, index, true));\n                readersToClose.add(c.newReader);\n                readersToClose.add(c.refreshedReader);\n                readers.add(c);\n                // prevent too many readers\n                break;\n              } else {\n                // not synchronized\n                DirectoryReader refreshed = DirectoryReader.openIfChanged(r);\n                if (refreshed == null) {\n                  refreshed = r;\n                }\n                \n                IndexSearcher searcher = newSearcher(refreshed);\n                ScoreDoc[] hits = searcher.search(\n                    new TermQuery(new Term(\"field1\", \"a\" + rnd.nextInt(refreshed.maxDoc()))),\n                    1000).scoreDocs;\n                if (hits.length > 0) {\n                  searcher.doc(hits[0].doc);\n                }\n                if (refreshed != r) {\n                  refreshed.close();\n                }\n              }\n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n          \n        };\n      } else {\n        task = new ReaderThreadTask() {\n          @Override\n          public void run() throws Exception {\n            Random rnd = LuceneTestCase.random();\n            while (!stopped) {\n              int numReaders = readers.size();\n              if (numReaders > 0) {\n                ReaderCouple c =  readers.get(rnd.nextInt(numReaders));\n                TestDirectoryReader.assertIndexEquals(c.newReader, c.refreshedReader);\n              }\n              \n              synchronized(this) {\n                wait(TestUtil.nextInt(random(), 1, 100));\n              }\n            }\n          }\n        };\n      }\n      \n      threads[i] = new ReaderThread(task);\n      threads[i].start();\n    }\n    \n    synchronized(this) {\n      wait(1000);\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].stopThread();\n      }\n    }\n    \n    for (int i = 0; i < n; i++) {\n      if (threads[i] != null) {\n        threads[i].join();\n        if (threads[i].error != null) {\n          String msg = \"Error occurred in thread \" + threads[i].getName() + \":\\n\" + threads[i].error.getMessage();\n          fail(msg);\n        }\n      }\n      \n    }\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      readerToClose.close();\n    }\n    \n    firstReader.close();\n    reader.close();\n    \n    for (final DirectoryReader readerToClose : readersToClose) {\n      assertReaderClosed(readerToClose, true);\n    }\n\n    assertReaderClosed(reader, true);\n    assertReaderClosed(firstReader, true);\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"0837ab0472feecb3a54260729d845f839e1cbd72":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3c188105a9aae04f56c24996f98f8333fc825d2e","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","6613659748fe4411a7dcf85266e55db1f95f7315","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0837ab0472feecb3a54260729d845f839e1cbd72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}