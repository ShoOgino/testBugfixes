{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    for (start = 0; start < len && Character.isWhitespace(termBuffer[start]); start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && Character.isWhitespace(termBuffer[end - 1]); end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    //QUESTION: Should we use Character.isWhitespace() instead?\n    for (start = 0; start < len && termBuffer[start] <= ' '; start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && termBuffer[end - 1] <= ' '; end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"192e49c0445803405b0bc0eebc8b758485480c21","date":1367699151,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/TrimFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n\n    // eat the first characters\n    for (start = 0; start < len && Character.isWhitespace(termBuffer[start]); start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && Character.isWhitespace(termBuffer[end - 1]); end--) {\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.buffer();\n    int len = termAtt.length();\n    //TODO: Is this the right behavior or should we return false?  Currently, \"  \", returns true, so I think this should\n    //also return true\n    if (len == 0){\n      return true;\n    }\n    int start = 0;\n    int end = 0;\n    int endOff = 0;\n\n    // eat the first characters\n    for (start = 0; start < len && Character.isWhitespace(termBuffer[start]); start++) {\n    }\n    // eat the end characters\n    for (end = len; end >= start && Character.isWhitespace(termBuffer[end - 1]); end--) {\n      endOff++;\n    }\n    if (start > 0 || end < len) {\n      if (start < end) {\n        termAtt.copyBuffer(termBuffer, start, (end - start));\n      } else {\n        termAtt.setEmpty();\n      }\n      if (updateOffsets && len == offsetAtt.endOffset() - offsetAtt.startOffset()) {\n        int newStart = offsetAtt.startOffset()+start;\n        int newEnd = offsetAtt.endOffset() - (start<end ? endOff:0);\n        offsetAtt.setOffset(newStart, newEnd);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"192e49c0445803405b0bc0eebc8b758485480c21":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["192e49c0445803405b0bc0eebc8b758485480c21"]},"commit2Childs":{"192e49c0445803405b0bc0eebc8b758485480c21":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["192e49c0445803405b0bc0eebc8b758485480c21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}