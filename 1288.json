{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(CloudSolrClient,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager dataProvider, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)dataProvider.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(CloudSolrClient cloudSolrClient, String requestId, long duration, TimeUnit timeUnit) throws SolrServerException, IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = CollectionAdminRequest.requestStatus(requestId).process(cloudSolrClient);\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          CollectionAdminRequest.deleteAsyncId(requestId).process(cloudSolrClient);\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager dataProvider, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)dataProvider.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager dataProvider, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)dataProvider.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.debug(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager dataProvider, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)dataProvider.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.info(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          dataProvider.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      TimeUnit.SECONDS.sleep(5);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.debug(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.debug(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39561034e67ea008831f095a2f7be7fcdbd37f53","date":1570744746,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within {} seconds. Last state={}\", timeoutSeconds, requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":["5b8cffee0b9c10b78bd087c71485b482217fe84f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within {} seconds. Last state={}\", timeoutSeconds, requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within 5 minutes. Last state={}\", requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e35f2dde06b35aa9904949a3a93fabd090371077","date":1587906921,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId={}\", requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within {} seconds. Last state={}\", timeoutSeconds, requestId, state);\n    return statusResponse;\n  }\n\n","sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId=\" + requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within {} seconds. Last state={}\", timeoutSeconds, requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/ExecutePlanAction#waitForTaskToFinish(SolrCloudManager,String,long,TimeUnit).mjava","sourceNew":null,"sourceOld":"  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {\n    long timeoutSeconds = timeUnit.toSeconds(duration);\n    RequestStatusState state = RequestStatusState.NOT_FOUND;\n    CollectionAdminRequest.RequestStatusResponse statusResponse = null;\n    for (int i = 0; i < timeoutSeconds; i++) {\n      try {\n        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));\n        state = statusResponse.getRequestStatus();\n        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {\n          log.trace(\"Task with requestId={} finished with state={} in {}s\", requestId, state, i * 5);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        } else if (state == RequestStatusState.NOT_FOUND) {\n          // the request for this id was never actually submitted! no harm done, just bail out\n          log.warn(\"Task with requestId={} was not found on overseer\", requestId);\n          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));\n          return statusResponse;\n        }\n      } catch (Exception e) {\n        Throwable rootCause = ExceptionUtils.getRootCause(e);\n        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains(\"Connection pool shut down\"))  {\n          throw e;\n        }\n        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains(\"Could not connect to ZooKeeper\")) {\n          throw e;\n        }\n        if (rootCause instanceof SolrServerException) {\n          throw e;\n        }\n        log.error(\"Unexpected Exception while querying status of requestId={}\", requestId, e);\n        throw e;\n      }\n      if (i > 0 && i % 5 == 0) {\n        log.trace(\"Task with requestId={} still not complete after {}s. Last state={}\", requestId, i * 5, state);\n      }\n      cloudManager.getTimeSource().sleep(5000);\n    }\n    log.debug(\"Task with requestId={} did not complete within {} seconds. Last state={}\", timeoutSeconds, requestId, state);\n    return statusResponse;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39561034e67ea008831f095a2f7be7fcdbd37f53":["a4422b331d00607258b0ed3e43934306e67764aa"],"3f504512a03d978990cbff30db0522b354e846db":["e35f2dde06b35aa9904949a3a93fabd090371077"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"e35f2dde06b35aa9904949a3a93fabd090371077":["39561034e67ea008831f095a2f7be7fcdbd37f53"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a4422b331d00607258b0ed3e43934306e67764aa","39561034e67ea008831f095a2f7be7fcdbd37f53"]},"commit2Childs":{"39561034e67ea008831f095a2f7be7fcdbd37f53":["e35f2dde06b35aa9904949a3a93fabd090371077","b0b597c65628ca9e73913a07e81691f8229bae35"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"a4422b331d00607258b0ed3e43934306e67764aa":["39561034e67ea008831f095a2f7be7fcdbd37f53","b0b597c65628ca9e73913a07e81691f8229bae35"],"e35f2dde06b35aa9904949a3a93fabd090371077":["3f504512a03d978990cbff30db0522b354e846db"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}