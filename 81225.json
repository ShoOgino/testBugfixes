{"path":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readIndexHeader(IndexInput).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readIndexHeader(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieves the full index header from the provided {@link IndexInput}.\n   *  This throws {@link CorruptIndexException} if this file does\n   * not appear to be an index file. */\n  public static byte[] readIndexHeader(IndexInput in) throws IOException {\n    in.seek(0);\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC, in);\n    }\n    String codec = in.readString();\n    in.readInt();\n    in.seek(in.getFilePointer() + StringHelper.ID_LENGTH);\n    int suffixLength = in.readByte() & 0xFF;\n    byte[] bytes = new byte[headerLength(codec) + StringHelper.ID_LENGTH + 1 + suffixLength];\n    in.seek(0);\n    in.readBytes(bytes, 0, bytes.length);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#readIndexHeader(IndexInput).mjava","pathOld":"/dev/null","sourceNew":"  /** Retrieves the full index header from the provided {@link IndexInput}.\n   *  This throws {@link CorruptIndexException} if this file does\n   * not appear to be an index file. */\n  public static byte[] readIndexHeader(IndexInput in) throws IOException {\n    in.seek(0);\n    final int actualHeader = in.readInt();\n    if (actualHeader != CODEC_MAGIC) {\n      throw new CorruptIndexException(\"codec header mismatch: actual header=\" + actualHeader + \" vs expected header=\" + CODEC_MAGIC, in);\n    }\n    String codec = in.readString();\n    in.readInt();\n    in.seek(in.getFilePointer() + StringHelper.ID_LENGTH);\n    int suffixLength = in.readByte() & 0xFF;\n    byte[] bytes = new byte[headerLength(codec) + StringHelper.ID_LENGTH + 1 + suffixLength];\n    in.seek(0);\n    in.readBytes(bytes, 0, bytes.length);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["68496c2200e559fb7802f7575427b7a482659afb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}