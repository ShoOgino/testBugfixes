{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DifferenceIntervalFunction.NotWithinFunction#apply(IntervalIterator,IntervalIterator).mjava","commits":[{"id":"361b1afc99f68598c73d37074aec089c9c951586","date":1522744632,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DifferenceIntervalFunction.NotWithinFunction#apply(IntervalIterator,IntervalIterator).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public IntervalIterator apply(IntervalIterator minuend, IntervalIterator subtrahend) {\n      IntervalIterator notWithin = new IntervalIterator() {\n\n        @Override\n        public int docID() {\n          return subtrahend.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          positioned = false;\n          return subtrahend.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          positioned = false;\n          return subtrahend.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return subtrahend.cost();\n        }\n\n        boolean positioned = false;\n\n        @Override\n        public int start() {\n          if (positioned == false)\n            return -1;\n          int start = subtrahend.start();\n          return Math.max(0, start - positions);\n        }\n\n        @Override\n        public int end() {\n          if (positioned == false)\n            return -1;\n          int end = subtrahend.end();\n          int newEnd = end + positions;\n          if (newEnd < 0) // check for overflow\n            return Integer.MAX_VALUE;\n          return newEnd;\n        }\n\n        @Override\n        public int nextInterval() throws IOException {\n          if (positioned == false) {\n            positioned = true;\n          }\n          return subtrahend.nextInterval();\n        }\n\n        @Override\n        public float matchCost() {\n          return subtrahend.matchCost();\n        }\n\n      };\n      return NON_OVERLAPPING.apply(minuend, notWithin);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff275d3941a30f2db7c9278444015f412b835254","date":1544435249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DifferenceIntervalFunction.NotWithinFunction#apply(IntervalIterator,IntervalIterator).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DifferenceIntervalFunction.NotWithinFunction#apply(IntervalIterator,IntervalIterator).mjava","sourceNew":"    @Override\n    public IntervalIterator apply(IntervalIterator minuend, IntervalIterator subtrahend) {\n      IntervalIterator notWithin = new IntervalIterator() {\n\n        @Override\n        public int docID() {\n          return subtrahend.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          positioned = false;\n          return subtrahend.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          positioned = false;\n          return subtrahend.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return subtrahend.cost();\n        }\n\n        boolean positioned = false;\n\n        @Override\n        public int start() {\n          if (positioned == false)\n            return -1;\n          int start = subtrahend.start();\n          return Math.max(0, start - positions);\n        }\n\n        @Override\n        public int end() {\n          if (positioned == false)\n            return -1;\n          int end = subtrahend.end();\n          int newEnd = end + positions;\n          if (newEnd < 0) // check for overflow\n            return Integer.MAX_VALUE;\n          return newEnd;\n        }\n\n        @Override\n        public int gaps() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int nextInterval() throws IOException {\n          if (positioned == false) {\n            positioned = true;\n          }\n          return subtrahend.nextInterval();\n        }\n\n        @Override\n        public float matchCost() {\n          return subtrahend.matchCost();\n        }\n\n      };\n      return NON_OVERLAPPING.apply(minuend, notWithin);\n    }\n\n","sourceOld":"    @Override\n    public IntervalIterator apply(IntervalIterator minuend, IntervalIterator subtrahend) {\n      IntervalIterator notWithin = new IntervalIterator() {\n\n        @Override\n        public int docID() {\n          return subtrahend.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          positioned = false;\n          return subtrahend.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          positioned = false;\n          return subtrahend.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return subtrahend.cost();\n        }\n\n        boolean positioned = false;\n\n        @Override\n        public int start() {\n          if (positioned == false)\n            return -1;\n          int start = subtrahend.start();\n          return Math.max(0, start - positions);\n        }\n\n        @Override\n        public int end() {\n          if (positioned == false)\n            return -1;\n          int end = subtrahend.end();\n          int newEnd = end + positions;\n          if (newEnd < 0) // check for overflow\n            return Integer.MAX_VALUE;\n          return newEnd;\n        }\n\n        @Override\n        public int nextInterval() throws IOException {\n          if (positioned == false) {\n            positioned = true;\n          }\n          return subtrahend.nextInterval();\n        }\n\n        @Override\n        public float matchCost() {\n          return subtrahend.matchCost();\n        }\n\n      };\n      return NON_OVERLAPPING.apply(minuend, notWithin);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f272fe1542bca669076ff8ed44b298b316ab4aa5","date":1546365319,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/DifferenceIntervalFunction.NotWithinFunction#apply(IntervalIterator,IntervalIterator).mjava","sourceNew":null,"sourceOld":"    @Override\n    public IntervalIterator apply(IntervalIterator minuend, IntervalIterator subtrahend) {\n      IntervalIterator notWithin = new IntervalIterator() {\n\n        @Override\n        public int docID() {\n          return subtrahend.docID();\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          positioned = false;\n          return subtrahend.nextDoc();\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          positioned = false;\n          return subtrahend.advance(target);\n        }\n\n        @Override\n        public long cost() {\n          return subtrahend.cost();\n        }\n\n        boolean positioned = false;\n\n        @Override\n        public int start() {\n          if (positioned == false)\n            return -1;\n          int start = subtrahend.start();\n          return Math.max(0, start - positions);\n        }\n\n        @Override\n        public int end() {\n          if (positioned == false)\n            return -1;\n          int end = subtrahend.end();\n          int newEnd = end + positions;\n          if (newEnd < 0) // check for overflow\n            return Integer.MAX_VALUE;\n          return newEnd;\n        }\n\n        @Override\n        public int gaps() {\n          throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public int nextInterval() throws IOException {\n          if (positioned == false) {\n            positioned = true;\n          }\n          return subtrahend.nextInterval();\n        }\n\n        @Override\n        public float matchCost() {\n          return subtrahend.matchCost();\n        }\n\n      };\n      return NON_OVERLAPPING.apply(minuend, notWithin);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff275d3941a30f2db7c9278444015f412b835254":["361b1afc99f68598c73d37074aec089c9c951586"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["ff275d3941a30f2db7c9278444015f412b835254"],"361b1afc99f68598c73d37074aec089c9c951586":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f272fe1542bca669076ff8ed44b298b316ab4aa5"]},"commit2Childs":{"ff275d3941a30f2db7c9278444015f412b835254":["f272fe1542bca669076ff8ed44b298b316ab4aa5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["361b1afc99f68598c73d37074aec089c9c951586"],"f272fe1542bca669076ff8ed44b298b316ab4aa5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"361b1afc99f68598c73d37074aec089c9c951586":["ff275d3941a30f2db7c9278444015f412b835254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}