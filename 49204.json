{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/analysis/GdataCategoryStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/analysis/GdataCategoryStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/search/analysis/GdataCategoryStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","sourceNew":"    /**\n     * @throws NotIndexableException\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(\n            Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String contentPath = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(contentPath);\n        } catch (XPathExpressionException e) {\n\n            throw new NotIndexableException(\"Can not apply path\");\n        }\n        if (node == null)\n            throw new NotIndexableException(\n                    \"Could not retrieve content for schema field: \"\n                            + this.config);\n\n        StringBuilder contentBuilder = new StringBuilder();\n        StringBuilder schemeBuilder = new StringBuilder();\n        String nodeName = node.getNodeName();\n        /*\n         * enable more than one category element -- check the node name if\n         * category strategy is used with an element not named \"category\"\n         */\n        while (node != null && nodeName != null\n                && nodeName.equals(node.getNodeName())) {\n            NamedNodeMap attributeMap = node.getAttributes();\n            if (attributeMap == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            /*\n             * the \"term\" is the internal string used by the software to\n             * identify the category, while the \"label\" is the human-readable\n             * string presented to a user in a user interface.\n             */\n            Node termNode = attributeMap.getNamedItem(TERM);\n            if (termNode == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            contentBuilder.append(termNode.getTextContent()).append(\" \");\n\n            Node labelNode = attributeMap.getNamedItem(LABEL);\n            if (labelNode != null)\n                contentBuilder.append(labelNode.getTextContent()).append(\" \");\n\n            Node schemeNode = attributeMap.getNamedItem(SCHEME);\n            if (schemeNode != null)\n                schemeBuilder.append(schemeNode.getTextContent());\n            node = node.getNextSibling();\n        }\n\n        this.content = contentBuilder.toString();\n        this.categoryScheme = schemeBuilder.toString();\n    }\n\n","sourceOld":"    /**\n     * @throws NotIndexableException\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(\n            Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String contentPath = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(contentPath);\n        } catch (XPathExpressionException e) {\n\n            throw new NotIndexableException(\"Can not apply path\");\n        }\n        if (node == null)\n            throw new NotIndexableException(\n                    \"Could not retrieve content for schema field: \"\n                            + this.config);\n\n        StringBuilder contentBuilder = new StringBuilder();\n        StringBuilder schemeBuilder = new StringBuilder();\n        String nodeName = node.getNodeName();\n        /*\n         * enable more than one category element -- check the node name if\n         * category strategy is used with an element not named \"category\"\n         */\n        while (node != null && nodeName != null\n                && nodeName.equals(node.getNodeName())) {\n            NamedNodeMap attributeMap = node.getAttributes();\n            if (attributeMap == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            /*\n             * the \"term\" is the internal string used by the software to\n             * identify the category, while the \"label\" is the human-readable\n             * string presented to a user in a user interface.\n             */\n            Node termNode = attributeMap.getNamedItem(TERM);\n            if (termNode == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            contentBuilder.append(termNode.getTextContent()).append(\" \");\n\n            Node labelNode = attributeMap.getNamedItem(LABEL);\n            if (labelNode != null)\n                contentBuilder.append(labelNode.getTextContent()).append(\" \");\n\n            Node schemeNode = attributeMap.getNamedItem(SCHEME);\n            if (schemeNode != null)\n                schemeBuilder.append(schemeNode.getTextContent());\n            node = node.getNextSibling();\n        }\n\n        this.content = contentBuilder.toString();\n        this.categoryScheme = schemeBuilder.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/search/analysis/GdataCategoryStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/search/analysis/GdataCategoryStrategy#processIndexable(Indexable[#-extends-Node,#-extends-ServerBaseEntry]).mjava","sourceNew":"    /**\n     * @throws NotIndexableException\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(\n            Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String contentPath = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(contentPath);\n        } catch (XPathExpressionException e) {\n\n            throw new NotIndexableException(\"Can not apply path\");\n        }\n        if (node == null)\n            throw new NotIndexableException(\n                    \"Could not retrieve content for schema field: \"\n                            + this.config);\n\n        StringBuilder contentBuilder = new StringBuilder();\n        StringBuilder schemeBuilder = new StringBuilder();\n        String nodeName = node.getNodeName();\n        /*\n         * enable more than one category element -- check the node name if\n         * category strategy is used with an element not named \"category\"\n         */\n        while (node != null && nodeName != null\n                && nodeName.equals(node.getNodeName())) {\n            NamedNodeMap attributeMap = node.getAttributes();\n            if (attributeMap == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            /*\n             * the \"term\" is the internal string used by the software to\n             * identify the category, while the \"label\" is the human-readable\n             * string presented to a user in a user interface.\n             */\n            Node termNode = attributeMap.getNamedItem(TERM);\n            if (termNode == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            contentBuilder.append(termNode.getTextContent()).append(\" \");\n\n            Node labelNode = attributeMap.getNamedItem(LABEL);\n            if (labelNode != null)\n                contentBuilder.append(labelNode.getTextContent()).append(\" \");\n\n            Node schemeNode = attributeMap.getNamedItem(SCHEME);\n            if (schemeNode != null)\n                schemeBuilder.append(schemeNode.getTextContent());\n            node = node.getNextSibling();\n        }\n\n        this.content = contentBuilder.toString();\n        this.categoryScheme = schemeBuilder.toString();\n    }\n\n","sourceOld":"    /**\n     * @throws NotIndexableException\n     * @see org.apache.lucene.gdata.search.analysis.ContentStrategy#processIndexable(org.apache.lucene.gdata.search.analysis.Indexable)\n     */\n    @Override\n    public void processIndexable(\n            Indexable<? extends Node, ? extends ServerBaseEntry> indexable)\n            throws NotIndexableException {\n        String contentPath = this.config.getPath();\n        Node node = null;\n        try {\n            node = indexable.applyPath(contentPath);\n        } catch (XPathExpressionException e) {\n\n            throw new NotIndexableException(\"Can not apply path\");\n        }\n        if (node == null)\n            throw new NotIndexableException(\n                    \"Could not retrieve content for schema field: \"\n                            + this.config);\n\n        StringBuilder contentBuilder = new StringBuilder();\n        StringBuilder schemeBuilder = new StringBuilder();\n        String nodeName = node.getNodeName();\n        /*\n         * enable more than one category element -- check the node name if\n         * category strategy is used with an element not named \"category\"\n         */\n        while (node != null && nodeName != null\n                && nodeName.equals(node.getNodeName())) {\n            NamedNodeMap attributeMap = node.getAttributes();\n            if (attributeMap == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            /*\n             * the \"term\" is the internal string used by the software to\n             * identify the category, while the \"label\" is the human-readable\n             * string presented to a user in a user interface.\n             */\n            Node termNode = attributeMap.getNamedItem(TERM);\n            if (termNode == null)\n                throw new NotIndexableException(\n                        \"category term attribute not present\");\n            contentBuilder.append(termNode.getTextContent()).append(\" \");\n\n            Node labelNode = attributeMap.getNamedItem(LABEL);\n            if (labelNode != null)\n                contentBuilder.append(labelNode.getTextContent()).append(\" \");\n\n            Node schemeNode = attributeMap.getNamedItem(SCHEME);\n            if (schemeNode != null)\n                schemeBuilder.append(schemeNode.getTextContent());\n            node = node.getNextSibling();\n        }\n\n        this.content = contentBuilder.toString();\n        this.categoryScheme = schemeBuilder.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}