{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"/dev/null","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery q=NumericRangeQuery.newLongRange(field, precisionStep, null, new Long(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(\"value\")) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery q=NumericRangeQuery.newLongRange(field, precisionStep, null, new Long(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery q=NumericRangeQuery.newLongRange(field, precisionStep, null, new Long(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(\"value\")) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery q=NumericRangeQuery.newLongRange(field, precisionStep, null, new Long(upper), true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ba19267cba8a08940edd30c894796d6e7899530","date":1267870049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c888ee2e3322649a888c466fae1c470524642e0a","date":1268478628,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testLeftOpenRange(int).mjava","sourceNew":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","sourceOld":"  private void testLeftOpenRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long upper=(count-1)*distance + (distance/3) + startOffset;\n    NumericRangeQuery<Long> q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, true, true);\n    TopDocs topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    if (VERBOSE) System.out.println(\"Found \"+q.getTotalNumberOfTerms()+\" distinct terms in left open range for field '\"+field+\"'.\");\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    Document doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n\n    q=NumericRangeQuery.newLongRange(field, precisionStep, null, upper, false, true);\n    topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n    sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", count, sd.length );\n    doc=searcher.doc(sd[0].doc);\n    assertEquals(\"First doc\", startOffset, Long.parseLong(doc.get(field)) );\n    doc=searcher.doc(sd[sd.length-1].doc);\n    assertEquals(\"Last doc\", (count-1)*distance+startOffset, Long.parseLong(doc.get(field)) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c888ee2e3322649a888c466fae1c470524642e0a":["4ba19267cba8a08940edd30c894796d6e7899530"],"65eb076d345a794256daba691a2b366657c807e8":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["65eb076d345a794256daba691a2b366657c807e8"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c888ee2e3322649a888c466fae1c470524642e0a"],"4ba19267cba8a08940edd30c894796d6e7899530":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"c888ee2e3322649a888c466fae1c470524642e0a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"65eb076d345a794256daba691a2b366657c807e8":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["65eb076d345a794256daba691a2b366657c807e8"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["4ba19267cba8a08940edd30c894796d6e7899530"],"4ba19267cba8a08940edd30c894796d6e7899530":["c888ee2e3322649a888c466fae1c470524642e0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}