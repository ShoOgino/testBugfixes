{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRef spare = new CharsRef();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      UnicodeUtil.UTF8toUTF16(text, spare);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53","da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator(null);\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":5,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Map[String,Int]],Terms,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#addTermFrequencies(Map[String,Int],Terms).mjava","sourceNew":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param field2termFreqMap a Map of terms and their frequencies per field\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Map<String, Int>> field2termFreqMap, Terms vector, String fieldName) throws IOException {\n    Map<String, Int> termFreqMap = field2termFreqMap.get(fieldName);\n    if (termFreqMap == null) {\n      termFreqMap = new HashMap<>();\n      field2termFreqMap.put(fieldName, termFreqMap);\n    }\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Adds terms and frequencies found in vector into the Map termFreqMap\n   *\n   * @param termFreqMap a Map of terms and their frequencies\n   * @param vector List of terms and their frequencies for a doc/field\n   */\n  private void addTermFrequencies(Map<String, Int> termFreqMap, Terms vector) throws IOException {\n    final TermsEnum termsEnum = vector.iterator();\n    final CharsRefBuilder spare = new CharsRefBuilder();\n    BytesRef text;\n    while((text = termsEnum.next()) != null) {\n      spare.copyUTF8Bytes(text);\n      final String term = spare.toString();\n      if (isNoiseWord(term)) {\n        continue;\n      }\n      final int freq = (int) termsEnum.totalTermFreq();\n\n      // increment frequency\n      Int cnt = termFreqMap.get(term);\n      if (cnt == null) {\n        cnt = new Int();\n        termFreqMap.put(term, cnt);\n        cnt.x = freq;\n      } else {\n        cnt.x += freq;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e562682007e295029696e354ac6947531b083c79":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e562682007e295029696e354ac6947531b083c79"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e562682007e295029696e354ac6947531b083c79"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e562682007e295029696e354ac6947531b083c79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}