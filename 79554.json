{"path":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.Iterator#read(int[]).mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/DocTermOrds.Iterator#read(int[]).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/DocTermOrds.Iterator#read(int[]).mjava","sourceNew":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","sourceOld":"    /** Buffer must be at least 5 ints long.  Returns number\n     *  of term ords placed into buffer; if this count is\n     *  less than buffer.length then that is the end. */\n    int read(int[] buffer) {\n      int bufferUpto = 0;\n      if (arr == null) {\n        // code is inlined into upto\n        //System.out.println(\"inlined\");\n        int code = upto;\n        int delta = 0;\n        for (;;) {\n          delta = (delta << 7) | (code & 0x7f);\n          if ((code & 0x80)==0) {\n            if (delta==0) break;\n            tnum += delta - TNUM_OFFSET;\n            buffer[bufferUpto++] = ordBase+tnum;\n            //System.out.println(\"  tnum=\" + tnum);\n            delta = 0;\n          }\n          code >>>= 8;\n        }\n      } else {\n        // code is a pointer\n        for(;;) {\n          int delta = 0;\n          for(;;) {\n            byte b = arr[upto++];\n            delta = (delta << 7) | (b & 0x7f);\n            //System.out.println(\"    cycle: upto=\" + upto + \" delta=\" + delta + \" b=\" + b);\n            if ((b & 0x80) == 0) break;\n          }\n          //System.out.println(\"  delta=\" + delta);\n          if (delta == 0) break;\n          tnum += delta - TNUM_OFFSET;\n          //System.out.println(\"  tnum=\" + tnum);\n          buffer[bufferUpto++] = ordBase+tnum;\n          if (bufferUpto == buffer.length) {\n            break;\n          }\n        }\n      }\n\n      return bufferUpto;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}