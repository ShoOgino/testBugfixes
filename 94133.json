{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","sourceNew":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","sourceNew":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","sourceNew":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n\n    writer.shutdown();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n    \n    IOUtils.close(writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/SessionTokenTest#testSerialization().mjava","sourceNew":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n\n    writer.close();\n    IOUtils.close(dir);\n  }\n\n","sourceOld":"  @Test\n  public void testSerialization() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    writer.addDocument(new Document());\n    writer.commit();\n    Revision rev = new IndexRevision(writer);\n    \n    SessionToken session1 = new SessionToken(\"17\", rev);\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    session1.serialize(new DataOutputStream(baos));\n    byte[] b = baos.toByteArray();\n    SessionToken session2 = new SessionToken(new DataInputStream(new ByteArrayInputStream(b)));\n    assertEquals(session1.id, session2.id);\n    assertEquals(session1.version, session2.version);\n    assertEquals(1, session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.size(), session2.sourceFiles.size());\n    assertEquals(session1.sourceFiles.keySet(), session2.sourceFiles.keySet());\n    List<RevisionFile> files1 = session1.sourceFiles.values().iterator().next();\n    List<RevisionFile> files2 = session2.sourceFiles.values().iterator().next();\n    assertEquals(files1, files2);\n\n    writer.shutdown();\n    IOUtils.close(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}