{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","commits":[{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader#FieldIndexReader(IndexInput,FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexReader(IndexInput in, FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                            long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.in = in;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        coreIndex = new CoreFieldIndex(indexStart,\n                                       termsStart,\n                                       packedIndexStart,\n                                       packedOffsetsStart,\n                                       numIndexTerms);\n      \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"/dev/null","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"/dev/null","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      // We still create the indexReader when indexDivisor\n      // is -1, so that PrefixCodedTermsReader can call\n      // isIndexTerm for each field:\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexData#FieldIndexData(FieldInfo,int,long,long,long,long).mjava","sourceNew":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","sourceOld":"    public FieldIndexData(FieldInfo fieldInfo, int numIndexTerms, long indexStart, long termsStart, long packedIndexStart,\n                          long packedOffsetsStart) throws IOException {\n\n      this.fieldInfo = fieldInfo;\n      this.termsStart = termsStart;\n      this.indexStart = indexStart;\n      this.packedIndexStart = packedIndexStart;\n      this.packedOffsetsStart = packedOffsetsStart;\n      this.numIndexTerms = numIndexTerms;\n\n      if (indexDivisor > 0) {\n        loadTermsIndex();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["56da903869515527852ee21ea7ef7bfe414cd40d"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56da903869515527852ee21ea7ef7bfe414cd40d"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","b1add9ddc0005b07550d4350720aac22dc9886b3","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0ae5e3ed1232483b7b8a014f175a5fe43595982","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}