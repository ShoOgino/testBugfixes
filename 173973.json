{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/CSVUtil#parse(String).mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/CSVUtil#parse(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse CSV line\n   * @param line line containing csv-encoded data\n   * @return Array of values\n   */\n  public static String[] parse(String line) {\n    boolean insideQuote = false;\n    ArrayList<String> result = new ArrayList<>();\n    int quoteCount = 0;\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < line.length(); i++) {\n      char c = line.charAt(i);\n      \n      if(c == QUOTE) {\n        insideQuote = !insideQuote;\n        quoteCount++;\n      }\n      \n      if(c == COMMA && !insideQuote) {\n        String value = sb.toString();\n        value = unQuoteUnEscape(value);\n        result.add(value);\n        sb.setLength(0);\n        continue;\n      }\n      \n      sb.append(c);\n    }\n    \n    result.add(sb.toString());\n    \n    // Validate\n    if(quoteCount % 2 != 0) {\n      return new String[0];\n    }\n    \n    return result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/CSVUtil#parse(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parse CSV line\n   * @param line line containing csv-encoded data\n   * @return Array of values\n   */\n  public static String[] parse(String line) {\n    boolean insideQuote = false;\n    ArrayList<String> result = new ArrayList<>();\n    int quoteCount = 0;\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < line.length(); i++) {\n      char c = line.charAt(i);\n      \n      if(c == QUOTE) {\n        insideQuote = !insideQuote;\n        quoteCount++;\n      }\n      \n      if(c == COMMA && !insideQuote) {\n        String value = sb.toString();\n        value = unQuoteUnEscape(value);\n        result.add(value);\n        sb.setLength(0);\n        continue;\n      }\n      \n      sb.append(c);\n    }\n    \n    result.add(sb.toString());\n    \n    // Validate\n    if(quoteCount % 2 != 0) {\n      return new String[0];\n    }\n    \n    return result.toArray(new String[result.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9f7831922bb899baba6064894c8ebb795cdee2","date":1566842943,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/CSVUtil#parse(String).mjava","pathOld":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/util/CSVUtil#parse(String).mjava","sourceNew":"  /**\n   * Parse CSV line\n   * @param line line containing csv-encoded data\n   * @return Array of values\n   */\n  public static String[] parse(String line) {\n    boolean insideQuote = false;\n    ArrayList<String> result = new ArrayList<>();\n    int quoteCount = 0;\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < line.length(); i++) {\n      char c = line.charAt(i);\n      \n      if(c == QUOTE) {\n        insideQuote = !insideQuote;\n        quoteCount++;\n      }\n      \n      if(c == COMMA && !insideQuote) {\n        String value = sb.toString();\n        value = unQuoteUnEscape(value);\n        result.add(value);\n        sb.setLength(0);\n        continue;\n      }\n      \n      sb.append(c);\n    }\n    \n    result.add(sb.toString());\n    \n    // Validate\n    if(quoteCount % 2 != 0) {\n      return new String[0];\n    }\n    \n    return result.toArray(new String[0]);\n  }\n\n","sourceOld":"  /**\n   * Parse CSV line\n   * @param line line containing csv-encoded data\n   * @return Array of values\n   */\n  public static String[] parse(String line) {\n    boolean insideQuote = false;\n    ArrayList<String> result = new ArrayList<>();\n    int quoteCount = 0;\n    StringBuilder sb = new StringBuilder();\n    for(int i = 0; i < line.length(); i++) {\n      char c = line.charAt(i);\n      \n      if(c == QUOTE) {\n        insideQuote = !insideQuote;\n        quoteCount++;\n      }\n      \n      if(c == COMMA && !insideQuote) {\n        String value = sb.toString();\n        value = unQuoteUnEscape(value);\n        result.add(value);\n        sb.setLength(0);\n        continue;\n      }\n      \n      sb.append(c);\n    }\n    \n    result.add(sb.toString());\n    \n    // Validate\n    if(quoteCount % 2 != 0) {\n      return new String[0];\n    }\n    \n    return result.toArray(new String[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"ac9f7831922bb899baba6064894c8ebb795cdee2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c6453827f947004a68ad9db7418781e9df2f660":["ac9f7831922bb899baba6064894c8ebb795cdee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}