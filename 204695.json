{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, byte[] bytes) {\n          String value = new String(bytes, StandardCharsets.UTF_8);\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":3,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) {\n          Objects.requireNonNull(value, \"String value should not be null\");\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, byte[] bytes) {\n          String value = new String(bytes, StandardCharsets.UTF_8);\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.hasVectors());\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["500188ac33da6ce742a5b18858f34701ef16c77a"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}