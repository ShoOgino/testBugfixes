{"path":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","pathOld":"src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffers == null) return;\n      try {\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffers == null) return;\n      try {\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aef91b05d61248dc26575ce95a28d4efd6689263","date":1285045459,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffers == null) return;\n      try {\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","sourceNew":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws IOException {\n      if (isClone || buffers == null) return;\n      try {\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b4c6c95719e3020e407649a20b68538649beeb","date":1308055822,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/MMapDirectory.MultiMMapIndexInput#close().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        for (int bufNr = 0; bufNr < buffers.length; bufNr++) {\n          // unmap the buffer (if enabled) and at least unset it for GC\n          try {\n            cleanMapping(buffers[bufNr]);\n          } finally {\n            buffers[bufNr] = null;\n          }\n        }\n      } finally {\n        buffers = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68b4c6c95719e3020e407649a20b68538649beeb":["aef91b05d61248dc26575ce95a28d4efd6689263"],"aef91b05d61248dc26575ce95a28d4efd6689263":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","aef91b05d61248dc26575ce95a28d4efd6689263"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["aef91b05d61248dc26575ce95a28d4efd6689263","68b4c6c95719e3020e407649a20b68538649beeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68b4c6c95719e3020e407649a20b68538649beeb"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68b4c6c95719e3020e407649a20b68538649beeb":["9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aef91b05d61248dc26575ce95a28d4efd6689263":["68b4c6c95719e3020e407649a20b68538649beeb","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aef91b05d61248dc26575ce95a28d4efd6689263","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ed208afa1e7aa98899ddb1dedfddedddf898253","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}