{"path":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","commits":[{"id":"cb240aebd5a347d79f642127ad9255dd9a979f06","date":1375188159,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  int get(int block, int element, long[] arr, int off, int len) {\n    if (block == valuesOff) {\n      int sysCopyToRead = Math.min(len, pendingOff - element);\n      System.arraycopy(pending, element, arr, off, sysCopyToRead);\n      return sysCopyToRead;\n    } else {\n      if (values[block] == null) {\n        int toFill = Math.min(len, pending.length - element);\n        for (int r = 0; r < toFill; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element);\n        }\n        return toFill;\n      } else {\n\n    /* packed block */\n        int read = values[block].get(element, arr, off, len);\n        for (int r = 0; r < read; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element) + zigZagDecode(arr[off]);\n        }\n        return read;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  int get(int block, int element, long[] arr, int off, int len) {\n    if (block == valuesOff) {\n      int sysCopyToRead = Math.min(len, pendingOff - element);\n      System.arraycopy(pending, element, arr, off, sysCopyToRead);\n      return sysCopyToRead;\n    } else {\n      if (values[block] == null) {\n        int toFill = Math.min(len, pending.length - element);\n        for (int r = 0; r < toFill; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element);\n        }\n        return toFill;\n      } else {\n\n    /* packed block */\n        int read = values[block].get(element, arr, off, len);\n        for (int r = 0; r < read; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element) + zigZagDecode(arr[off]);\n        }\n        return read;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","sourceNew":"  @Override\n  int get(int block, int element, long[] arr, int off, int len) {\n    if (block == valuesOff) {\n      int sysCopyToRead = Math.min(len, pendingOff - element);\n      System.arraycopy(pending, element, arr, off, sysCopyToRead);\n      return sysCopyToRead;\n    } else {\n      int read = values[block].get(element, arr, off, len);\n      for (int r = 0; r < read; r++, off++, element++) {\n        arr[off] += expected(minValues[block], averages[block], element);\n      }\n      return read;\n    }\n  }\n\n","sourceOld":"  @Override\n  int get(int block, int element, long[] arr, int off, int len) {\n    if (block == valuesOff) {\n      int sysCopyToRead = Math.min(len, pendingOff - element);\n      System.arraycopy(pending, element, arr, off, sysCopyToRead);\n      return sysCopyToRead;\n    } else {\n      if (values[block] == null) {\n        int toFill = Math.min(len, pending.length - element);\n        for (int r = 0; r < toFill; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element);\n        }\n        return toFill;\n      } else {\n\n    /* packed block */\n        int read = values[block].get(element, arr, off, len);\n        for (int r = 0; r < read; r++, off++, element++) {\n          arr[off] = minValues[block] + (long) (averages[block] * (long) element) + zigZagDecode(arr[off]);\n        }\n        return read;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/MonotonicAppendingLongBuffer#get(int,int,long[],int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  int get(int block, int element, long[] arr, int off, int len) {\n    if (block == valuesOff) {\n      int sysCopyToRead = Math.min(len, pendingOff - element);\n      System.arraycopy(pending, element, arr, off, sysCopyToRead);\n      return sysCopyToRead;\n    } else {\n      int read = values[block].get(element, arr, off, len);\n      for (int r = 0; r < read; r++, off++, element++) {\n        arr[off] += expected(minValues[block], averages[block], element);\n      }\n      return read;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["cb240aebd5a347d79f642127ad9255dd9a979f06"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["db1893644d5f20456c9524b28e826293d767db65"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"cb240aebd5a347d79f642127ad9255dd9a979f06":["db1893644d5f20456c9524b28e826293d767db65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb240aebd5a347d79f642127ad9255dd9a979f06","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}