{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Disjunctions#splitDisjunctions(IntervalsSource).mjava","commits":[{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Disjunctions#splitDisjunctions(IntervalsSource).mjava","pathOld":"/dev/null","sourceNew":"  // Separate out disjunctions into individual sources\n  // Clauses that have a minExtent of 1 are grouped together and treated as a single\n  // source, as any overlapping intervals of length 1 can be treated as identical,\n  // and we know that all combinatorial sources have a minExtent > 1\n  private static List<IntervalsSource> splitDisjunctions(IntervalsSource source) {\n    List<IntervalsSource> singletons = new ArrayList<>();\n    List<IntervalsSource> nonSingletons = new ArrayList<>();\n    for (IntervalsSource disj : source.pullUpDisjunctions()) {\n      if (disj.minExtent() == 1) {\n        singletons.add(disj);\n      }\n      else {\n        nonSingletons.add(disj);\n      }\n    }\n    List<IntervalsSource> split = new ArrayList<>();\n    if (singletons.size() > 0) {\n      split.add(Intervals.or(singletons.toArray(new IntervalsSource[0])));\n    }\n    split.addAll(nonSingletons);\n    return split;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Disjunctions#splitDisjunctions(IntervalsSource).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/Disjunctions#splitDisjunctions(IntervalsSource).mjava","sourceNew":"  // Separate out disjunctions into individual sources\n  // Clauses that have a minExtent of 1 are grouped together and treated as a single\n  // source, as any overlapping intervals of length 1 can be treated as identical,\n  // and we know that all combinatorial sources have a minExtent > 1\n  private static List<IntervalsSource> splitDisjunctions(IntervalsSource source) {\n    List<IntervalsSource> singletons = new ArrayList<>();\n    List<IntervalsSource> nonSingletons = new ArrayList<>();\n    for (IntervalsSource disj : source.pullUpDisjunctions()) {\n      if (disj.minExtent() == 1) {\n        singletons.add(disj);\n      }\n      else {\n        nonSingletons.add(disj);\n      }\n    }\n    List<IntervalsSource> split = new ArrayList<>();\n    if (singletons.size() > 0) {\n      split.add(Intervals.or(singletons.toArray(new IntervalsSource[0])));\n    }\n    split.addAll(nonSingletons);\n    return split;\n  }\n\n","sourceOld":"  // Separate out disjunctions into individual sources\n  // Clauses that have a minExtent of 1 are grouped together and treated as a single\n  // source, as any overlapping intervals of length 1 can be treated as identical,\n  // and we know that all combinatorial sources have a minExtent > 1\n  private static List<IntervalsSource> splitDisjunctions(IntervalsSource source) {\n    List<IntervalsSource> singletons = new ArrayList<>();\n    List<IntervalsSource> nonSingletons = new ArrayList<>();\n    for (IntervalsSource disj : source.pullUpDisjunctions()) {\n      if (disj.minExtent() == 1) {\n        singletons.add(disj);\n      }\n      else {\n        nonSingletons.add(disj);\n      }\n    }\n    List<IntervalsSource> split = new ArrayList<>();\n    if (singletons.size() > 0) {\n      split.add(Intervals.or(singletons.toArray(new IntervalsSource[0])));\n    }\n    split.addAll(nonSingletons);\n    return split;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}