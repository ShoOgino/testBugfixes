{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"/dev/null","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if(!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be214850f18c80408bcfafd463ec155ab0515aee","date":1423651203,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if(op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if(!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(StrUtils.formatString(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(StrUtils.formatString(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        if (!ConfigOverlay.isEditableProp(name, false, null)) {\n          op.addError(format(NOT_EDITABLE, name));\n          continue;\n        }\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5842a4edb3c2199b36886989b39d0da46b6f2e7b","date":1529637673,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#applySetProp(CommandOperation,ConfigOverlay).mjava","sourceNew":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        @SuppressWarnings({\"rawtypes\"})\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","sourceOld":"    private ConfigOverlay applySetProp(CommandOperation op, ConfigOverlay overlay) {\n      Map<String, Object> m = op.getDataMap();\n      if (op.hasError()) return overlay;\n      for (Map.Entry<String, Object> e : m.entrySet()) {\n        String name = e.getKey();\n        Object val = e.getValue();\n        Class typ = ConfigOverlay.checkEditable(name, false, null);\n        if (typ == null) {\n          op.addError(formatString(NOT_EDITABLE, name));\n          continue;\n        }\n\n        if (val != null) {\n          if (typ == String.class) val = val.toString();\n          String typeErr = \"Property {0} must be of {1} type \";\n          if (typ == Boolean.class) {\n            try {\n              val = Boolean.parseBoolean(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n          } else if (typ == Integer.class) {\n            try {\n              val = Integer.parseInt(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          } else if (typ == Float.class) {\n            try {\n              val = Float.parseFloat(val.toString());\n            } catch (Exception exp) {\n              op.addError(formatString(typeErr, name, typ.getSimpleName()));\n              continue;\n            }\n\n          }\n        }\n\n\n        overlay = overlay.setProperty(name, val);\n      }\n      return overlay;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["be214850f18c80408bcfafd463ec155ab0515aee","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["5842a4edb3c2199b36886989b39d0da46b6f2e7b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["be214850f18c80408bcfafd463ec155ab0515aee"],"be214850f18c80408bcfafd463ec155ab0515aee":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","5842a4edb3c2199b36886989b39d0da46b6f2e7b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"531fe719c7218235a679452eb3d137bfd8fc6af1":["be214850f18c80408bcfafd463ec155ab0515aee"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5842a4edb3c2199b36886989b39d0da46b6f2e7b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"be214850f18c80408bcfafd463ec155ab0515aee":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5842a4edb3c2199b36886989b39d0da46b6f2e7b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}