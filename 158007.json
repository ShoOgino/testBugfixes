{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","pathOld":"/dev/null","sourceNew":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeDate(String,Date).mjava","sourceNew":null,"sourceOld":"  public void writeDate(String name, Date val) throws IOException {\n    // using a stringBuilder for numbers can be nice since\n    // a temporary string isn't used (it's added directly to the\n    // builder's buffer.\n\n    cal.setTime(val);\n\n    sb.setLength(0);\n    int i = cal.get(Calendar.YEAR);\n    sb.append(i);\n    sb.append('-');\n    i = cal.get(Calendar.MONTH) + 1;  // 0 based, so add 1\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('-');\n    i=cal.get(Calendar.DAY_OF_MONTH);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append('T');\n    i=cal.get(Calendar.HOUR_OF_DAY); // 24 hour time format\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.MINUTE);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    sb.append(':');\n    i=cal.get(Calendar.SECOND);\n    if (i<10) sb.append('0');\n    sb.append(i);\n    i=cal.get(Calendar.MILLISECOND);\n    if (i != 0) {\n      sb.append('.');\n      if (i<100) sb.append('0');\n      if (i<10) sb.append('0');\n      sb.append(i);\n\n      // handle canonical format specifying fractional\n      // seconds shall not end in '0'.  Given the slowness of\n      // integer div/mod, simply checking the last character\n      // is probably the fastest way to check.\n      int lastIdx = sb.length()-1;\n      if (sb.charAt(lastIdx)=='0') {\n        lastIdx--;\n        if (sb.charAt(lastIdx)=='0') {\n          lastIdx--;\n        }\n        sb.setLength(lastIdx+1);\n      }\n\n    }\n    sb.append('Z');\n    writeDate(name, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}