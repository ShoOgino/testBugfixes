{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","commits":[{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","pathOld":"/dev/null","sourceNew":"  private FST.Arc<T> doSeekCeilList(final FST.Arc<T> arc, final int targetLabel) throws IOException {\n    // Arcs are not array'd -- must do linear scan:\n    if (arc.label == targetLabel) {\n      // recurse\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (arc.label > targetLabel) {\n      pushFirst();\n      return null;\n    } else if (arc.isLast()) {\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // keep scanning\n      //System.out.println(\"    next scan\");\n      fst.readNextArc(arc, fstReader);\n    }\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilList(final FST.Arc<T> arc, final int targetLabel) throws IOException {\n    // Arcs are not array'd -- must do linear scan:\n    if (arc.label() == targetLabel) {\n      // recurse\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (arc.label() > targetLabel) {\n      pushFirst();\n      return null;\n    } else if (arc.isLast()) {\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // keep scanning\n      //System.out.println(\"    next scan\");\n      fst.readNextArc(arc, fstReader);\n    }\n    return arc;\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilList(final FST.Arc<T> arc, final int targetLabel) throws IOException {\n    // Arcs are not array'd -- must do linear scan:\n    if (arc.label == targetLabel) {\n      // recurse\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (arc.label > targetLabel) {\n      pushFirst();\n      return null;\n    } else if (arc.isLast()) {\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // keep scanning\n      //System.out.println(\"    next scan\");\n      fst.readNextArc(arc, fstReader);\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekCeilList(FST.Arc[T],int).mjava","sourceNew":"  private FST.Arc<T> doSeekCeilList(final FST.Arc<T> arc, final int targetLabel) throws IOException {\n    // Arcs are not array'd -- must do linear scan:\n    if (arc.label() == targetLabel) {\n      // recurse\n      output[upto] = fst.outputs.add(output[upto-1], arc.output());\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label());\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (arc.label() > targetLabel) {\n      pushFirst();\n      return null;\n    } else if (arc.isLast()) {\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // keep scanning\n      //System.out.println(\"    next scan\");\n      fst.readNextArc(arc, fstReader);\n    }\n    return arc;\n  }\n\n","sourceOld":"  private FST.Arc<T> doSeekCeilList(final FST.Arc<T> arc, final int targetLabel) throws IOException {\n    // Arcs are not array'd -- must do linear scan:\n    if (arc.label == targetLabel) {\n      // recurse\n      output[upto] = fst.outputs.add(output[upto-1], arc.output);\n      if (targetLabel == FST.END_LABEL) {\n        return null;\n      }\n      setCurrentLabel(arc.label);\n      incr();\n      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n    } else if (arc.label > targetLabel) {\n      pushFirst();\n      return null;\n    } else if (arc.isLast()) {\n      // Dead end (target is after the last arc);\n      // rollback to last fork then push\n      upto--;\n      while(true) {\n        if (upto == 0) {\n          return null;\n        }\n        final FST.Arc<T> prevArc = getArc(upto);\n        //System.out.println(\"  rollback upto=\" + upto + \" arc.label=\" + prevArc.label + \" isLast?=\" + prevArc.isLast());\n        if (!prevArc.isLast()) {\n          fst.readNextArc(prevArc, fstReader);\n          pushFirst();\n          return null;\n        }\n        upto--;\n      }\n    } else {\n      // keep scanning\n      //System.out.println(\"    next scan\");\n      fst.readNextArc(arc, fstReader);\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["54204c8a3ca26aeafd273139fc29baf70d0f6786","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}