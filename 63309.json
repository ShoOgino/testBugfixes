{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","commits":[{"id":"432127b09840b2b70209e404d242e7029421ef0a","date":1280433941,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n  public NamedList getFacetRangeCounts()\n    throws IOException, ParseException {\n    \n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n    \n    if (null == fields || 0 == fields.length) return resOuter;\n    \n    final IndexSchema schema = searcher.getSchema();\n    for (String f : fields) {\n      parseParams(FacetParams.FACET_RANGE, f);\n      f = facetValue;\n      \n      final SchemaField sf = schema.getField(f);\n      final FieldType ft = sf.getType();\n      \n      RangeEndpointCalculator calc = null;\n\n      if (ft instanceof TrieField) {\n        final TrieField trie = (TrieField)ft;\n        \n        switch (trie.getType()) {\n        case FLOAT: \n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE: \n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER: \n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG: \n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n             \"Unable to range facet on tried field of unexpected type:\" + f);\n        }\n      } else if (ft instanceof DateField) {\n        calc = new DateRangeEndpointCalculator(sf, NOW);\n      } else if (ft instanceof SortableIntField) {\n        calc = new IntegerRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableLongField) {\n        calc = new LongRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableFloatField) {\n        calc = new FloatRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableDoubleField) {\n        calc = new DoubleRangeEndpointCalculator(sf);\n      } else {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"Unable to range facet on field:\" + sf);\n      }\n\n      resOuter.add(key, getFacetRangeCounts(sf, calc));\n    }\n    \n    return resOuter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef02613bb5b67b98ca5caf41e8d6e016a0158923","date":1283980033,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList getFacetRangeCounts() {\n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n  public NamedList getFacetRangeCounts()\n    throws IOException, ParseException {\n    \n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n    \n    if (null == fields || 0 == fields.length) return resOuter;\n    \n    final IndexSchema schema = searcher.getSchema();\n    for (String f : fields) {\n      parseParams(FacetParams.FACET_RANGE, f);\n      f = facetValue;\n      \n      final SchemaField sf = schema.getField(f);\n      final FieldType ft = sf.getType();\n      \n      RangeEndpointCalculator calc = null;\n\n      if (ft instanceof TrieField) {\n        final TrieField trie = (TrieField)ft;\n        \n        switch (trie.getType()) {\n        case FLOAT: \n          calc = new FloatRangeEndpointCalculator(sf);\n          break;\n        case DOUBLE: \n          calc = new DoubleRangeEndpointCalculator(sf);\n          break;\n        case INTEGER: \n          calc = new IntegerRangeEndpointCalculator(sf);\n          break;\n        case LONG: \n          calc = new LongRangeEndpointCalculator(sf);\n          break;\n        default:\n          throw new SolrException\n            (SolrException.ErrorCode.BAD_REQUEST,\n             \"Unable to range facet on tried field of unexpected type:\" + f);\n        }\n      } else if (ft instanceof DateField) {\n        calc = new DateRangeEndpointCalculator(sf, NOW);\n      } else if (ft instanceof SortableIntField) {\n        calc = new IntegerRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableLongField) {\n        calc = new LongRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableFloatField) {\n        calc = new FloatRangeEndpointCalculator(sf);\n      } else if (ft instanceof SortableDoubleField) {\n        calc = new DoubleRangeEndpointCalculator(sf);\n      } else {\n        throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n           \"Unable to range facet on field:\" + sf);\n      }\n\n      resOuter.add(key, getFacetRangeCounts(sf, calc));\n    }\n    \n    return resOuter;\n  }\n\n","bugFix":["432127b09840b2b70209e404d242e7029421ef0a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList getFacetRangeCounts() {\n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList getFacetRangeCounts() {\n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList getFacetRangeCounts() {\n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList getFacetRangeCounts() {\n    final NamedList resOuter = new SimpleOrderedMap();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetRangeCounts().mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet\n   * counts for each facet numerical field, range, and interval\n   * specified in the SolrParams\n   *\n   * @see FacetParams#FACET_RANGE\n   */\n\n  public NamedList<Object> getFacetRangeCounts() {\n    final NamedList<Object> resOuter = new SimpleOrderedMap<Object>();\n    final String[] fields = params.getParams(FacetParams.FACET_RANGE);\n\n    if (null == fields || 0 == fields.length) return resOuter;\n\n    for (String f : fields) {\n      try {\n        getFacetRangeCounts(f, resOuter);\n      } catch (Exception e) {\n        String msg = \"Exception during facet.range of \" + f;\n        SolrException.logOnce(SolrCore.log, msg, e);\n        addException(msg , e);\n      }\n    }\n\n    return resOuter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["432127b09840b2b70209e404d242e7029421ef0a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"c26f00b574427b55127e869b935845554afde1fa":["755f2f419306d7297c8feee10d1897addf4b2dd0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","755f2f419306d7297c8feee10d1897addf4b2dd0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["755f2f419306d7297c8feee10d1897addf4b2dd0"],"432127b09840b2b70209e404d242e7029421ef0a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["755f2f419306d7297c8feee10d1897addf4b2dd0","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["432127b09840b2b70209e404d242e7029421ef0a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"432127b09840b2b70209e404d242e7029421ef0a":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}