{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileInput(int,String,boolean,boolean).mjava","commits":[{"id":"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b","date":1384304197,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileInput(int,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private Map.Entry<List<List<String>>,String> generateFileInput(int count, String fieldDelimiter, boolean hasWeights, boolean hasPayloads) {\n    List<List<String>> entries = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    boolean hasPayload = hasPayloads;\n    for (int i = 0; i < count; i++) {\n      if (hasPayloads) {\n        hasPayload = (i==0) ? true : random().nextBoolean();\n      } \n      Map.Entry<List<String>, String> entrySet = generateFileEntry(fieldDelimiter, (!hasPayloads && hasWeights) ? random().nextBoolean() : hasWeights, hasPayload);\n      entries.add(entrySet.getKey());\n      sb.append(entrySet.getValue());\n    }\n    return new SimpleEntry<List<List<String>>, String>(entries, sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileInput(int,String,boolean,boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/FileDictionaryTest#generateFileInput(int,String,boolean,boolean).mjava","sourceNew":"  private Map.Entry<List<List<String>>,String> generateFileInput(int count, String fieldDelimiter, boolean hasWeights, boolean hasPayloads) {\n    List<List<String>> entries = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    boolean hasPayload = hasPayloads;\n    for (int i = 0; i < count; i++) {\n      if (hasPayloads) {\n        hasPayload = (i==0) ? true : random().nextBoolean();\n      } \n      Map.Entry<List<String>, String> entrySet = generateFileEntry(fieldDelimiter, (!hasPayloads && hasWeights) ? random().nextBoolean() : hasWeights, hasPayload);\n      entries.add(entrySet.getKey());\n      sb.append(entrySet.getValue());\n    }\n    return new SimpleEntry<>(entries, sb.toString());\n  }\n\n","sourceOld":"  private Map.Entry<List<List<String>>,String> generateFileInput(int count, String fieldDelimiter, boolean hasWeights, boolean hasPayloads) {\n    List<List<String>> entries = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    boolean hasPayload = hasPayloads;\n    for (int i = 0; i < count; i++) {\n      if (hasPayloads) {\n        hasPayload = (i==0) ? true : random().nextBoolean();\n      } \n      Map.Entry<List<String>, String> entrySet = generateFileEntry(fieldDelimiter, (!hasPayloads && hasWeights) ? random().nextBoolean() : hasWeights, hasPayload);\n      entries.add(entrySet.getKey());\n      sb.append(entrySet.getValue());\n    }\n    return new SimpleEntry<List<List<String>>, String>(entries, sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b"],"1ec8cb0daeb794c3ff1be45d2ed2d71ddae8e19b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}