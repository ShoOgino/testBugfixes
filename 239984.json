{"path":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c","date":1478089840,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3) => {\"a\":1,\"bar\":\"foo\",\"\":3}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3) => {\"a\":1,\"bar\":\"foo\",\"\":3}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","date":1479484655,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.\n   * null key is mapped to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3,null=null) => {\"a\":1,\"bar\":\"foo\",\"\":3,\"\":null}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3) => {\"a\":1,\"bar\":\"foo\",\"\":3}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.\n   * null key is mapped to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3,null=null) => {\"a\":1,\"bar\":\"foo\",\"\":3,\"\":null}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.  null is mapped\n   * to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3) => {\"a\":1,\"bar\":\"foo\",\"\":3}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119f84a673d2ea32c0ec18c36987696dd31aa174","date":1528551316,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":null,"sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.\n   * null key is mapped to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3,null=null) => {\"a\":1,\"bar\":\"foo\",\"\":3,\"\":null}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":null,"sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.\n   * null key is mapped to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3,null=null) => {\"a\":1,\"bar\":\"foo\",\"\":3,\"\":null}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedListAsMapWithDups(String,NamedList).mjava","sourceNew":null,"sourceOld":"  /** Represents a NamedList directly as a JSON Object (essentially a Map)\n   * repeating any keys if they are repeated in the NamedList.\n   * null key is mapped to \"\".\n   */ \n  // NamedList(\"a\"=1,\"bar\"=\"foo\",null=3,null=null) => {\"a\":1,\"bar\":\"foo\",\"\":3,\"\":null}\n  protected void writeNamedListAsMapWithDups(String name, NamedList val) throws IOException {\n    int sz = val.size();\n    writeMapOpener(sz);\n    incLevel();\n\n    for (int i=0; i<sz; i++) {\n      if (i!=0) {\n        writeMapSeparator();\n      }\n\n      String key = val.getName(i);\n      if (key==null) key=\"\";\n      indent();\n      writeKey(key, true);\n      writeVal(key,val.getVal(i));\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3":["0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","119f84a673d2ea32c0ec18c36987696dd31aa174"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["c26f00b574427b55127e869b935845554afde1fa","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["9720b151fde2073f4e401450f4574e5f31c2d0ff","7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["119f84a673d2ea32c0ec18c36987696dd31aa174"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","119f84a673d2ea32c0ec18c36987696dd31aa174"]},"commit2Childs":{"7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","119f84a673d2ea32c0ec18c36987696dd31aa174","cd70af1186a18d10a788433cc33be44327a83ce7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"119f84a673d2ea32c0ec18c36987696dd31aa174":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["9720b151fde2073f4e401450f4574e5f31c2d0ff","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["cd70af1186a18d10a788433cc33be44327a83ce7"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["7163ec3cf5e2747ac97f0485cdfa6ba222c75aa3","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd70af1186a18d10a788433cc33be44327a83ce7","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}