{"path":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29e66165c8c36fbd9967747d27b165761c55081","date":1542486027,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/legacy/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopFieldCollector collector = TopFieldCollector.create(Sort.INDEXORDER, noDocs, Integer.MAX_VALUE);\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          break;\n        default:\n          return;\n      }\n      searcher.search(q, collector);\n      TopDocs topDocs = collector.topDocs();\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<2; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);\n          topDocs = searcher.search(q, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e29e66165c8c36fbd9967747d27b165761c55081":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29e66165c8c36fbd9967747d27b165761c55081"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e29e66165c8c36fbd9967747d27b165761c55081":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["e29e66165c8c36fbd9967747d27b165761c55081"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}