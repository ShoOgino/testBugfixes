{"path":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"/dev/null","sourceNew":"  final void merge() throws IOException {\n    try {\n      mergeFields();\n      mergeTerms();\n      mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tSegmentReader reader = (SegmentReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":3,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  final void merge() throws IOException {\n    try {\n      mergeFields();\n      mergeTerms();\n      mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n        SegmentReader reader = (SegmentReader)readers.elementAt(i);\n        reader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n  }\n\n","sourceOld":"  final void merge() throws IOException {\n    try {\n      mergeFields();\n      mergeTerms();\n      mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tSegmentReader reader = (SegmentReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7fb6d70db034a5456ae560175dd1b821eea9ff4","date":1066759157,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  final int merge() throws IOException {\n    int value;\n    try {\n      mergeFields();\n      mergeTerms();\n      value = mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tIndexReader reader = (IndexReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n\n    return value;\n  }\n\n","sourceOld":"  final void merge() throws IOException {\n    try {\n      mergeFields();\n      mergeTerms();\n      mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n        SegmentReader reader = (SegmentReader)readers.elementAt(i);\n        reader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f22ffa72cdb7463ca3e818b15f8fb8b0330e7cf5","date":1067592524,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  final int merge() throws IOException {\n    int value;\n    try {\n      value = mergeFields();\n      mergeTerms();\n      mergeNorms();\n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tIndexReader reader = (IndexReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n\n    return value;\n  }\n\n","sourceOld":"  final int merge() throws IOException {\n    int value;\n    try {\n      mergeFields();\n      mergeTerms();\n      value = mergeNorms();\n      \n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tIndexReader reader = (IndexReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    try {\n      value = mergeFields();\n      mergeTerms();\n      mergeNorms();\n\n      if (fieldInfos.hasVectors())\n        mergeVectors();\n\n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n        IndexReader reader = (IndexReader) readers.elementAt(i);\n        reader.close();\n      }\n    }\n\n    if (useCompoundFile)\n      createCompoundFile();\n\n    return value;\n  }\n\n","sourceOld":"  final int merge() throws IOException {\n    int value;\n    try {\n      value = mergeFields();\n      mergeTerms();\n      mergeNorms();\n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n\tIndexReader reader = (IndexReader)readers.elementAt(i);\n\treader.close();\n      }\n    }\n    \n    if (useCompoundFile)\n        createCompoundFile();\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a7d0b384f0022c5a29e562b809ebf73991d7e6","date":1082489615,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    if (useCompoundFile)\n      createCompoundFile();\n\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    try {\n      value = mergeFields();\n      mergeTerms();\n      mergeNorms();\n\n      if (fieldInfos.hasVectors())\n        mergeVectors();\n\n    } finally {\n      for (int i = 0; i < readers.size(); i++) {  // close readers\n        IndexReader reader = (IndexReader) readers.elementAt(i);\n        reader.close();\n      }\n    }\n\n    if (useCompoundFile)\n      createCompoundFile();\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79fc67d5cdece593cd3b3b6c7ef195ee2625522c","date":1091970333,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    if (useCompoundFile)\n      createCompoundFile();\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws IOException\n   */\n  final int merge() throws IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return value;\n  }\n\n","bugFix":["e7fb6d70db034a5456ae560175dd1b821eea9ff4","770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709","date":1180597733,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    int value;\n    \n    mergedDocs = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return mergedDocs;\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    int value;\n    \n    value = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    return merge(true);\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    int value;\n    \n    mergedDocs = mergeFields();\n    mergeTerms();\n    mergeNorms();\n\n    if (fieldInfos.hasVectors())\n      mergeVectors();\n\n    return mergedDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentMerger#merge().mjava","sourceNew":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    return merge(true);\n  }\n\n","sourceOld":"  /**\n   * Merges the readers specified by the {@link #add} method into the directory passed to the constructor\n   * @return The number of documents that were merged\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  final int merge() throws CorruptIndexException, IOException {\n    return merge(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1b54a9bc667895a2095a886184bf69a3179e63df":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f22ffa72cdb7463ca3e818b15f8fb8b0330e7cf5"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f22ffa72cdb7463ca3e818b15f8fb8b0330e7cf5":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["1b54a9bc667895a2095a886184bf69a3179e63df"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e7fb6d70db034a5456ae560175dd1b821eea9ff4":["f22ffa72cdb7463ca3e818b15f8fb8b0330e7cf5"],"1b54a9bc667895a2095a886184bf69a3179e63df":["08d1ee9808e270c86ce5c9be08b8bd7a19d0a709"],"42a7d0b384f0022c5a29e562b809ebf73991d7e6":["79fc67d5cdece593cd3b3b6c7ef195ee2625522c"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["e7fb6d70db034a5456ae560175dd1b821eea9ff4"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["42a7d0b384f0022c5a29e562b809ebf73991d7e6"],"79fc67d5cdece593cd3b3b6c7ef195ee2625522c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"f22ffa72cdb7463ca3e818b15f8fb8b0330e7cf5":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"08d1ee9808e270c86ce5c9be08b8bd7a19d0a709":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}