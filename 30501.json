{"path":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","commits":[{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,SolrQueryRequest).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, SolrQueryRequest req)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    fields.add(field); // need to put in the map to maintain order for things like CSVResponseWriter\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrReturnFields#addField(String,String,DocTransformers,boolean).mjava","sourceNew":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","sourceOld":"  private void addField(String field, String key, DocTransformers augmenters, boolean isPseudoField)\n  {\n    if(reqFieldNames==null) {\n      reqFieldNames = new LinkedHashSet<String>();\n    }\n    \n    if(key==null) {\n      reqFieldNames.add(field);\n    }\n    else {\n      reqFieldNames.add(key);\n    }\n\n    if ( ! isPseudoField) {\n      // fields is returned by getLuceneFieldNames(), to be used to select which real fields\n      // to return, so pseudo-fields should not be added\n      fields.add(field);\n    }\n\n    okFieldNames.add( field );\n    okFieldNames.add( key );\n    // a valid field name\n    if(SCORE.equals(field)) {\n      _wantsScore = true;\n\n      String disp = (key==null) ? field : key;\n      augmenters.addTransformer( new ScoreAugmenter( disp ) );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}