{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertMapEqual(Map,ZkNodeProps).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertMapEqual(Map,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertMapEqual(Map expected, ZkNodeProps actual) {\n    assertEquals(errorMessage(expected, actual), expected.size(), actual.getProperties().size());\n    for (Object o : expected.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      Object actualVal = actual.get((String) e.getKey());\n      if (actualVal instanceof String[]) {\n        actualVal = Arrays.asList((String[]) actualVal);\n      }\n      assertEquals(errorMessage(expected, actual), String.valueOf(e.getValue()), String.valueOf(actualVal));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertMapEqual(Map,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertMapEqual(Map expected, ZkNodeProps actual) {\n    assertEquals(errorMessage(expected, actual), expected.size(), actual.getProperties().size());\n    for (Object o : expected.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      Object actualVal = actual.get((String) e.getKey());\n      if (actualVal instanceof String[]) {\n        actualVal = Arrays.asList((String[]) actualVal);\n      }\n      assertEquals(errorMessage(expected, actual), String.valueOf(e.getValue()), String.valueOf(actualVal));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertMapEqual(Map,ZkNodeProps).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestCollectionAPIs#assertMapEqual(Map,ZkNodeProps).mjava","sourceNew":"  private static void assertMapEqual(@SuppressWarnings({\"rawtypes\"})Map expected, ZkNodeProps actual) {\n    assertEquals(errorMessage(expected, actual), expected.size(), actual.getProperties().size());\n    for (Object o : expected.entrySet()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map.Entry e = (Map.Entry) o;\n      Object actualVal = actual.get((String) e.getKey());\n      if (actualVal instanceof String[]) {\n        actualVal = Arrays.asList((String[]) actualVal);\n      }\n      assertEquals(errorMessage(expected, actual), String.valueOf(e.getValue()), String.valueOf(actualVal));\n    }\n  }\n\n","sourceOld":"  private static void assertMapEqual(Map expected, ZkNodeProps actual) {\n    assertEquals(errorMessage(expected, actual), expected.size(), actual.getProperties().size());\n    for (Object o : expected.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      Object actualVal = actual.get((String) e.getKey());\n      if (actualVal instanceof String[]) {\n        actualVal = Arrays.asList((String[]) actualVal);\n      }\n      assertEquals(errorMessage(expected, actual), String.valueOf(e.getValue()), String.valueOf(actualVal));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"]},"commit2Childs":{"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}