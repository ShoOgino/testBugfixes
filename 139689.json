{"path":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitingCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitingCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitingCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitingCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23550189554f52bad1625fceab84a71d20a4df3f","date":1321064526,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-TimeLimitingCollector.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-TimeLimitingCollector.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector#doTestTimeout(boolean,boolean).mjava","sourceNew":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","sourceOld":"  private void doTestTimeout(boolean multiThreaded, boolean greedy) {\n    // setup\n    MyHitCollector myHc = new MyHitCollector();\n    myHc.setSlowDown(SLOW_DOWN);\n    Collector tlCollector = createTimedCollector(myHc, TIME_ALLOWED, greedy);\n\n    // search\n    TimeExceededException timoutException = null;\n    try {\n      search(tlCollector);\n    } catch (TimeExceededException x) {\n      timoutException = x;\n    } catch (Exception e) {\n      assertTrue(\"Unexpected exception: \"+e, false); //==fail\n    }\n    \n    // must get exception\n    assertNotNull( \"Timeout expected!\", timoutException );\n\n    // greediness affect last doc collected\n    int exceptionDoc = timoutException.getLastDocCollected();\n    int lastCollected = myHc.getLastDocCollected(); \n    assertTrue( \"doc collected at timeout must be > 0!\", exceptionDoc > 0 );\n    if (greedy) {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" != lastCollected=\"+lastCollected, exceptionDoc==lastCollected);\n      assertTrue(\"greedy, but no hits found!\", myHc.hitCount() > 0 );\n    } else {\n      assertTrue(\"greedy=\"+greedy+\" exceptionDoc=\"+exceptionDoc+\" not > lastCollected=\"+lastCollected, exceptionDoc>lastCollected);\n    }\n\n    // verify that elapsed time at exception is within valid limits\n    assertEquals( timoutException.getTimeAllowed(), TIME_ALLOWED);\n    // a) Not too early\n    assertTrue ( \"elapsed=\"+timoutException.getTimeElapsed()+\" <= (allowed-resolution)=\"+(TIME_ALLOWED-counterThread.getResolution()),\n        timoutException.getTimeElapsed() > TIME_ALLOWED-counterThread.getResolution());\n    // b) Not too late.\n    //    This part is problematic in a busy test system, so we just print a warning.\n    //    We already verified that a timeout occurred, we just can't be picky about how long it took.\n    if (timoutException.getTimeElapsed() > maxTime(multiThreaded)) {\n      System.out.println(\"Informative: timeout exceeded (no action required: most probably just \" +\n        \" because the test machine is slower than usual):  \" +\n        \"lastDoc=\"+exceptionDoc+\n        \" ,&& allowed=\"+timoutException.getTimeAllowed() +\n        \" ,&& elapsed=\"+timoutException.getTimeElapsed() +\n        \" >= \" + maxTimeStr(multiThreaded));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["23550189554f52bad1625fceab84a71d20a4df3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23550189554f52bad1625fceab84a71d20a4df3f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"23550189554f52bad1625fceab84a71d20a4df3f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["23550189554f52bad1625fceab84a71d20a4df3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}