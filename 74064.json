{"path":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSortableDoubleNaN().mjava","commits":[{"id":"7f1640a619bcb2540ce0703e0db764ce7327c1a5","date":1321704123,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSortableDoubleNaN().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testSortableDoubleNaN().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestNumericUtils#testSortableDoubleNaN().mjava","sourceNew":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","sourceOld":"  public void testSortableDoubleNaN() {\n    final long plusInf = NumericUtils.doubleToSortableLong(Double.POSITIVE_INFINITY);\n    for (double nan : DOUBLE_NANs) {\n      assertTrue(Double.isNaN(nan));\n      final long sortable = NumericUtils.doubleToSortableLong(nan);\n      assertTrue(\"Double not sorted correctly: \" + nan + \", long repr: \" \n          + sortable + \", positive inf.: \" + plusInf, sortable > plusInf);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}