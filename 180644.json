{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String]).mjava","commits":[{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a824e51ae7d416179b0164bf6693668d68abc0","date":1413927602,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String],byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String]).mjava","sourceNew":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions, byte[] id) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n      // read version\n      in.readInt();\n      // read segment id (except for segments_N)\n      if (id != null) {\n        byte actualID[] = new byte[StringHelper.ID_LENGTH];\n        in.readBytes(actualID, 0, actualID.length);\n        assertArrayEquals(\"expected \" + StringHelper.idToString(id) + \", got \" + StringHelper.idToString(actualID), id, actualID);\n      }\n      \n    }\n  }\n\n","sourceOld":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String],byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveCodecHeader#checkHeader(Directory,String,Map[String,String]).mjava","sourceNew":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions, byte[] id) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n      // read version\n      in.readInt();\n      // read object id\n      CodecUtil.checkIndexHeaderID(in, id);      \n    }\n  }\n\n","sourceOld":"  private void checkHeader(Directory dir, String file, Map<String,String> namesToExtensions) throws IOException {\n    try (IndexInput in = dir.openInput(file, newIOContext(random()))) {\n      int val = in.readInt();\n      assertEquals(file + \" has no codec header, instead found: \" + val, CodecUtil.CODEC_MAGIC, val);\n      String codecName = in.readString();\n      assertFalse(codecName.isEmpty());\n      String extension = IndexFileNames.getExtension(file);\n      if (extension == null) {\n        assertTrue(file.startsWith(IndexFileNames.SEGMENTS));\n        extension = \"<segments> (not a real extension, designates segments file)\";\n      }\n      String previous = namesToExtensions.put(codecName, extension);\n      if (previous != null && !previous.equals(extension)) {\n        fail(\"extensions \" + previous + \" and \" + extension + \" share same codecName \" + codecName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","a6a824e51ae7d416179b0164bf6693668d68abc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["9bb9a29a5e71a90295f175df8919802993142c9a","a6a824e51ae7d416179b0164bf6693668d68abc0"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a6a824e51ae7d416179b0164bf6693668d68abc0":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}