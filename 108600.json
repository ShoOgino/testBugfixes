{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","commits":[{"id":"35425d74dd6cebe2e074b05228429765e67d1b35","date":1425216299,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TwoPhaseIterator asTwoPhaseIterator() {    \n      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();\n      if (inner != null) {\n        // we are like a simplified conjunction here, handle the nested case:\n        return new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return inner.approximation();\n          }\n          @Override\n          public boolean matches() throws IOException {\n            // check the approximation matches first, then check bits last.\n            return inner.matches() && filterBits.get(scorer.docID());\n          }\n        };\n      } else {\n        // scorer doesnt have an approximation, just use it, to force bits applied last.\n        return new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return scorer;\n          }\n          \n          @Override\n          public boolean matches() throws IOException {\n            return filterBits.get(scorer.docID());\n          }\n        };\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","sourceNew":"    @Override\n    public TwoPhaseIterator asTwoPhaseIterator() {    \n      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();\n      if (inner != null) {\n        // we are like a simplified conjunction here, handle the nested case:\n        return new TwoPhaseIterator(inner.approximation()) {\n          @Override\n          public boolean matches() throws IOException {\n            // check the approximation matches first, then check bits last.\n            return inner.matches() && filterBits.get(scorer.docID());\n          }\n        };\n      } else {\n        // scorer doesnt have an approximation, just use it, to force bits applied last.\n        return new TwoPhaseIterator(scorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return filterBits.get(scorer.docID());\n          }\n        };\n      }\n    }\n\n","sourceOld":"    @Override\n    public TwoPhaseIterator asTwoPhaseIterator() {    \n      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();\n      if (inner != null) {\n        // we are like a simplified conjunction here, handle the nested case:\n        return new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return inner.approximation();\n          }\n          @Override\n          public boolean matches() throws IOException {\n            // check the approximation matches first, then check bits last.\n            return inner.matches() && filterBits.get(scorer.docID());\n          }\n        };\n      } else {\n        // scorer doesnt have an approximation, just use it, to force bits applied last.\n        return new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return scorer;\n          }\n          \n          @Override\n          public boolean matches() throws IOException {\n            return filterBits.get(scorer.docID());\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public TwoPhaseIterator asTwoPhaseIterator() {    \n      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();\n      if (inner != null) {\n        // we are like a simplified conjunction here, handle the nested case:\n        return new TwoPhaseIterator(inner.approximation()) {\n          @Override\n          public boolean matches() throws IOException {\n            // check the approximation matches first, then check bits last.\n            return inner.matches() && filterBits.get(scorer.docID());\n          }\n        };\n      } else {\n        // scorer doesnt have an approximation, just use it, to force bits applied last.\n        return new TwoPhaseIterator(scorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return filterBits.get(scorer.docID());\n          }\n        };\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#asTwoPhaseIterator().mjava","sourceNew":null,"sourceOld":"    @Override\n    public TwoPhaseIterator asTwoPhaseIterator() {    \n      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();\n      if (inner != null) {\n        // we are like a simplified conjunction here, handle the nested case:\n        return new TwoPhaseIterator(inner.approximation()) {\n          @Override\n          public boolean matches() throws IOException {\n            // check the approximation matches first, then check bits last.\n            return inner.matches() && filterBits.get(scorer.docID());\n          }\n        };\n      } else {\n        // scorer doesnt have an approximation, just use it, to force bits applied last.\n        return new TwoPhaseIterator(scorer) {\n          @Override\n          public boolean matches() throws IOException {\n            return filterBits.get(scorer.docID());\n          }\n        };\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a6b1be5d2b36d6a30913778ef61374103d55e33":["35425d74dd6cebe2e074b05228429765e67d1b35"],"35425d74dd6cebe2e074b05228429765e67d1b35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"1db68e96dd908fcd79ef809095822736aa601d08":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"35425d74dd6cebe2e074b05228429765e67d1b35":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35425d74dd6cebe2e074b05228429765e67d1b35","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}