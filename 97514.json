{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#copy(LightAutomaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(LightAutomaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    int offset = getNumStates();\n    /*\n    int otherNumStates = other.getNumStates();\n    for(int s=0;s<otherNumStates;s++) {\n      createState();\n      setAccept(offset+s, other.isAccept(s));\n    }\n    Transition t = new Transition();\n    for(int s=0;s<otherNumStates;s++) {\n      int count = other.initTransition(s, t);\n      for(int i=0;i<count;i++) {\n        other.getNextTransition(t);\n        addTransition(offset + s, offset + t.dest, t.min, t.max);\n      }\n    }\n    */\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0","date":1403106109,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n    }\n    nextState += other.nextState;\n    if (isAccept.length() < nextState/2) {\n      FixedBitSet newBits = new FixedBitSet(ArrayUtil.oversize(nextState/2, 1));\n      newBits.or(isAccept);\n      isAccept = newBits;\n    }\n    int otherNumStates = other.getNumStates();\n    FixedBitSet otherAcceptStates = other.getAcceptStates();\n    int state = 0;\n    while (state < otherNumStates && (state = otherAcceptStates.nextSetBit(state)) != -1) {\n      setAccept(stateOffset + state, true);\n      state++;\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n      int state = i/2;\n    }\n    nextState += other.nextState;\n\n    for(int s : other.getAcceptStates()) {\n      setAccept(stateOffset+s, true);\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6950511e8508a30eaacc2f8469121cf32be2ef6d","date":1403109868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n    }\n    nextState += other.nextState;\n    int otherNumStates = other.getNumStates();\n    BitSet otherAcceptStates = other.getAcceptStates();\n    int state = 0;\n    while (state < otherNumStates && (state = otherAcceptStates.nextSetBit(state)) != -1) {\n      setAccept(stateOffset + state, true);\n      state++;\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n    }\n    nextState += other.nextState;\n    if (isAccept.length() < nextState/2) {\n      FixedBitSet newBits = new FixedBitSet(ArrayUtil.oversize(nextState/2, 1));\n      newBits.or(isAccept);\n      isAccept = newBits;\n    }\n    int otherNumStates = other.getNumStates();\n    FixedBitSet otherAcceptStates = other.getAcceptStates();\n    int state = 0;\n    while (state < otherNumStates && (state = otherAcceptStates.nextSetBit(state)) != -1) {\n      setAccept(stateOffset + state, true);\n      state++;\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#copy(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  /** Copies over all states/transitions from other.  The states numbers\n   *  are sequentially assigned (appended). */\n  public void copy(Automaton other) {\n\n    // Bulk copy and then fixup the state pointers:\n    int stateOffset = getNumStates();\n    states = ArrayUtil.grow(states, nextState + other.nextState);\n    System.arraycopy(other.states, 0, states, nextState, other.nextState);\n    for(int i=0;i<other.nextState;i += 2) {\n      if (states[nextState+i] != -1) {\n        states[nextState+i] += nextTransition;\n      }\n    }\n    nextState += other.nextState;\n    int otherNumStates = other.getNumStates();\n    BitSet otherAcceptStates = other.getAcceptStates();\n    int state = 0;\n    while (state < otherNumStates && (state = otherAcceptStates.nextSetBit(state)) != -1) {\n      setAccept(stateOffset + state, true);\n      state++;\n    }\n\n    // Bulk copy and then fixup dest for each transition:\n    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);\n    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);\n    for(int i=0;i<other.nextTransition;i += 3) {\n      transitions[nextTransition+i] += stateOffset;\n    }\n    nextTransition += other.nextTransition;\n\n    if (other.deterministic == false) {\n      deterministic = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6950511e8508a30eaacc2f8469121cf32be2ef6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6950511e8508a30eaacc2f8469121cf32be2ef6d"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}