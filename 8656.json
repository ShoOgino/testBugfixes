{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","commits":[{"id":"233afcf63b8d53faa9a7993e911cc9873b0106d1","date":1321459183,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumcategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumcategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e26e3b5080bfb6fcabdc46d0072efe441de1a21b","date":1329396896,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumcategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumcategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":["233afcf63b8d53faa9a7993e911cc9873b0106d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/directory/TestDirectoryTaxonomyReader#doTestReadRecreatedTaxono(Random,boolean).mjava","sourceNew":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","sourceOld":"  private void doTestReadRecreatedTaxono(Random random, boolean closeReader) throws Exception {\n    Directory dir = null;\n    TaxonomyWriter tw = null;\n    TaxonomyReader tr = null;\n    \n    // prepare a few categories\n    int  n = 10;\n    CategoryPath[] cp = new CategoryPath[n];\n    for (int i=0; i<n; i++) {\n      cp[i] = new CategoryPath(\"a\", Integer.toString(i));\n    }\n    \n    try {\n      dir = newDirectory();\n      \n      tw = new DirectoryTaxonomyWriter(dir);\n      tw.addCategory(new CategoryPath(\"a\"));\n      tw.close();\n      \n      tr = new DirectoryTaxonomyReader(dir);\n      int baseNumCategories = tr.getSize();\n      \n      for (int i=0; i<n; i++) {\n        int k = random.nextInt(n);\n        tw = new DirectoryTaxonomyWriter(dir, OpenMode.CREATE);\n        for (int j=0; j<=k; j++) {\n          tw.addCategory(new CategoryPath(cp[j]));\n        }\n        tw.close();\n        if (closeReader) {\n          tr.close();\n          tr = new DirectoryTaxonomyReader(dir);\n        } else {\n          try {\n            tr.refresh();\n            fail(\"Expected InconsistentTaxonomyException\");\n          } catch (InconsistentTaxonomyException e) {\n            tr.close();\n            tr = new DirectoryTaxonomyReader(dir);\n          }\n        }\n        assertEquals(\"Wrong #categories in taxonomy (i=\"+i+\", k=\"+k+\")\", baseNumCategories + 1 + k, tr.getSize());\n      }\n    } finally {\n      IOUtils.close(tr, tw, dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e26e3b5080bfb6fcabdc46d0072efe441de1a21b":["233afcf63b8d53faa9a7993e911cc9873b0106d1"],"233afcf63b8d53faa9a7993e911cc9873b0106d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233afcf63b8d53faa9a7993e911cc9873b0106d1"],"e26e3b5080bfb6fcabdc46d0072efe441de1a21b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"233afcf63b8d53faa9a7993e911cc9873b0106d1":["e26e3b5080bfb6fcabdc46d0072efe441de1a21b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}