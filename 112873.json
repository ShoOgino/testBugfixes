{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","commits":[{"id":"58d9574cef968871d3be931d4850a274eda83049","date":1258924182,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"/dev/null","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(Version.LUCENE_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/reverse/TestReverseStringFilter#testReverseSupplementaryChar().mjava","sourceNew":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","sourceOld":"  public void testReverseSupplementaryChar() throws Exception {\n    // supplementary at end\n    char[] buffer = \"abc瀛愯䇹鍟艱𩬅\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at end - 1\n    buffer = \"abc瀛愯䇹鍟艱𩬅d\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abcd𩬅艱鍟䇹愯瀛\", new String(buffer));\n    // supplementary at start\n    buffer = \"abc𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅\", new String(buffer));\n    // supplementary at start + 1\n    buffer = \"abcd𩬅瀛愯䇹鍟艱\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 8);\n    assertEquals(\"abc艱鍟䇹愯瀛𩬅d\", new String(buffer));\n    // supplementary medial\n    buffer = \"abc瀛愯𩬅def\".toCharArray();\n    ReverseStringFilter.reverse(TEST_VERSION_CURRENT, buffer, 3, 7);\n    assertEquals(\"abcfed𩬅愯瀛\", new String(buffer));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d9574cef968871d3be931d4850a274eda83049":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["58d9574cef968871d3be931d4850a274eda83049"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"58d9574cef968871d3be931d4850a274eda83049":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d9574cef968871d3be931d4850a274eda83049"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}