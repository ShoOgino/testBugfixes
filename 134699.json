{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private void assertAutomaton(Automaton automaton) {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final BasicOperations.RandomAcceptedStrings ras = new BasicOperations.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        string = new String(codepoints, 0, codepoints.length);\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final BasicOperations.RandomAcceptedStrings ras = new BasicOperations.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final BasicOperations.RandomAcceptedStrings ras = new BasicOperations.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        string = new String(codepoints, 0, codepoints.length);\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d8f9cca4a5fc4049a99ea24253b41a88b0d234","date":1277138158,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final BasicOperations.RandomAcceptedStrings ras = new BasicOperations.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd","date":1279789681,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final BasicOperations.RandomAcceptedStrings ras = new BasicOperations.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      BytesRef bytesRef = new BytesRef(string);\n      assertEquals(cra.run(string), bra.run(bytesRef.bytes, 0, bytesRef.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    for (int i = 0; i < 1000*_TestUtil.getRandomMultiplier(); i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["2aafd88401639311b0404e67c94e829e123a0e45"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234","5f4e87790277826a2aea119328600dfb07761f32"],"d2bb5c34f7d711eb24ab0f4727e15f4ae0ef02dd":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3242a09f703274d3b9283f2064a1a33064b53a1b","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}