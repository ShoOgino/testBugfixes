{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","commits":[{"id":"9e6c873b95174ff04c895232927baa76a95925eb","date":1385054916,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    if (wait == 0) {\n      return element();\n    }\n\n    TreeMap<Long,String> orderedChildren;\n    boolean waitedEnough = false;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if(waitedEnough) {\n        if(orderedChildren.isEmpty()) return null;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(wait == Long.MAX_VALUE ?  DEFAULT_TIMEOUT: wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n        continue;\n      }\n\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    if (wait == 0) {\n      return element();\n    }\n\n    TreeMap<Long,String> orderedChildren;\n    boolean waitedEnough = false;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if(waitedEnough) {\n        if(orderedChildren.isEmpty()) return null;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(wait == Long.MAX_VALUE ?  DEFAULT_TIMEOUT: wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n        continue;\n      }\n\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      TreeMap<Long, String> orderedChildren;\n      boolean waitedEnough = false;\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n        if (waitedEnough) {\n          if (orderedChildren.isEmpty()) return null;\n        }\n        if (orderedChildren.size() == 0) {\n          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n          waitedEnough = wait != Long.MAX_VALUE;\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    if (wait == 0) {\n      return element();\n    }\n\n    TreeMap<Long,String> orderedChildren;\n    boolean waitedEnough = false;\n    while (true) {\n      LatchChildWatcher childWatcher = new LatchChildWatcher();\n      try {\n        orderedChildren = orderedChildren(childWatcher);\n      } catch (KeeperException.NoNodeException e) {\n        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n        continue;\n      }\n      if(waitedEnough) {\n        if(orderedChildren.isEmpty()) return null;\n      }\n      if (orderedChildren.size() == 0) {\n        childWatcher.await(wait == Long.MAX_VALUE ?  DEFAULT_TIMEOUT: wait);\n        waitedEnough = wait != Long.MAX_VALUE;\n        continue;\n      }\n\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ada2a0b40c19e896a9d20355e13cae9601c251c","date":1407460596,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      TreeMap<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, null);\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      TreeMap<Long, String> orderedChildren;\n      boolean waitedEnough = false;\n      while (true) {\n        LatchChildWatcher childWatcher = new LatchChildWatcher();\n        try {\n          orderedChildren = orderedChildren(childWatcher);\n        } catch (KeeperException.NoNodeException e) {\n          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);\n          continue;\n        }\n        if (waitedEnough) {\n          if (orderedChildren.isEmpty()) return null;\n        }\n        if (orderedChildren.size() == 0) {\n          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n          waitedEnough = wait != Long.MAX_VALUE;\n          continue;\n        }\n\n        for (String headNode : orderedChildren.values()) {\n          String path = dir + \"/\" + headNode;\n          try {\n            byte[] data = zookeeper.getData(path, null, null, true);\n            return new QueueEvent(path, data, childWatcher.getWatchedEvent());\n          } catch (KeeperException.NoNodeException e) {\n            // Another client deleted the node first.\n          }\n        }\n      }\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["aa7843ca6910809c5d95c44205d1b78ebee893da","aa7843ca6910809c5d95c44205d1b78ebee893da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa7843ca6910809c5d95c44205d1b78ebee893da","date":1407507547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      Map<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, null);\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      TreeMap<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, null);\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   * \n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {\n    TimerContext time = null;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    try {\n      if (wait == 0) {\n        return element();\n      }\n\n      Map<Long, String> orderedChildren = getChildren(wait);\n      for (String headNode : orderedChildren.values()) {\n        String path = dir + \"/\" + headNode;\n        try {\n          byte[] data = zookeeper.getData(path, null, null, true);\n          return new QueueEvent(path, data, null);\n        } catch (KeeperException.NoNodeException e) {\n          // Another client deleted the node first.\n        }\n      }\n      return null;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7fd147f6ec145b926803480f62aa12e2aad258e","date":1465448343,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77c9633f72998c3815ffe21baa5f16d6e50f1e4a","date":1465453043,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = notEmpty.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    TimerContext time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#peek(long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#peek(long).mjava","sourceNew":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  @Override\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the data at the first element of the queue, or null if the queue is\n   * empty after wait ms.\n   *\n   * @param wait max wait time in ms.\n   * @return data at the first element of the queue, or null.\n   */\n  public byte[] peek(long wait) throws KeeperException, InterruptedException {\n    Preconditions.checkArgument(wait > 0);\n    Timer.Context time;\n    if (wait == Long.MAX_VALUE) {\n      time = stats.time(dir + \"_peek_wait_forever\");\n    } else {\n      time = stats.time(dir + \"_peek_wait\" + wait);\n    }\n    updateLock.lockInterruptibly();\n    try {\n      long waitNanos = TimeUnit.MILLISECONDS.toNanos(wait);\n      while (waitNanos > 0) {\n        byte[] result = firstElement();\n        if (result != null) {\n          return result;\n        }\n        waitNanos = changed.awaitNanos(waitNanos);\n      }\n      return null;\n    } finally {\n      updateLock.unlock();\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["2a282020d6c9a4ea32a359539e283e4771a2fda8","f7fd147f6ec145b926803480f62aa12e2aad258e"],"9f45f67a018421da088ea39274f23ad5d339b97d":["9e6c873b95174ff04c895232927baa76a95925eb"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a282020d6c9a4ea32a359539e283e4771a2fda8","77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["9f45f67a018421da088ea39274f23ad5d339b97d"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"9e6c873b95174ff04c895232927baa76a95925eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e6c873b95174ff04c895232927baa76a95925eb"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","727bb765ff2542275f6d31f67be18d7104bae148","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"77c9633f72998c3815ffe21baa5f16d6e50f1e4a":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9f45f67a018421da088ea39274f23ad5d339b97d":["0ada2a0b40c19e896a9d20355e13cae9601c251c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"f7fd147f6ec145b926803480f62aa12e2aad258e":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"0ada2a0b40c19e896a9d20355e13cae9601c251c":["aa7843ca6910809c5d95c44205d1b78ebee893da"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"9e6c873b95174ff04c895232927baa76a95925eb":["9f45f67a018421da088ea39274f23ad5d339b97d","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"aa7843ca6910809c5d95c44205d1b78ebee893da":["2a282020d6c9a4ea32a359539e283e4771a2fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e6c873b95174ff04c895232927baa76a95925eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["77c9633f72998c3815ffe21baa5f16d6e50f1e4a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f7fd147f6ec145b926803480f62aa12e2aad258e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","6240b74b884c5587f2a4062dd27d6c32bf228889","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}