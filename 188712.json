{"path":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a multidimensional range query for big integer values indexed with {@link BigIntegerPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiBigIntegerRange(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newMultiRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for binary values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, byte[][] lowerValue, boolean[] lowerInclusive, byte[][] upperValue, boolean[] upperInclusive) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, lowerValue, lowerInclusive, upperValue, upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for big integer values indexed with {@link BigIntegerPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiBigIntegerRange(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiRangeQuery(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for big integer values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for big integer values indexed with {@link BigIntegerPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiBigIntegerRange(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":6,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/BinaryPoint#newMultiRangeQuery(String,byte[][],boolean[],byte[][],boolean[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for binary values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, byte[][] lowerValue, boolean[] lowerInclusive, byte[][] upperValue, boolean[] upperInclusive) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, lowerValue, lowerInclusive, upperValue, upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        assert value != null;\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"binary(\");\n        for (int i = 0; i < value.length; i++) {\n          if (i > 0) {\n            sb.append(' ');\n          }\n          sb.append(Integer.toHexString(value[i] & 0xFF));\n        }\n        sb.append(')');\n        return sb.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for big integer values indexed with {@link BigIntegerPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiBigIntegerRange(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiRangeQuery(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/BigIntegerPoint#newMultiBigIntegerRange(String,BigInteger[],boolean[],BigInteger[],boolean[]).mjava","sourceNew":"  /** \n   * Create a multidimensional range query for big integer values.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiRangeQuery(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","sourceOld":"  /** \n   * Create a multidimensional range query for big integer values indexed with {@link BigIntegerPoint}.\n   * <p>\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting a {@code lowerValue} element or {@code upperValue} element to {@code null}. \n   * <p>\n   * By setting a dimension's inclusive ({@code lowerInclusive} or {@code upperInclusive}) to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerValue lower portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param lowerInclusive {@code true} if the lower portion of the range is inclusive, {@code false} if it should be excluded.\n   * @param upperValue upper portion of the range. {@code null} values mean \"open\" for that dimension.\n   * @param upperInclusive {@code true} if the upper portion of the range is inclusive, {@code false} if it should be excluded.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   * @return a query matching documents within this range.\n   */\n  public static PointRangeQuery newMultiBigIntegerRange(String field, BigInteger[] lowerValue, boolean lowerInclusive[], BigInteger[] upperValue, boolean upperInclusive[]) {\n    PointRangeQuery.checkArgs(field, lowerValue, upperValue);\n    return new PointRangeQuery(field, BigIntegerPoint.encode(lowerValue), lowerInclusive, BigIntegerPoint.encode(upperValue), upperInclusive) {\n      @Override\n      protected String toString(byte[] value) {\n        return BigIntegerPoint.decodeDimension(value, 0).toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["dd4aa10c3623b9da92a555b8d04677af8fe86877"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["dd4aa10c3623b9da92a555b8d04677af8fe86877","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"dd4aa10c3623b9da92a555b8d04677af8fe86877":["d3104a6ba367dfb690806b227c5ef17c42c6107b","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}