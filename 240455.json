{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a4422b331d00607258b0ed3e43934306e67764aa","date":1513943901,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042b92cf48996255bedb0c3c4bf772d7e06e4dea","date":1534272102,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":["9c6c0dad4932399aec99b4818086cb1772773916"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["9c6c0dad4932399aec99b4818086cb1772773916"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"9c6c0dad4932399aec99b4818086cb1772773916":["a4422b331d00607258b0ed3e43934306e67764aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a4422b331d00607258b0ed3e43934306e67764aa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"]},"commit2Childs":{"042b92cf48996255bedb0c3c4bf772d7e06e4dea":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"9c6c0dad4932399aec99b4818086cb1772773916":["042b92cf48996255bedb0c3c4bf772d7e06e4dea"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"a4422b331d00607258b0ed3e43934306e67764aa":["9c6c0dad4932399aec99b4818086cb1772773916"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a4422b331d00607258b0ed3e43934306e67764aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}