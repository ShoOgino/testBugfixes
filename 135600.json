{"path":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(char,char).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.addTransition(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts a single char whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(char min, char max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.transitions.add(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/BasicAutomata#makeCharRange(int,int).mjava","sourceNew":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.addTransition(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Returns a new (deterministic) automaton that accepts a single codepoint whose\n   * value is in the given interval (including both end points).\n   */\n  public static Automaton makeCharRange(int min, int max) {\n    if (min == max) return makeChar(min);\n    Automaton a = new Automaton();\n    State s1 = new State();\n    State s2 = new State();\n    a.initial = s1;\n    s2.accept = true;\n    if (min <= max) s1.addTransition(new Transition(min, max, s2));\n    a.deterministic = true;\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}