{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7","date":1306553978,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.fragInfos.size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.fragInfos.get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.fragInfos.get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl( \"a\", \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/SimpleFragListBuilderTest#test2TermsIndex2Frags().mjava","sourceNew":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","sourceOld":"  public void test2TermsIndex2Frags() throws Exception {\n    SimpleFragListBuilder sflb = new SimpleFragListBuilder();\n    FieldFragList ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((28,29)))/1.0(22,42)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((26,27)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n\n    ffl = sflb.createFieldFragList( fpl(new TermQuery(new Term(F, \"a\")), \"a b b b b b b b b b a\" ), 20 );\n    assertEquals( 2, ffl.getFragInfos().size() );\n    assertEquals( \"subInfos=(a((0,1)))/1.0(0,20)\", ffl.getFragInfos().get( 0 ).toString() );\n    assertEquals( \"subInfos=(a((20,21)))/1.0(20,40)\", ffl.getFragInfos().get( 1 ).toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"],"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["b89678825b68eccaf09e6ab71675fc0b0af1e099","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","bfd4f46d3dc08bd6050ea2d0e583743c0177ece7","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"bfd4f46d3dc08bd6050ea2d0e583743c0177ece7":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}