{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","commits":[{"id":"1445434793334e26d7938862ae6f101e137de632","date":1376673242,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    boolean modify = false;\n    ArrayList<SortField> sorts = new ArrayList<SortField>(current.length + 1);\n    // Perhaps force it to always sort by score\n    if (force && current[0].getType() != SortField.Type.SCORE) {\n      sorts.add(new SortField(\"_elevate_\", comparator, true));\n      modify = true;\n    }\n    for (SortField sf : current) {\n      if (sf.getType() == SortField.Type.SCORE) {\n        sorts.add(new SortField(\"_elevate_\", comparator, !sf.getReverse()));\n        modify = true;\n      }\n      sorts.add(sf);\n    }\n\n    return modify ? new Sort(sorts.toArray(new SortField[sorts.size()])) : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    boolean modify = false;\n    ArrayList<SortField> sorts = new ArrayList<SortField>(current.length + 1);\n    // Perhaps force it to always sort by score\n    if (force && current[0].getType() != SortField.Type.SCORE) {\n      sorts.add(new SortField(\"_elevate_\", comparator, true));\n      modify = true;\n    }\n    for (SortField sf : current) {\n      if (sf.getType() == SortField.Type.SCORE) {\n        sorts.add(new SortField(\"_elevate_\", comparator, !sf.getReverse()));\n        modify = true;\n      }\n      sorts.add(sf);\n    }\n\n    return modify ? new Sort(sorts.toArray(new SortField[sorts.size()])) : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    boolean modify = false;\n    ArrayList<SortField> sorts = new ArrayList<SortField>(current.length + 1);\n    // Perhaps force it to always sort by score\n    if (force && current[0].getType() != SortField.Type.SCORE) {\n      sorts.add(new SortField(\"_elevate_\", comparator, true));\n      modify = true;\n    }\n    for (SortField sf : current) {\n      if (sf.getType() == SortField.Type.SCORE) {\n        sorts.add(new SortField(\"_elevate_\", comparator, !sf.getReverse()));\n        modify = true;\n      }\n      sorts.add(sf);\n    }\n\n    return modify ? new Sort(sorts.toArray(new SortField[sorts.size()])) : null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02453e8d9fe1bde22dc7676145ad809cb1dbfcad","date":1386084179,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","sourceNew":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    SortSpec tmp = new SortSpec(new Sort(current), Arrays.asList(new SchemaField[current.length]));\n    tmp = modifySortSpec(tmp, force, comparator);\n    return null == tmp ? null : tmp.getSort();\n  }\n\n","sourceOld":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    boolean modify = false;\n    ArrayList<SortField> sorts = new ArrayList<SortField>(current.length + 1);\n    // Perhaps force it to always sort by score\n    if (force && current[0].getType() != SortField.Type.SCORE) {\n      sorts.add(new SortField(\"_elevate_\", comparator, true));\n      modify = true;\n    }\n    for (SortField sf : current) {\n      if (sf.getType() == SortField.Type.SCORE) {\n        sorts.add(new SortField(\"_elevate_\", comparator, !sf.getReverse()));\n        modify = true;\n      }\n      sorts.add(sf);\n    }\n\n    return modify ? new Sort(sorts.toArray(new SortField[sorts.size()])) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","sourceNew":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    SortSpec tmp = new SortSpec(new Sort(current), Arrays.asList(new SchemaField[current.length]));\n    tmp = modifySortSpec(tmp, force, comparator);\n    return null == tmp ? null : tmp.getSort();\n  }\n\n","sourceOld":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    boolean modify = false;\n    ArrayList<SortField> sorts = new ArrayList<SortField>(current.length + 1);\n    // Perhaps force it to always sort by score\n    if (force && current[0].getType() != SortField.Type.SCORE) {\n      sorts.add(new SortField(\"_elevate_\", comparator, true));\n      modify = true;\n    }\n    for (SortField sf : current) {\n      if (sf.getType() == SortField.Type.SCORE) {\n        sorts.add(new SortField(\"_elevate_\", comparator, !sf.getReverse()));\n        modify = true;\n      }\n      sorts.add(sf);\n    }\n\n    return modify ? new Sort(sorts.toArray(new SortField[sorts.size()])) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20d97ebbd280405cebcc21d53c781bf4456453","date":1480454130,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","sourceNew":null,"sourceOld":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    SortSpec tmp = new SortSpec(new Sort(current), Arrays.asList(new SchemaField[current.length]));\n    tmp = modifySortSpec(tmp, force, comparator);\n    return null == tmp ? null : tmp.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b101c3c0e7f5871415e80d970cb3289309f3522e","date":1480511898,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","sourceNew":null,"sourceOld":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    SortSpec tmp = new SortSpec(new Sort(current), Arrays.asList(new SchemaField[current.length]));\n    tmp = modifySortSpec(tmp, force, comparator);\n    return null == tmp ? null : tmp.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#modifySort(SortField[],boolean,ElevationComparatorSource).mjava","sourceNew":null,"sourceOld":"  private Sort modifySort(SortField[] current, boolean force, ElevationComparatorSource comparator) {\n    SortSpec tmp = new SortSpec(new Sort(current), Arrays.asList(new SchemaField[current.length]));\n    tmp = modifySortSpec(tmp, force, comparator);\n    return null == tmp ? null : tmp.getSort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1445434793334e26d7938862ae6f101e137de632":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["1445434793334e26d7938862ae6f101e137de632"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","3f20d97ebbd280405cebcc21d53c781bf4456453"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1445434793334e26d7938862ae6f101e137de632"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1445434793334e26d7938862ae6f101e137de632"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f20d97ebbd280405cebcc21d53c781bf4456453":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["1445434793334e26d7938862ae6f101e137de632","02453e8d9fe1bde22dc7676145ad809cb1dbfcad"],"9856095f7afb5a607bf5e65077615ed91273508c":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","b101c3c0e7f5871415e80d970cb3289309f3522e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b101c3c0e7f5871415e80d970cb3289309f3522e"]},"commit2Childs":{"1445434793334e26d7938862ae6f101e137de632":["02453e8d9fe1bde22dc7676145ad809cb1dbfcad","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"02453e8d9fe1bde22dc7676145ad809cb1dbfcad":["b101c3c0e7f5871415e80d970cb3289309f3522e","3f20d97ebbd280405cebcc21d53c781bf4456453","74f45af4339b0daf7a95c820ab88c1aea74fbce0","9856095f7afb5a607bf5e65077615ed91273508c"],"b101c3c0e7f5871415e80d970cb3289309f3522e":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1445434793334e26d7938862ae6f101e137de632","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"3f20d97ebbd280405cebcc21d53c781bf4456453":["b101c3c0e7f5871415e80d970cb3289309f3522e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","74f45af4339b0daf7a95c820ab88c1aea74fbce0","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}