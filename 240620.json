{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e635cfcf66f9e8b914c54c24d337820e475f44a5","date":1335303739,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"044244fb346dc6965d217fce709880d0e3bc2e9f","date":1343347260,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n      } else {\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @param req\n   * @param rsp\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901a50ac0a5d082fcdd15805491ef4b2d686907a","date":1358167485,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   *\n   * @return true if a modification has resulted that requires persistance \n   *         of the CoreContainer configuration.\n   */\n  protected boolean handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n      doPersist = false; // no state change\n      return doPersist;\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<Object>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d629ca62e3b8ab6e29a127aebe213163d490413","date":1405524223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String, Exception> failures = new HashMap<>();\n    for (Map.Entry<String, CoreContainer.CoreLoadFailure> failure : coreContainer.getCoreInitFailures().entrySet()) {\n      failures.put(failure.getKey(), failure.getValue().exception);\n    }\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", failures);\n      } else {\n        failures = failures.containsKey(cname)\n          ? Collections.singletonMap(cname, failures.get(cname))\n          : Collections.<String, Exception>emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    boolean doPersist = false;\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String,Exception> allFailures = coreContainer.getCoreInitFailures();\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", allFailures);\n      } else {\n        Map failures = allFailures.containsKey(cname)\n          ? Collections.singletonMap(cname, allFailures.get(cname))\n          : Collections.emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String, Exception> failures = new HashMap<>();\n    for (Map.Entry<String, CoreContainer.CoreLoadFailure> failure : coreContainer.getCoreInitFailures().entrySet()) {\n      failures.put(failure.getKey(), failure.getValue().exception);\n    }\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", failures);\n      } else {\n        failures = failures.containsKey(cname)\n          ? Collections.singletonMap(cname, failures.get(cname))\n          : Collections.<String, Exception>emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","sourceOld":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String, Exception> failures = new HashMap<>();\n    for (Map.Entry<String, CoreContainer.CoreLoadFailure> failure : coreContainer.getCoreInitFailures().entrySet()) {\n      failures.put(failure.getKey(), failure.getValue().exception);\n    }\n    try {\n      if (cname == null) {\n        rsp.add(\"defaultCoreName\", coreContainer.getDefaultCoreName());\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", failures);\n      } else {\n        failures = failures.containsKey(cname)\n          ? Collections.singletonMap(cname, failures.get(cname))\n          : Collections.<String, Exception>emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleStatusAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Handle \"STATUS\" action\n   */\n  protected void handleStatusAction(SolrQueryRequest req, SolrQueryResponse rsp)\n          throws SolrException {\n    SolrParams params = req.getParams();\n\n    String cname = params.get(CoreAdminParams.CORE);\n    String indexInfo = params.get(CoreAdminParams.INDEX_INFO);\n    boolean isIndexInfoNeeded = Boolean.parseBoolean(null == indexInfo ? \"true\" : indexInfo);\n    NamedList<Object> status = new SimpleOrderedMap<>();\n    Map<String, Exception> failures = new HashMap<>();\n    for (Map.Entry<String, CoreContainer.CoreLoadFailure> failure : coreContainer.getCoreInitFailures().entrySet()) {\n      failures.put(failure.getKey(), failure.getValue().exception);\n    }\n    try {\n      if (cname == null) {\n        for (String name : coreContainer.getAllCoreNames()) {\n          status.add(name, getCoreStatus(coreContainer, name, isIndexInfoNeeded));\n        }\n        rsp.add(\"initFailures\", failures);\n      } else {\n        failures = failures.containsKey(cname)\n          ? Collections.singletonMap(cname, failures.get(cname))\n          : Collections.<String, Exception>emptyMap();\n        rsp.add(\"initFailures\", failures);\n        status.add(cname, getCoreStatus(coreContainer, cname, isIndexInfoNeeded));\n      }\n      rsp.add(\"status\", status);\n    } catch (Exception ex) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Error handling 'status' action \", ex);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["044244fb346dc6965d217fce709880d0e3bc2e9f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a837c064b67fa63a9394136e31218b908cdcf783","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","901a50ac0a5d082fcdd15805491ef4b2d686907a"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"fa0876236f0bd8be403747120d248bdd42b75a96":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["e635cfcf66f9e8b914c54c24d337820e475f44a5"],"901a50ac0a5d082fcdd15805491ef4b2d686907a":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e635cfcf66f9e8b914c54c24d337820e475f44a5","044244fb346dc6965d217fce709880d0e3bc2e9f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e635cfcf66f9e8b914c54c24d337820e475f44a5","044244fb346dc6965d217fce709880d0e3bc2e9f"],"2d629ca62e3b8ab6e29a127aebe213163d490413":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["901a50ac0a5d082fcdd15805491ef4b2d686907a"],"e635cfcf66f9e8b914c54c24d337820e475f44a5":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["8917bfede3b4ca30f4305c1e391e9218959cd723","901a50ac0a5d082fcdd15805491ef4b2d686907a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d629ca62e3b8ab6e29a127aebe213163d490413"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["e635cfcf66f9e8b914c54c24d337820e475f44a5"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["fa0876236f0bd8be403747120d248bdd42b75a96"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"044244fb346dc6965d217fce709880d0e3bc2e9f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"901a50ac0a5d082fcdd15805491ef4b2d686907a":["8917bfede3b4ca30f4305c1e391e9218959cd723","a837c064b67fa63a9394136e31218b908cdcf783"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2d629ca62e3b8ab6e29a127aebe213163d490413":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a837c064b67fa63a9394136e31218b908cdcf783":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"e635cfcf66f9e8b914c54c24d337820e475f44a5":["044244fb346dc6965d217fce709880d0e3bc2e9f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}