{"path":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","commits":[{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n        if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n          // recurse into CFS\n          try (CompoundFileDirectory cfsDir = new CompoundFileDirectory(si.info.getId(), dir, file, newIOContext(random()), false)) {\n            for (String cfsFile : cfsDir.listAll()) {\n              checkFooter(cfsDir, cfsFile);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","sourceNew":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n        if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {\n          // recurse into CFS\n          try (CompoundFileDirectory cfsDir = new CompoundFileDirectory(si.info.getId(), dir, file, newIOContext(random()), false)) {\n            for (String cfsFile : cfsDir.listAll()) {\n              checkFooter(cfsDir, cfsFile);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","sourceNew":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAllFilesHaveChecksumFooter#checkFooters(Directory).mjava","sourceNew":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = SegmentInfos.readLatestCommit(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkFooters(Directory dir) throws IOException {\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(dir);\n    checkFooter(dir, sis.getSegmentsFileName());\n    \n    for (SegmentCommitInfo si : sis) {\n      for (String file : si.files()) {\n        checkFooter(dir, file);\n      }\n      if (si.info.getUseCompoundFile()) {\n        try (Directory cfsDir = si.info.getCodec().compoundFormat().getCompoundReader(dir, si.info, newIOContext(random()))) {\n          for (String cfsFile : cfsDir.listAll()) {\n            checkFooter(cfsDir, cfsFile);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["989d940c4bf402188f4f0ae13736836885227383"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a","3384e6013a93e4d11b7d75388693f8d0388602bf"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}