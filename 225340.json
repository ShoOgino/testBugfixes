{"path":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","commits":[{"id":"a760e2135dfe20a04dea360873d4de1c6a0280bb","date":1430762855,"type":1,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#getCoreByCollection(CoreContainer,String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(CoreContainer cores, String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String,Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Entry<String,Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Entry<String,Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(cores, leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n      \n      // check everyone then\n      Map<String,Replica> shards = entry.getValue().getReplicasMap();\n      Set<Entry<String,Replica>> shardEntries = shards.entrySet();\n      for (Entry<String,Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(cores, zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String collection) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        if (leaderProps != null) {\n          core = checkProps(leaderProps);\n        }\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String corename) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(corename);\n    if (slices == null) {\n      return null;\n    }\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n    done:\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      ZkNodeProps leaderProps = clusterState.getLeader(corename, entry.getKey());\n      if (leaderProps != null) {\n        core = checkProps(leaderProps);\n      }\n      if (core != null) {\n        break done;\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        core = checkProps(zkProps);\n        if (core != null) {\n          break done;\n        }\n      }\n    }\n    return core;\n  }\n\n","bugFix":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"bugIntro":["a167ef75cf45162d7d0e6f57353a106f4f1539eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a167ef75cf45162d7d0e6f57353a106f4f1539eb","date":1447085840,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String collection) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String collection) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        if (leaderProps != null) {\n          core = checkProps(leaderProps);\n        }\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String collectionName) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n    Map<String, Slice> slices = collection.getActiveSlicesMap();\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = collection.getLeader(entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String collection) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":"  private SolrCore getCoreByCollection(String collectionName) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n    Map<String, Slice> slices = collection.getActiveSlicesMap();\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = collection.getLeader(entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  private SolrCore getCoreByCollection(String collection) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, Slice> slices = clusterState.getActiveSlicesMap(collection);\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = clusterState.getLeader(collection, entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08e881a61d5dffc3a403f2892fb747aca86bab0c","date":1479199723,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":null,"sourceOld":"  private SolrCore getCoreByCollection(String collectionName) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n    Map<String, Slice> slices = collection.getActiveSlicesMap();\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = collection.getLeader(entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/HttpSolrCall#getCoreByCollection(String).mjava","sourceNew":null,"sourceOld":"  private SolrCore getCoreByCollection(String collectionName) {\n    ZkStateReader zkStateReader = cores.getZkController().getZkStateReader();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection collection = clusterState.getCollectionOrNull(collectionName);\n    if (collection == null) {\n      return null;\n    }\n    Map<String, Slice> slices = collection.getActiveSlicesMap();\n    if (slices == null) {\n      return null;\n    }\n    Set<String> liveNodes = clusterState.getLiveNodes();\n    // look for a core on this node\n    Set<Map.Entry<String, Slice>> entries = slices.entrySet();\n    SolrCore core = null;\n\n    //Hitting the leaders is useful when it's an update request.\n    //For queries it doesn't matter and hence we don't distinguish here.\n    for (Map.Entry<String, Slice> entry : entries) {\n      // first see if we have the leader\n      Replica leaderProps = collection.getLeader(entry.getKey());\n      if (leaderProps != null && liveNodes.contains(leaderProps.getNodeName()) && leaderProps.getState() == Replica.State.ACTIVE) {\n        core = checkProps(leaderProps);\n        if (core != null) {\n          return core;\n        }\n      }\n\n      // check everyone then\n      Map<String, Replica> shards = entry.getValue().getReplicasMap();\n      Set<Map.Entry<String, Replica>> shardEntries = shards.entrySet();\n      for (Map.Entry<String, Replica> shardEntry : shardEntries) {\n        Replica zkProps = shardEntry.getValue();\n        if (liveNodes.contains(zkProps.getNodeName()) && zkProps.getState() == Replica.State.ACTIVE) {\n          core = checkProps(zkProps);\n          if (core != null) {\n            return core;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a167ef75cf45162d7d0e6f57353a106f4f1539eb":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"08e881a61d5dffc3a403f2892fb747aca86bab0c":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","08e881a61d5dffc3a403f2892fb747aca86bab0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["a167ef75cf45162d7d0e6f57353a106f4f1539eb","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["a167ef75cf45162d7d0e6f57353a106f4f1539eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08e881a61d5dffc3a403f2892fb747aca86bab0c"]},"commit2Childs":{"a167ef75cf45162d7d0e6f57353a106f4f1539eb":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"08e881a61d5dffc3a403f2892fb747aca86bab0c":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["08e881a61d5dffc3a403f2892fb747aca86bab0c","21019aa828c8c9b0153877543a8b3f200bf2ca19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a760e2135dfe20a04dea360873d4de1c6a0280bb"],"a760e2135dfe20a04dea360873d4de1c6a0280bb":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["a167ef75cf45162d7d0e6f57353a106f4f1539eb"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}