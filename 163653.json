{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","commits":[{"id":"b354f9ab8013d7a8ec8c652cef5f86f635c8443b","date":1460558006,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","pathOld":"/dev/null","sourceNew":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, tiny);\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bc0f1175d994495cbd5763445c91c22f543d8687"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ea9249ab9a9f76eb4132ceb4631d15315721f6a","date":1460578553,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","pathOld":"/dev/null","sourceNew":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, tiny);\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc0f1175d994495cbd5763445c91c22f543d8687","date":1461352263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","sourceNew":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, LatLonTree.build(tiny));\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","sourceOld":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, tiny);\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","bugFix":["b354f9ab8013d7a8ec8c652cef5f86f635c8443b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","sourceNew":null,"sourceOld":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, LatLonTree.build(tiny));\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonGrid#testTinyGrids().mjava","sourceNew":null,"sourceOld":"  /** create ever-increasing grids and check that too-small polygons don't blow it up */\n  public void testTinyGrids() {\n    double ZERO = decodeLatitude(0);\n    double ONE = decodeLatitude(1);\n    Polygon tiny = new Polygon(new double[] { ZERO, ZERO, ONE, ONE, ZERO }, new double[] { ZERO, ONE, ONE, ZERO, ZERO });\n    for (int max = 1; max < 500000; max++) {\n      LatLonGrid grid = new LatLonGrid(0, max, 0, max, tiny);\n      assertEquals(tiny.contains(decodeLatitude(max), decodeLongitude(max)), grid.contains(max, max));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc0f1175d994495cbd5763445c91c22f543d8687":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b354f9ab8013d7a8ec8c652cef5f86f635c8443b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a","925fce43f3bac029d912b9b7de03c789e258a333"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["bc0f1175d994495cbd5763445c91c22f543d8687"]},"commit2Childs":{"b354f9ab8013d7a8ec8c652cef5f86f635c8443b":["9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"bc0f1175d994495cbd5763445c91c22f543d8687":["925fce43f3bac029d912b9b7de03c789e258a333"],"9ea9249ab9a9f76eb4132ceb4631d15315721f6a":["bc0f1175d994495cbd5763445c91c22f543d8687","f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b354f9ab8013d7a8ec8c652cef5f86f635c8443b","9ea9249ab9a9f76eb4132ceb4631d15315721f6a"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}