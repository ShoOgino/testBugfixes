{"path":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(SolrConfig).mjava","commits":[{"id":"8ef8e4fae9bcd156a117f5758819aeabdae3e963","date":1593674028,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(SolrConfig).mjava","pathOld":"/dev/null","sourceNew":"  public MemoryCircuitBreaker(SolrConfig solrConfig) {\n    super(solrConfig);\n\n    long currentMaxHeap = MEMORY_MX_BEAN.getHeapMemoryUsage().getMax();\n\n    if (currentMaxHeap <= 0) {\n      throw new IllegalArgumentException(\"Invalid JVM state for the max heap usage\");\n    }\n\n    int thresholdValueInPercentage = solrConfig.memoryCircuitBreakerThresholdPct;\n    double thresholdInFraction = thresholdValueInPercentage / (double) 100;\n    heapMemoryThreshold = (long) (currentMaxHeap * thresholdInFraction);\n\n    if (heapMemoryThreshold <= 0) {\n      throw new IllegalStateException(\"Memory limit cannot be less than or equal to zero\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(SolrConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(SolrConfig).mjava","sourceNew":"  public MemoryCircuitBreaker(SolrConfig solrConfig) {\n    super(solrConfig);\n\n    this.enabled = solrConfig.memCBEnabled;\n\n    long currentMaxHeap = MEMORY_MX_BEAN.getHeapMemoryUsage().getMax();\n\n    if (currentMaxHeap <= 0) {\n      throw new IllegalArgumentException(\"Invalid JVM state for the max heap usage\");\n    }\n\n    int thresholdValueInPercentage = solrConfig.memCBThreshold;\n    double thresholdInFraction = thresholdValueInPercentage / (double) 100;\n    heapMemoryThreshold = (long) (currentMaxHeap * thresholdInFraction);\n\n    if (heapMemoryThreshold <= 0) {\n      throw new IllegalStateException(\"Memory limit cannot be less than or equal to zero\");\n    }\n  }\n\n","sourceOld":"  public MemoryCircuitBreaker(SolrConfig solrConfig) {\n    super(solrConfig);\n\n    long currentMaxHeap = MEMORY_MX_BEAN.getHeapMemoryUsage().getMax();\n\n    if (currentMaxHeap <= 0) {\n      throw new IllegalArgumentException(\"Invalid JVM state for the max heap usage\");\n    }\n\n    int thresholdValueInPercentage = solrConfig.memoryCircuitBreakerThresholdPct;\n    double thresholdInFraction = thresholdValueInPercentage / (double) 100;\n    heapMemoryThreshold = (long) (currentMaxHeap * thresholdInFraction);\n\n    if (heapMemoryThreshold <= 0) {\n      throw new IllegalStateException(\"Memory limit cannot be less than or equal to zero\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ef286034ca1be064a363aaec38e34e64a59154c","date":1598517382,"type":5,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(CircuitBreakerConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#MemoryCircuitBreaker(SolrConfig).mjava","sourceNew":"  public MemoryCircuitBreaker(CircuitBreakerConfig config) {\n    super(config);\n\n    this.enabled = config.getMemCBEnabled();\n\n    long currentMaxHeap = MEMORY_MX_BEAN.getHeapMemoryUsage().getMax();\n\n    if (currentMaxHeap <= 0) {\n      throw new IllegalArgumentException(\"Invalid JVM state for the max heap usage\");\n    }\n\n    int thresholdValueInPercentage = config.getMemCBThreshold();\n    double thresholdInFraction = thresholdValueInPercentage / (double) 100;\n    heapMemoryThreshold = (long) (currentMaxHeap * thresholdInFraction);\n\n    if (heapMemoryThreshold <= 0) {\n      throw new IllegalStateException(\"Memory limit cannot be less than or equal to zero\");\n    }\n  }\n\n","sourceOld":"  public MemoryCircuitBreaker(SolrConfig solrConfig) {\n    super(solrConfig);\n\n    this.enabled = solrConfig.memCBEnabled;\n\n    long currentMaxHeap = MEMORY_MX_BEAN.getHeapMemoryUsage().getMax();\n\n    if (currentMaxHeap <= 0) {\n      throw new IllegalArgumentException(\"Invalid JVM state for the max heap usage\");\n    }\n\n    int thresholdValueInPercentage = solrConfig.memCBThreshold;\n    double thresholdInFraction = thresholdValueInPercentage / (double) 100;\n    heapMemoryThreshold = (long) (currentMaxHeap * thresholdInFraction);\n\n    if (heapMemoryThreshold <= 0) {\n      throw new IllegalStateException(\"Memory limit cannot be less than or equal to zero\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ef286034ca1be064a363aaec38e34e64a59154c":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ef286034ca1be064a363aaec38e34e64a59154c"],"a761febaf4b3c09d4490395eb90617263016fc2a":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"]},"commit2Childs":{"0ef286034ca1be064a363aaec38e34e64a59154c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a761febaf4b3c09d4490395eb90617263016fc2a":["0ef286034ca1be064a363aaec38e34e64a59154c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}