{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","ee31282189f924712ed9ad83e3073e0c207a1a53"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec81a59b3b8e480b084a4bfab0d55b2519b271ae","date":1394870972,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      if (replica.startsWith(\"http://\")) replica = replica.substring(7);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              e.printStackTrace();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee31282189f924712ed9ad83e3073e0c207a1a53","date":1427223880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if(r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if(r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if(counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request: \" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n            \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreAdminAsyncCallToComplete(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#waitForCoreAdminAsyncCallToComplete(String,String).mjava","sourceNew":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","sourceOld":"  private NamedList waitForCoreAdminAsyncCallToComplete(String nodeName, String requestId) {\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTSTATUS.toString());\n    params.set(CoreAdminParams.REQUESTID, requestId);\n    int counter = 0;\n    ShardRequest sreq;\n    do {\n      sreq = new ShardRequest();\n      params.set(\"qt\", adminPath);\n      sreq.purpose = 1;\n      String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n      sreq.shards = new String[] {replica};\n      sreq.actualShards = sreq.shards;\n      sreq.params = params;\n\n      shardHandler.submit(sreq, replica, sreq.params);\n\n      ShardResponse srsp;\n      do {\n        srsp = shardHandler.takeCompletedOrError();\n        if (srsp != null) {\n          NamedList results = new NamedList();\n          processResponse(results, srsp);\n          String r = (String) srsp.getSolrResponse().getResponse().get(\"STATUS\");\n          if (r.equals(\"running\")) {\n            log.debug(\"The task is still RUNNING, continuing to wait.\");\n            try {\n              Thread.sleep(1000);\n            } catch (InterruptedException e) {\n              Thread.currentThread().interrupt();\n            }\n            continue;\n\n          } else if (r.equals(\"completed\")) {\n            log.debug(\"The task is COMPLETED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"failed\")) {\n            // TODO: Improve this. Get more information.\n            log.debug(\"The task is FAILED, returning\");\n            return srsp.getSolrResponse().getResponse();\n          } else if (r.equals(\"notfound\")) {\n            log.debug(\"The task is notfound, retry\");\n            if (counter++ < 5) {\n              try {\n                Thread.sleep(1000);\n              } catch (InterruptedException e) {\n              }\n              break;\n            }\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request for requestId: \" + requestId + \"\" + srsp.getSolrResponse().getResponse().get(\"STATUS\") +\n                \"retried \" + counter + \"times\");\n          } else {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid status request \" + srsp.getSolrResponse().getResponse().get(\"STATUS\"));\n          }\n        }\n      } while (srsp != null);\n    } while(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["ee31282189f924712ed9ad83e3073e0c207a1a53"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6f26f74e4969851a019d28f10315cb1c77786f22","ee31282189f924712ed9ad83e3073e0c207a1a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee31282189f924712ed9ad83e3073e0c207a1a53":["6f26f74e4969851a019d28f10315cb1c77786f22"],"ec81a59b3b8e480b084a4bfab0d55b2519b271ae":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7605579001505896d48b07160075a5c8b8e128e":["ec81a59b3b8e480b084a4bfab0d55b2519b271ae","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["ec81a59b3b8e480b084a4bfab0d55b2519b271ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"ee31282189f924712ed9ad83e3073e0c207a1a53":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ec81a59b3b8e480b084a4bfab0d55b2519b271ae":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["ec81a59b3b8e480b084a4bfab0d55b2519b271ae"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ee31282189f924712ed9ad83e3073e0c207a1a53","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}