{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for \" + workingDir + \", execution will continue\");\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for \" + workingDir + \", execution will continue\");\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for {}, execution will continue\", workingDir);\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","sourceOld":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for \" + workingDir + \", execution will continue\");\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06eb5f96c63fb4bd8b194a33fd050326145d5070","date":1595538555,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#createJarWithClassPath(String,Path,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap<>(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for {}, execution will continue\", workingDir);\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","sourceOld":"  /**\n   * Create a jar file at the given path, containing a manifest with a classpath\n   * that references all specified entries.\n   *\n   * Some platforms may have an upper limit on command line length.  For example,\n   * the maximum command line length on Windows is 8191 characters, but the\n   * length of the classpath may exceed this.  To work around this limitation,\n   * use this method to create a small intermediate jar with a manifest that\n   * contains the full classpath.  It returns the absolute path to the new jar,\n   * which the caller may set as the classpath for a new process.\n   *\n   * Environment variable evaluation is not supported within a jar manifest, so\n   * this method expands environment variables before inserting classpath entries\n   * to the manifest.  The method parses environment variables according to\n   * platform-specific syntax (%VAR% on Windows, or $VAR otherwise).  On Windows,\n   * environment variables are case-insensitive.  For example, %VAR% and %var%\n   * evaluate to the same value.\n   *\n   * Specifying the classpath in a jar manifest does not support wildcards, so\n   * this method expands wildcards internally.  Any classpath entry that ends\n   * with * is translated to all files at that path with extension .jar or .JAR.\n   *\n   * @param inputClassPath String input classpath to bundle into the jar manifest\n   * @param pwd Path to working directory to save jar\n   * @param targetDir path to where the jar execution will have its working dir\n   * @param callerEnv Map&lt;String, String&gt; caller's environment variables to use\n   *   for expansion\n   * @return String[] with absolute path to new jar in position 0 and\n   *   unexpanded wild card entry path in position 1\n   * @throws IOException if there is an I/O error while writing the jar file\n   */\n  public static String[] createJarWithClassPath(String inputClassPath, Path pwd,\n                                                Path targetDir,\n                                                Map<String, String> callerEnv) throws IOException {\n    // Replace environment variables, case-insensitive on Windows\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> env = Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) :\n        callerEnv;\n    String[] classPathEntries = inputClassPath.split(File.pathSeparator);\n    for (int i = 0; i < classPathEntries.length; ++i) {\n      classPathEntries[i] = StringUtils.replaceTokens(classPathEntries[i],\n          StringUtils.ENV_VAR_PATTERN, env);\n    }\n    File workingDir = new File(pwd.toString());\n    if (!workingDir.mkdirs()) {\n      // If mkdirs returns false because the working directory already exists,\n      // then this is acceptable.  If it returns false due to some other I/O\n      // error, then this method will fail later with an IOException while saving\n      // the jar.\n      LOG.debug(\"mkdirs false for {}, execution will continue\", workingDir);\n    }\n\n    StringBuilder unexpandedWildcardClasspath = new StringBuilder();\n    // Append all entries\n    List<String> classPathEntryList = new ArrayList<String>(\n        classPathEntries.length);\n    for (String classPathEntry: classPathEntries) {\n      if (classPathEntry.length() == 0) {\n        continue;\n      }\n      if (classPathEntry.endsWith(\"*\")) {\n        // Append all jars that match the wildcard\n        List<Path> jars = getJarsInDirectory(classPathEntry);\n        if (!jars.isEmpty()) {\n          for (Path jar: jars) {\n            classPathEntryList.add(jar.toUri().toURL().toExternalForm());\n          }\n        } else {\n          unexpandedWildcardClasspath.append(File.pathSeparator);\n          unexpandedWildcardClasspath.append(classPathEntry);\n        }\n      } else {\n        // Append just this entry\n        File fileCpEntry = null;\n        if(!new Path(classPathEntry).isAbsolute()) {\n          fileCpEntry = new File(targetDir.toString(), classPathEntry);\n        }\n        else {\n          fileCpEntry = new File(classPathEntry);\n        }\n        String classPathEntryUrl = fileCpEntry.toURI().toURL()\n            .toExternalForm();\n\n        // File.toURI only appends trailing '/' if it can determine that it is a\n        // directory that already exists.  (See JavaDocs.)  If this entry had a\n        // trailing '/' specified by the caller, then guarantee that the\n        // classpath entry in the manifest has a trailing '/', and thus refers to\n        // a directory instead of a file.  This can happen if the caller is\n        // creating a classpath jar referencing a directory that hasn't been\n        // created yet, but will definitely be created before running.\n        if (classPathEntry.endsWith(Path.SEPARATOR) &&\n            !classPathEntryUrl.endsWith(Path.SEPARATOR)) {\n          classPathEntryUrl = classPathEntryUrl + Path.SEPARATOR;\n        }\n        classPathEntryList.add(classPathEntryUrl);\n      }\n    }\n    String jarClassPath = StringUtils.join(\" \", classPathEntryList);\n\n    // Create the manifest\n    Manifest jarManifest = new Manifest();\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.MANIFEST_VERSION.toString(), \"1.0\");\n    jarManifest.getMainAttributes().putValue(\n        Attributes.Name.CLASS_PATH.toString(), jarClassPath);\n\n    // Write the manifest to output JAR file\n    File classPathJar = File.createTempFile(\"classpath-\", \".jar\", workingDir);\n    try (FileOutputStream fos = new FileOutputStream(classPathJar);\n         BufferedOutputStream bos = new BufferedOutputStream(fos)) {\n      JarOutputStream jos = new JarOutputStream(bos, jarManifest);\n      jos.close();\n    }\n    String[] jarCp = {classPathJar.getCanonicalPath(),\n        unexpandedWildcardClasspath.toString()};\n    return jarCp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06eb5f96c63fb4bd8b194a33fd050326145d5070"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"06eb5f96c63fb4bd8b194a33fd050326145d5070":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["06eb5f96c63fb4bd8b194a33fd050326145d5070"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}