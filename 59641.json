{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"/dev/null","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500*_TestUtil.getRandomMultiplier(); i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500*_TestUtil.getRandomMultiplier(); i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      for (int i = 0; i < 500*_TestUtil.getRandomMultiplier(); i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41916511eb7a0aa94cb9b000074ea466e14296b7","date":1288064272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(AutomatonTestUtil.randomRegexp(random).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = 500 * RANDOM_MULTIPLIER;\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["2aafd88401639311b0404e67c94e829e123a0e45"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["41916511eb7a0aa94cb9b000074ea466e14296b7","0762b640e0d0d12b6edb96db68986e13145c3484"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["2aafd88401639311b0404e67c94e829e123a0e45","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"0762b640e0d0d12b6edb96db68986e13145c3484":["41916511eb7a0aa94cb9b000074ea466e14296b7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0762b640e0d0d12b6edb96db68986e13145c3484"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","41916511eb7a0aa94cb9b000074ea466e14296b7"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","41916511eb7a0aa94cb9b000074ea466e14296b7"],"41916511eb7a0aa94cb9b000074ea466e14296b7":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["b12d3e81e0f95a4527b5703953c503f71120ffcc","0762b640e0d0d12b6edb96db68986e13145c3484"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","b12d3e81e0f95a4527b5703953c503f71120ffcc","41916511eb7a0aa94cb9b000074ea466e14296b7"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"2aafd88401639311b0404e67c94e829e123a0e45":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"41916511eb7a0aa94cb9b000074ea466e14296b7":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}