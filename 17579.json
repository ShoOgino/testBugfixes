{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","commits":[{"id":"014c3fc2ef9621f91a3786f1055913d8fa10d0df","date":1492893542,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      Map map = new HashMap();\n      map.put(name, list);\n      tuple = new Tuple(map);\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      Map map = new HashMap();\n      map.put(name, list);\n      tuple = new Tuple(map);\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      tuple = new Tuple();\n      tuple.put(name, list);\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      Map map = new HashMap();\n      map.put(name, list);\n      tuple = new Tuple(map);\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CellStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList<>();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      tuple = new Tuple();\n      tuple.put(name, list);\n    } finally {\n      stream.close();\n    }\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    try {\n      stream.open();\n      List<Tuple> list = new ArrayList();\n      while(true) {\n        Tuple tuple = stream.read();\n        if(tuple.EOF) {\n          EOFTuple = tuple;\n          break;\n        } else {\n          list.add(tuple);\n        }\n      }\n\n      tuple = new Tuple();\n      tuple.put(name, list);\n    } finally {\n      stream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","014c3fc2ef9621f91a3786f1055913d8fa10d0df"],"014c3fc2ef9621f91a3786f1055913d8fa10d0df":["e9017cf144952056066919f1ebc7897ff9bd71b1","804a8d5358fe7b7563b85ee7838714d720b89272"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}