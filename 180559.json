{"path":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link #create} method,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link #create} method,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"/dev/null","sourceNew":"  /** this method can be called in the {@link #create} method,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"131617a6350a994cc3a7260cad7488da397110c5","date":1286136892,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link #create} method,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link #create} method,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39077792ccea28766a3069e6cb6aee5bcb63e5cd","date":1295262111,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","pathOld":"solr/src/java/org/apache/solr/analysis/BaseTokenStreamFactory#assureMatchVersion().mjava","sourceNew":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","sourceOld":"  /** this method can be called in the {@link TokenizerFactory#create(java.io.Reader)} \n   * or {@link TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n   * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n  protected final void assureMatchVersion() {\n    if (luceneMatchVersion == null) {\n      throw new RuntimeException(\"Configuration Error: Factory '\" + this.getClass().getName() +\n        \"' needs a 'luceneMatchVersion' parameter\");\n    } else if (!luceneMatchVersion.onOrAfter(Version.LUCENE_40)) {\n      log.warn(getClass().getSimpleName() + \" is using deprecated \" + luceneMatchVersion + \n        \" emulation. You should at some point declare and reindex to at least 4.0, because \" +\n        \"3.x emulation is deprecated and will be removed in 5.0\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39077792ccea28766a3069e6cb6aee5bcb63e5cd":["131617a6350a994cc3a7260cad7488da397110c5"],"c26f00b574427b55127e869b935845554afde1fa":["39077792ccea28766a3069e6cb6aee5bcb63e5cd","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","131617a6350a994cc3a7260cad7488da397110c5"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","39077792ccea28766a3069e6cb6aee5bcb63e5cd"],"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["39077792ccea28766a3069e6cb6aee5bcb63e5cd"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["131617a6350a994cc3a7260cad7488da397110c5","39077792ccea28766a3069e6cb6aee5bcb63e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"131617a6350a994cc3a7260cad7488da397110c5":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["39077792ccea28766a3069e6cb6aee5bcb63e5cd"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"39077792ccea28766a3069e6cb6aee5bcb63e5cd":["c26f00b574427b55127e869b935845554afde1fa","e79a6d080bdd5b2a8f56342cf571b5476de04180","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","131617a6350a994cc3a7260cad7488da397110c5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"131617a6350a994cc3a7260cad7488da397110c5":["39077792ccea28766a3069e6cb6aee5bcb63e5cd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}