{"path":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,Node).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(\"name\");  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(\"name\",config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, Node node) {\n    if (node==null) return null;\n    CacheConfig config = new CacheConfig();\n    config.nodeName = node.getNodeName();\n    config.args = DOMUtil.toMap(node.getAttributes());\n    String nameAttr = config.args.get(\"name\");  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(\"name\",config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(\"name\");  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(\"name\",config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(\"name\");  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(\"name\",config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15f9a498a407241cefcbd00ca7fc84d5e7fa573e","date":1470840868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    config.args = attrs;\n\n    Map<String, String> map = solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"053c4cbd30d228154839dc536ca5a15a5f0c48bf","date":1564559417,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":null,"sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":4,"author":"Atri Sharma","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":null,"sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"/dev/null","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"/dev/null","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.CaffeineCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.LRUCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CacheConfig#getConfig(SolrConfig,String,Map[String,String],String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    @SuppressWarnings({\"rawtypes\"})\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.CaffeineCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","sourceOld":"  public static CacheConfig getConfig(SolrConfig solrConfig, String nodeName, Map<String,String> attrs, String xpath) {\n    CacheConfig config = new CacheConfig();\n    config.nodeName = nodeName;\n    Map attrsCopy = new LinkedHashMap<>(attrs.size());\n    for (Map.Entry<String, String> e : attrs.entrySet()) {\n      attrsCopy.put(e.getKey(), String.valueOf(e.getValue()));\n    }\n    attrs = attrsCopy;\n    config.args = attrs;\n\n    Map<String, String> map = xpath == null ? null : solrConfig.getOverlay().getEditableSubProperties(xpath);\n    if(map != null){\n      HashMap<String, String> mapCopy = new HashMap<>(config.args);\n      for (Map.Entry<String, String> e : map.entrySet()) {\n        mapCopy.put(e.getKey(),String.valueOf(e.getValue()));\n      }\n      config.args = mapCopy;\n    }\n    String nameAttr = config.args.get(NAME);  // OPTIONAL\n    if (nameAttr==null) {\n      config.args.put(NAME, config.nodeName);\n    }\n\n    SolrResourceLoader loader = solrConfig.getResourceLoader();\n    config.cacheImpl = config.args.get(\"class\");\n    if(config.cacheImpl == null) config.cacheImpl = \"solr.CaffeineCache\";\n    config.regenImpl = config.args.get(\"regenerator\");\n    config.clazz = loader.findClass(config.cacheImpl, SolrCache.class);\n    if (config.regenImpl != null) {\n      config.regenerator = loader.newInstance(config.regenImpl, CacheRegenerator.class);\n    }\n    \n    return config;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["1390137e395d2f07f9ba5b8c43d293befe84d563","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"4d7d3943904804560937e6239effeebda0f920e4":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"f8061ddd97f3352007d927dae445884a6f3d857b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","053c4cbd30d228154839dc536ca5a15a5f0c48bf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1390137e395d2f07f9ba5b8c43d293befe84d563","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"15f9a498a407241cefcbd00ca7fc84d5e7fa573e":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["4d7d3943904804560937e6239effeebda0f920e4"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["531fe719c7218235a679452eb3d137bfd8fc6af1","1390137e395d2f07f9ba5b8c43d293befe84d563"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1390137e395d2f07f9ba5b8c43d293befe84d563","15f9a498a407241cefcbd00ca7fc84d5e7fa573e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"b0b597c65628ca9e73913a07e81691f8229bae35":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"531fe719c7218235a679452eb3d137bfd8fc6af1":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["053c4cbd30d228154839dc536ca5a15a5f0c48bf","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"053c4cbd30d228154839dc536ca5a15a5f0c48bf":["c44cc06c26e456fe9c215072b79fce30babe3975","f8061ddd97f3352007d927dae445884a6f3d857b","b0b597c65628ca9e73913a07e81691f8229bae35"],"4d7d3943904804560937e6239effeebda0f920e4":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"c44cc06c26e456fe9c215072b79fce30babe3975":["4d7d3943904804560937e6239effeebda0f920e4","b0b597c65628ca9e73913a07e81691f8229bae35"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"15f9a498a407241cefcbd00ca7fc84d5e7fa573e":["3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","15f9a498a407241cefcbd00ca7fc84d5e7fa573e","d2638f781be724518ff6c2263d14a48cf6e68017","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}