{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#doTestSetScorerOnCollectionTermination(boolean).mjava","commits":[{"id":"d488a38bddbdcc0d425b27beb126f54df6dd82a4","date":1598268476,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#doTestSetScorerOnCollectionTermination(boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/MultiCollectorTest#doTestSetScorerOnCollectionTermination(boolean).mjava","sourceNew":"  private void doTestSetScorerOnCollectionTermination(boolean allowSkipNonCompetitive) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    \n    DummyCollector c1 = new TerminatingDummyCollector(1, allowSkipNonCompetitive? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);\n    DummyCollector c2 = new TerminatingDummyCollector(2, allowSkipNonCompetitive? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);\n    \n    Collector mc = MultiCollector.wrap(c1, c2);\n    LeafCollector lc = mc.getLeafCollector(ctx);\n    assertFalse(c1.setScorerCalled);\n    assertFalse(c2.setScorerCalled);\n    lc.setScorer(new ScoreAndDoc());\n    assertTrue(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c1.setScorerCalled = false;\n    c2.setScorerCalled = false;\n    lc.collect(0); // OK\n    \n    lc.setScorer(new ScoreAndDoc());\n    assertTrue(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c1.setScorerCalled = false;\n    c2.setScorerCalled = false;\n    \n    lc.collect(1); // OK, but c1 should terminate\n    lc.setScorer(new ScoreAndDoc());\n    assertFalse(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c2.setScorerCalled = false;\n    \n    expectThrows(CollectionTerminatedException.class, () -> {\n      lc.collect(2);\n    });\n    lc.setScorer(new ScoreAndDoc());\n    assertFalse(c1.setScorerCalled);\n    assertFalse(c2.setScorerCalled);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSetScorerOnCollectionTermination(boolean allowSkipNonCompetitive) throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    iw.addDocument(new Document());\n    DirectoryReader reader = iw.getReader();\n    iw.close();\n    final LeafReaderContext ctx = reader.leaves().get(0);\n    \n    DummyCollector c1 = new TerminatingDummyCollector(1, allowSkipNonCompetitive? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);\n    DummyCollector c2 = new TerminatingDummyCollector(2, allowSkipNonCompetitive? ScoreMode.TOP_SCORES : ScoreMode.COMPLETE);\n    \n    Collector mc = MultiCollector.wrap(c1, c2);\n    LeafCollector lc = mc.getLeafCollector(ctx);\n    assertFalse(c1.setScorerCalled);\n    assertFalse(c2.setScorerCalled);\n    lc.setScorer(new ScoreAndDoc());\n    assertTrue(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c1.setScorerCalled = false;\n    c2.setScorerCalled = false;\n    lc.collect(0); // OK\n    \n    lc.setScorer(new ScoreAndDoc());\n    assertTrue(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c1.setScorerCalled = false;\n    c2.setScorerCalled = false;\n    \n    lc.collect(1); // OK, but c1 should terminate\n    lc.setScorer(new ScoreAndDoc());\n    assertFalse(c1.setScorerCalled);\n    assertTrue(c2.setScorerCalled);\n    c2.setScorerCalled = false;\n    \n    expectThrows(CollectionTerminatedException.class, () -> {\n      lc.collect(2);\n    });\n    lc.setScorer(new ScoreAndDoc());\n    assertFalse(c1.setScorerCalled);\n    assertFalse(c2.setScorerCalled);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d488a38bddbdcc0d425b27beb126f54df6dd82a4"],"d488a38bddbdcc0d425b27beb126f54df6dd82a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}