{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testDoubleLong().mjava","commits":[{"id":"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9","date":1564497726,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testDoubleLong().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDoubleLong() throws Exception {\n    String expr = \"select(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), double(d) as d, long(l) as l)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    assertTrue(tuples.get(0).get(\"d\") instanceof Double);\n    assertTrue(tuples.get(0).get(\"l\") instanceof Long);\n\n    assertEquals(tuples.get(0).getDouble(\"d\"), 1.1D, 0);\n    assertEquals(tuples.get(0).getLong(\"l\").longValue(), 5000L);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb4d0cfb021fa1b0c1e44571968b254f379ac6f","date":1564497726,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testDoubleLong().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testDoubleLong().mjava","sourceNew":"  @Test\n  public void testDoubleLong() throws Exception {\n    String expr = \"select(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), double(d) as d, long(l) as l)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    assertTrue(tuples.get(0).get(\"d\") instanceof Double);\n    assertTrue(tuples.get(0).get(\"l\") instanceof Long);\n\n    assertEquals(tuples.get(0).getDouble(\"d\"), 1.1D, 0);\n    assertEquals(tuples.get(0).getLong(\"l\").longValue(), 5000L);\n\n  }\n\n","sourceOld":"  @Test\n  public void testDoubleLong() throws Exception {\n    String expr = \"select(tuple(d=\\\"1.1\\\", l=\\\"5000\\\"), double(d) as d, long(l) as l)\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", expr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString() + \"/\" + COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),  1);\n    assertTrue(tuples.get(0).get(\"d\") instanceof Double);\n    assertTrue(tuples.get(0).get(\"l\") instanceof Long);\n\n    assertEquals(tuples.get(0).getDouble(\"d\"), 1.1D, 0);\n    assertEquals(tuples.get(0).getLong(\"l\").longValue(), 5000L);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["d60fd4bf1b42425aefd75d8a133d8d7ea41722e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d60fd4bf1b42425aefd75d8a133d8d7ea41722e9"],"d60fd4bf1b42425aefd75d8a133d8d7ea41722e9":["deb4d0cfb021fa1b0c1e44571968b254f379ac6f"],"deb4d0cfb021fa1b0c1e44571968b254f379ac6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}