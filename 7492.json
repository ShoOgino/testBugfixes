{"path":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","commits":[{"id":"89b8a0757fe4354bdc64c82f90886a9284b57833","date":1226690542,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"/dev/null","sourceNew":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   *\n   * Use {@link #getDirectory(String)} if singletons per path are needed.\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = createCanonicalDir(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18c35aec8cd0e819e1904c0147e05f7aea15bc4","date":1227961014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   *\n   * Use {@link #getDirectory(String)} if singletons per path are needed.\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   *\n   * Use {@link #getDirectory(String)} if singletons per path are needed.\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = createCanonicalDir(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"438aee2c76cee5c7fdca1f499ef9763ffe45a11b","date":1236435686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   *\n   * Use {@link #getDirectory(String)} if singletons per path are needed.\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location.\n   * @deprecated Use {@link SimpleFSDirectory#SimpleFSDirectory}.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location.\n   *\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"416d032f85b7ea8efc272f86ba46bc460589aff7","date":1243881250,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location.\n   * @deprecated Use {@link SimpleFSDirectory#SimpleFSDirectory}.\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  public FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default.\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    init(path, lockFactory);\n    refCount = 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#FSDirectory(File,LockFactory).mjava","sourceNew":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","sourceOld":"  /** Create a new FSDirectory for the named location (ctor for subclasses).\n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @throws IOException\n   */\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    path = getCanonicalPath(path);\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) {\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = path;\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n    \n    // for filesystem based LockFactory, delete the lockPrefix, if the locks are placed\n    // in index dir. If no index dir is given, set ourselves\n    if (lockFactory instanceof FSLockFactory) {\n      final FSLockFactory lf = (FSLockFactory) lockFactory;\n      final File dir = lf.getLockDir();\n      // if the lock factory has no lockDir set, use the this directory as lockDir\n      if (dir == null) {\n        lf.setLockDir(this.directory);\n        lf.setLockPrefix(null);\n      } else if (dir.getCanonicalPath().equals(this.directory.getCanonicalPath())) {\n        lf.setLockPrefix(null);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"438aee2c76cee5c7fdca1f499ef9763ffe45a11b":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["438aee2c76cee5c7fdca1f499ef9763ffe45a11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89b8a0757fe4354bdc64c82f90886a9284b57833":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["89b8a0757fe4354bdc64c82f90886a9284b57833"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"438aee2c76cee5c7fdca1f499ef9763ffe45a11b":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["416d032f85b7ea8efc272f86ba46bc460589aff7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89b8a0757fe4354bdc64c82f90886a9284b57833"],"89b8a0757fe4354bdc64c82f90886a9284b57833":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"416d032f85b7ea8efc272f86ba46bc460589aff7":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["438aee2c76cee5c7fdca1f499ef9763ffe45a11b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}