{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  private static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ac11551d2aa072d9b37c329a548244f1944dc3e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31e4a454f9a95bb2d0f81061a2dff4d131034c6e","date":1415191865,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  private static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","sourceOld":"  private static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["ac11551d2aa072d9b37c329a548244f1944dc3e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","sourceOld":"  private static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,-1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","sourceOld":"  public static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,0);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    }\n\n  }\n\n","sourceOld":"  public static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,-1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["ac11551d2aa072d9b37c329a548244f1944dc3e0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    }\n\n  }\n\n","sourceOld":"  public static  ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP,-1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m,version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR,\"Error reading config overlay\",e);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac11551d2aa072d9b37c329a548244f1944dc3e0","date":1429469061,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    try {\n      in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n    } catch (IOException e) {\n      //no problem no overlay.json file\n      return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n    }\n\n    try {\n      int version = 0; //will be always 0 for file based resourceloader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(new InputStreamReader(in, StandardCharsets.UTF_8)));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    }\n\n  }\n\n","bugFix":["531fe719c7218235a679452eb3d137bfd8fc6af1","ae2f5be890d26585d438eba0b9cc7d3c0a9775be","31e4a454f9a95bb2d0f81061a2dff4d131034c6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"config overlay loaded . version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      Map m = (Map) fromJSON(in);\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      isr = new InputStreamReader(in, StandardCharsets.UTF_8);\n      Map m = (Map) ObjectBuilder.getVal(new JSONParser(isr));\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75237075d8425856bf4bbf52a6be4f9162b8187d","date":1591103291,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#getConfigOverlay(SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      Map m = (Map) fromJSON(in);\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","sourceOld":"  public static ConfigOverlay getConfigOverlay(SolrResourceLoader loader) {\n    InputStream in = null;\n    InputStreamReader isr = null;\n    try {\n      try {\n        in = loader.openResource(ConfigOverlay.RESOURCE_NAME);\n      } catch (IOException e) {\n        // TODO: we should be explicitly looking for file not found exceptions\n        // and logging if it's not the expected IOException\n        // hopefully no problem, assume no overlay.json file\n        return new ConfigOverlay(Collections.EMPTY_MAP, -1);\n      }\n      \n      int version = 0; // will be always 0 for file based resourceLoader\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.debug(\"Config overlay loaded. version : {} \", version);\n      }\n      Map m = (Map) fromJSON(in);\n      return new ConfigOverlay(m, version);\n    } catch (Exception e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading config overlay\", e);\n    } finally {\n      IOUtils.closeQuietly(isr);\n      IOUtils.closeQuietly(in);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["31e4a454f9a95bb2d0f81061a2dff4d131034c6e"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac11551d2aa072d9b37c329a548244f1944dc3e0":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"31e4a454f9a95bb2d0f81061a2dff4d131034c6e":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["ac11551d2aa072d9b37c329a548244f1944dc3e0"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ac11551d2aa072d9b37c329a548244f1944dc3e0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"126d6ad24eed13163ba0959435d5a80e5672837c":["ac11551d2aa072d9b37c329a548244f1944dc3e0","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ac11551d2aa072d9b37c329a548244f1944dc3e0","126d6ad24eed13163ba0959435d5a80e5672837c"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75237075d8425856bf4bbf52a6be4f9162b8187d"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"75237075d8425856bf4bbf52a6be4f9162b8187d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["31e4a454f9a95bb2d0f81061a2dff4d131034c6e"],"ac11551d2aa072d9b37c329a548244f1944dc3e0":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["75237075d8425856bf4bbf52a6be4f9162b8187d"],"31e4a454f9a95bb2d0f81061a2dff4d131034c6e":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["ac11551d2aa072d9b37c329a548244f1944dc3e0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}