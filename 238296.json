{"path":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","commits":[{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  // Used by near real-time search\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new DirectoryReader(readers.toArray(new SegmentReader[readers.size()]),\n      dir, writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(IndexWriter,SegmentInfos,boolean).mjava","sourceNew":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","sourceOld":"  /** Used by near real-time search */\n  static DirectoryReader open(IndexWriter writer, SegmentInfos infos, boolean applyAllDeletes) throws IOException {\n    // IndexWriter synchronizes externally before calling\n    // us, which ensures infos will not change; so there's\n    // no need to process segments in reverse order\n    final int numSegments = infos.size();\n\n    List<SegmentReader> readers = new ArrayList<SegmentReader>();\n    final Directory dir = writer.getDirectory();\n\n    final SegmentInfos segmentInfos = (SegmentInfos) infos.clone();\n    int infosUpto = 0;\n    for (int i=0;i<numSegments;i++) {\n      IOException prior = null;\n      boolean success = false;\n      try {\n        final SegmentInfo info = infos.info(i);\n        assert info.dir == dir;\n        final IndexWriter.ReadersAndLiveDocs rld = writer.readerPool.get(info, true);\n        final SegmentReader reader = rld.getReadOnlyClone(IOContext.READ);\n        if (reader.numDocs() > 0 || writer.getKeepFullyDeletedSegments()) {\n          readers.add(reader);\n          infosUpto++;\n        } else {\n          reader.close();\n          segmentInfos.remove(infosUpto);\n        }\n        success = true;\n      } catch(IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success)\n          IOUtils.closeWhileHandlingException(prior, readers);\n      }\n    }\n    return new StandardDirectoryReader(dir, readers.toArray(new SegmentReader[readers.size()]),\n      writer, segmentInfos, writer.getConfig().getReaderTermsIndexDivisor(), applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}