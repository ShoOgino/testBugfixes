{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    //assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db610e9e698f94982d7a1af15a21d6a30ef96b9d","date":1270586294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    //assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexes().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test using IW.addIndexes\n   * \n   * @throws Exception\n   */\n  public void testAddIndexes() throws Exception {\n    boolean optimize = false;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer.setInfoStream(infoStream);\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n    writer.flush(false, true, true);\n\n    // create a 2nd index\n    Directory dir2 = new MockRAMDirectory();\n    IndexWriter writer2 = new IndexWriter(dir2, new WhitespaceAnalyzer(),\n        IndexWriter.MaxFieldLength.LIMITED);\n    writer2.setInfoStream(infoStream);\n    createIndexNoClose(!optimize, \"index2\", writer2);\n    writer2.close();\n\n    IndexReader r0 = writer.getReader();\n    assertTrue(r0.isCurrent());\n    writer.addIndexesNoOptimize(new Directory[] { dir2 });\n    assertFalse(r0.isCurrent());\n    r0.close();\n\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    writer.commit();\n    assertTrue(r1.isCurrent());\n\n    assertEquals(200, r1.maxDoc());\n\n    int index2df = r1.docFreq(new Term(\"indexname\", \"index2\"));\n\n    assertEquals(100, index2df);\n\n    // verify the docs are from different indexes\n    Document doc5 = r1.document(5);\n    assertEquals(\"index1\", doc5.get(\"indexname\"));\n    Document doc150 = r1.document(150);\n    assertEquals(\"index2\", doc150.get(\"indexname\"));\n    r1.close();\n    writer.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}