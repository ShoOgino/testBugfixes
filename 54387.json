{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","commits":[{"id":"e22f177344f90a5df0e9179dc4d8722380689866","date":1451404416,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new DimensionalIntField(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getDimensionCount());\n    assertEquals(0, intFInfo.getDimensionNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getDimensionCount());\n    assertEquals(4, dintFInfo.getDimensionNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n    assertEquals(\"0\", dvFInfo.getAttribute(\"PerFieldDocValuesFormat.suffix\"));\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","5d15bf41ee7587d2d657d55be5bfea4448c0a8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d15bf41ee7587d2d657d55be5bfea4448c0a8b5","date":1452267410,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new DimensionalIntField(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getDimensionCount());\n    assertEquals(0, intFInfo.getDimensionNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getDimensionCount());\n    assertEquals(4, dintFInfo.getDimensionNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new DimensionalIntField(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getDimensionCount());\n    assertEquals(0, intFInfo.getDimensionNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getDimensionCount());\n    assertEquals(4, dintFInfo.getDimensionNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n    assertEquals(\"0\", dvFInfo.getAttribute(\"PerFieldDocValuesFormat.suffix\"));\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["e22f177344f90a5df0e9179dc4d8722380689866"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new DimensionalIntField(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getDimensionCount());\n    assertEquals(0, intFInfo.getDimensionNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getDimensionCount());\n    assertEquals(4, dintFInfo.getDimensionNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.INTEGER);\n    uninvertingMap.put(\"dv\", Type.INTEGER);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["e22f177344f90a5df0e9179dc4d8722380689866"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestUninvertingReader#testFieldInfos().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestUninvertingReader#testFieldInfos().mjava","sourceNew":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFieldInfos() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n\n    Document doc = new Document();\n    BytesRef idBytes = new BytesRef(\"id\");\n    doc.add(new StringField(\"id\", idBytes, Store.YES));\n    doc.add(new LegacyIntField(\"int\", 5, Store.YES));\n    doc.add(new NumericDocValuesField(\"dv\", 5));\n    doc.add(new IntPoint(\"dint\", 5));\n    doc.add(new StoredField(\"stored\", 5)); // not indexed\n    iw.addDocument(doc);\n\n    iw.forceMerge(1);\n    iw.close();\n\n    Map<String, Type> uninvertingMap = new HashMap<>();\n    uninvertingMap.put(\"int\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dv\", Type.LEGACY_INTEGER);\n    uninvertingMap.put(\"dint\", Type.INTEGER_POINT);\n\n    DirectoryReader ir = UninvertingReader.wrap(DirectoryReader.open(dir), \n                         uninvertingMap);\n    LeafReader leafReader = ir.leaves().get(0).reader();\n\n    FieldInfo intFInfo = leafReader.getFieldInfos().fieldInfo(\"int\");\n    assertEquals(DocValuesType.NUMERIC, intFInfo.getDocValuesType());\n    assertEquals(0, intFInfo.getPointDimensionCount());\n    assertEquals(0, intFInfo.getPointNumBytes());\n\n    FieldInfo dintFInfo = leafReader.getFieldInfos().fieldInfo(\"dint\");\n    assertEquals(DocValuesType.NUMERIC, dintFInfo.getDocValuesType());\n    assertEquals(1, dintFInfo.getPointDimensionCount());\n    assertEquals(4, dintFInfo.getPointNumBytes());\n\n    FieldInfo dvFInfo = leafReader.getFieldInfos().fieldInfo(\"dv\");\n    assertEquals(DocValuesType.NUMERIC, dvFInfo.getDocValuesType());\n\n    FieldInfo storedFInfo = leafReader.getFieldInfos().fieldInfo(\"stored\");\n    assertEquals(DocValuesType.NONE, storedFInfo.getDocValuesType());\n\n    TestUtil.checkReader(ir);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["5d15bf41ee7587d2d657d55be5bfea4448c0a8b5"],"e22f177344f90a5df0e9179dc4d8722380689866":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["8c146731a64debc22c115bbf11ee1a060aa7ea02","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8c146731a64debc22c115bbf11ee1a060aa7ea02","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"5d15bf41ee7587d2d657d55be5bfea4448c0a8b5":["e22f177344f90a5df0e9179dc4d8722380689866"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"e22f177344f90a5df0e9179dc4d8722380689866":["5d15bf41ee7587d2d657d55be5bfea4448c0a8b5"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22f177344f90a5df0e9179dc4d8722380689866"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5d15bf41ee7587d2d657d55be5bfea4448c0a8b5":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}