{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)),\n        new MockTokenizer(new StringReader(\"hello world\"), MockTokenizer.WHITESPACE, false));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)),\n        new MockTokenizer(new StringReader(\"hello world\"), MockTokenizer.WHITESPACE, false));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)),\n        new MockTokenizer(new StringReader(\"hello world\"), MockTokenizer.WHITESPACE, false));\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","date":1417215914,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new CannedTokenStream(createToken(\"a\", 0, 1)),\n        new CannedTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new CannedTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new CannedTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new SingleTokenTokenStream(createToken(\"a\", 0, 1)),\n        new SingleTokenTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new SingleTokenTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new SingleTokenTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1516d411048ee5b9655104d318ff9a9f0a4a6e5f","date":1498119193,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new CannedTokenStream(createToken(\"a\", 0, 1)),\n        new CannedTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new CannedTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new CannedTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new CannedTokenStream(createToken(\"a\", 0, 1)),\n        new CannedTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new CannedTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new CannedTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n\n    PrefixAwareTokenFilter ts;\n\n    ts = new PrefixAwareTokenFilter(\n        new CannedTokenStream(createToken(\"a\", 0, 1)),\n        new CannedTokenStream(createToken(\"b\", 0, 1)));\n    assertTokenStreamContents(ts, \n        new String[] { \"a\", \"b\" },\n        new int[] { 0, 1 },\n        new int[] { 1, 2 });\n\n    // prefix and suffix using 2x prefix\n\n    final MockTokenizer suffix = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    suffix.setReader(new StringReader(\"hello world\"));\n    ts = new PrefixAwareTokenFilter(new CannedTokenStream(createToken(\"^\", 0, 0)),\n        suffix);\n    ts = new PrefixAwareTokenFilter(ts, new CannedTokenStream(createToken(\"$\", 0, 0)));\n\n    assertTokenStreamContents(ts,\n        new String[] { \"^\", \"hello\", \"world\", \"$\" },\n        new int[] { 0, 0, 6, 11 },\n        new int[] { 0, 5, 11, 11 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1516d411048ee5b9655104d318ff9a9f0a4a6e5f":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","1516d411048ee5b9655104d318ff9a9f0a4a6e5f"],"28288370235ed02234a64753cdbf0c6ec096304a":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3","1516d411048ee5b9655104d318ff9a9f0a4a6e5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"1516d411048ee5b9655104d318ff9a9f0a4a6e5f":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6fc92bf7f56dcfe9d5bd75dfdc902b9597ea95b3":["1516d411048ee5b9655104d318ff9a9f0a4a6e5f","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}