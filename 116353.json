{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","commits":[{"id":"c4c215b0bf13f9a31643569e356468a5f1aee809","date":1401781915,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","sourceNew":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n  }\n\n","bugFix":null,"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","sourceNew":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    mlt.setAnalyzer(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","sourceNew":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    Collection<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    List<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"303eba9db32cde4e6fbc4e51a44361ef1c302e6c","date":1553596029,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiValues().mjava","sourceNew":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setFieldNames(new String[] {\"text\"});\n    \n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    Collection<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n  }\n\n","sourceOld":"  // LUCENE-5725\n  public void testMultiValues() throws Exception {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinDocFreq(1);\n    mlt.setMinTermFreq(1);\n    mlt.setMinWordLen(1);\n    mlt.setFieldNames(new String[] {\"text\"});\n\n    BooleanQuery query = (BooleanQuery) mlt.like(\"text\",\n        new StringReader(\"lucene\"), new StringReader(\"lucene release\"),\n        new StringReader(\"apache\"), new StringReader(\"apache lucene\"));\n    Collection<BooleanClause> clauses = query.clauses();\n    assertEquals(\"Expected 2 clauses only!\", 2, clauses.size());\n    for (BooleanClause clause : clauses) {\n      Term term = ((TermQuery) clause.getQuery()).getTerm();\n      assertTrue(Arrays.asList(new Term(\"text\", \"lucene\"), new Term(\"text\", \"apache\")).contains(term));\n    }\n    analyzer.close();\n  }\n\n","bugFix":["c4c215b0bf13f9a31643569e356468a5f1aee809","a56958d7f71a28824f20031ffbb2e13502a0274e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c4c215b0bf13f9a31643569e356468a5f1aee809","a56958d7f71a28824f20031ffbb2e13502a0274e"],"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4c215b0bf13f9a31643569e356468a5f1aee809":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4c215b0bf13f9a31643569e356468a5f1aee809"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}