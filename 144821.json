{"path":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/IndexHTML#main(String[]).mjava","sourceNew":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n      \n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.maxFieldLength = 1000000;\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n      \n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StopAnalyzer(), create);\n      writer.mergeFactor = 20;\n      writer.maxFieldLength = 1000000;\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51507f02c43eb5af1a493ce4c8e071bb20350b9a","date":1072630976,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.maxFieldLength = 1000000;\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n      \n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.maxFieldLength = 1000000;\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33587f7ffc8ba4fe85ec727f53673a0243673a5c","date":1097931814,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.maxFieldLength = 1000000;\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708045cfc1d52936bd128b0062cadc083066235","date":1114985064,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n\tSystem.err.println(\"Usage: \" + usage);\n\treturn;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n\tif (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n\t  index = argv[++i];\n\t} else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n\t  create = true;\n\t} else if (i != argv.length-1) {\n\t  System.err.println(\"Usage: \" + usage);\n\t  return;\n\t} else\n\t  root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n\tdeleting = true;\n\tindexDocs(root, index, create);\n      }\n\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a862b582eb65bb20bb71a7b3890193c3bc02ad99","date":1141070662,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9637651e2bd0a7040acb5f63bdd6b922b244ef","date":1202418455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxFieldLength(1000000);\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6880911c836817ac2521251b88f85d02c450ecb","date":1251223725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(new File(index)), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(index, new StandardAnalyzer(), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa700f486925d2ca49ef079eb9209fc07cdffa4","date":1251322093,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      String index = \"index\";\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = argv[++i];\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(new File(index)), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n          \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT).setAnalyzer(new StandardAnalyzer(\n          Version.LUCENE_CURRENT)).setMaxFieldLength(1000000).setOpenMode(create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT).setAnalyzer(new StandardAnalyzer(\n          Version.LUCENE_CURRENT)).setMaxFieldLength(1000000).setOpenMode(create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new StandardAnalyzer(Version.LUCENE_CURRENT), create, \n                               new IndexWriter.MaxFieldLength(1000000));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"f6880911c836817ac2521251b88f85d02c450ecb":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["f6880911c836817ac2521251b88f85d02c450ecb"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"33587f7ffc8ba4fe85ec727f53673a0243673a5c":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e708045cfc1d52936bd128b0062cadc083066235":["33587f7ffc8ba4fe85ec727f53673a0243673a5c"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["e708045cfc1d52936bd128b0062cadc083066235"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"51507f02c43eb5af1a493ce4c8e071bb20350b9a":["33587f7ffc8ba4fe85ec727f53673a0243673a5c"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["4d9637651e2bd0a7040acb5f63bdd6b922b244ef"],"f6880911c836817ac2521251b88f85d02c450ecb":["eaa700f486925d2ca49ef079eb9209fc07cdffa4"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"eaa700f486925d2ca49ef079eb9209fc07cdffa4":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"33587f7ffc8ba4fe85ec727f53673a0243673a5c":["e708045cfc1d52936bd128b0062cadc083066235"],"4d9637651e2bd0a7040acb5f63bdd6b922b244ef":["f6880911c836817ac2521251b88f85d02c450ecb"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"e708045cfc1d52936bd128b0062cadc083066235":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["51507f02c43eb5af1a493ce4c8e071bb20350b9a"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}