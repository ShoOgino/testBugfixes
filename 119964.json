{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","commits":[{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba222c174ec1943d8d14d012d1d6e24a1cc4972","date":1351522220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, true);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31b5edc7f41e0c481513ce8881696e3e042ff493","date":1351528983,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, true);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","date":1374158194,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new TermFreqPayloadArrayIterator(new TermFreqPayload[] {\n          new TermFreqPayload(\"x y\", 1),\n          new TermFreqPayload(\"x y z\", 3),\n          new TermFreqPayload(\"x\", 2),\n          new TermFreqPayload(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new TermFreqArrayIterator(new TermFreq[] {\n          new TermFreq(\"x y\", 1),\n          new TermFreq(\"x y z\", 3),\n          new TermFreq(\"x\", 2),\n          new TermFreq(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new TermFreqPayloadArrayIterator(new TermFreqPayload[] {\n          new TermFreqPayload(\"x y\", 1),\n          new TermFreqPayload(\"x y z\", 3),\n          new TermFreqPayload(\"x\", 2),\n          new TermFreqPayload(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33f87fe6faf49dfc1e66f45e841e24838c2f725c","date":1383142987,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n    a.close();\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testExactFirst().mjava","sourceNew":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    Directory tempDir = getDirectory();\n    FuzzySuggester suggester = new FuzzySuggester(tempDir, \"fuzzy\", a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n    IOUtils.close(a, tempDir);\n  }\n\n","sourceOld":"  public void testExactFirst() throws Exception {\n\n    Analyzer a = getUnusualAnalyzer();\n    FuzzySuggester suggester = new FuzzySuggester(a, a, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, true, 1, true, 1, 3, false);\n    suggester.build(new InputArrayIterator(new Input[] {\n          new Input(\"x y\", 1),\n          new Input(\"x y z\", 3),\n          new Input(\"x\", 2),\n          new Input(\"z z z\", 20),\n        }));\n\n    //System.out.println(\"ALL: \" + suggester.lookup(\"x y\", false, 6));\n\n    for(int topN=1;topN<6;topN++) {\n      List<LookupResult> results = suggester.lookup(\"x y\", false, topN);\n      //System.out.println(\"topN=\" + topN + \" \" + results);\n\n      assertEquals(Math.min(topN, 4), results.size());\n\n      assertEquals(\"x y\", results.get(0).key);\n      assertEquals(1, results.get(0).value);\n\n      if (topN > 1) {\n        assertEquals(\"z z z\", results.get(1).key);\n        assertEquals(20, results.get(1).value);\n\n        if (topN > 2) {\n          assertEquals(\"x y z\", results.get(2).key);\n          assertEquals(3, results.get(2).value);\n\n          if (topN > 3) {\n            assertEquals(\"x\", results.get(3).key);\n            assertEquals(2, results.get(3).value);\n          }\n        }\n      }\n    }\n    a.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["33f87fe6faf49dfc1e66f45e841e24838c2f725c","a56958d7f71a28824f20031ffbb2e13502a0274e"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","31b5edc7f41e0c481513ce8881696e3e042ff493"],"cc41b743423981e7ec17a024ce7e107096e472fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["cc41b743423981e7ec17a024ce7e107096e472fe"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"31b5edc7f41e0c481513ce8881696e3e042ff493":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"33f87fe6faf49dfc1e66f45e841e24838c2f725c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["2efd1b8e67185b5bb2dbdfa435b9f085a0c659f6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"cc41b743423981e7ec17a024ce7e107096e472fe":["0ba222c174ec1943d8d14d012d1d6e24a1cc4972"],"0ba222c174ec1943d8d14d012d1d6e24a1cc4972":["31b5edc7f41e0c481513ce8881696e3e042ff493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["33f87fe6faf49dfc1e66f45e841e24838c2f725c"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}