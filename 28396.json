{"path":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","commits":[{"id":"c79a056cc0ebc0f62e4a01c20808260cc4c70074","date":1198809971,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n  }/*\n     * (non-Javadoc)\n     *\n     * @see org.apache.lucene.analysis.TokenStream#next()\n     */\n\n","sourceOld":null,"bugFix":null,"bugIntro":["77814958b841b2c57a45005379f41e9a5775da81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5b54d19e4682ef2b08bd06f76c13a4c8d785386","date":1199633864,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n  }/*\n     * (non-Javadoc)\n     *\n     * @see org.apache.lucene.analysis.TokenStream#next()\n     */\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    setInput(input);\n    this.scanner = new StandardTokenizerImpl(input);\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    this.input = input;\n    this.scanner = new StandardTokenizerImpl(input);\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"047007f30fa7e5c9273d6dc8d292deca18da4c2c","date":1251016462,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    super();\n    this.scanner = new StandardTokenizerImpl(input);\n    init(input, replaceInvalidAcronym);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    this.replaceInvalidAcronym = replaceInvalidAcronym;\n    setInput(input);\n    this.scanner = new StandardTokenizerImpl(input);\n    termAtt = (TermAttribute) addAttribute(TermAttribute.class);\n    offsetAtt = (OffsetAttribute) addAttribute(OffsetAttribute.class);\n    posIncrAtt = (PositionIncrementAttribute) addAttribute(PositionIncrementAttribute.class);\n    typeAtt = (TypeAttribute) addAttribute(TypeAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Version,Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardTokenizer#StandardTokenizer(Reader,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Version matchVersion, Reader input) {\n    super();\n    this.scanner = new StandardTokenizerImpl(input);\n    init(input, matchVersion);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance of the {@link org.apache.lucene.analysis.standard.StandardTokenizer}.  Attaches\n   * the <code>input</code> to the newly created JFlex scanner.\n   *\n   * @param input The input reader\n   * @param replaceInvalidAcronym Set to true to replace mischaracterized acronyms with HOST.\n   *\n   * See http://issues.apache.org/jira/browse/LUCENE-1068\n   */\n  public StandardTokenizer(Reader input, boolean replaceInvalidAcronym) {\n    super();\n    this.scanner = new StandardTokenizerImpl(input);\n    init(input, replaceInvalidAcronym);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"047007f30fa7e5c9273d6dc8d292deca18da4c2c":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"c79a056cc0ebc0f62e4a01c20808260cc4c70074":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1116b3450a9c1642c89445d131b37344055245"],"ba1116b3450a9c1642c89445d131b37344055245":["047007f30fa7e5c9273d6dc8d292deca18da4c2c"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["c79a056cc0ebc0f62e4a01c20808260cc4c70074"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"047007f30fa7e5c9273d6dc8d292deca18da4c2c":["ba1116b3450a9c1642c89445d131b37344055245"],"c79a056cc0ebc0f62e4a01c20808260cc4c70074":["a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c79a056cc0ebc0f62e4a01c20808260cc4c70074"],"a5b54d19e4682ef2b08bd06f76c13a4c8d785386":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["047007f30fa7e5c9273d6dc8d292deca18da4c2c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba1116b3450a9c1642c89445d131b37344055245":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}