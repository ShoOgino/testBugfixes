{"path":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a775c547c3519b47efd41c09cb47100ddb9604c7","date":1270914087,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          TermAttribute termAtt = addAttribute(TermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.setTermBuffer(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03276b2744036b1b19a7a2dd4b74ba7bc484f107","date":1274048508,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                                     new StopWhitespaceAnalyzer(false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new StopWhitespaceAnalyzer(true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(store, new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    writer.optimize();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(store, true);\n    \n    TermPositions pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"1\"));\n    pos.next();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = searcher.getIndexReader().termPositions(new Term(\"field\", \"2\"));\n    pos.next();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Random random = newRandom();\n    Directory store = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(newRandom(), store, analyzer);\n    Document d = new Document();\n    d.add(new Field(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, false, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(MockTokenizer.WHITESPACE, false, stopStopList, true, false));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getDeletedDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // should not find \"1 2\" because there is a gap of 1 in the index\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n        new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, false));\n    q = (PhraseQuery) qp.parse(\"\\\"1 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // omitted stop word cannot help because stop filter swallows the increments. \n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // query parser alone won't help, because stop filter swallows the increments. \n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // stop filter alone won't help, because query parser swallows the increments. \n    qp.setEnablePositionIncrements(false);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n      \n    // when both qp qnd stopFilter propagate increments, we should find the doc.\n    qp = new QueryParser(TEST_VERSION_CURRENT, \"field\",\n                         new MockAnalyzer(random, MockTokenizer.WHITESPACE, false, stopStopList, true));\n    qp.setEnablePositionIncrements(true);\n    q = (PhraseQuery) qp.parse(\"\\\"1 stop 2\\\"\");\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4196a8f99ce1dc39a13b325cd9fc21616fa54164","date":1314268949,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new TokenStream() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        };\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    searcher.close();\n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"));\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"));\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testSetPosition().mjava","sourceNew":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","sourceOld":"  public void testSetPosition() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        return new TokenStreamComponents(new Tokenizer() {\n          private final String[] TOKENS = {\"1\", \"2\", \"3\", \"4\", \"5\"};\n          private final int[] INCREMENTS = {0, 2, 1, 0, 1};\n          private int i = 0;\n\n          PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n          CharTermAttribute termAtt = addAttribute(CharTermAttribute.class);\n          OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n          \n          @Override\n          public boolean incrementToken() {\n            if (i == TOKENS.length)\n              return false;\n            clearAttributes();\n            termAtt.append(TOKENS[i]);\n            offsetAtt.setOffset(i,i);\n            posIncrAtt.setPositionIncrement(INCREMENTS[i]);\n            i++;\n            return true;\n          }\n\n          @Override\n          public void reset() throws IOException {\n            super.reset();\n            this.i = 0;\n          }\n        });\n      }\n    };\n    Directory store = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, store, analyzer);\n    Document d = new Document();\n    d.add(newField(\"field\", \"bogus\", TextField.TYPE_STORED));\n    writer.addDocument(d);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    IndexSearcher searcher = newSearcher(reader);\n    \n    DocsAndPositionsEnum pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                                                MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                                                \"field\",\n                                                                new BytesRef(\"1\"),\n                                                                false);\n    pos.nextDoc();\n    // first token should be at position 0\n    assertEquals(0, pos.nextPosition());\n    \n    pos = MultiFields.getTermPositionsEnum(searcher.getIndexReader(),\n                                           MultiFields.getLiveDocs(searcher.getIndexReader()),\n                                           \"field\",\n                                           new BytesRef(\"2\"),\n                                           false);\n    pos.nextDoc();\n    // second token should be at position 2\n    assertEquals(2, pos.nextPosition());\n    \n    PhraseQuery q;\n    ScoreDoc[] hits;\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"));\n    q.add(new Term(\"field\", \"2\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // same as previous, just specify positions explicitely.\n    q = new PhraseQuery(); \n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),1);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // specifying correct positions should find the phrase.\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"1\"),0);\n    q.add(new Term(\"field\", \"2\"),2);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"3\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // phrase query would find it when correct positions are specified. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"4\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // phrase query should fail for non existing searched term \n    // even if there exist another searched terms in the same searched position. \n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"),0);\n    q.add(new Term(\"field\", \"9\"),0);\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // multi-phrase query should succed for non existing searched term\n    // because there exist another searched terms in the same searched position. \n    MultiPhraseQuery mq = new MultiPhraseQuery();\n    mq.add(new Term[]{new Term(\"field\", \"3\"),new Term(\"field\", \"9\")},0);\n    hits = searcher.search(mq, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"4\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"3\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"4\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    q = new PhraseQuery();\n    q.add(new Term(\"field\", \"2\"));\n    q.add(new Term(\"field\", \"5\"));\n    hits = searcher.search(q, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    reader.close();\n    store.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["2f49143da0a5d278a72f741432047fcfa6da996e","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","498e168d849b4dbc097ac7b31f6db170d6f55725"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c084e47df29de3330311d69dabf515ceaa989512":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["2f49143da0a5d278a72f741432047fcfa6da996e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["498e168d849b4dbc097ac7b31f6db170d6f55725","790e1fde4caa765b3faaad3fbcd25c6973450336"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4196a8f99ce1dc39a13b325cd9fc21616fa54164"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"4196a8f99ce1dc39a13b325cd9fc21616fa54164":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5f4e87790277826a2aea119328600dfb07761f32":["03276b2744036b1b19a7a2dd4b74ba7bc484f107","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["4196a8f99ce1dc39a13b325cd9fc21616fa54164","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a775c547c3519b47efd41c09cb47100ddb9604c7":["03276b2744036b1b19a7a2dd4b74ba7bc484f107"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","31f025ae60076ae95274433f3fe8e6ace2857a87"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["c084e47df29de3330311d69dabf515ceaa989512"],"2f49143da0a5d278a72f741432047fcfa6da996e":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a775c547c3519b47efd41c09cb47100ddb9604c7"],"03276b2744036b1b19a7a2dd4b74ba7bc484f107":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"4196a8f99ce1dc39a13b325cd9fc21616fa54164":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}