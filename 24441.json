{"path":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","commits":[{"id":"4a52b01a73cacbd2d360240e72d64c0ba353618f","date":1489389749,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestIpRangeFieldQueries.IpRange#isWithin(Range).mjava","sourceNew":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      byte[] bMin = min.getAddress();\n      byte[] bMax = max.getAddress();\n      return StringHelper.compare(bMin.length, bMin, 0, other.min.getAddress(), 0) >= 0 &&\n          StringHelper.compare(bMax.length, bMax, 0, other.max.getAddress(), 0) <= 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      byte[] bMin = min.getAddress();\n      byte[] bMax = max.getAddress();\n      return StringHelper.compare(bMin.length, bMin, 0, other.min.getAddress(), 0) >= 0 &&\n          StringHelper.compare(bMax.length, bMax, 0, other.max.getAddress(), 0) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4","date":1491408615,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","sourceNew":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return StringHelper.compare(min.length, min, 0, other.min, 0) >= 0 &&\n          StringHelper.compare(max.length, max, 0, other.max, 0) <= 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      byte[] bMin = min.getAddress();\n      byte[] bMax = max.getAddress();\n      return StringHelper.compare(bMin.length, bMin, 0, other.min.getAddress(), 0) >= 0 &&\n          StringHelper.compare(bMax.length, bMax, 0, other.max.getAddress(), 0) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","sourceNew":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return StringHelper.compare(min.length, min, 0, other.min, 0) >= 0 &&\n          StringHelper.compare(max.length, max, 0, other.max, 0) <= 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      byte[] bMin = min.getAddress();\n      byte[] bMax = max.getAddress();\n      return StringHelper.compare(bMin.length, bMin, 0, other.min.getAddress(), 0) >= 0 &&\n          StringHelper.compare(bMax.length, bMax, 0, other.max.getAddress(), 0) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","sourceNew":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return FutureArrays.compareUnsigned(min, 0, min.length, other.min, 0, min.length) >= 0 &&\n          FutureArrays.compareUnsigned(max, 0, max.length, other.max, 0, max.length) <= 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return StringHelper.compare(min.length, min, 0, other.min, 0) >= 0 &&\n          StringHelper.compare(max.length, max, 0, other.max, 0) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestInetAddressRangeQueries.IpRange#isWithin(Range).mjava","sourceNew":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return Arrays.compareUnsigned(min, 0, min.length, other.min, 0, min.length) >= 0 &&\n          Arrays.compareUnsigned(max, 0, max.length, other.max, 0, max.length) <= 0;\n    }\n\n","sourceOld":"    @Override\n    protected boolean isWithin(Range o) {\n      IpRange other = (IpRange)o;\n      return FutureArrays.compareUnsigned(min, 0, min.length, other.min, 0, min.length) >= 0 &&\n          FutureArrays.compareUnsigned(max, 0, max.length, other.max, 0, max.length) <= 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9572f6b79d80c6f76bff7d6835c27320c7c2e9f4":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"4a52b01a73cacbd2d360240e72d64c0ba353618f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9572f6b79d80c6f76bff7d6835c27320c7c2e9f4"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a52b01a73cacbd2d360240e72d64c0ba353618f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}