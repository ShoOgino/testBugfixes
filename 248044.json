{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n        throws IOException {\n\n      final Explanation[] explanations = new Explanation[this.featuresInfo.length];\n      for (final Feature.FeatureWeight feature : extractedFeatureWeights) {\n        explanations[feature.getIndex()] = feature.explain(context, doc);\n      }\n      final List<Explanation> featureExplanations = new ArrayList<>();\n      for (int idx = 0 ;idx < modelFeatureWeights.length; ++idx) {\n        final Feature.FeatureWeight f = modelFeatureWeights[idx];\n        Explanation e = ltrScoringModel.getNormalizerExplanation(explanations[f.getIndex()], idx);\n        featureExplanations.add(e);\n      }\n      final ModelScorer bs = scorer(context);\n      bs.iterator().advance(doc);\n\n      final float finalScore = bs.score();\n\n      return ltrScoringModel.explain(context, doc, finalScore, featureExplanations);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#explain(LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc)\n        throws IOException {\n\n      final Explanation[] explanations = new Explanation[this.featuresInfo.length];\n      for (final Feature.FeatureWeight feature : extractedFeatureWeights) {\n        explanations[feature.getIndex()] = feature.explain(context, doc);\n      }\n      final List<Explanation> featureExplanations = new ArrayList<>();\n      for (int idx = 0 ;idx < modelFeatureWeights.length; ++idx) {\n        final Feature.FeatureWeight f = modelFeatureWeights[idx];\n        Explanation e = ltrScoringModel.getNormalizerExplanation(explanations[f.getIndex()], idx);\n        featureExplanations.add(e);\n      }\n      final ModelScorer bs = scorer(context);\n      bs.iterator().advance(doc);\n\n      final float finalScore = bs.score();\n\n      return ltrScoringModel.explain(context, doc, finalScore, featureExplanations);\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}