{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","commits":[{"id":"e4fccad460342b1af30cb328cc8297751a218d78","date":1541177339,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","pathOld":"/dev/null","sourceNew":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = decodeLatitude(encodeLatitude(p.lat));\n      double lon = decodeLongitude(encodeLongitude(p.lon));\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e49feed1f08d73738a9726a61709a7c57ede9f2","date":1541716494,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","sourceNew":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = quantizeLat(p.lat);\n      double lon = quantizeLon(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = decodeLatitude(encodeLatitude(p.lat));\n      double lon = decodeLongitude(encodeLongitude(p.lon));\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","sourceNew":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = quantizeLat(p.lat);\n      double lon = quantizeLon(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testComponentQuery(Component2D,Object).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","sourceNew":"    @Override\n    public boolean testComponentQuery(Component2D query, Object shape) {\n      Point p =  (Point) shape;\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = query.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","sourceOld":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointShapeQueries.PointValidator#testPoint(EdgeTree,Point).mjava","sourceNew":null,"sourceOld":"    private boolean testPoint(EdgeTree tree, Point p) {\n      double lat = encoder.quantizeY(p.lat);\n      double lon = encoder.quantizeX(p.lon);\n      // for consistency w/ the query we test the point as a triangle\n      Relation r = tree.relateTriangle(lon, lat, lon, lat, lon, lat);\n      if (queryRelation == QueryRelation.WITHIN) {\n        return r == Relation.CELL_INSIDE_QUERY;\n      } else if (queryRelation == QueryRelation.DISJOINT) {\n        return r == Relation.CELL_OUTSIDE_QUERY;\n      }\n      return r != Relation.CELL_OUTSIDE_QUERY;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"3e49feed1f08d73738a9726a61709a7c57ede9f2":["e4fccad460342b1af30cb328cc8297751a218d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"e4fccad460342b1af30cb328cc8297751a218d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["c286b0d8c507a88b289407e2fe161effa275c6b0","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"3e49feed1f08d73738a9726a61709a7c57ede9f2":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4fccad460342b1af30cb328cc8297751a218d78"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"e4fccad460342b1af30cb328cc8297751a218d78":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}