{"path":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","commits":[{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,Locale,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, Locale locale, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      if (locale != null)\n        comparator = comparatorStringLocale(fieldname, locale);\n      else\n        comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","pathOld":"/dev/null","sourceNew":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,SortField.Type,FieldComparatorSource).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","sourceNew":"  Comparator getCachedComparator(String fieldname, SortField.Type type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","sourceOld":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#getCachedComparator(String,int,FieldComparatorSource).mjava","sourceNew":null,"sourceOld":"  Comparator getCachedComparator(String fieldname, int type, FieldComparatorSource factory) {\n    Comparator comparator = null;\n    switch (type) {\n    case SortField.SCORE:\n      comparator = comparatorScore(fieldname);\n      break;\n    case SortField.STRING:\n      comparator = comparatorNatural(fieldname);\n      break;\n    case SortField.CUSTOM:\n      if (factory instanceof MissingStringLastComparatorSource){\n        comparator = comparatorMissingStringLast(fieldname);\n      } else {\n        // TODO: support other types such as random... is there a way to\n        // support generically?  Perhaps just comparing Object\n        comparator = comparatorNatural(fieldname);\n        // throw new RuntimeException(\"Custom sort not supported factory is \"+factory.getClass());\n      }\n      break;\n    case SortField.DOC:\n      // TODO: we can support this!\n      throw new RuntimeException(\"Doc sort not supported\");\n    default:\n      comparator = comparatorNatural(fieldname);\n      break;\n    }\n    return comparator;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["3e492fb0f2bb0b4b47208286f9331ff55963c656","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["3e492fb0f2bb0b4b47208286f9331ff55963c656","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["090a0320e4de4a3674376aef96b9701f47564f86"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}