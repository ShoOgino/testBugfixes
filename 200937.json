{"path":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","commits":[{"id":"f97270426d92300e08ac1bd1a4ef499ae02e88b7","date":1592503330,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(PerField fp, IndexableField field) throws IOException {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docState.docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","date":1599581893,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter.byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49f1924bd448393fbdfef8b5ebed799f938169d3","date":1600069616,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter.byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dcf8f79417865e5028d753e669fae06457e8369","date":1600073240,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(docWriter.byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":5,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexingChain#indexPoint(int,PerField,IndexableField).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DefaultIndexingChain#indexPoint(int,PerField,IndexableField).mjava","sourceNew":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","sourceOld":"  /** Called from processDocument to index one field's point */\n  private void indexPoint(int docID, PerField fp, IndexableField field) {\n    int pointDimensionCount = field.fieldType().pointDimensionCount();\n    int pointIndexDimensionCount = field.fieldType().pointIndexDimensionCount();\n\n    int dimensionNumBytes = field.fieldType().pointNumBytes();\n\n    // Record dimensions for this field; this setter will throw IllegalArgExc if\n    // the dimensions were already set to something different:\n    if (fp.fieldInfo.getPointDimensionCount() == 0) {\n      fieldInfos.globalFieldNumbers.setDimensions(fp.fieldInfo.number, fp.fieldInfo.name, pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n    }\n\n    fp.fieldInfo.setPointDimensions(pointDimensionCount, pointIndexDimensionCount, dimensionNumBytes);\n\n    if (fp.pointValuesWriter == null) {\n      fp.pointValuesWriter = new PointValuesWriter(byteBlockAllocator, bytesUsed, fp.fieldInfo);\n    }\n    fp.pointValuesWriter.addPackedValue(docID, field.binaryValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4"],"680b6449f09827f58fe987aff279e014c311d966":["0dcf8f79417865e5028d753e669fae06457e8369","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["49f1924bd448393fbdfef8b5ebed799f938169d3"],"0dcf8f79417865e5028d753e669fae06457e8369":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4","49f1924bd448393fbdfef8b5ebed799f938169d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4":["49f1924bd448393fbdfef8b5ebed799f938169d3","0dcf8f79417865e5028d753e669fae06457e8369"],"49f1924bd448393fbdfef8b5ebed799f938169d3":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","0dcf8f79417865e5028d753e669fae06457e8369"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"0dcf8f79417865e5028d753e669fae06457e8369":["680b6449f09827f58fe987aff279e014c311d966"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f97270426d92300e08ac1bd1a4ef499ae02e88b7"],"f97270426d92300e08ac1bd1a4ef499ae02e88b7":["6926606ec5e0dd8d4ec79166d39a3b4ddb862bf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}