{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"/dev/null","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() != IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsSegmentTermsEnumFrame#decodeMetaData().mjava","sourceNew":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata\n      ste.fr.parent.postingsReader.decodeTerm(bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","sourceOld":"  public void decodeMetaData() throws IOException {\n\n    assert nextEnt >= 0;\n\n    // lazily catch up on metadata decode:\n    final int limit = getTermBlockOrd();\n    boolean absolute = metaDataUpto == 0;\n    assert limit > 0: \"limit=\" + limit + \" isLeafBlock=\" + isLeafBlock + \" nextEnt=\" + nextEnt;\n\n    // if (DEBUG) System.out.println(\"\\nBTTR.decodeMetadata seg=\" + ste.fr.parent.segment + \" mdUpto=\" + metaDataUpto + \" vs termBlockOrd=\" + state.termBlockOrd + \" limit=\" + limit);\n\n    // TODO: better API would be \"jump straight to term=N\"???\n    while (metaDataUpto < limit) {\n\n      // TODO: we could make \"tiers\" of metadata, ie,\n      // decode docFreq/totalTF but don't decode postings\n      // metadata; this way caller could get\n      // docFreq/totalTF w/o paying decode cost for\n      // postings\n\n      // TODO: if docFreq were bulk decoded we could\n      // just skipN here:\n\n      // stats\n      state.docFreq = statsReader.readVInt();\n      //if (DEBUG) System.out.println(\"    dF=\" + state.docFreq);\n      if (ste.fr.fieldInfo.getIndexOptions() == IndexOptions.DOCS) {\n        state.totalTermFreq = state.docFreq; // all tf values are 1\n      } else {\n        state.totalTermFreq = state.docFreq + statsReader.readVLong();\n        //if (DEBUG) System.out.println(\"    totTF=\" + state.totalTermFreq);\n      }\n      //if (DEBUG) System.out.println(\"    longsSize=\" + ste.fr.longsSize);\n\n      // metadata \n      for (int i = 0; i < ste.fr.longsSize; i++) {\n        longs[i] = bytesReader.readVLong();\n      }\n      ste.fr.parent.postingsReader.decodeTerm(longs, bytesReader, ste.fr.fieldInfo, state, absolute);\n\n      metaDataUpto++;\n      absolute = false;\n    }\n    state.termBlockOrd = metaDataUpto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"086ffe31d8fba0110227db122974163709ecc1b4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2bb2842e561df4e8e9ad89010605fc86ac265465","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}