{"path":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","sourceNew":"  private void doTestRanges(String startPoint, String endPoint, Query query) throws Exception {\n    // positive test\n    TopDocs docs = searcher.search(query, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = searcher.search(bq, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(String startPoint, String endPoint, Query query) throws Exception {\n    // positive test\n    TopDocs docs = searcher.search(query, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = searcher.search(bq, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21ced6876daf4979ade698bfe6a584d003ef67e9","date":1336223359,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","sourceNew":"  private void doTestRanges(String startPoint, String endPoint, Query query) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = searcher.search(query, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = searcher.search(bq, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(String startPoint, String endPoint, Query query) throws Exception {\n    // positive test\n    TopDocs docs = searcher.search(query, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = searcher.search(bq, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowCollationMethods#doTestRanges(String,String,Query).mjava","sourceNew":null,"sourceOld":"  private void doTestRanges(String startPoint, String endPoint, Query query) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = searcher.search(query, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = searcher.search(bq, numDocs);\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = reader.document(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["21ced6876daf4979ade698bfe6a584d003ef67e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21ced6876daf4979ade698bfe6a584d003ef67e9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["21ced6876daf4979ade698bfe6a584d003ef67e9"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"21ced6876daf4979ade698bfe6a584d003ef67e9":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}