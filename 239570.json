{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","pathOld":"/dev/null","sourceNew":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"366de777493836f7f47d50406d2f07f1408e9e6b","date":1323009346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","sourceNew":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","sourceOld":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7733816f2c0d688c0bbc68468196f1a848606f21","date":1323021691,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","sourceNew":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","sourceOld":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","sourceNew":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","sourceOld":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(new Float [] {\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY }));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","sourceNew":null,"sourceOld":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FloatMagicTest#testFloatMagic().mjava","sourceNew":null,"sourceOld":"  public void testFloatMagic() {\n    ArrayList<Float> floats = new ArrayList<Float>(Arrays.asList(\n        Float.intBitsToFloat(0x7f800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0x7fffffff), // NaN (invalid combination).\n        Float.intBitsToFloat(0xff800001), // NaN (invalid combination).\n        Float.intBitsToFloat(0xffffffff), // NaN (invalid combination).\n        Float.POSITIVE_INFINITY,\n        Float.MAX_VALUE,\n        100f,\n        0f,\n        0.1f,\n        Float.MIN_VALUE,\n        Float.NaN,\n        -0.0f,\n        -Float.MIN_VALUE,\n        -0.1f,\n        -1f,\n        -10f,\n        Float.NEGATIVE_INFINITY));\n\n    // Sort them using juc.\n    Collections.sort(floats);\n    \n    // Convert to sortable int4 representation (as long to have an unsigned sort).\n    long [] int4 = new long [floats.size()];\n    for (int i = 0; i < floats.size(); i++) {\n      int4[i] = FloatMagic.toSortable(floats.get(i)) & 0xffffffffL;\n\n      /*\n      System.out.println(\n          String.format(\"raw %8s sortable %8s %8s numutils %8s %s\",\n              Integer.toHexString(Float.floatToRawIntBits(floats.get(i))),\n              Integer.toHexString(FloatMagic.toSortable(floats.get(i))),\n              Integer.toHexString(FloatMagic.unsignedOrderedToFloatBits(FloatMagic.toSortable(floats.get(i)))),\n              Integer.toHexString(NumericUtils.floatToSortableInt(floats.get(i))),\n              floats.get(i)));\n      */\n    }\n\n    // Sort and compare. Should be identical order.\n    Arrays.sort(int4);\n    ArrayList<Float> backFromFixed = new ArrayList<Float>();\n    for (int i = 0; i < int4.length; i++) {\n      backFromFixed.add(FloatMagic.fromSortable((int) int4[i]));\n    }\n\n    /*\n    for (int i = 0; i < int4.length; i++) {\n      System.out.println(\n          floats.get(i) + \" \" + FloatMagic.fromSortable((int) int4[i]));\n    }\n    */\n    \n    assertEquals(floats, backFromFixed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"366de777493836f7f47d50406d2f07f1408e9e6b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["fae06511695f4be0bce5337deb3b3f813d0c3e7c","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["366de777493836f7f47d50406d2f07f1408e9e6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"7733816f2c0d688c0bbc68468196f1a848606f21":["7bf07f4ebadc7539de83a531e64678350d78ca26","366de777493836f7f47d50406d2f07f1408e9e6b"]},"commit2Childs":{"366de777493836f7f47d50406d2f07f1408e9e6b":["fae06511695f4be0bce5337deb3b3f813d0c3e7c","7733816f2c0d688c0bbc68468196f1a848606f21"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["366de777493836f7f47d50406d2f07f1408e9e6b","7733816f2c0d688c0bbc68468196f1a848606f21"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7733816f2c0d688c0bbc68468196f1a848606f21":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817","7733816f2c0d688c0bbc68468196f1a848606f21"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}