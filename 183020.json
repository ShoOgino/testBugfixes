{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","commits":[{"id":"558b125bbf6fa91eb5355da7e849d46edaf735bc","date":1314371299,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"/dev/null","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#printDebuggingInformation(String).mjava","sourceNew":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","sourceOld":"  /** print some useful debugging information about the environment */\n  private static void printDebuggingInformation(String codecDescription) {\n    System.err.println(\"NOTE: test params are: codec=\" + codecDescription +\n        \", sim=\" + similarityProvider +\n        \", locale=\" + locale +\n        \", timezone=\" + (timeZone == null ? \"(null)\" : timeZone.getID()));\n    System.err.println(\"NOTE: all tests run in this JVM:\");\n    System.err.println(Arrays.toString(testClassesRun.toArray()));\n    System.err.println(\"NOTE: \" + System.getProperty(\"os.name\") + \" \"\n        + System.getProperty(\"os.version\") + \" \"\n        + System.getProperty(\"os.arch\") + \"/\"\n        + System.getProperty(\"java.vendor\") + \" \"\n        + System.getProperty(\"java.version\") + \" \"\n        + (Constants.JRE_IS_64BIT ? \"(64-bit)\" : \"(32-bit)\") + \"/\"\n        + \"cpus=\" + Runtime.getRuntime().availableProcessors() + \",\"\n        + \"threads=\" + Thread.activeCount() + \",\"\n        + \"free=\" + Runtime.getRuntime().freeMemory() + \",\"\n        + \"total=\" + Runtime.getRuntime().totalMemory());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"558b125bbf6fa91eb5355da7e849d46edaf735bc":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["558b125bbf6fa91eb5355da7e849d46edaf735bc"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}