{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#balance().mjava","commits":[{"id":"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","date":1210940570,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#balance().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Balance the tree for best search performance\n   */\n  public void balance() {\n    // System.out.print(\"Before root splitchar = \");\n    // System.out.println(sc[root]);\n\n    int i = 0, n = length;\n    String[] k = new String[n];\n    char[] v = new char[n];\n    Iterator iter = new Iterator();\n    while (iter.hasMoreElements()) {\n      v[i] = iter.getValue();\n      k[i++] = (String) iter.nextElement();\n    }\n    init();\n    insertBalanced(k, v, 0, n);\n\n    // With uniform letter distribution sc[root] should be around 'm'\n    // System.out.print(\"After root splitchar = \");\n    // System.out.println(sc[root]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#balance().mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/TernaryTree#balance().mjava","sourceNew":"  /**\n   * Balance the tree for best search performance\n   */\n  public void balance() {\n    // System.out.print(\"Before root splitchar = \");\n    // System.out.println(sc[root]);\n\n    int i = 0, n = length;\n    String[] k = new String[n];\n    char[] v = new char[n];\n    Iterator iter = new Iterator();\n    while (iter.hasMoreElements()) {\n      v[i] = iter.getValue();\n      k[i++] = (String) iter.nextElement();\n    }\n    init();\n    insertBalanced(k, v, 0, n);\n\n    // With uniform letter distribution sc[root] should be around 'm'\n    // System.out.print(\"After root splitchar = \");\n    // System.out.println(sc[root]);\n  }\n\n","sourceOld":"  /**\n   * Balance the tree for best search performance\n   */\n  public void balance() {\n    // System.out.print(\"Before root splitchar = \");\n    // System.out.println(sc[root]);\n\n    int i = 0, n = length;\n    String[] k = new String[n];\n    char[] v = new char[n];\n    Iterator iter = new Iterator();\n    while (iter.hasMoreElements()) {\n      v[i] = iter.getValue();\n      k[i++] = (String) iter.nextElement();\n    }\n    init();\n    insertBalanced(k, v, 0, n);\n\n    // With uniform letter distribution sc[root] should be around 'm'\n    // System.out.print(\"After root splitchar = \");\n    // System.out.println(sc[root]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"dbb53146e3651ed4ebca43f69ee26f9150c6cb5a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}