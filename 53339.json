{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d91b7936af3081e704512ac1234340133e59904","date":1332109642,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d","date":1333288336,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    \n    os = dir.createOutput(\"bar\", newIOContext(random));\n    os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n    os.close();\n    is = dir.openInput(\"bar\", newIOContext(random));\n    checkRandomReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    final IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    final IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":["b6f9be74ca7baaef11857ad002cad40419979516"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    Random random = random();\n    final RAMDirectory dir = new RAMDirectory();\n    IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    \n    os = dir.createOutput(\"bar\", newIOContext(random));\n    os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n    os.close();\n    is = dir.openInput(\"bar\", newIOContext(random));\n    checkRandomReads(is);\n    is.close();\n    dir.close();\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    final RAMDirectory dir = new RAMDirectory();\n    IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    \n    os = dir.createOutput(\"bar\", newIOContext(random));\n    os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n    os.close();\n    is = dir.openInput(\"bar\", newIOContext(random));\n    checkRandomReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the IndexInput methods of any impl\n  public void testRawIndexInputRead() throws IOException {\n    for (int i = 0; i < 10; i++) {\n      Random random = random();\n      final Directory dir = newDirectory();\n      IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n      os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n      os.close();\n      IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n      checkReads(is, IOException.class);\n      is.close();\n    \n      os = dir.createOutput(\"bar\", newIOContext(random));\n      os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n      os.close();\n      is = dir.openInput(\"bar\", newIOContext(random));\n      checkRandomReads(is);\n      is.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    Random random = random();\n    final RAMDirectory dir = new RAMDirectory();\n    IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    \n    os = dir.createOutput(\"bar\", newIOContext(random));\n    os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n    os.close();\n    is = dir.openInput(\"bar\", newIOContext(random));\n    checkRandomReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexInput#testRawIndexInputRead().mjava","sourceNew":"  // this test checks the IndexInput methods of any impl\n  public void testRawIndexInputRead() throws IOException {\n    for (int i = 0; i < 10; i++) {\n      Random random = random();\n      final Directory dir = newDirectory();\n      IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n      os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n      os.close();\n      IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n      checkReads(is, IOException.class);\n      is.close();\n    \n      os = dir.createOutput(\"bar\", newIOContext(random));\n      os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n      os.close();\n      is = dir.openInput(\"bar\", newIOContext(random));\n      checkRandomReads(is);\n      is.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // this test checks the raw IndexInput methods as it uses RAMIndexInput which extends IndexInput directly\n  public void testRawIndexInputRead() throws IOException {\n    Random random = random();\n    final RAMDirectory dir = new RAMDirectory();\n    IndexOutput os = dir.createOutput(\"foo\", newIOContext(random));\n    os.writeBytes(READ_TEST_BYTES, READ_TEST_BYTES.length);\n    os.close();\n    IndexInput is = dir.openInput(\"foo\", newIOContext(random));\n    checkReads(is, IOException.class);\n    is.close();\n    \n    os = dir.createOutput(\"bar\", newIOContext(random));\n    os.writeBytes(RANDOM_TEST_BYTES, RANDOM_TEST_BYTES.length);\n    os.close();\n    is = dir.openInput(\"bar\", newIOContext(random));\n    checkRandomReads(is);\n    is.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["7d91b7936af3081e704512ac1234340133e59904"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7d91b7936af3081e704512ac1234340133e59904":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"56572ec06f1407c066d6b7399413178b33176cd8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"]},"commit2Childs":{"d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7d91b7936af3081e704512ac1234340133e59904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d91b7936af3081e704512ac1234340133e59904":["d084f7f1be0a54dfb8f954cbb35fb9b045f9a79d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}