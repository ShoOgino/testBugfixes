{"path":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","commits":[{"id":"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e","date":1367905455,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(2);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(2);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb66d17b65c8a1ec10b2e3c90b62f6df36a446c","date":1368898335,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(2);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(2);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f","date":1397994222,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // flush() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.flush();\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testDiskFull().mjava","sourceNew":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDiskFull() throws IOException {\n    // test writeBytes\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    final byte[] bytes = new byte[] { 1, 2};\n    IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.writeBytes(bytes, bytes.length); // first write should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.writeBytes(bytes, bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n    \n    // test copyBytes\n    dir = newMockDirectory();\n    dir.setMaxSizeInBytes(3);\n    out = dir.createOutput(\"foo\", IOContext.DEFAULT);\n    out.copyBytes(new ByteArrayDataInput(bytes), bytes.length); // first copy should succeed\n    // close() to ensure the written bytes are not buffered and counted\n    // against the directory size\n    out.close();\n    out = dir.createOutput(\"bar\", IOContext.DEFAULT);\n    try {\n      out.copyBytes(new ByteArrayDataInput(bytes), bytes.length);\n      fail(\"should have failed on disk full\");\n    } catch (IOException e) {\n      // expected\n    }\n    out.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f":["4bb66d17b65c8a1ec10b2e3c90b62f6df36a446c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"4bb66d17b65c8a1ec10b2e3c90b62f6df36a446c":["7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"]},"commit2Childs":{"7ffaf83ebe420f1af7578f7a9e9d079c184edd3e":["4bb66d17b65c8a1ec10b2e3c90b62f6df36a446c"],"72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ffaf83ebe420f1af7578f7a9e9d079c184edd3e"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4bb66d17b65c8a1ec10b2e3c90b62f6df36a446c":["72feb75398b9bcb44dddbdbf9fd81f6ab6646d0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}