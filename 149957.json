{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","commits":[{"id":"25f698887111a682424e759ba36083180899a1fd","date":1423588899,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query1 = new BooleanQuery();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.rewrite(reader);\n    assertTrue(rewritten1 instanceof TermQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery query2 = new BooleanQuery();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2, true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.getClass().getName(), scorer instanceof BooleanTopLevelScorers.BoostedScorer);\n    assertEquals(0, ((BooleanTopLevelScorers.BoostedScorer) scorer).boost, 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c","date":1433506692,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query1 = new BooleanQuery();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery query2 = new BooleanQuery();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2, true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query1 = new BooleanQuery();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.rewrite(reader);\n    assertTrue(rewritten1 instanceof TermQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery query2 = new BooleanQuery();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2, true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertTrue(scorer.getClass().getName(), scorer instanceof BooleanTopLevelScorers.BoostedScorer);\n    assertEquals(0, ((BooleanTopLevelScorers.BoostedScorer) scorer).boost, 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery query1 = new BooleanQuery();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery query2 = new BooleanQuery();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2, true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0), null);\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof ConstantScoreQuery);\n    assertEquals(0f, rewritten1.getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632","date":1449148233,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanRewrites#testSingleFilterClause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testSingleFilterClause().mjava","sourceNew":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSingleFilterClause() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field f = newTextField(\"field\", \"a\", Field.Store.NO);\n    doc.add(f);\n    w.addDocument(doc);\n    w.commit();\n\n    DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    BooleanQuery.Builder query1 = new BooleanQuery.Builder();\n    query1.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n\n    // Single clauses rewrite to a term query\n    final Query rewritten1 = query1.build().rewrite(reader);\n    assertTrue(rewritten1 instanceof BoostQuery);\n    assertEquals(0f, ((BoostQuery) rewritten1).getBoost(), 0f);\n\n    // When there are two clauses, we cannot rewrite, but if one of them creates\n    // a null scorer we will end up with a single filter scorer and will need to\n    // make sure to set score=0\n    BooleanQuery.Builder query2 = new BooleanQuery.Builder();\n    query2.add(new TermQuery(new Term(\"field\", \"a\")), Occur.FILTER);\n    query2.add(new TermQuery(new Term(\"field\", \"b\")), Occur.SHOULD);\n    final Weight weight = searcher.createNormalizedWeight(query2.build(), true);\n    final Scorer scorer = weight.scorer(reader.leaves().get(0));\n    assertEquals(0, scorer.nextDoc());\n    assertTrue(scorer.getClass().getName(), scorer instanceof FilterScorer);\n    assertEquals(0f, scorer.score(), 0f);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["25f698887111a682424e759ba36083180899a1fd"],"25f698887111a682424e759ba36083180899a1fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"59a0f907db1bc6eb97b13f9c1ef2191d14b5e632":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25f698887111a682424e759ba36083180899a1fd"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["59a0f907db1bc6eb97b13f9c1ef2191d14b5e632"],"0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"25f698887111a682424e759ba36083180899a1fd":["0ab7a7b7d9840c6df78aaf2d36b9e8765da1069c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}