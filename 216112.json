{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#single().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#single().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestParallelReader#single().mjava","sourceNew":"  // Fields 1-4 indexed together:\n  private Searcher single() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d1 = new Document();\n    d1.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f2\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f3\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f4\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d1);\n    Document d2 = new Document();\n    d2.add(new Field(\"f1\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f3\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f4\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d2);\n    w.close();\n\n    return new IndexSearcher(dir, false);\n  }\n\n","sourceOld":"  // Fields 1-4 indexed together:\n  private Searcher single() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d1 = new Document();\n    d1.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f2\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f3\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f4\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d1);\n    Document d2 = new Document();\n    d2.add(new Field(\"f1\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f3\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f4\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d2);\n    w.close();\n\n    return new IndexSearcher(dir, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestParallelReader#single().mjava","sourceNew":null,"sourceOld":"  // Fields 1-4 indexed together:\n  private Searcher single() throws IOException {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n    Document d1 = new Document();\n    d1.add(new Field(\"f1\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f2\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f3\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    d1.add(new Field(\"f4\", \"v1\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d1);\n    Document d2 = new Document();\n    d2.add(new Field(\"f1\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f2\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f3\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    d2.add(new Field(\"f4\", \"v2\", Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(d2);\n    w.close();\n\n    return new IndexSearcher(dir, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}