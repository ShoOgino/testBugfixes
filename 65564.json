{"path":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","commits":[{"id":"f84016eb90ced21bc34d0811003bdc7db8ed7b39","date":1353258781,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","pathOld":"/dev/null","sourceNew":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new PackedLongDocValuesField(\"dv2\", 5));\n    doc.add(new StraightBytesDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","sourceNew":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new PackedLongDocValuesField(\"dv2\", 5));\n    doc.add(new StraightBytesDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    // Store the index in memory:\n    Directory directory = newDirectory();\n    // To store an index on disk, use this instead:\n    // Directory directory = FSDirectory.open(new File(\"/tmp/testindex\"));\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new PackedLongDocValuesField(\"dv2\", 5));\n    doc.add(new StraightBytesDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef","date":1358808656,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","sourceNew":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new LongDocValuesField(\"dv2\", 5));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new PackedLongDocValuesField(\"dv2\", 5));\n    doc.add(new StraightBytesDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","sourceNew":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new NumericDocValuesField(\"dv2\", 5));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedBytesDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new LongDocValuesField(\"dv2\", 5));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec08217282b5e9df023dcdff55c745ff68b1c7d","date":1359392781,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseDocValuesFormatTestCase#testThreeFieldsMixed().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestDemoDocValue#testDemoThreeFieldsMixed().mjava","sourceNew":"  public void testThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n    conf.setCodec(getCodec());\n    IndexWriter iwriter = new IndexWriter(directory, conf);\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new NumericDocValuesField(\"dv2\", 5));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testDemoThreeFieldsMixed() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n\n    Directory directory = newDirectory();\n    // we don't use RandomIndexWriter because it might add more docvalues than we expect !!!!1\n    IndexWriter iwriter = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    String longTerm = \"longtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongtermlongterm\";\n    String text = \"This is the text to be indexed. \" + longTerm;\n    doc.add(newTextField(\"fieldname\", text, Field.Store.YES));\n    doc.add(new SortedDocValuesField(\"dv1\", new BytesRef(\"hello hello\")));\n    doc.add(new NumericDocValuesField(\"dv2\", 5));\n    doc.add(new BinaryDocValuesField(\"dv3\", new BytesRef(\"hello world\")));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexReader ireader = DirectoryReader.open(directory); // read-only=true\n    IndexSearcher isearcher = new IndexSearcher(ireader);\n\n    assertEquals(1, isearcher.search(new TermQuery(new Term(\"fieldname\", longTerm)), 1).totalHits);\n    Query query = new TermQuery(new Term(\"fieldname\", \"text\"));\n    TopDocs hits = isearcher.search(query, null, 1);\n    assertEquals(1, hits.totalHits);\n    BytesRef scratch = new BytesRef();\n    // Iterate through the results:\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      StoredDocument hitDoc = isearcher.doc(hits.scoreDocs[i].doc);\n      assertEquals(text, hitDoc.get(\"fieldname\"));\n      assert ireader.leaves().size() == 1;\n      SortedDocValues dv = ireader.leaves().get(0).reader().getSortedDocValues(\"dv1\");\n      int ord = dv.getOrd(0);\n      dv.lookupOrd(ord, scratch);\n      assertEquals(new BytesRef(\"hello hello\"), scratch);\n      NumericDocValues dv2 = ireader.leaves().get(0).reader().getNumericDocValues(\"dv2\");\n      assertEquals(5, dv2.get(hits.scoreDocs[i].doc));\n      BinaryDocValues dv3 = ireader.leaves().get(0).reader().getBinaryDocValues(\"dv3\");\n      dv3.get(hits.scoreDocs[i].doc, scratch);\n      assertEquals(new BytesRef(\"hello world\"), scratch);\n    }\n\n    ireader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["f84016eb90ced21bc34d0811003bdc7db8ed7b39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f84016eb90ced21bc34d0811003bdc7db8ed7b39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"]},"commit2Childs":{"ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["ac7f2e023a71df327ed9bc0bea2230ce5c59b2ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f84016eb90ced21bc34d0811003bdc7db8ed7b39","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f84016eb90ced21bc34d0811003bdc7db8ed7b39":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2ec08217282b5e9df023dcdff55c745ff68b1c7d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2ec08217282b5e9df023dcdff55c745ff68b1c7d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}