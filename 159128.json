{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","sourceNew":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","sourceNew":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<Query>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","sourceNew":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query.build(), reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query, reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testFlattenTermAndPhrase2gram().mjava","sourceNew":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query.build(), reader, flatQueries, 1f );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","sourceOld":"  public void testFlattenTermAndPhrase2gram() throws Exception {\n    BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F, \"AA\")), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"BCD\", F, analyzerB), F), Occur.MUST);\n    query.add(toPhraseQuery(analyze(\"EFGH\", F, analyzerB), F), Occur.SHOULD);\n\n    FieldQuery fq = new FieldQuery( query.build(), true, true );\n    Set<Query> flatQueries = new HashSet<>();\n    fq.flatten( query.build(), reader, flatQueries );\n    assertCollectionQueries( flatQueries, tq( \"AA\" ), pqF( \"BC\", \"CD\" ), pqF( \"EF\", \"FG\", \"GH\" ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}