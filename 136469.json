{"path":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","commits":[{"id":"3391a28028ecc96dda5493b9daa0335db1482dc2","date":1116466243,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (!(o instanceof SpanTermQuery))\n      return false;\n    SpanTermQuery other = (SpanTermQuery)o;\n    return (this.getBoost() == other.getBoost())\n      && this.term.equals(other.term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d94a64293f00207eda11b4020807c44a16b5d8c5","date":1250519239,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  public boolean equals(Object o) {\n    if (!(o instanceof SpanTermQuery))\n      return false;\n    SpanTermQuery other = (SpanTermQuery)o;\n    return (this.getBoost() == other.getBoost())\n      && this.term.equals(other.term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanTermQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    SpanTermQuery other = (SpanTermQuery) obj;\n    if (term == null) {\n      if (other.term != null)\n        return false;\n    } else if (!term.equals(other.term))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d94a64293f00207eda11b4020807c44a16b5d8c5":["3391a28028ecc96dda5493b9daa0335db1482dc2"],"8a9e385641d717e641408d8fbbc62be8fc766357":["d94a64293f00207eda11b4020807c44a16b5d8c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3391a28028ecc96dda5493b9daa0335db1482dc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"d94a64293f00207eda11b4020807c44a16b5d8c5":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3391a28028ecc96dda5493b9daa0335db1482dc2"],"3391a28028ecc96dda5493b9daa0335db1482dc2":["d94a64293f00207eda11b4020807c44a16b5d8c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}