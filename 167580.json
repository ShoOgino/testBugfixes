{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","commits":[{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims;\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims;\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7","date":1456959208,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims;\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims;\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointsFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPointFormat.AssertingIntersectVisitor#visit(int,byte[]).mjava","sourceNew":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","sourceOld":"    @Override\n    public void visit(int docID, byte[] packedValue) throws IOException {\n\n      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:\n      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;\n\n      // This doc's packed value should be contained in the last cell passed to compare:\n      for(int dim=0;dim<numDims;dim++) {\n        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: \"dim=\" + dim + \" of \" +  numDims + \" value=\" + new BytesRef(packedValue);\n      }\n\n      // TODO: we should assert that this \"matches\" whatever relation the last call to compare had returned\n      assert packedValue.length == numDims * bytesPerDim;\n      if (numDims == 1) {\n        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);\n        if (cmp < 0) {\n          // ok\n        } else if (cmp == 0) {\n          assert lastDocID <= docID: \"doc ids are out of order when point values are the same!\";\n        } else {\n          // out of order!\n          assert false: \"point values are out of order\";\n        }\n        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);\n      }\n      in.visit(docID, packedValue);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["879e8cf5ab626b9bf29f1ef603e3a28601fcb1a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}