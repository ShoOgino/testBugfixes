{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse,Set[String]).mjava","commits":[{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  // Find the file indicated by the \"file=XXX\" parameter or the root of the conf directory on the local\n  // file system. Respects all the \"interesting\" stuff around what the resource loader does to find files.\n  public static File getAdminFileFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp,\n                                                Set<String> hiddenFiles) {\n    File adminFile = null;\n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        log.error(\"Can not access configuration directory!\");\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return null;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        log.error(\"Can not access: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return null;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        log.error(\"Invalid path: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return null;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    return adminFile;\n  }\n\n","sourceOld":"  // Find the file indicated by the \"file=XXX\" parameter or the root of the conf directory on the local\n  // file system. Respects all the \"interesting\" stuff around what the resource loader does to find files.\n  private File getAdminFileFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp) {\n    File adminFile = null;\n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        log.error(\"Can not access configuration directory!\");\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return null;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        log.error(\"Can not access: \"+ fname);\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return null;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        log.error(\"Invalid path: \"+ fname);\n        rsp.setException(new SolrException( ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return null;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    return adminFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  // Find the file indicated by the \"file=XXX\" parameter or the root of the conf directory on the local\n  // file system. Respects all the \"interesting\" stuff around what the resource loader does to find files.\n  public static File getAdminFileFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp,\n                                                Set<String> hiddenFiles) {\n    File adminFile = null;\n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        log.error(\"Can not access configuration directory!\");\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return null;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        log.error(\"Can not access: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return null;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        log.error(\"Invalid path: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return null;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    return adminFile;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#getAdminFileFromFileSystem(SolrQueryRequest,SolrQueryResponse,Set[String]).mjava","sourceNew":"  // Find the file indicated by the \"file=XXX\" parameter or the root of the conf directory on the local\n  // file system. Respects all the \"interesting\" stuff around what the resource loader does to find files.\n  public static File getAdminFileFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp,\n                                                Set<String> hiddenFiles) {\n    File adminFile = null;\n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        log.error(\"Can not access configuration directory!\");\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return null;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        log.error(\"Can not access: {}\", fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return null;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        log.error(\"Invalid path: {}\", fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return null;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    return adminFile;\n  }\n\n","sourceOld":"  // Find the file indicated by the \"file=XXX\" parameter or the root of the conf directory on the local\n  // file system. Respects all the \"interesting\" stuff around what the resource loader does to find files.\n  public static File getAdminFileFromFileSystem(SolrQueryRequest req, SolrQueryResponse rsp,\n                                                Set<String> hiddenFiles) {\n    File adminFile = null;\n    final SolrResourceLoader loader = req.getCore().getResourceLoader();\n    File configdir = new File( loader.getConfigDir() );\n    if (!configdir.exists()) {\n      // TODO: maybe we should just open it this way to start with?\n      try {\n        configdir = new File( loader.getClassLoader().getResource(loader.getConfigDir()).toURI() );\n      } catch (URISyntaxException e) {\n        log.error(\"Can not access configuration directory!\");\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access configuration directory!\", e));\n        return null;\n      }\n    }\n    String fname = req.getParams().get(\"file\", null);\n    if( fname == null ) {\n      adminFile = configdir;\n    }\n    else {\n      fname = fname.replace( '\\\\', '/' ); // normalize slashes\n      if( hiddenFiles.contains( fname.toUpperCase(Locale.ROOT) ) ) {\n        log.error(\"Can not access: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Can not access: \"+fname ));\n        return null;\n      }\n      if( fname.indexOf( \"..\" ) >= 0 ) {\n        log.error(\"Invalid path: \"+ fname);\n        rsp.setException(new SolrException( SolrException.ErrorCode.FORBIDDEN, \"Invalid path: \"+fname ));\n        return null;\n      }\n      adminFile = new File( configdir, fname );\n    }\n    return adminFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7455ee5c847b2ee7e44656e4218141f62dacb572":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7455ee5c847b2ee7e44656e4218141f62dacb572"],"575e66bd4b2349209027f6801184da7fc3cba13f":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7455ee5c847b2ee7e44656e4218141f62dacb572","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","575e66bd4b2349209027f6801184da7fc3cba13f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}