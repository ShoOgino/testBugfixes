{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      compressor.reset();\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n\n      if (compressor.needsInput()) {\n        // no output\n        out.writeVInt(0);\n        return;\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      compressor.reset();\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n\n      if (compressor.needsInput()) {\n        // no output\n        out.writeVInt(0);\n        return;\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6","date":1353340695,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      compressor.reset();\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n\n      if (compressor.needsInput()) {\n        // no output\n        assert len == 0 : len;\n        out.writeVInt(0);\n        return;\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","sourceOld":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      compressor.reset();\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n\n      if (compressor.needsInput()) {\n        // no output\n        out.writeVInt(0);\n        return;\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressionMode.DeflateCompressor#compress(byte[],int,int,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void compress(byte[] bytes, int off, int len, DataOutput out) throws IOException {\n      compressor.reset();\n      compressor.setInput(bytes, off, len);\n      compressor.finish();\n\n      if (compressor.needsInput()) {\n        // no output\n        assert len == 0 : len;\n        out.writeVInt(0);\n        return;\n      }\n\n      int totalCount = 0;\n      for (;;) {\n        final int count = compressor.deflate(compressed, totalCount, compressed.length - totalCount);\n        totalCount += count;\n        assert totalCount <= compressed.length;\n        if (compressor.finished()) {\n          break;\n        } else {\n          compressed = ArrayUtil.grow(compressed);\n        }\n      }\n\n      out.writeVInt(totalCount);\n      out.writeBytes(compressed, totalCount);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}