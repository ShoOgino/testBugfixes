{"path":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    IndexReader reader = createReaderWithNDocs(maxDoc);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    IndexReader reader = createReaderWithNDocs(maxDoc);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random, maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/util/TestScoredDocIDsUtils#testAllDocs().mjava","sourceNew":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testAllDocs() throws Exception {\n    int maxDoc = 3;\n    Directory dir = newDirectory();\n    IndexReader reader = createReaderWithNDocs(random(), maxDoc, dir);\n    try {\n      ScoredDocIDs all = ScoredDocIdsUtils.createAllDocsScoredDocIDs(reader);\n      assertEquals(\"invalid size\", maxDoc, all.size());\n      ScoredDocIDsIterator iter = all.iterator();\n      int doc = 0;\n      while (iter.next()) {\n        assertEquals(\"invalid doc ID: \" + iter.getDocID(), doc++, iter.getDocID());\n        assertEquals(\"invalid score: \" + iter.getScore(), ScoredDocIDsIterator.DEFAULT_SCORE, iter.getScore(), 0.0f);\n      }\n      assertEquals(\"invalid maxDoc: \" + doc, maxDoc, doc);\n      \n      DocIdSet docIDs = all.getDocIDs();\n      assertTrue(\"should be cacheable\", docIDs.isCacheable());\n      DocIdSetIterator docIDsIter = docIDs.iterator();\n      assertEquals(\"nextDoc() hasn't been called yet\", -1, docIDsIter.docID());\n      assertEquals(0, docIDsIter.nextDoc());\n      assertEquals(1, docIDsIter.advance(1));\n      // if advance is smaller than current doc, advance to cur+1.\n      assertEquals(2, docIDsIter.advance(0));\n    } finally {\n      reader.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}