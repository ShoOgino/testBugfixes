{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","commits":[{"id":"5a48377c9931ddb38c784846217ff68d7dcd0b44","date":1363202036,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"/dev/null","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\"))\n    };\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n    \n    // top N of 1 for 'bar': we return this even though\n    // barbar is higher because exactFirst is enabled:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n    assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["65db3583737c7db5eff906d29bb04c5339c74990","889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65db3583737c7db5eff906d29bb04c5339c74990","date":1374186332,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\"))\n    };\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\"))\n    };\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n    \n    // top N of 1 for 'bar': we return this even though\n    // barbar is higher because exactFirst is enabled:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n    assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n  }\n\n","bugFix":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"889901f1b564e80868c57d5f3743f4ddbb4ce44a","date":1375181138,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new TermFreqPayload(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\"))\n    };\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","bugFix":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new TermFreqPayload(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\"))\n    };\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    // top N of 2, but only foo is available\n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n    assertEquals(1, results.size());\n    assertEquals(\"foo\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n    \n    // top N of 1 for 'bar': we return this even though\n    // barbar is higher because exactFirst is enabled:\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"bar\", results.get(0).key.toString());\n    assertEquals(10, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n    \n    // top N Of 2 for 'b'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n    assertEquals(2, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    \n    // top N of 3 for 'ba'\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n    assertEquals(3, results.size());\n    assertEquals(\"barbar\", results.get(0).key.toString());\n    assertEquals(12, results.get(0).value, 0.01F);\n    assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n    assertEquals(\"bar\", results.get(1).key.toString());\n    assertEquals(10, results.get(1).value, 0.01F);\n    assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n    assertEquals(\"barbara\", results.get(2).key.toString());\n    assertEquals(6, results.get(2).value, 0.01F);\n    assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<TermFreqPayload> keys = shuffle(\n      new TermFreqPayload(\"foo\", 50, new BytesRef(\"hello\")),\n      new TermFreqPayload(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new TermFreqPayload(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new TermFreqPayload(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new TermFreqPayload(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new TermFreqPayload(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(_TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    AnalyzingSuggester suggester = new AnalyzingSuggester(new MockAnalyzer(random(), MockTokenizer.KEYWORD, false));\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggesterTest#testKeywordWithPayloads().mjava","sourceNew":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    Directory tempDir = getDirectory();\n    AnalyzingSuggester suggester = new AnalyzingSuggester(tempDir, \"suggest\", analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n    IOUtils.close(analyzer, tempDir);\n  }\n\n","sourceOld":"  public void testKeywordWithPayloads() throws Exception {\n    Iterable<Input> keys = shuffle(\n      new Input(\"foo\", 50, new BytesRef(\"hello\")),\n      new Input(\"bar\", 10, new BytesRef(\"goodbye\")),\n      new Input(\"barbar\", 12, new BytesRef(\"thank you\")),\n      new Input(\"bar\", 9, new BytesRef(\"should be deduplicated\")),\n      new Input(\"bar\", 8, new BytesRef(\"should also be deduplicated\")),\n      new Input(\"barbara\", 6, new BytesRef(\"for all the fish\")));\n    \n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.KEYWORD, false);\n    AnalyzingSuggester suggester = new AnalyzingSuggester(analyzer);\n    suggester.build(new InputArrayIterator(keys));\n    for (int i = 0; i < 2; i++) {\n      // top N of 2, but only foo is available\n      List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"f\", random()), false, 2);\n      assertEquals(1, results.size());\n      assertEquals(\"foo\", results.get(0).key.toString());\n      assertEquals(50, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"hello\"), results.get(0).payload);\n      \n      // top N of 1 for 'bar': we return this even though\n      // barbar is higher because exactFirst is enabled:\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"bar\", random()), false, 1);\n      assertEquals(1, results.size());\n      assertEquals(\"bar\", results.get(0).key.toString());\n      assertEquals(10, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(0).payload);\n      \n      // top N Of 2 for 'b'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"b\", random()), false, 2);\n      assertEquals(2, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      \n      // top N of 3 for 'ba'\n      results = suggester.lookup(TestUtil.stringToCharSequence(\"ba\", random()), false, 3);\n      assertEquals(3, results.size());\n      assertEquals(\"barbar\", results.get(0).key.toString());\n      assertEquals(12, results.get(0).value, 0.01F);\n      assertEquals(new BytesRef(\"thank you\"), results.get(0).payload);\n      assertEquals(\"bar\", results.get(1).key.toString());\n      assertEquals(10, results.get(1).value, 0.01F);\n      assertEquals(new BytesRef(\"goodbye\"), results.get(1).payload);\n      assertEquals(\"barbara\", results.get(2).key.toString());\n      assertEquals(6, results.get(2).value, 0.01F);\n      assertEquals(new BytesRef(\"for all the fish\"), results.get(2).payload);\n    }\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65db3583737c7db5eff906d29bb04c5339c74990":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6613659748fe4411a7dcf85266e55db1f95f7315","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["65db3583737c7db5eff906d29bb04c5339c74990"],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["6613659748fe4411a7dcf85266e55db1f95f7315"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"65db3583737c7db5eff906d29bb04c5339c74990":["889901f1b564e80868c57d5f3743f4ddbb4ce44a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["65db3583737c7db5eff906d29bb04c5339c74990","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"889901f1b564e80868c57d5f3743f4ddbb4ce44a":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}