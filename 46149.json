{"path":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/beans/TestDocumentObjectBinder#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    DocumentObjectBinder binder = new DocumentObjectBinder();\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> nl = null;\n    nl = parser.processResponse(new StringReader(xml));\n    QueryResponse res = new QueryResponse(nl, null);\n    SolrDocumentList solDocList = res.getResults();\n    List<Item> l = binder.getBeans(Item.class,res.getResults());\n    Assert.assertEquals(solDocList.size(), l.size());\n    Assert.assertEquals(solDocList.get(0).getFieldValue(\"features\"), l.get(0).features);\n\n    Item item = new Item();\n    item.id = \"aaa\";\n    item.categories = new String[] { \"aaa\", \"bbb\", \"ccc\" };\n    SolrInputDocument out = binder.toSolrInputDocument( item );\n\n    Assert.assertEquals( item.id, out.getFieldValue( \"id\" ) );\n    SolrInputField catfield = out.getField( \"cat\" );\n    Assert.assertEquals( 3, catfield.getValueCount() );\n    Assert.assertEquals( \"[aaa, bbb, ccc]\", catfield.getValue().toString() );\n\n    // Test the error on not settable stuff...\n    NotGettableItem ng = new NotGettableItem();\n    ng.setInStock( false );\n    try {\n      out = binder.toSolrInputDocument( ng );\n      Assert.fail( \"Should throw an error\" );\n    }\n    catch( RuntimeException ex ) {\n      // ok -- this should happen...\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}