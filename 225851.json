{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","commits":[{"id":"bb3e075eaa5788b2762ec235bf72b069cefe3f50","date":1548244981,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    String confJwkUrl = (String) pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n    if (oidcDiscoveryConfig != null) {\n      String jwkUrl = oidcDiscoveryConfig.getJwksUrl();\n      setupJwkUrl(jwkUrl);\n    } else if (confJwkUrl != null) {\n      setupJwkUrl(confJwkUrl);\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2682a1cd25864ccdc1b44bf047bd08700f28ba06","date":1548321910,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    String confJwkUrl = (String) pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n    if (oidcDiscoveryConfig != null) {\n      String jwkUrl = oidcDiscoveryConfig.getJwksUrl();\n      setupJwkUrl(jwkUrl);\n    } else if (confJwkUrl != null) {\n      setupJwkUrl(confJwkUrl);\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f67fad1a752e06d753afa1c41bcc27141d258f5","date":1555055351,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    String confJwkUrl = (String) pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n    if (oidcDiscoveryConfig != null) {\n      String jwkUrl = oidcDiscoveryConfig.getJwksUrl();\n      setupJwkUrl(jwkUrl);\n    } else if (confJwkUrl != null) {\n      setupJwkUrl(confJwkUrl);\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n        httpsJkws = null;\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","sourceOld":"  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    String confJwkUrl = (String) pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n    if (oidcDiscoveryConfig != null) {\n      String jwkUrl = oidcDiscoveryConfig.getJwksUrl();\n      setupJwkUrl(jwkUrl);\n    } else if (confJwkUrl != null) {\n      setupJwkUrl(confJwkUrl);\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b93409dee3306c3446b1f24bced7b660398bd3","date":1568113307,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    Object confJwkUrl = pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n\n    HttpsJwksFactory httpsJwksFactory = new HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD);\n    if (confJwkUrl != null) {\n      try {\n        List<String> urls = (confJwkUrl instanceof List) ? (List<String>)confJwkUrl : Collections.singletonList((String) confJwkUrl);\n        issuerConfig = new IssuerConfig(iss, urls);\n        issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n        verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfig);\n      } catch (ClassCastException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Parameter \" + PARAM_JWK_URL + \" must be either List or String\");\n      }\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        issuerConfig = new IssuerConfig(iss, jwks);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    } else if (oidcDiscoveryConfig != null) {\n      List<String> urls = Collections.singletonList(oidcDiscoveryConfig.getJwksUrl());\n      issuerConfig = new IssuerConfig(iss, urls);\n      issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n      verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfig);\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    String confJwkUrl = (String) pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n    if (oidcDiscoveryConfig != null) {\n      String jwkUrl = oidcDiscoveryConfig.getJwksUrl();\n      setupJwkUrl(jwkUrl);\n    } else if (confJwkUrl != null) {\n      setupJwkUrl(confJwkUrl);\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n        httpsJkws = null;\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":4,"author":"Jan Høydahl","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#initJwk(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void initJwk(Map<String, Object> pluginConfig) {\n    this.pluginConfig = pluginConfig;\n    Object confJwkUrl = pluginConfig.get(PARAM_JWK_URL);\n    Map<String, Object> confJwk = (Map<String, Object>) pluginConfig.get(PARAM_JWK);\n    long jwkCacheDuration = Long.parseLong((String) pluginConfig.getOrDefault(PARAM_JWK_CACHE_DURATION, \"3600\"));\n\n    jwtConsumer = null;\n    int jwkConfigured = confIdpConfigUrl != null ? 1 : 0;\n    jwkConfigured += confJwkUrl != null ? 1 : 0;\n    jwkConfigured += confJwk != null ? 1 : 0;\n    if (jwkConfigured > 1) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"JWTAuthPlugin needs to configure exactly one of \" +\n          PARAM_WELL_KNOWN_URL + \", \" + PARAM_JWK_URL + \" and \" + PARAM_JWK);\n    }\n    if (jwkConfigured == 0) {\n      log.warn(\"Initialized JWTAuthPlugin without any JWK config. Requests with jwk header will fail.\");\n    }\n\n    HttpsJwksFactory httpsJwksFactory = new HttpsJwksFactory(jwkCacheDuration, DEFAULT_REFRESH_REPRIEVE_THRESHOLD);\n    if (confJwkUrl != null) {\n      try {\n        List<String> urls = (confJwkUrl instanceof List) ? (List<String>)confJwkUrl : Collections.singletonList((String) confJwkUrl);\n        issuerConfig = new IssuerConfig(iss, urls);\n        issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n        verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfig);\n      } catch (ClassCastException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Parameter \" + PARAM_JWK_URL + \" must be either List or String\");\n      }\n    } else if (confJwk != null) {\n      try {\n        JsonWebKeySet jwks = parseJwkSet(confJwk);\n        issuerConfig = new IssuerConfig(iss, jwks);\n        verificationKeyResolver = new JwksVerificationKeyResolver(jwks.getJsonWebKeys());\n      } catch (JoseException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Invalid JWTAuthPlugin configuration, \" + PARAM_JWK + \" parse error\", e);\n      }\n    } else if (oidcDiscoveryConfig != null) {\n      List<String> urls = Collections.singletonList(oidcDiscoveryConfig.getJwksUrl());\n      issuerConfig = new IssuerConfig(iss, urls);\n      issuerConfig.setHttpsJwksFactory(httpsJwksFactory);\n      verificationKeyResolver = new JWTVerificationkeyResolver(issuerConfig);\n    }\n    initConsumer();\n    log.debug(\"JWK configured\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ac780c217504f0ca673ac5dcb98768984267c60":["43b93409dee3306c3446b1f24bced7b660398bd3"],"43b93409dee3306c3446b1f24bced7b660398bd3":["3f67fad1a752e06d753afa1c41bcc27141d258f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["bb3e075eaa5788b2762ec235bf72b069cefe3f50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ac780c217504f0ca673ac5dcb98768984267c60"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb3e075eaa5788b2762ec235bf72b069cefe3f50"]},"commit2Childs":{"1ac780c217504f0ca673ac5dcb98768984267c60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43b93409dee3306c3446b1f24bced7b660398bd3":["1ac780c217504f0ca673ac5dcb98768984267c60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3e075eaa5788b2762ec235bf72b069cefe3f50","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"3f67fad1a752e06d753afa1c41bcc27141d258f5":["43b93409dee3306c3446b1f24bced7b660398bd3"],"bb3e075eaa5788b2762ec235bf72b069cefe3f50":["3f67fad1a752e06d753afa1c41bcc27141d258f5","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2682a1cd25864ccdc1b44bf047bd08700f28ba06":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2682a1cd25864ccdc1b44bf047bd08700f28ba06"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}