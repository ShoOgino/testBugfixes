{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.termBuffer().clone();\n          curTermLength = termAtt.termLength();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.setTermBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":["8a255765a5625ff80fba75863de5a16ea392015e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c17d12803da6cadc96b3cdf15b0b940eddb28de","date":1323710889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n          tokEnd = offsetAtt.endOffset();\n          // if length by start + end offsets doesn't match the term text then assume\n          // this is a synonym and don't adjust the offsets.\n          hasIllegalOffsets = (tokStart + curTermLength) != tokEnd;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          if (hasIllegalOffsets) {\n            offsetAtt.setOffset(tokStart, tokEnd);\n          } else {\n            offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          }\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":["226f5e862af9059a60fe80d2b27e547bcd95971c"],"bugIntro":["4c807c4005aae1acaf5cebc9af40883985fb89a8","bbbdd19493fa8ae4bdac9205ae34e7387f08f304"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n          tokEnd = offsetAtt.endOffset();\n          // if length by start + end offsets doesn't match the term text then assume\n          // this is a synonym and don't adjust the offsets.\n          hasIllegalOffsets = (tokStart + curTermLength) != tokEnd;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          if (hasIllegalOffsets) {\n            offsetAtt.setOffset(tokStart, tokEnd);\n          } else {\n            offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          }\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n          tokEnd = offsetAtt.endOffset();\n          // if length by start + end offsets doesn't match the term text then assume\n          // this is a synonym and don't adjust the offsets.\n          hasIllegalOffsets = (tokStart + curTermLength) != tokEnd;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          if (hasIllegalOffsets) {\n            offsetAtt.setOffset(tokStart, tokEnd);\n          } else {\n            offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          }\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (curTermBuffer == null) {\n        if (!input.incrementToken()) {\n          return false;\n        } else {\n          curTermBuffer = termAtt.buffer().clone();\n          curTermLength = termAtt.length();\n          curGramSize = minGram;\n          curPos = 0;\n          tokStart = offsetAtt.startOffset();\n          tokEnd = offsetAtt.endOffset();\n          // if length by start + end offsets doesn't match the term text then assume\n          // this is a synonym and don't adjust the offsets.\n          hasIllegalOffsets = (tokStart + curTermLength) != tokEnd;\n        }\n      }\n      while (curGramSize <= maxGram) {\n        while (curPos+curGramSize <= curTermLength) {     // while there is input\n          clearAttributes();\n          termAtt.copyBuffer(curTermBuffer, curPos, curGramSize);\n          if (hasIllegalOffsets) {\n            offsetAtt.setOffset(tokStart, tokEnd);\n          } else {\n            offsetAtt.setOffset(tokStart + curPos, tokStart + curPos + curGramSize);\n          }\n          curPos++;\n          return true;\n        }\n        curGramSize++;                         // increase n-gram size\n        curPos = 0;\n      }\n      curTermBuffer = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a7347509fad0711ac30cb15a746e9a3830a38ebd","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4ceb6a6c707ada1df8bde804e25c98668e699a18"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}