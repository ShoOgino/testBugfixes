{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator#encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,BytesRef,long).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator#encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,BytesRef,long).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedTermFreqPayloadIteratorWrapper#encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,BytesRef,long).mjava","sourceNew":"  /** encodes an entry (bytes+(payload)+weight) to the provided writer */\n  protected void encode(ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, BytesRef payload, long weight) throws IOException {\n    int requiredLength = spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);\n    if (requiredLength >= buffer.length) {\n      buffer = ArrayUtil.grow(buffer, requiredLength);\n    }\n    output.reset(buffer);\n    output.writeBytes(spare.bytes, spare.offset, spare.length);\n    if (hasPayloads) {\n      output.writeBytes(payload.bytes, payload.offset, payload.length);\n      output.writeShort((short) payload.length);\n    }\n    output.writeLong(weight);\n    writer.write(buffer, 0, output.getPosition());\n  }\n\n","sourceOld":"  /** encodes an entry (bytes+(payload)+weight) to the provided writer */\n  protected void encode(ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, BytesRef payload, long weight) throws IOException {\n    int requiredLength = spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);\n    if (requiredLength >= buffer.length) {\n      buffer = ArrayUtil.grow(buffer, requiredLength);\n    }\n    output.reset(buffer);\n    output.writeBytes(spare.bytes, spare.offset, spare.length);\n    if (hasPayloads) {\n      output.writeBytes(payload.bytes, payload.offset, payload.length);\n      output.writeShort((short) payload.length);\n    }\n    output.writeLong(weight);\n    writer.write(buffer, 0, output.getPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator#encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,BytesRef,Set[BytesRef],long).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/SortedInputIterator#encode(ByteSequencesWriter,ByteArrayDataOutput,byte[],BytesRef,BytesRef,long).mjava","sourceNew":"  /** encodes an entry (bytes+(payload)+(contexts)+weight) to the provided writer */\n  protected void encode(ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, BytesRef payload, Set<BytesRef> contexts, long weight) throws IOException {\n    int requiredLength = spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);\n    if (hasContexts) {\n      for(BytesRef ctx : contexts) {\n        requiredLength += 2 + ctx.length;\n      }\n      requiredLength += 2; // for length of contexts\n    }\n    if (requiredLength >= buffer.length) {\n      buffer = ArrayUtil.grow(buffer, requiredLength);\n    }\n    output.reset(buffer);\n    output.writeBytes(spare.bytes, spare.offset, spare.length);\n    if (hasPayloads) {\n      output.writeBytes(payload.bytes, payload.offset, payload.length);\n      output.writeShort((short) payload.length);\n    }\n    if (hasContexts) {\n      for (BytesRef ctx : contexts) {\n        output.writeBytes(ctx.bytes, ctx.offset, ctx.length);\n        output.writeShort((short) ctx.length);\n      }\n      output.writeShort((short) contexts.size());\n    }\n    output.writeLong(weight);\n    writer.write(buffer, 0, output.getPosition());\n  }\n\n","sourceOld":"  /** encodes an entry (bytes+(payload)+weight) to the provided writer */\n  protected void encode(ByteSequencesWriter writer, ByteArrayDataOutput output, byte[] buffer, BytesRef spare, BytesRef payload, long weight) throws IOException {\n    int requiredLength = spare.length + 8 + ((hasPayloads) ? 2 + payload.length : 0);\n    if (requiredLength >= buffer.length) {\n      buffer = ArrayUtil.grow(buffer, requiredLength);\n    }\n    output.reset(buffer);\n    output.writeBytes(spare.bytes, spare.offset, spare.length);\n    if (hasPayloads) {\n      output.writeBytes(payload.bytes, payload.offset, payload.length);\n      output.writeShort((short) payload.length);\n    }\n    output.writeLong(weight);\n    writer.write(buffer, 0, output.getPosition());\n  }\n\n","bugFix":null,"bugIntro":["9c800a7949e97c8f516697a05d0d9439650e82ab"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"]},"commit2Childs":{"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}