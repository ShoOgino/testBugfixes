{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesLine(double,double,double,double,double,double,double,double,boolean).mjava","commits":[{"id":"b73ab989727307be90eb75c2ce4ef41d383974f3","date":1580322291,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesLine(double,double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesLine(double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** Returns true if the line crosses any edge in this edge subtree */\n  protected boolean crossesLine(double minX, double maxX, double minY, double maxY, double a2x, double a2y, double b2x, double b2y, boolean includeBoundary) {\n    if (minY <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n\n      boolean outside = (a1y < minY && b1y < minY) ||\n          (a1y > maxY && b1y > maxY) ||\n          (a1x < minX && b1x < minX) ||\n          (a1x > maxX && b1x > maxX);\n      if (outside == false) {\n        if (includeBoundary) {\n          if (lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        } else {\n          if (lineCrossesLine(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        }\n      }\n      if (left != null && left.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n      if (right != null && maxY >= low && right.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the line crosses any edge in this edge subtree */\n  protected boolean crossesLine(double minX, double maxX, double minY, double maxY, double a2x, double a2y, double b2x, double b2y) {\n    if (minY <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n\n      boolean outside = (a1y < minY && b1y < minY) ||\n          (a1y > maxY && b1y > maxY) ||\n          (a1x < minX && b1x < minX) ||\n          (a1x > maxX && b1x > maxX);\n      if (outside == false && lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n        return true;\n      }\n\n      if (left != null && left.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y)) {\n        return true;\n      }\n      if (right != null && maxY >= low && right.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesLine(double,double,double,double,double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesLine(double,double,double,double,double,double,double,double,boolean).mjava","sourceNew":"  /** Returns true if the line crosses any edge in this edge subtree */\n  boolean crossesLine(double minX, double maxX, double minY, double maxY, double a2x, double a2y, double b2x, double b2y, boolean includeBoundary) {\n    if (minY <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n\n      boolean outside = (a1y < minY && b1y < minY) ||\n          (a1y > maxY && b1y > maxY) ||\n          (a1x < minX && b1x < minX) ||\n          (a1x > maxX && b1x > maxX);\n      if (outside == false) {\n        if (includeBoundary) {\n          if (lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        } else {\n          if (lineCrossesLine(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        }\n      }\n      if (left != null && left.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n      if (right != null && maxY >= low && right.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the line crosses any edge in this edge subtree */\n  protected boolean crossesLine(double minX, double maxX, double minY, double maxY, double a2x, double a2y, double b2x, double b2y, boolean includeBoundary) {\n    if (minY <= max) {\n      double a1x = x1;\n      double a1y = y1;\n      double b1x = x2;\n      double b1y = y2;\n\n      boolean outside = (a1y < minY && b1y < minY) ||\n          (a1y > maxY && b1y > maxY) ||\n          (a1x < minX && b1x < minX) ||\n          (a1x > maxX && b1x > maxX);\n      if (outside == false) {\n        if (includeBoundary) {\n          if (lineCrossesLineWithBoundary(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        } else {\n          if (lineCrossesLine(a1x, a1y, b1x, b1y, a2x, a2y, b2x, b2y)) {\n            return true;\n          }\n        }\n      }\n      if (left != null && left.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n      if (right != null && maxY >= low && right.crossesLine(minX, maxX, minY, maxY, a2x, a2y, b2x, b2y, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"]},"commit2Childs":{"b73ab989727307be90eb75c2ce4ef41d383974f3":["a923e28c9d079048c6993884ec89c44f0380b923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b73ab989727307be90eb75c2ce4ef41d383974f3"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}