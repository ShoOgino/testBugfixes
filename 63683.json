{"path":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","commits":[{"id":"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3","date":1162241591,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"/dev/null","sourceNew":"   // This tests that attempts to readBytes() past an EOF will fail, while\n   // reads up to the EOF will succeed. The EOF is determined by the\n   // BufferedIndexInput's arbitrary length() value.\n   public void testEOF() throws Exception {\n\t   MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n\t   // see that we can read all the bytes at one go:\n\t   checkReadBytes(input, (int)input.length(), 0);  \n\t   // go back and see that we can't read more than that, for small and\n\t   // large overflows:\n\t   int pos = (int)input.length()-10;\n\t   input.seek(pos);\n\t   checkReadBytes(input, 10, pos);  \n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"   // This tests that attempts to readBytes() past an EOF will fail, while\n   // reads up to the EOF will succeed. The EOF is determined by the\n   // BufferedIndexInput's arbitrary length() value.\n   public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"   // This tests that attempts to readBytes() past an EOF will fail, while\n   // reads up to the EOF will succeed. The EOF is determined by the\n   // BufferedIndexInput's arbitrary length() value.\n   public void testEOF() throws Exception {\n\t   MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n\t   // see that we can read all the bytes at one go:\n\t   checkReadBytes(input, (int)input.length(), 0);  \n\t   // go back and see that we can't read more than that, for small and\n\t   // large overflows:\n\t   int pos = (int)input.length()-10;\n\t   input.seek(pos);\n\t   checkReadBytes(input, 10, pos);  \n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n\t   input.seek(pos);\n\t   try {\n\t\t   checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"   // This tests that attempts to readBytes() past an EOF will fail, while\n   // reads up to the EOF will succeed. The EOF is determined by the\n   // BufferedIndexInput's arbitrary length() value.\n   public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput#testEOF().mjava","sourceNew":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","sourceOld":"  // This tests that attempts to readBytes() past an EOF will fail, while\n  // reads up to the EOF will succeed. The EOF is determined by the\n  // BufferedIndexInput's arbitrary length() value.\n  public void testEOF() throws Exception {\n     MyBufferedIndexInput input = new MyBufferedIndexInput(1024);\n     // see that we can read all the bytes at one go:\n     checkReadBytes(input, (int)input.length(), 0);  \n     // go back and see that we can't read more than that, for small and\n     // large overflows:\n     int pos = (int)input.length()-10;\n     input.seek(pos);\n     checkReadBytes(input, 10, pos);  \n     input.seek(pos);\n     try {\n       checkReadBytes(input, 11, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 50, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n     input.seek(pos);\n     try {\n       checkReadBytes(input, 100000, pos);\n           fail(\"Block read past end of file\");\n       } catch (IOException e) {\n           /* success */\n       }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e05018fda5a2dd9ffd4f4f1813bd64b20bb4c6c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}