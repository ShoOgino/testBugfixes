{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","commits":[{"id":"6005b05c19356dfca18f39979caeeb6b85bc88bb","date":1331204804,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":1,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector,int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getSearchGroups(AbstractFirstPassGroupingCollector[#],int,boolean).mjava","sourceNew":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","sourceOld":"  private Collection<SearchGroup<BytesRef>> getSearchGroups(AbstractFirstPassGroupingCollector<?> c, int groupOffset, boolean fillFields) {\n    if (TermFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      return ((TermFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n    } else if (FunctionFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      Collection<SearchGroup<MutableValue>> mutableValueGroups = ((FunctionFirstPassGroupingCollector) c).getTopGroups(groupOffset, fillFields);\n      if (mutableValueGroups == null) {\n        return null;\n      }\n\n      List<SearchGroup<BytesRef>> groups = new ArrayList<SearchGroup<BytesRef>>(mutableValueGroups.size());\n      for (SearchGroup<MutableValue> mutableValueGroup : mutableValueGroups) {\n        SearchGroup<BytesRef> sg = new SearchGroup<BytesRef>();\n        sg.groupValue = mutableValueGroup.groupValue.exists() ? ((MutableValueStr) mutableValueGroup.groupValue).value : null;\n        sg.sortValues = mutableValueGroup.sortValues;\n        groups.add(sg);\n      }\n      return groups;\n    } else if (DVFirstPassGroupingCollector.class.isAssignableFrom(c.getClass())) {\n      @SuppressWarnings(\"unchecked\")\n      Collection<SearchGroup<BytesRef>> topGroups = ((DVFirstPassGroupingCollector<BytesRef>) c).getTopGroups(groupOffset, fillFields);\n      return topGroups;\n    }\n    fail();\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6005b05c19356dfca18f39979caeeb6b85bc88bb"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6005b05c19356dfca18f39979caeeb6b85bc88bb":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","6005b05c19356dfca18f39979caeeb6b85bc88bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}