{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01ec3c75d8281911b1761926d744acd529f72868","date":1474625606,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues(\"dim\");\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues(\"dim\");\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues();\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\"dim\",\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(idValues.get(docID), NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePointsFormatTestCase#testAllPointDocsDeletedInSegment().mjava","sourceNew":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiBits.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues(\"dim\");\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","sourceOld":"  public void testAllPointDocsDeletedInSegment() throws Exception {\n    Directory dir = getDirectory(20);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    IndexWriter w = new IndexWriter(dir, iwc);\n    byte[] point = new byte[4];\n    for(int i=0;i<10;i++) {\n      Document doc = new Document();\n      NumericUtils.intToSortableBytes(i, point, 0);\n      doc.add(new BinaryPoint(\"dim\", point));\n      doc.add(new NumericDocValuesField(\"id\", i));\n      doc.add(newStringField(\"x\", \"x\", Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.addDocument(new Document());\n    w.deleteDocuments(new Term(\"x\", \"x\"));\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    w.close();\n    DirectoryReader r = DirectoryReader.open(dir);\n    assertEquals(1, r.numDocs());\n    Bits liveDocs = MultiFields.getLiveDocs(r);\n\n    for(LeafReaderContext ctx : r.leaves()) {\n      PointValues values = ctx.reader().getPointValues(\"dim\");\n\n      NumericDocValues idValues = ctx.reader().getNumericDocValues(\"id\");\n      if (idValues == null) {\n        // this is (surprisingly) OK, because if the random IWC flushes all 10 docs before the 11th doc is added, and force merge runs, it\n        // will drop the 100% deleted segments, and the \"id\" field never exists in the final single doc segment\n        continue;\n      }\n      int[] docIDToID = new int[ctx.reader().maxDoc()];\n      int docID;\n      while ((docID = idValues.nextDoc()) != NO_MORE_DOCS) {\n        docIDToID[docID] = (int) idValues.longValue();\n      }\n      \n      if (values != null) {\n        BitSet seen = new BitSet();\n        values.intersect(\n                         new IntersectVisitor() {\n                           @Override\n                           public Relation compare(byte[] minPacked, byte[] maxPacked) {\n                             return Relation.CELL_CROSSES_QUERY;\n                           }\n                           public void visit(int docID) {\n                             throw new IllegalStateException();\n                           }\n                           public void visit(int docID, byte[] packedValue) {\n                             if (liveDocs.get(docID)) {\n                               seen.set(docID);\n                             }\n                             assertEquals(docIDToID[docID], NumericUtils.sortableBytesToInt(packedValue, 0));\n                           }\n                         });\n        assertEquals(0, seen.cardinality());\n      }\n    }\n    IOUtils.close(r, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","01ec3c75d8281911b1761926d744acd529f72868"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"01ec3c75d8281911b1761926d744acd529f72868":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4522ffca5a1f420c6a02198c9332d7c596a30ca5","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["01ec3c75d8281911b1761926d744acd529f72868"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["04e775de416dd2d8067b10db1c8af975a1d5017e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"01ec3c75d8281911b1761926d744acd529f72868":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}