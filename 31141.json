{"path":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","commits":[{"id":"b374d78db8148ec6796fdf37148b33897ab40a8c","date":1351606544,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir,\n          dcore.getPropertiesName(), dcore.getCoreProperties()), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, SolrProperties.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, getCoreProps(instanceDir,\n          dcore.getPropertiesName(), dcore.getCoreProperties()), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config, solrLoader);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, SolrProperties.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, SolrProperties.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = getSchemaFromZk(zkConfigName, dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader,\n          ConfigSolrXml.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader, SolrProperties.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","date":1364946285,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, loader.getClassLoader(),\n          ConfigSolrXml.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, libLoader,\n          ConfigSolrXml.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#createFromZk(String,CoreDescriptor,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#createFromZk(String,CoreDescriptor).mjava","sourceNew":"  // Helper method to separate out creating a core from ZK as opposed to the\n  // \"usual\" way. See create()\n  SolrCore createFromZk(String instanceDir, CoreDescriptor dcore, SolrResourceLoader loader) {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n      \n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName,\n          loader.getClassLoader(), ConfigSolrXml.getCoreProperties(instanceDir,\n              dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(),\n          solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(),\n          config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n      \n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n  }\n\n","sourceOld":"  // Helper method to separate out creating a core from ZK as opposed to the \"usual\" way. See create()\n  private SolrCore createFromZk(String instanceDir, CoreDescriptor dcore)\n  {\n    try {\n      SolrResourceLoader solrLoader = null;\n      SolrConfig config = null;\n      String zkConfigName = null;\n      IndexSchema schema;\n      String collection = dcore.getCloudDescriptor().getCollectionName();\n      zkController.createCollectionZkNode(dcore.getCloudDescriptor());\n\n      zkConfigName = zkController.readConfigName(collection);\n      if (zkConfigName == null) {\n        log.error(\"Could not find config name for collection:\" + collection);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not find config name for collection:\" + collection);\n      }\n      solrLoader = new ZkSolrResourceLoader(instanceDir, zkConfigName, loader.getClassLoader(),\n          ConfigSolrXml.getCoreProperties(instanceDir, dcore), zkController);\n      config = getSolrConfigFromZk(zkConfigName, dcore.getConfigName(), solrLoader);\n      schema = IndexSchemaFactory.buildIndexSchema(dcore.getSchemaName(), config);\n      return new SolrCore(dcore.getName(), null, config, schema, dcore);\n\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    } catch (InterruptedException e) {\n      // Restore the interrupted status\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n          \"\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["a837c064b67fa63a9394136e31218b908cdcf783"],"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a837c064b67fa63a9394136e31218b908cdcf783":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cc2a5e90b34bfc6bb00b6261a7956c2c022c275":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b374d78db8148ec6796fdf37148b33897ab40a8c"],"b374d78db8148ec6796fdf37148b33897ab40a8c":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}