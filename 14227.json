{"path":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(\"/repositories.json\", true) == false) {\n      packageManager.zkClient.create(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\"+name+\".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\"+name+\".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\"+name+\".der\", IOUtils.toByteArray(new URL(uri+\"/publickey.der\").openStream()), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\" + name + \".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\" + name + \".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\" + name + \".der\", IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), true);\n  }\n\n","sourceOld":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(\"/repositories.json\", true) == false) {\n      packageManager.zkClient.create(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\"+name+\".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\"+name+\".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\"+name+\".der\", IOUtils.toByteArray(new URL(uri+\"/publickey.der\").openStream()), true);\n  }\n\n","bugFix":null,"bugIntro":["d218decf811b7a0a4d86218c54c79c74a962374b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\" + name + \".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\" + name + \".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\" + name + \".der\", IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), true);\n  }\n\n","sourceOld":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(\"/repositories.json\", true) == false) {\n      packageManager.zkClient.create(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(\"/repositories.json\", getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\"+name+\".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\"+name+\".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\"+name+\".der\", IOUtils.toByteArray(new URL(uri+\"/publickey.der\").openStream()), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d218decf811b7a0a4d86218c54c79c74a962374b","date":1578632144,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String repoName, String uri) throws Exception {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(repoName, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    addKey(IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), repoName + \".der\");\n  }\n\n","sourceOld":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\" + name + \".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\" + name + \".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\" + name + \".der\", IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), true);\n  }\n\n","bugFix":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8f0a7504661c8e51be5c63e87f9d79a36d9116c","date":1578657638,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String repoName, String uri) throws Exception {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(repoName, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    addKey(IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), repoName + \".der\");\n  }\n\n","sourceOld":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String name, String uri) throws KeeperException, InterruptedException, MalformedURLException, IOException {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(name, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    if (packageManager.zkClient.exists(\"/keys\", true)==false) packageManager.zkClient.create(\"/keys\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe\", true)==false) packageManager.zkClient.create(\"/keys/exe\", new byte[0], CreateMode.PERSISTENT, true);\n    if (packageManager.zkClient.exists(\"/keys/exe/\" + name + \".der\", true)==false) {\n      packageManager.zkClient.create(\"/keys/exe/\" + name + \".der\", new byte[0], CreateMode.PERSISTENT, true);\n    }\n    packageManager.zkClient.setData(\"/keys/exe/\" + name + \".der\", IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/RepositoryManager#addRepository(String,String).mjava","sourceNew":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String repoName, String uri) throws Exception {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(repoName, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    addKey(IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), repoName + \".der\");\n  }\n\n","sourceOld":"  /**\n   * Add a repository to Solr\n   */\n  public void addRepository(String repoName, String uri) throws Exception {\n    String existingRepositoriesJson = getRepositoriesJson(packageManager.zkClient);\n    log.info(existingRepositoriesJson);\n\n    List<PackageRepository> repos = getMapper().readValue(existingRepositoriesJson, List.class);\n    repos.add(new DefaultPackageRepository(repoName, uri));\n    if (packageManager.zkClient.exists(PackageUtils.REPOSITORIES_ZK_PATH, true) == false) {\n      packageManager.zkClient.create(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), CreateMode.PERSISTENT, true);\n    } else {\n      packageManager.zkClient.setData(PackageUtils.REPOSITORIES_ZK_PATH, getMapper().writeValueAsString(repos).getBytes(\"UTF-8\"), true);\n    }\n\n    addKey(IOUtils.toByteArray(new URL(uri + \"/publickey.der\").openStream()), repoName + \".der\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","d218decf811b7a0a4d86218c54c79c74a962374b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d218decf811b7a0a4d86218c54c79c74a962374b":["62d55718cd611235e975fa73a6bdf263fbd58859"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["d218decf811b7a0a4d86218c54c79c74a962374b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"b8f0a7504661c8e51be5c63e87f9d79a36d9116c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c"],"d218decf811b7a0a4d86218c54c79c74a962374b":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"62d55718cd611235e975fa73a6bdf263fbd58859":["d218decf811b7a0a4d86218c54c79c74a962374b","06595b0c22c7d3075c4104d3820cccf95d9d8a43"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8f0a7504661c8e51be5c63e87f9d79a36d9116c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}