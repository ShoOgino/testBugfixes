{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"038e2a9b07e2f8ae58336613cea227bf8b973484","date":1346850972,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blockterms/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader#VariableGapTermsIndexReader(Directory,FieldInfos,String,int,String,IOContext).mjava","sourceNew":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public VariableGapTermsIndexReader(Directory dir, FieldInfos fieldInfos, String segment, int indexDivisor, String segmentSuffix, IOContext context)\n    throws IOException {\n    in = dir.openInput(IndexFileNames.segmentFileName(segment, segmentSuffix, VariableGapTermsIndexWriter.TERMS_INDEX_EXTENSION), new IOContext(context, true));\n    this.segment = segment;\n    boolean success = false;\n    assert indexDivisor == -1 || indexDivisor > 0;\n\n    try {\n      \n      readHeader(in);\n      this.indexDivisor = indexDivisor;\n\n      seekDir(in, dirOffset);\n\n      // Read directory\n      final int numFields = in.readVInt();\n      if (numFields < 0) {\n        throw new CorruptIndexException(\"invalid numFields: \" + numFields + \" (resource=\" + in + \")\");\n      }\n\n      for(int i=0;i<numFields;i++) {\n        final int field = in.readVInt();\n        final long indexStart = in.readVLong();\n        final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        FieldIndexData previous = fields.put(fieldInfo, new FieldIndexData(fieldInfo, indexStart));\n        if (previous != null) {\n          throw new CorruptIndexException(\"duplicate field: \" + fieldInfo.name + \" (resource=\" + in + \")\");\n        }\n      }\n      success = true;\n    } finally {\n      if (indexDivisor > 0) {\n        in.close();\n        in = null;\n        if (success) {\n          indexLoaded = true;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"038e2a9b07e2f8ae58336613cea227bf8b973484":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["038e2a9b07e2f8ae58336613cea227bf8b973484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"038e2a9b07e2f8ae58336613cea227bf8b973484":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}