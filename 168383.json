{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","sourceOld":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\r\n    * Returns a detailed message for the Error when it is thrown by the\r\n    * token manager to indicate a lexical error.\r\n    * Parameters :\r\n    *    EOFSeen     : indicates if EOF caused the lexical error\r\n    *    curLexState : lexical state in which this error occurred\r\n    *    errorLine   : line number when the error occurred\r\n    *    errorColumn : column number when the error occurred\r\n    *    errorAfter  : prefix that was seen before this error occurred\r\n    *    curchar     : the offending character\r\n    * Note: You can customize the lexical error message by modifying this method.\r\n    */\r\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\r\n      return(\"Lexical error at line \" +\r\n           errorLine + \", column \" +\r\n           errorColumn + \".  Encountered: \" +\r\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\r\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\r\n   }\r\n\n","sourceOld":"  /**\n   * Returns a detailed message for the Error when it is thrown by the\n   * token manager to indicate a lexical error.\n   * Parameters :\n   *    EOFSeen     : indicates if EOF caused the lexical error\n   *    curLexState : lexical state in which this error occurred\n   *    errorLine   : line number when the error occurred\n   *    errorColumn : column number when the error occurred\n   *    errorAfter  : prefix that was seen before this error occurred\n   *    curchar     : the offending character\n   * Note: You can customize the lexical error message by modifying this method.\n   */\n  protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n    return(\"Lexical error at line \" +\n          errorLine + \", column \" +\n          errorColumn + \".  Encountered: \" +\n          (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n          \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\r\n    * Returns a detailed message for the Error when it is thrown by the\r\n    * token manager to indicate a lexical error.\r\n    * Parameters :\r\n    *    EOFSeen     : indicates if EOF caused the lexical error\r\n    *    curLexState : lexical state in which this error occurred\r\n    *    errorLine   : line number when the error occurred\r\n    *    errorColumn : column number when the error occurred\r\n    *    errorAfter  : prefix that was seen before this error occurred\r\n    *    curchar     : the offending character\r\n    * Note: You can customize the lexical error message by modifying this method.\r\n    */\r\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\r\n      return(\"Lexical error at line \" +\r\n           errorLine + \", column \" +\r\n           errorColumn + \".  Encountered: \" +\r\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\r\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\r\n   }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/TokenMgrError#LexicalError(boolean,int,int,int,String,char).mjava","sourceNew":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","sourceOld":"   /**\n    * Returns a detailed message for the Error when it is thrown by the\n    * token manager to indicate a lexical error.\n    * Parameters :\n    *    EOFSeen     : indicates if EOF caused the lexical error\n    *    curLexState : lexical state in which this error occurred\n    *    errorLine   : line number when the error occurred\n    *    errorColumn : column number when the error occurred\n    *    errorAfter  : prefix that was seen before this error occurred\n    *    curchar     : the offending character\n    * Note: You can customize the lexical error message by modifying this method.\n    */\n   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}