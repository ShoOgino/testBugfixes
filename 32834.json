{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery#DistanceQuery(double,double,double,String,String,boolean).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery#DistanceQuery(double,double,double,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQuery (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilter cpf = new CartesianPolyFilter();\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62ed23bc688871c07712a31edf012919ea9cd466","date":1230660056,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQueryBuilder#DistanceQueryBuilder(double,double,double,String,String,boolean).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceQuery#DistanceQuery(double,double,double,String,String,boolean).mjava","sourceNew":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQueryBuilder (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilterBuilder cpf = new CartesianPolyFilterBuilder();\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","sourceOld":"  /**\n   * Create a distance query using\n   * a boundary box wrapper around a more precise\n   * DistanceFilter.\n   * \n   * @see SerialChainFilter\n   * @param lat\n   * @param lng\n   * @param miles\n   */\n  public DistanceQuery (double lat, double lng, double miles, String latField, String lngField, boolean needPrecise){\n\n    this.lat = lat;\n    this.lng = lng;\n    this.miles = miles;\n    \n    \n    CartesianPolyFilter cpf = new CartesianPolyFilter();\n    cartesianFilter = cpf.getBoundingArea(lat, lng, (int)miles);\n\n    /* create precise distance filter */\n    if( needPrecise)\n    \tdistanceFilter = new DistanceFilter(lat, lng, miles, latField, lngField);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62ed23bc688871c07712a31edf012919ea9cd466":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62ed23bc688871c07712a31edf012919ea9cd466"]},"commit2Childs":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["62ed23bc688871c07712a31edf012919ea9cd466"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"62ed23bc688871c07712a31edf012919ea9cd466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}