{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>)op.getCommandData(),\n            params);\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>)op.getCommandData(),\n            params);\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The policy name cannot be null or empty\");\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>)op.getCommandData(),\n            params);\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","date":1501832890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = null;\n    try {\n      newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          params);\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>)op.getCommandData(),\n            params);\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = null;\n    try {\n      newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          params);\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = null;\n    try {\n      newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          params);\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f","date":1536587656,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    Map<String, List<Clause>> currentClauses = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newClauses = null;\n    try {\n      newClauses = Policy.clausesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          new ArrayList<>() );\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    currentClauses.putAll(newClauses);\n    Policy p = currentConfig.getPolicy().withPolicies(currentClauses);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    List<String> params = new ArrayList<>(currentConfig.getPolicy().getParams());\n    Map<String, List<Clause>> mergedPolicies = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newPolicies = null;\n    try {\n      newPolicies = Policy.policiesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          params);\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    mergedPolicies.putAll(newPolicies);\n    Policy p = currentConfig.getPolicy().withPolicies(mergedPolicies).withParams(params);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    Map<String, List<Clause>> currentClauses = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newClauses = null;\n    try {\n      newClauses = Policy.clausesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          new ArrayList<>() );\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    currentClauses.putAll(newClauses);\n    Policy p = currentConfig.getPolicy().withPolicies(currentClauses);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    Map<String, List<Clause>> currentClauses = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newClauses = null;\n    try {\n      newClauses = Policy.clausesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          new ArrayList<>() );\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    currentClauses.putAll(newClauses);\n    Policy p = currentConfig.getPolicy().withPolicies(currentClauses);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetPolicies(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private AutoScalingConfig handleSetPolicies(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                              AutoScalingConfig currentConfig) throws KeeperException, InterruptedException, IOException {\n    Map<String, Object> policiesMap = op.getDataMap();\n    for (Map.Entry<String, Object> policy : policiesMap.entrySet()) {\n      String policyName = policy.getKey();\n      if (policyName == null || policyName.trim().length() == 0) {\n        op.addError(\"The policy name cannot be null or empty\");\n        return currentConfig;\n      }\n    }\n    Map<String, List<Clause>> currentClauses = new HashMap<>(currentConfig.getPolicy().getPolicies());\n    Map<String, List<Clause>> newClauses = null;\n    try {\n      newClauses = Policy.clausesFromMap((Map<String, List<Map<String, Object>>>) op.getCommandData(),\n          new ArrayList<>() );\n    } catch (Exception e) {\n      op.addError(e.getMessage());\n      return currentConfig;\n    }\n    currentClauses.putAll(newClauses);\n    Policy p = currentConfig.getPolicy().withPolicies(currentClauses);\n    currentConfig = currentConfig.withPolicy(p);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"3f504512a03d978990cbff30db0522b354e846db":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["e3590d254d013266ac3849fae45974e747f7f576"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["3f504512a03d978990cbff30db0522b354e846db"],"61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"560c18d71dad43d675158783c3840f8c80d6d39c":["61f8f63e70257a44a006d8f6b21ffaf8ee2bbe6f"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["5c8cb19f78af5bca202b4a4cfce35d2fc0ac9e4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}