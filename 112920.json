{"path":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testFromSubIteratorsMethod().mjava","commits":[{"id":"3760938294331a3fa865f76b09abc9de951da271","date":1597398332,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMatchesIterator#testFromSubIteratorsMethod().mjava","pathOld":"/dev/null","sourceNew":"  public void testFromSubIteratorsMethod() throws IOException {\n    class CountIterator implements MatchesIterator {\n      private int count;\n      private int max;\n\n      CountIterator(int count) {\n        this.count = count;\n        this.max = count;\n      }\n\n      @Override\n      public boolean next() throws IOException {\n        if (count == 0) {\n          return false;\n        } else {\n          count--;\n          return true;\n        }\n      }\n\n      @Override\n      public int startPosition() {\n        return max - count;\n      }\n\n      @Override\n      public int endPosition() {\n        return max - count;\n      }\n\n      @Override\n      public int startOffset() throws IOException {\n        throw new AssertionError();\n      }\n\n      @Override\n      public int endOffset() throws IOException {\n        throw new AssertionError();\n      }\n\n      @Override\n      public MatchesIterator getSubMatches() throws IOException {\n        throw new AssertionError();\n      }\n\n      @Override\n      public Query getQuery() {\n        throw new AssertionError();\n      }\n    }\n\n    int [][] checks = {\n        { 0 },\n        { 1 },\n        { 0, 0 },\n        { 0, 1 },\n        { 1, 0 },\n        { 1, 1 },\n        { 0, 0, 0 },\n        { 0, 0, 1 },\n        { 0, 1, 0 },\n        { 1, 0, 0 },\n        { 1, 0, 1 },\n        { 1, 1, 0 },\n        { 1, 1, 1 },\n    };\n\n    for (int[] counts : checks) {\n      List<MatchesIterator> its = IntStream.of(counts)\n          .mapToObj(CountIterator::new)\n          .collect(Collectors.toList());\n\n      int expectedCount = IntStream.of(counts).sum();\n\n      MatchesIterator merged = DisjunctionMatchesIterator.fromSubIterators(its);\n      int actualCount = 0;\n      while (merged.next()) {\n        actualCount++;\n      }\n\n      assertEquals(\"Sub-iterator count is not right for: \"\n          + Arrays.toString(counts), expectedCount, actualCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3760938294331a3fa865f76b09abc9de951da271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3760938294331a3fa865f76b09abc9de951da271"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3760938294331a3fa865f76b09abc9de951da271"],"3760938294331a3fa865f76b09abc9de951da271":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}