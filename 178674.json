{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","commits":[{"id":"45f06bdc846cdc9b2546a27a8a1492d613e87879","date":1097422035,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), getSimilarity(searcher),\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n    \n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n      \n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n      \n        if (p == null)\n          return null;\n      \n        tps[i] = p;\n      }\n    \n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#scorer(IndexReader).mjava","sourceNew":"    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","sourceOld":"    public Scorer scorer(IndexReader reader) throws IOException {\n      if (termArrays.size() == 0)                  // optimize zero-term case\n        return null;\n\n      TermPositions[] tps = new TermPositions[termArrays.size()];\n      for (int i=0; i<tps.length; i++) {\n        Term[] terms = (Term[])termArrays.get(i);\n\n        TermPositions p;\n        if (terms.length > 1)\n          p = new MultipleTermPositions(reader, terms);\n        else\n          p = reader.termPositions(terms[0]);\n\n        if (p == null)\n          return null;\n\n        tps[i] = p;\n      }\n\n      if (slop == 0)\n        return new ExactPhraseScorer(this, tps, getPositions(), similarity,\n                                     reader.norms(field));\n      else\n        return new SloppyPhraseScorer(this, tps, getPositions(), similarity,\n                                      slop, reader.norms(field));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"df8dadf22de84eeb1294e70792e292ecf8ded564":["052fac7830290bd38a04cddee1a121ee07656b56"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45f06bdc846cdc9b2546a27a8a1492d613e87879"],"45f06bdc846cdc9b2546a27a8a1492d613e87879":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}