{"path":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestQueryUtils#testNegativeQueries().mjava","sourceNew":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq.build());\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq.build());\n\n    bq = new BooleanQuery.Builder();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq.build());\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq.build());\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","sourceOld":"  public void testNegativeQueries() {\n    TermQuery tq = new TermQuery(new Term(\"hi\",\"there\"));\n    TermQuery tq2 = new TermQuery(new Term(\"wow\",\"dude\"));\n    BooleanQuery bq = new BooleanQuery();\n\n    positive(tq);\n    // positive(bq);\n    bq.add(tq, BooleanClause.Occur.SHOULD);\n    positive(bq);\n    bq.add(tq2, BooleanClause.Occur.MUST_NOT);\n    positive(bq);\n\n    bq = new BooleanQuery();\n    bq.add(tq,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n    bq.add(tq2,BooleanClause.Occur.MUST_NOT);\n    negative(bq);\n\n\n    String f = \"name\";  // name is whitespace tokenized\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E W\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F W\"));\n    assertU(adoc(\"id\", \"10\", f, \"G W\"));\n    assertU(adoc(\"id\", \"11\", f, \"G X \"));\n    assertU(adoc(\"id\", \"12\", f, \"G X Y\"));\n    assertU(adoc(\"id\", \"13\", f, \"G X Y Z\"));\n    assertU(adoc(\"id\", \"14\", f, \"G Y Z\"));\n    assertU(adoc(\"id\", \"15\", f, \"G Z\"));\n    assertU(adoc(\"id\", \"16\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"test negative base q matching nothing\",\n            req(\"-qlkciyopsbgzyvkylsjhchghjrdf\")\n            ,\"//result[@numFound='16']\"\n            );\n\n    assertQ(\"test negative base q matching something\",\n            req(\"-name:E\")\n            ,\"//result[@numFound='13']\"\n            );\n\n    assertQ(\"test negative base q with two terms\",\n            req(\"-name:G -name:W\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test negative base q with three terms\",\n            req(\"-name:G -name:W -name:E\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test negative boolean query\",\n            req(\"-(name:G OR name:W)\")\n            ,\"//result[@numFound='7']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    assertQ(\"test non negative q\",\n            req(\"-name:G -name:W -name:E +id:[* TO *]\")\n            ,\"//result[@numFound='5']\"\n            );\n\n    // now for the filters...\n    assertQ(\"test negative base q matching nothing, with filters\",\n            req(\"q\",\"-qlkciyopsbgzyvkylsjhchghjrdf\"\n                ,\"fq\",\"name:A\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"name:A\"\n                ,\"fq\",\"-name:A\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:E\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"test negative filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n            )\n            ,\"//result[@numFound='2']\"\n            );\n    assertQ(\"one pos filter, one neg\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='1']\"\n            );\n        assertQ(\"two neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n            )\n            ,\"//result[@numFound='5']\"  // ABCCD\n            );\n\n        assertQ(\"three neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G\"\n                ,\"fq\",\"-name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W -name:G -name:C\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"compound neg filters\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-(name:W name:G name:C)\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"name:G\"\n            )\n            ,\"//result[@numFound='0']\"\n            );\n        assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"+id:1\"\n            )\n            ,\"//result[@numFound='1']\"  // A\n            );\n         assertQ(\"three neg filters + pos\",\n            req(\"q\",\"-name:E\"\n                ,\"fq\",\"-name:W\"\n                ,\"fq\",\"-name:G\"\n                ,\"fq\",\"-name:C\"\n                ,\"fq\",\"id:[* TO *]\"\n            )\n            ,\"//result[@numFound='3']\"  // ABD\n            );\n\n         // QueryParser turns term queries on stopwords into a BooleanQuery with\n         // zero clauses.\n         assertQ(\"neg base query on stopword\",\n            req(\"q\",\"-text:stopworda\")\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n\n         assertQ(\"negative filter on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"two negative filters on stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda\"\n                ,\"fq\",\"-text:stopworda\"\n            )\n            ,\"//result[@numFound='16']\"  // ABD\n            );\n         assertQ(\"compound negative filters with stopword\",\n            req(\"q\",\"id:[* TO *]\"\n                ,\"fq\",\"-text:stopworda -id:1\"\n            )\n            ,\"//result[@numFound='15']\"  // ABD\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}