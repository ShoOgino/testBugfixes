{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider(core);\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cec585935ebadb78352a93e4a429d2b89fb2d53e","date":1313269561,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultIndexWriterProvider();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98fa1aca20a29db3d3d1a867eeed78f65448febe","date":1317919012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    indexWriterProvider = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":["3c8475e39c56b28600d2b496f3e78f7421190f62"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, true, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) throws IOException {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c8475e39c56b28600d2b496f3e78f7421190f62","date":1349102564,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = new DefaultSolrCoreState(core.getDirectoryFactory());\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039186fd2452232060d10c35a255715d6147dd91","date":1359732548,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c47e57a9659cee31304e7b75b71b252d2f33b6f9","date":1359743123,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ab99a2487a34179af579c58aee0f6954a54173b","date":1370025444,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b262e4be9cc7c2090a610b2a5e3628815288798","date":1403120031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null && core.getCoreDescriptor().getCloudDescriptor().getReplicaType() == Replica.Type.TLOG) {\n      commitWithinSoftCommit = false;\n      commitTracker.setOpenSearcher(true);\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null && core.getCoreDescriptor().getCloudDescriptor().getReplicaType() == Replica.Type.TLOG) {\n      commitWithinSoftCommit = false;\n      commitTracker.setOpenSearcher(true);\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      DocCollection dc = zkController.getClusterState().getCollection(core.getCoreDescriptor().getCollectionName());\n      if (dc.getRealtimeReplicas() == 1) {\n        commitWithinSoftCommit = false;\n        commitTracker.setOpenSearcher(true);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","date":1525384847,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#DirectUpdateHandler2(SolrCore).mjava","sourceNew":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs;\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime;\n    long fileSizeUpperBound = updateHandlerInfo.autoCommitMaxSizeBytes;\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, fileSizeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs;\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime;\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, NO_FILE_SIZE_UPPER_BOUND_PLACEHOLDER, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null && core.getCoreDescriptor().getCloudDescriptor().getReplicaType() == Replica.Type.TLOG) {\n      commitWithinSoftCommit = false;\n      commitTracker.setOpenSearcher(true);\n    }\n\n  }\n\n","sourceOld":"  public DirectUpdateHandler2(SolrCore core) {\n    super(core);\n   \n    solrCoreState = core.getSolrCoreState();\n    \n    UpdateHandlerInfo updateHandlerInfo = core.getSolrConfig()\n        .getUpdateHandlerInfo();\n    int docsUpperBound = updateHandlerInfo.autoCommmitMaxDocs; // getInt(\"updateHandler/autoCommit/maxDocs\", -1);\n    int timeUpperBound = updateHandlerInfo.autoCommmitMaxTime; // getInt(\"updateHandler/autoCommit/maxTime\", -1);\n    commitTracker = new CommitTracker(\"Hard\", core, docsUpperBound, timeUpperBound, updateHandlerInfo.openSearcher, false);\n    \n    int softCommitDocsUpperBound = updateHandlerInfo.autoSoftCommmitMaxDocs; // getInt(\"updateHandler/autoSoftCommit/maxDocs\", -1);\n    int softCommitTimeUpperBound = updateHandlerInfo.autoSoftCommmitMaxTime; // getInt(\"updateHandler/autoSoftCommit/maxTime\", -1);\n    softCommitTracker = new CommitTracker(\"Soft\", core, softCommitDocsUpperBound, softCommitTimeUpperBound, true, true);\n    \n    commitWithinSoftCommit = updateHandlerInfo.commitWithinSoftCommit;\n    indexWriterCloseWaitsForMerges = updateHandlerInfo.indexWriterCloseWaitsForMerges;\n\n    ZkController zkController = core.getCoreContainer().getZkController();\n    if (zkController != null && core.getCoreDescriptor().getCloudDescriptor().getReplicaType() == Replica.Type.TLOG) {\n      commitWithinSoftCommit = false;\n      commitTracker.setOpenSearcher(true);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["ab68488225b6a6c357dda72ed11dedca9914a192"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["61c45e99cf6676da48f19d7511c73712ad39402b"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":["3c8475e39c56b28600d2b496f3e78f7421190f62","039186fd2452232060d10c35a255715d6147dd91"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"be320990bdc77e643388fa801e75017f19289c42":["7b262e4be9cc7c2090a610b2a5e3628815288798"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["cec585935ebadb78352a93e4a429d2b89fb2d53e"],"ab68488225b6a6c357dda72ed11dedca9914a192":["7b262e4be9cc7c2090a610b2a5e3628815288798","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"7b262e4be9cc7c2090a610b2a5e3628815288798":["6ab99a2487a34179af579c58aee0f6954a54173b"],"039186fd2452232060d10c35a255715d6147dd91":["3c8475e39c56b28600d2b496f3e78f7421190f62"],"61c45e99cf6676da48f19d7511c73712ad39402b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["c26f00b574427b55127e869b935845554afde1fa"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["be320990bdc77e643388fa801e75017f19289c42"],"cec585935ebadb78352a93e4a429d2b89fb2d53e":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["7b262e4be9cc7c2090a610b2a5e3628815288798"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0ad31de9d3b830bc174d4c41df9f80f4cac82576","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6ab99a2487a34179af579c58aee0f6954a54173b":["039186fd2452232060d10c35a255715d6147dd91"],"3c8475e39c56b28600d2b496f3e78f7421190f62":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4d07d6c279b65daaca32ee033fa06e4d7e85e0dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c47e57a9659cee31304e7b75b71b252d2f33b6f9":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3c8475e39c56b28600d2b496f3e78f7421190f62"],"ab68488225b6a6c357dda72ed11dedca9914a192":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"be320990bdc77e643388fa801e75017f19289c42":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"7b262e4be9cc7c2090a610b2a5e3628815288798":["be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"039186fd2452232060d10c35a255715d6147dd91":["c47e57a9659cee31304e7b75b71b252d2f33b6f9","6ab99a2487a34179af579c58aee0f6954a54173b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["4d07d6c279b65daaca32ee033fa06e4d7e85e0dd","e9017cf144952056066919f1ebc7897ff9bd71b1"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["cec585935ebadb78352a93e4a429d2b89fb2d53e"],"cec585935ebadb78352a93e4a429d2b89fb2d53e":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["61c45e99cf6676da48f19d7511c73712ad39402b"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"3c8475e39c56b28600d2b496f3e78f7421190f62":["c47e57a9659cee31304e7b75b71b252d2f33b6f9","039186fd2452232060d10c35a255715d6147dd91"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"6ab99a2487a34179af579c58aee0f6954a54173b":["7b262e4be9cc7c2090a610b2a5e3628815288798"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","c47e57a9659cee31304e7b75b71b252d2f33b6f9","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}