{"path":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","commits":[{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doSync(List<Long> ourUpdates, long ourLowThreshold, long ourHighThreshold) {\n    // get leader's recent versions and fingerprint\n    // note: by getting leader's versions later, we guarantee that leader's versions always super set of {@link bufferedUpdates}\n    NamedList<Object> leaderVersionsAndFingerprint = getVersions();\n    IndexFingerprint leaderFingerprint = getFingerprint(leaderVersionsAndFingerprint);\n    if (doFingerprint) {\n      if (leaderFingerprint == null) {\n        log.warn(\"Could not get fingerprint from the leader\");\n        return false;\n      }\n      log.info(\"Leader fingerprint {}\", leaderFingerprint);\n    }\n\n    missedUpdatesFinder = new PeerSync.MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold, ourHighThreshold);\n    MissedUpdatesRequest missedUpdates = buildMissedUpdatesRequest(leaderVersionsAndFingerprint);\n    if (missedUpdates == MissedUpdatesRequest.ALREADY_IN_SYNC) return true;\n    if (missedUpdates != MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      NamedList<Object> missedUpdatesRsp = requestUpdates(missedUpdates);\n      if (handleUpdates(missedUpdatesRsp, missedUpdates.totalRequestedUpdates, leaderFingerprint)) {\n        if (doFingerprint) {\n          return compareFingerprint(leaderFingerprint);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doSync(List<Long> ourUpdates, long ourLowThreshold, long ourHighThreshold) {\n    // get leader's recent versions and fingerprint\n    // note: by getting leader's versions later, we guarantee that leader's versions always super set of {@link bufferedUpdates}\n    NamedList<Object> leaderVersionsAndFingerprint = getVersions();\n    IndexFingerprint leaderFingerprint = getFingerprint(leaderVersionsAndFingerprint);\n    if (doFingerprint) {\n      if (leaderFingerprint == null) {\n        log.warn(\"Could not get fingerprint from the leader\");\n        return false;\n      }\n      log.info(\"Leader fingerprint {}\", leaderFingerprint);\n    }\n\n    missedUpdatesFinder = new PeerSync.MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold, ourHighThreshold);\n    MissedUpdatesRequest missedUpdates = buildMissedUpdatesRequest(leaderVersionsAndFingerprint);\n    if (missedUpdates == MissedUpdatesRequest.ALREADY_IN_SYNC) return true;\n    if (missedUpdates != MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      NamedList<Object> missedUpdatesRsp = requestUpdates(missedUpdates);\n      if (handleUpdates(missedUpdatesRsp, missedUpdates.totalRequestedUpdates, leaderFingerprint)) {\n        if (doFingerprint) {\n          return compareFingerprint(leaderFingerprint);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean doSync(List<Long> ourUpdates, long ourLowThreshold, long ourHighThreshold) {\n    // get leader's recent versions and fingerprint\n    // note: by getting leader's versions later, we guarantee that leader's versions always super set of {@link bufferedUpdates}\n    NamedList<Object> leaderVersionsAndFingerprint = getVersions();\n    IndexFingerprint leaderFingerprint = getFingerprint(leaderVersionsAndFingerprint);\n    if (doFingerprint) {\n      if (leaderFingerprint == null) {\n        log.warn(\"Could not get fingerprint from the leader\");\n        return false;\n      }\n      log.info(\"Leader fingerprint {}\", leaderFingerprint);\n    }\n\n    missedUpdatesFinder = new PeerSync.MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold, ourHighThreshold);\n    MissedUpdatesRequest missedUpdates = buildMissedUpdatesRequest(leaderVersionsAndFingerprint);\n    if (missedUpdates == MissedUpdatesRequest.ALREADY_IN_SYNC) return true;\n    if (missedUpdates != MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      NamedList<Object> missedUpdatesRsp = requestUpdates(missedUpdates);\n      if (handleUpdates(missedUpdatesRsp, missedUpdates.totalRequestedUpdates, leaderFingerprint)) {\n        if (doFingerprint) {\n          return compareFingerprint(leaderFingerprint);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce70cdb9511a671e0e15d4dc93b8334c86b6e681","date":1542017422,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSyncWithLeader#doSync(List[Long],long,long).mjava","sourceNew":"  private boolean doSync(List<Long> ourUpdates, long ourLowThreshold, long ourHighThreshold) {\n    // get leader's recent versions and fingerprint\n    // note: by getting leader's versions later, we guarantee that leader's versions always super set of {@link bufferedUpdates}\n    NamedList<Object> leaderVersionsAndFingerprint = getVersions();\n    IndexFingerprint leaderFingerprint = getFingerprint(leaderVersionsAndFingerprint);\n    if (doFingerprint) {\n      if (leaderFingerprint == null) {\n        log.warn(\"Could not get fingerprint from the leader\");\n        return false;\n      }\n      log.info(\"Leader fingerprint {}\", leaderFingerprint);\n    }\n\n    missedUpdatesFinder = new MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold);\n    MissedUpdatesRequest missedUpdates = buildMissedUpdatesRequest(leaderVersionsAndFingerprint);\n    if (missedUpdates == MissedUpdatesRequest.ALREADY_IN_SYNC) return true;\n    if (missedUpdates != MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      NamedList<Object> missedUpdatesRsp = requestUpdates(missedUpdates);\n      if (handleUpdates(missedUpdatesRsp, missedUpdates.totalRequestedUpdates, leaderFingerprint)) {\n        if (doFingerprint) {\n          return compareFingerprint(leaderFingerprint);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  private boolean doSync(List<Long> ourUpdates, long ourLowThreshold, long ourHighThreshold) {\n    // get leader's recent versions and fingerprint\n    // note: by getting leader's versions later, we guarantee that leader's versions always super set of {@link bufferedUpdates}\n    NamedList<Object> leaderVersionsAndFingerprint = getVersions();\n    IndexFingerprint leaderFingerprint = getFingerprint(leaderVersionsAndFingerprint);\n    if (doFingerprint) {\n      if (leaderFingerprint == null) {\n        log.warn(\"Could not get fingerprint from the leader\");\n        return false;\n      }\n      log.info(\"Leader fingerprint {}\", leaderFingerprint);\n    }\n\n    missedUpdatesFinder = new PeerSync.MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold, ourHighThreshold);\n    MissedUpdatesRequest missedUpdates = buildMissedUpdatesRequest(leaderVersionsAndFingerprint);\n    if (missedUpdates == MissedUpdatesRequest.ALREADY_IN_SYNC) return true;\n    if (missedUpdates != MissedUpdatesRequest.UNABLE_TO_SYNC) {\n      NamedList<Object> missedUpdatesRsp = requestUpdates(missedUpdates);\n      if (handleUpdates(missedUpdatesRsp, missedUpdates.totalRequestedUpdates, leaderFingerprint)) {\n        if (doFingerprint) {\n          return compareFingerprint(leaderFingerprint);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce70cdb9511a671e0e15d4dc93b8334c86b6e681"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ce70cdb9511a671e0e15d4dc93b8334c86b6e681":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ce70cdb9511a671e0e15d4dc93b8334c86b6e681","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}