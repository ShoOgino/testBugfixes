{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum, hasFreqs());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum, hasFreqs());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton automaton, BytesRef bytes) throws IOException {\n      TermsEnum termsEnum = in.intersect(automaton, bytes);\n      assert termsEnum != null;\n      assert bytes == null || bytes.isValid();\n      return new AssertingTermsEnum(termsEnum);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["c9fb5f46e264daf5ba3860defe623a89d202dd87","086ffe31d8fba0110227db122974163709ecc1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}