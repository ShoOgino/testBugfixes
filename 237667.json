{"path":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","commits":[{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new ValueSourceQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexSearcher s = new IndexSearcher(dir, true);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    s.close();\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/function/TestOrdValues#doTestExactScore(String,boolean).mjava","sourceNew":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","sourceOld":"  // Test that queries based on reverse/ordFieldScore returns docs with expected score.\n  private void doTestExactScore(String field, boolean inOrder) throws CorruptIndexException, Exception {\n    IndexReader r = IndexReader.open(dir);\n    IndexSearcher s = new IndexSearcher(r);\n    ValueSource vs;\n    if (inOrder) {\n      vs = new OrdFieldSource(field);\n    } else {\n      vs = new ReverseOrdFieldSource(field);\n    }\n    Query q = new FunctionQuery(vs);\n    TopDocs td = s.search(q, null, 1000);\n    assertEquals(\"All docs should be matched!\", N_DOCS, td.totalHits);\n    ScoreDoc sd[] = td.scoreDocs;\n    for (int i = 0; i < sd.length; i++) {\n      float score = sd[i].score;\n      String id = s.getIndexReader().document(sd[i].doc).get(ID_FIELD);\n      log(\"-------- \" + i + \". Explain doc \" + id);\n      log(s.explain(q, sd[i].doc));\n      float expectedScore = N_DOCS - i;\n      assertEquals(\"score of result \" + i + \" shuould be \" + expectedScore + \" != \" + score, expectedScore, score, TEST_SCORE_TOLERANCE_DELTA);\n      String expectedId = inOrder\n              ? id2String(N_DOCS - i) // in-order ==> larger  values first\n              : id2String(i + 1);     // reverse  ==> smaller values first\n      assertTrue(\"id of result \" + i + \" shuould be \" + expectedId + \" != \" + score, expectedId.equals(id));\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}