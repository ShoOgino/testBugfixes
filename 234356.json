{"path":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","commits":[{"id":"4ce5a0276b8637186ae6adfa516e332132d197ad","date":1362165863,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTest#testCurrencyRangeSearch().mjava","sourceNew":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n}\n\n","sourceOld":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", \"amount\", \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, \"amount\", i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", \"amount\", \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            \"amount:[3 TO *]\"),\n            \"//*[@numFound='8']\");\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12dafe10e13e4a09ad16f617b6c5013460fd7c58","date":1362255003,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","sourceNew":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n}\n\n","bugFix":["065a346f4fa5753b5f30aa6604c804696389d793"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testCurrencyRangeSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","sourceNew":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", fieldName, \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", fieldName, \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testCurrencyRangeSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","sourceNew":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", fieldName, \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", fieldName, \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            fieldName+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","sourceOld":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testCurrencyRangeSearch().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testCurrencyRangeSearch() throws Exception {\n    clearIndex();\n    final int emptyDocs = atLeast(50); // times 2\n    final int negDocs = atLeast(5);\n    \n    assertU(adoc(\"id\", \"0\", field(), \"0,USD\")); // 0\n    // lots of docs w/o values\n    for (int i = 100; i <= 100 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // docs with values in ranges we'll query\n    for (int i = 1; i <= 10; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    // more docs w/o values\n    for (int i = 500; i <= 500 + emptyDocs; i++) {\n      assertU(adoc(\"id\", \"\" + i));\n    }\n    // some negative values\n    for (int i = -100; i > -100 - negDocs; i--) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n    assertU(adoc(\"id\", \"40\", field(), \"0,USD\")); // 0\n\n    assertU(commit());\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[2.00,USD TO 5.00,USD]\"),\n            \"//*[@numFound='4']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,USD TO 1.00,USD]\"),\n            \"//*[@numFound='1']\");\n\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,USD TO 25.00,USD]\"),\n            \"//*[@numFound='0']\");\n\n    // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[0.50,GBP TO 1.00,GBP]\"),\n            \"//*[@numFound='2']\");\n\n    // \"EUR\" currency code is 2.5X of a USD dollar, for testing.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.00,EUR TO 25.00,EUR]\"),\n            \"//*[@numFound='1']\");\n\n    // Slight asymmetric rate should work.\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[24.99,EUR TO 25.01,EUR]\"),\n            \"//*[@numFound='1']\");\n    \n    // Open ended ranges without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO *]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n    \n    // Open ended ranges with currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,EUR TO *,EUR]\"),\n            \"//*[@numFound='\" + (2 + 10 + negDocs) + \"']\");\n\n    // Open ended start range without currency\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[* TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended start range with currency (currency for the * won't matter)\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[*,USD TO 5,USD]\"),\n            \"//*[@numFound='\" + (2 + 5 + negDocs) + \"']\");\n\n    // Open ended end range\n    assertQ(req(\"fl\", \"*,score\", \"q\",\n            field()+\":[3 TO *]\"),\n            \"//*[@numFound='8']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["12dafe10e13e4a09ad16f617b6c5013460fd7c58","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["12dafe10e13e4a09ad16f617b6c5013460fd7c58","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"]},"commit2Childs":{"4ce5a0276b8637186ae6adfa516e332132d197ad":["12dafe10e13e4a09ad16f617b6c5013460fd7c58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ce5a0276b8637186ae6adfa516e332132d197ad"],"12dafe10e13e4a09ad16f617b6c5013460fd7c58":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}