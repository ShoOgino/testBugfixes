{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","commits":[{"id":"c11e1d33f2ba742976268153f6edd2d29710cf69","date":1347851822,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n    boolean needScore = random().nextBoolean();//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! needScore=\"+needScore+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac","date":1357162023,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","sourceNew":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = random().nextBoolean() ? \"none\" : \"distance\";//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! score=\"+score+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n    boolean needScore = random().nextBoolean();//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! needScore=\"+needScore+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","sourceNew":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = random().nextBoolean() ? \"none\" : \"distance\";//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! score=\"+score+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n    boolean needScore = random().nextBoolean();//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! needScore=\"+needScore+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","sourceNew":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = random().nextBoolean() ? \"none\" : \"distance\";//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",    // testing quotes in range too\n        \"fq\", \"{! score=\"+score+\" df=\"+fieldName+\"}[32,-80 TO \\\"33 , -79\\\"]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = random().nextBoolean() ? \"none\" : \"distance\";//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",\n        \"fq\", \"{! score=\"+score+\" df=\"+fieldName+\"}[32,-80 TO 33,-79]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7280772020b860cd9a473ed847c5b79251a850d7","date":1489283281,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#testRangeSyntax().mjava","sourceNew":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = randomScoreMode();//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",    // testing quotes in range too\n        \"fq\", \"{! \"+(score==null?\"\":\" score=\"+score)+\" df=\"+fieldName+\"}[32,-80 TO \\\"33 , -79\\\"]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","sourceOld":"  @Test\n  public void testRangeSyntax() {\n    setupDocs();\n    //match docId 1\n    int docId = 1;\n    int count = 1;\n\n    String score = random().nextBoolean() ? \"none\" : \"distance\";//never actually need the score but lets test\n    assertQ(req(\n        \"fl\", \"id\", \"q\",\"*:*\", \"rows\", \"1000\",    // testing quotes in range too\n        \"fq\", \"{! score=\"+score+\" df=\"+fieldName+\"}[32,-80 TO \\\"33 , -79\\\"]\"),//lower-left to upper-right\n\n        \"//result/doc/*[@name='id'][.='\" + docId + \"']\",\n        \"*[count(//doc)=\" + count + \"]\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c11e1d33f2ba742976268153f6edd2d29710cf69","6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"c11e1d33f2ba742976268153f6edd2d29710cf69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7280772020b860cd9a473ed847c5b79251a850d7":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7280772020b860cd9a473ed847c5b79251a850d7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c11e1d33f2ba742976268153f6edd2d29710cf69":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c11e1d33f2ba742976268153f6edd2d29710cf69"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["7280772020b860cd9a473ed847c5b79251a850d7"],"7280772020b860cd9a473ed847c5b79251a850d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bcb5c9814e87bce81ca6c0c80685c1754c4a1ac":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}