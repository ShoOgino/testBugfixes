{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":["277b20588f94e26ec21ffdfc360528133991372e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = openReadOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340","date":1295995357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[core.fieldInfos.size()];\n    final int fieldCount = core.fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = core.fieldInfos.fieldInfo(i).name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b5e0eebe355b14693e24007d721da78a79d8170","date":1305898401,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,Norm>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          Norm norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (Norm) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.deletedDocsDirty = deletedDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.deletedDocs == null;\n          clone.loadDeletedDocs();\n        } else if (deletedDocs != null) {\n          deletedDocsRef.incrementAndGet();\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.readBufferSize = readBufferSize;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae25747f561c2392e8a9046cfa4e5a836d14949c","date":1310502947,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs();\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return this;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f75174865a8734695cd60a4093339a4e63fcbb","date":1323039567,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10acb7e55ffd7d041a1028653d0defa4a50bfec3","date":1323041492,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e7921c9a7729df15853641d07039fd6ca2c57fa","date":1323367101,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    Set<Integer> fieldNormsChanged = new HashSet<Integer>();\n    for (FieldInfo fi : core.fieldInfos) {\n      int fieldNumber = fi.number;\n      if (!this.si.getNormFileName(fieldNumber).equals(si.getNormFileName(fieldNumber))) {\n        normsUpToDate = false;\n        fieldNormsChanged.add(fieldNumber);\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (normsUpToDate && deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.readOnly = openReadOnly;\n      clone.si = si;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.normsDirty = normsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap<String,SegmentNorms>();\n\n      // Clone norms\n      for (FieldInfo fi : core.fieldInfos) {\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged.contains(fi.number)) {\n          final String curField = fi.name;\n          SegmentNorms norm = this.norms.get(curField);\n          if (norm != null)\n            clone.norms.put(curField, (SegmentNorms) norm.clone());\n        }\n      }\n\n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? core.getCFSReader() : directory(), IOContext.DEFAULT);\n\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.readerFinishedListeners = readerFinishedListeners;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.combinedCoreAndDeletesKey = combinedCoreAndDeletesKey;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  // TODO: remove deletions from SR\n  private synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n\n    // if we're cloning we need to run through the reopenSegment logic\n    // also if both old and new readers aren't readonly, we clone to avoid sharing modifications\n    if (deletionsUpToDate && !doClone && openReadOnly && readOnly) {\n      return null;\n    }    \n\n    // When cloning, the incoming SegmentInfos should not\n    // have any changes in it:\n    assert !doClone || (deletionsUpToDate);\n\n    // clone reader\n    SegmentReader clone = new SegmentReader(openReadOnly, si);\n\n    boolean success = false;\n    try {\n      core.incRef();\n      clone.core = core;\n      clone.pendingDeleteCount = pendingDeleteCount;\n      clone.combinedCoreAndDeletesKey = combinedCoreAndDeletesKey;\n\n      if (!openReadOnly && hasChanges) {\n        // My pending changes transfer to the new reader\n        clone.liveDocsDirty = liveDocsDirty;\n        clone.hasChanges = hasChanges;\n        hasChanges = false;\n      }\n      \n      if (doClone) {\n        if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          assert clone.liveDocs == null;\n          clone.loadLiveDocs(IOContext.READ);\n        } else if (liveDocs != null) {\n          liveDocsRef.incrementAndGet();\n          clone.liveDocs = liveDocs;\n          clone.liveDocsRef = liveDocsRef;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // An exception occurred during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["d619839baa8ce5503e496b94a9e42ad6f079293f","8b5e0eebe355b14693e24007d721da78a79d8170"],"11f75174865a8734695cd60a4093339a4e63fcbb":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["8b5e0eebe355b14693e24007d721da78a79d8170"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["8b5e0eebe355b14693e24007d721da78a79d8170"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["11f75174865a8734695cd60a4093339a4e63fcbb"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["406e7055a3e99d3fa6ce49a555a51dd18b321806","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"b7d9cdceb051035b069ec36719809d0cd837777b":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["10acb7e55ffd7d041a1028653d0defa4a50bfec3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["b7d9cdceb051035b069ec36719809d0cd837777b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9e7921c9a7729df15853641d07039fd6ca2c57fa":["cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["ae25747f561c2392e8a9046cfa4e5a836d14949c"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"8b5e0eebe355b14693e24007d721da78a79d8170":["1224a4027481acce15495b03bce9b48b93b42722"],"ae25747f561c2392e8a9046cfa4e5a836d14949c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","8b5e0eebe355b14693e24007d721da78a79d8170"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","9e7921c9a7729df15853641d07039fd6ca2c57fa"],"4122a26e1fd0457a340616673a3d3aada370f713":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"]},"commit2Childs":{"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"11f75174865a8734695cd60a4093339a4e63fcbb":["10acb7e55ffd7d041a1028653d0defa4a50bfec3"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"10acb7e55ffd7d041a1028653d0defa4a50bfec3":["cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["b7d9cdceb051035b069ec36719809d0cd837777b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","ae25747f561c2392e8a9046cfa4e5a836d14949c"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d","cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340"],"b7d9cdceb051035b069ec36719809d0cd837777b":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["9e7921c9a7729df15853641d07039fd6ca2c57fa"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"1224a4027481acce15495b03bce9b48b93b42722":["8b5e0eebe355b14693e24007d721da78a79d8170","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9e7921c9a7729df15853641d07039fd6ca2c57fa":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cdd3a20c3f7b8db3ed0313a58cb6304f9b5bc340":["29ef99d61cda9641b6250bf9567329a6e65f901d","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"8b5e0eebe355b14693e24007d721da78a79d8170":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","a3776dccca01c11e7046323cfad46a3b4a471233"],"ae25747f561c2392e8a9046cfa4e5a836d14949c":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"4122a26e1fd0457a340616673a3d3aada370f713":["11f75174865a8734695cd60a4093339a4e63fcbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}