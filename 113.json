{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","commits":[{"id":"50e7972fe4865715af8951d4ba15555e3426fc5d","date":1115024647,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Constructs an instance that can optionally store the start and end\n\t * character offset of each token term in the text. This can be useful for\n\t * highlighting of hit locations with the Lucene highlighter package.\n\t * Private until the highlighter package matures, so that this can actually\n\t * be meaningfully integrated.\n\t * \n\t * @param storeOffsets\n\t *            whether or not to store the start and end character offset of\n\t *            each token term in the text\n\t */\n\tprivate MemoryIndex(boolean storeOffsets) {\n\t\tthis.stride = storeOffsets ? 3 : 1;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8f14489323057ef6de92ba5ea2d0cfe6e34755f","date":1120167605,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"\t/**\r\n\t * Constructs an empty instance that can optionally store the start and end\r\n\t * character offset of each token term in the text. This can be useful for\r\n\t * highlighting of hit locations with the Lucene highlighter package.\r\n\t * Private until the highlighter package matures, so that this can actually\r\n\t * be meaningfully integrated.\r\n\t * \r\n\t * @param storeOffsets\r\n\t *            whether or not to store the start and end character offset of\r\n\t *            each token term in the text\r\n\t */\r\n\tprivate MemoryIndex(boolean storeOffsets) {\r\n\t\tthis.stride = storeOffsets ? 3 : 1;\r\n\t}\r\n\n","sourceOld":"\t/**\n\t * Constructs an instance that can optionally store the start and end\n\t * character offset of each token term in the text. This can be useful for\n\t * highlighting of hit locations with the Lucene highlighter package.\n\t * Private until the highlighter package matures, so that this can actually\n\t * be meaningfully integrated.\n\t * \n\t * @param storeOffsets\n\t *            whether or not to store the start and end character offset of\n\t *            each token term in the text\n\t */\n\tprivate MemoryIndex(boolean storeOffsets) {\n\t\tthis.stride = storeOffsets ? 3 : 1;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35dd40ede4dd66fa47506858c4a073d295c5a76e","date":1133587328,"type":4,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":null,"sourceOld":"\t/**\r\n\t * Constructs an empty instance that can optionally store the start and end\r\n\t * character offset of each token term in the text. This can be useful for\r\n\t * highlighting of hit locations with the Lucene highlighter package.\r\n\t * Private until the highlighter package matures, so that this can actually\r\n\t * be meaningfully integrated.\r\n\t * \r\n\t * @param storeOffsets\r\n\t *            whether or not to store the start and end character offset of\r\n\t *            each token term in the text\r\n\t */\r\n\tprivate MemoryIndex(boolean storeOffsets) {\r\n\t\tthis.stride = storeOffsets ? 3 : 1;\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a93e1e4a21be8ebb98e53e6933412a363931faa1","date":1133587471,"type":0,"author":"Wolfgang Hoschek","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Constructs an empty instance that can optionally store the start and end\n\t * character offset of each token term in the text. This can be useful for\n\t * highlighting of hit locations with the Lucene highlighter package.\n\t * Private until the highlighter package matures, so that this can actually\n\t * be meaningfully integrated.\n\t * \n\t * @param storeOffsets\n\t *            whether or not to store the start and end character offset of\n\t *            each token term in the text\n\t */\n\tprivate MemoryIndex(boolean storeOffsets) {\n\t\tthis.stride = storeOffsets ? 3 : 1;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f68e24227d5556d33ee6d586fd9010cd9ff8bec","date":1150091176,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","sourceOld":"\t/**\n\t * Constructs an empty instance that can optionally store the start and end\n\t * character offset of each token term in the text. This can be useful for\n\t * highlighting of hit locations with the Lucene highlighter package.\n\t * Private until the highlighter package matures, so that this can actually\n\t * be meaningfully integrated.\n\t * \n\t * @param storeOffsets\n\t *            whether or not to store the start and end character offset of\n\t *            each token term in the text\n\t */\n\tprivate MemoryIndex(boolean storeOffsets) {\n\t\tthis.stride = storeOffsets ? 3 : 1;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex#MemoryIndex(boolean).mjava","sourceNew":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","sourceOld":"  /**\n   * Constructs an empty instance that can optionally store the start and end\n   * character offset of each token term in the text. This can be useful for\n   * highlighting of hit locations with the Lucene highlighter package.\n   * Private until the highlighter package matures, so that this can actually\n   * be meaningfully integrated.\n   * \n   * @param storeOffsets\n   *            whether or not to store the start and end character offset of\n   *            each token term in the text\n   */\n  private MemoryIndex(boolean storeOffsets) {\n    this.stride = storeOffsets ? 3 : 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"]},"commit2Childs":{"35dd40ede4dd66fa47506858c4a073d295c5a76e":["a93e1e4a21be8ebb98e53e6933412a363931faa1"],"c8f14489323057ef6de92ba5ea2d0cfe6e34755f":["35dd40ede4dd66fa47506858c4a073d295c5a76e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50e7972fe4865715af8951d4ba15555e3426fc5d"],"7f68e24227d5556d33ee6d586fd9010cd9ff8bec":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"50e7972fe4865715af8951d4ba15555e3426fc5d":["c8f14489323057ef6de92ba5ea2d0cfe6e34755f"],"a93e1e4a21be8ebb98e53e6933412a363931faa1":["7f68e24227d5556d33ee6d586fd9010cd9ff8bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}