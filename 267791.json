{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","sourceNew":null,"sourceOld":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","sourceNew":null,"sourceOld":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#setShardLeader(CloudState,String,String,String).mjava","sourceNew":null,"sourceOld":"  private CloudState setShardLeader(CloudState state, String collection, String sliceName, String leaderUrl) {\n    \n    boolean updated = false;\n    final Map<String, Map<String, Slice>> newStates = new LinkedHashMap<String,Map<String,Slice>>();\n    newStates.putAll(state.getCollectionStates());\n    \n    final Map<String, Slice> slices = newStates.get(collection);\n\n    if(slices==null) {\n      log.error(\"Could not mark shard leader for non existing collection.\");\n      return state;\n    }\n    \n    if (!slices.containsKey(sliceName)) {\n      log.error(\"Could not mark leader for non existing slice.\");\n      return state;\n    } else {\n      final Map<String,ZkNodeProps> newShards = new LinkedHashMap<String,ZkNodeProps>();\n      for(Entry<String, ZkNodeProps> shard: slices.get(sliceName).getShards().entrySet()) {\n        Map<String, String> newShardProps = new LinkedHashMap<String,String>();\n        newShardProps.putAll(shard.getValue().getProperties());\n        \n        String wasLeader = newShardProps.remove(ZkStateReader.LEADER_PROP);  //clean any previously existed flag\n\n        ZkCoreNodeProps zkCoreNodeProps = new ZkCoreNodeProps(new ZkNodeProps(newShardProps));\n        if(leaderUrl!=null && leaderUrl.equals(zkCoreNodeProps.getCoreUrl())) {\n          newShardProps.put(ZkStateReader.LEADER_PROP,\"true\");\n          if (wasLeader == null) {\n            updated = true;\n          }\n        } else {\n          if (wasLeader != null) {\n            updated = true;\n          }\n        }\n        newShards.put(shard.getKey(), new ZkNodeProps(newShardProps));\n      }\n      Slice slice = new Slice(sliceName, newShards);\n      slices.put(sliceName, slice);\n    }\n    if (updated) {\n      return new CloudState(state.getLiveNodes(), newStates);\n    } else {\n      return state;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d0492616b11aace806d95ec9df44f57a60160bf7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0492616b11aace806d95ec9df44f57a60160bf7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0492616b11aace806d95ec9df44f57a60160bf7"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}