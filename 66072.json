{"path":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bea3922196318026c4274f2013416acb60c691e","date":1336496433,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof ParseException) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(SolrCore.log,e);\n      if (e instanceof ParseException) {\n        e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34","date":1351548783,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof ParseException) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof ParseException) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof ParseException) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof ParseException) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa4edb64993bc5b128a0fcbeae7dae892a714e8a","date":1356623317,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce58244be71dcade436d9313669202ebc249466b","date":1357224775,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests++;\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts++;\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors++;\n    }\n    totalTime += rsp.getEndTime() - req.getStartTime();\n  }\n\n","bugFix":null,"bugIntro":["f6240595e63bdff41c5919fa476b159e649ea967"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.inc();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.inc();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.inc();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(req,defaults,appends,invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(SolrCore.log,e);\n        }\n      } else {\n        SolrException.log(SolrCore.log,e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83b038ad0480d5e81e058bf9fafb2dd85399985d","date":1450812495,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(\"partialResults\");\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e38dc7a572d8cebc0b167f64341a958e6b04942b","date":1464452171,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.incrementAndGet();\n        } else {\n          numClientErrors.incrementAndGet();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.incrementAndGet();\n        } else {\n          numClientErrors.incrementAndGet();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.incrementAndGet();\n        } else {\n          numClientErrors.incrementAndGet();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.incrementAndGet();\n        } else {\n          numClientErrors.incrementAndGet();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.incrementAndGet();\n        } else {\n          numClientErrors.incrementAndGet();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.incrementAndGet();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.incrementAndGet();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          // TODO: should we allow this to be counted as an error (numErrors++)?\n\n        } else {\n          SolrException.log(log, e);\n        }\n      } else {\n        SolrException.log(log, e);\n        if (e instanceof SyntaxError) {\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n      numErrors.incrementAndGet();\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    TimerContext timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      timer.stop();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    numRequests.increment();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.increment();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        if (isServerError) {\n          numServerErrors.increment();\n        } else {\n          numClientErrors.increment();\n        }\n      }\n    }\n    finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6240595e63bdff41c5919fa476b159e649ea967","date":1488906598,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      timer.stop();\n    }\n  }\n\n","bugFix":["ce58244be71dcade436d9313669202ebc249466b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f","date":1517572963,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1257989f08e6750eeab73e5e9f7847fc48b04a1a","date":1531102463,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        req.getCore().getCoreContainer().checkTragicException(req.getCore());\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        req.getCore().getCoreContainer().checkTragicException(req.getCore());\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        req.getCore().getCoreContainer().checkTragicException(req.getCore());\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c96c6402e44d386e86f90412fcf0f5ad5c689d2d","date":1532997723,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        req.getCore().getCoreContainer().checkTragicException(req.getCore());\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        if( Boolean.TRUE.equals(header.getBooleanArg(\n                     SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)) ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        Object partialResults = header.get(SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY);\n        boolean timedOut = partialResults == null ? false : (Boolean)partialResults;\n        if( timedOut ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":["5a07152dfe67b772576972ddbfdd61ac06c9129b","83b038ad0480d5e81e058bf9fafb2dd85399985d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if(pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM)) req.getContext().put(USEPARAM,pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody( req, rsp );\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if(header != null) {\n        if( Boolean.TRUE.equals(header.getBooleanArg(\n                     SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY)) ) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException)e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68796f2b228600a74c540a78623c01a43894c464","date":1575895593,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","date":1575906501,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    @SuppressWarnings(\"resource\")\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/RequestHandlerBase#handleRequest(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    @SuppressWarnings(\"resource\")\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {\n    requests.inc();\n    // requests are distributed by default when ZK is in use, unless indicated otherwise\n    boolean distrib = req.getParams().getBool(CommonParams.DISTRIB,\n        req.getCore() != null ? req.getCore().getCoreContainer().isZooKeeperAware() : false);\n    if (req.getParams().getBool(ShardParams.IS_SHARD, false)) {\n      shardPurposes.computeIfAbsent(\"total\", name -> new Counter()).inc();\n      int purpose = req.getParams().getInt(ShardParams.SHARDS_PURPOSE, 0);\n      if (purpose != 0) {\n        String[] names = SolrPluginUtils.getRequestPurposeNames(purpose);\n        for (String n : names) {\n          shardPurposes.computeIfAbsent(n, name -> new Counter()).inc();\n        }\n      }\n    }\n    Timer.Context timer = requestTimes.time();\n    @SuppressWarnings(\"resource\")\n    Timer.Context dTimer = distrib ? distribRequestTimes.time() : localRequestTimes.time();\n    try {\n      if (pluginInfo != null && pluginInfo.attributes.containsKey(USEPARAM))\n        req.getContext().put(USEPARAM, pluginInfo.attributes.get(USEPARAM));\n      SolrPluginUtils.setDefaults(this, req, defaults, appends, invariants);\n      req.getContext().remove(USEPARAM);\n      rsp.setHttpCaching(httpCaching);\n      handleRequestBody(req, rsp);\n      // count timeouts\n      NamedList header = rsp.getResponseHeader();\n      if (header != null) {\n        if (Boolean.TRUE.equals(header.getBooleanArg(\n            SolrQueryResponse.RESPONSE_HEADER_PARTIAL_RESULTS_KEY))) {\n          numTimeouts.mark();\n          rsp.setHttpCaching(false);\n        }\n      }\n    } catch (Exception e) {\n      if (req.getCore() != null) {\n        boolean isTragic = req.getCore().getCoreContainer().checkTragicException(req.getCore());\n        if (isTragic) {\n          if (e instanceof SolrException) {\n            // Tragic exceptions should always throw a server error\n            assert ((SolrException) e).code() == 500;\n          } else {\n            // wrap it in a solr exception\n            e = new SolrException(SolrException.ErrorCode.SERVER_ERROR, e.getMessage(), e);\n          }\n        }\n      }\n      boolean incrementErrors = true;\n      boolean isServerError = true;\n      if (e instanceof SolrException) {\n        SolrException se = (SolrException) e;\n        if (se.code() == SolrException.ErrorCode.CONFLICT.code) {\n          incrementErrors = false;\n        } else if (se.code() >= 400 && se.code() < 500) {\n          isServerError = false;\n        }\n      } else {\n        if (e instanceof SyntaxError) {\n          isServerError = false;\n          e = new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n        }\n      }\n\n      rsp.setException(e);\n\n      if (incrementErrors) {\n        SolrException.log(log, e);\n\n        numErrors.mark();\n        if (isServerError) {\n          numServerErrors.mark();\n        } else {\n          numClientErrors.mark();\n        }\n      }\n    } finally {\n      dTimer.stop();\n      long elapsed = timer.stop();\n      totalTime.inc(elapsed);\n      if (distrib) {\n        distribTotalTime.inc(elapsed);\n      } else {\n        localTotalTime.inc(elapsed);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","ce58244be71dcade436d9313669202ebc249466b"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34":["1bea3922196318026c4274f2013416acb60c691e"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ce58244be71dcade436d9313669202ebc249466b":["aa4edb64993bc5b128a0fcbeae7dae892a714e8a"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["c96c6402e44d386e86f90412fcf0f5ad5c689d2d"],"1bea3922196318026c4274f2013416acb60c691e":["c26f00b574427b55127e869b935845554afde1fa"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"da8a02bef7458089240404614139b53c9f875ec7":["83b038ad0480d5e81e058bf9fafb2dd85399985d","e38dc7a572d8cebc0b167f64341a958e6b04942b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c2d72c3e6563e08675f940d4c74139309c5e3db2","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f","1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["727bb765ff2542275f6d31f67be18d7104bae148","0265144286422ad99682a00904cc2536b79c8535"],"ba055e19afc289adcb5bedaf68513793a7254012":["68796f2b228600a74c540a78623c01a43894c464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["ce58244be71dcade436d9313669202ebc249466b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f","1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f"],"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f":["f6240595e63bdff41c5919fa476b159e649ea967"],"3cdb67100dc016748799a77218aa409478372d79":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34"],"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb":["6224f40fcf60b05c62a88f50925c1bbae324bdfd","68796f2b228600a74c540a78623c01a43894c464"],"f6240595e63bdff41c5919fa476b159e649ea967":["0265144286422ad99682a00904cc2536b79c8535"],"407687e67faf6e1f02a211ca078d8e3eed631027":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34","3cdb67100dc016748799a77218aa409478372d79"],"c96c6402e44d386e86f90412fcf0f5ad5c689d2d":["1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["e38dc7a572d8cebc0b167f64341a958e6b04942b"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["83b038ad0480d5e81e058bf9fafb2dd85399985d","e38dc7a572d8cebc0b167f64341a958e6b04942b"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["83b038ad0480d5e81e058bf9fafb2dd85399985d","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"0265144286422ad99682a00904cc2536b79c8535":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"aa4edb64993bc5b128a0fcbeae7dae892a714e8a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["ba055e19afc289adcb5bedaf68513793a7254012"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68796f2b228600a74c540a78623c01a43894c464":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3cdb67100dc016748799a77218aa409478372d79"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["e38dc7a572d8cebc0b167f64341a958e6b04942b","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"e38dc7a572d8cebc0b167f64341a958e6b04942b":["83b038ad0480d5e81e058bf9fafb2dd85399985d"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["0265144286422ad99682a00904cc2536b79c8535","727bb765ff2542275f6d31f67be18d7104bae148"],"1cc5dbfc6e08aba50c1bec2e00de1f129f85db34":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"c26f00b574427b55127e869b935845554afde1fa":["1bea3922196318026c4274f2013416acb60c691e"],"ce58244be71dcade436d9313669202ebc249466b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c2d72c3e6563e08675f940d4c74139309c5e3db2"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"1bea3922196318026c4274f2013416acb60c691e":["1cc5dbfc6e08aba50c1bec2e00de1f129f85db34"],"83b038ad0480d5e81e058bf9fafb2dd85399985d":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e38dc7a572d8cebc0b167f64341a958e6b04942b"],"da8a02bef7458089240404614139b53c9f875ec7":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"ba055e19afc289adcb5bedaf68513793a7254012":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","c96c6402e44d386e86f90412fcf0f5ad5c689d2d"],"f7be718ed0d23db119a3afd0d9f30a4fbf582a7f":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"df3f594d6024cc3f64b0d0932c5efc80dfbe64bb":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f6240595e63bdff41c5919fa476b159e649ea967":["f7be718ed0d23db119a3afd0d9f30a4fbf582a7f"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"c96c6402e44d386e86f90412fcf0f5ad5c689d2d":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["83b038ad0480d5e81e058bf9fafb2dd85399985d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","f6240595e63bdff41c5919fa476b159e649ea967"],"727bb765ff2542275f6d31f67be18d7104bae148":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"aa4edb64993bc5b128a0fcbeae7dae892a714e8a":["ce58244be71dcade436d9313669202ebc249466b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"68796f2b228600a74c540a78623c01a43894c464":["ba055e19afc289adcb5bedaf68513793a7254012","df3f594d6024cc3f64b0d0932c5efc80dfbe64bb"],"7530de27b87b961b51f01bd1299b7004d46e8823":["aa4edb64993bc5b128a0fcbeae7dae892a714e8a"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"e38dc7a572d8cebc0b167f64341a958e6b04942b":["da8a02bef7458089240404614139b53c9f875ec7","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","5b8ee93140fd0efef7e101786e3ed5160a700b5f","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","68796f2b228600a74c540a78623c01a43894c464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","da8a02bef7458089240404614139b53c9f875ec7","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","df3f594d6024cc3f64b0d0932c5efc80dfbe64bb","5b8ee93140fd0efef7e101786e3ed5160a700b5f","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}