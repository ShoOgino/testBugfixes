{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"/dev/null","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    evaluators.put(EvaluatorBag.DATE_FORMAT_EVALUATOR, EvaluatorBag\n            .getDateFormatEvaluator());\n    evaluators.put(EvaluatorBag.SQL_ESCAPE_EVALUATOR, EvaluatorBag\n            .getSqlEscapingEvaluator());\n    evaluators.put(EvaluatorBag.URL_ENCODE_EVALUATOR, EvaluatorBag\n            .getUrlEvaluator());\n\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null)\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        try {\n          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz)\n                  .newInstance());\n        } catch (Exception exp) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + clz, exp);\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8d22c66b0638c82521891318fc352042c5b86e03"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d22c66b0638c82521891318fc352042c5b86e03","date":1219993248,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    evaluators.put(EvaluatorBag.DATE_FORMAT_EVALUATOR, EvaluatorBag\n            .getDateFormatEvaluator());\n    evaluators.put(EvaluatorBag.SQL_ESCAPE_EVALUATOR, EvaluatorBag\n            .getSqlEscapingEvaluator());\n    evaluators.put(EvaluatorBag.URL_ENCODE_EVALUATOR, EvaluatorBag\n            .getUrlEvaluator());\n\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null)\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        try {\n          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz, null)\n                  .newInstance());\n        } catch (Exception exp) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + clz, exp);\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    evaluators.put(EvaluatorBag.DATE_FORMAT_EVALUATOR, EvaluatorBag\n            .getDateFormatEvaluator());\n    evaluators.put(EvaluatorBag.SQL_ESCAPE_EVALUATOR, EvaluatorBag\n            .getSqlEscapingEvaluator());\n    evaluators.put(EvaluatorBag.URL_ENCODE_EVALUATOR, EvaluatorBag\n            .getUrlEvaluator());\n\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null)\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        try {\n          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz)\n                  .newInstance());\n        } catch (Exception exp) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + clz, exp);\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","bugFix":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    evaluators.put(EvaluatorBag.DATE_FORMAT_EVALUATOR, EvaluatorBag\n            .getDateFormatEvaluator());\n    evaluators.put(EvaluatorBag.SQL_ESCAPE_EVALUATOR, EvaluatorBag\n            .getSqlEscapingEvaluator());\n    evaluators.put(EvaluatorBag.URL_ENCODE_EVALUATOR, EvaluatorBag\n            .getUrlEvaluator());\n\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null)\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        try {\n          evaluators.put(func, (Evaluator) DocBuilder.loadClass(clz, null)\n                  .newInstance());\n        } catch (Exception exp) {\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Unable to instantiate evaluator: \" + clz, exp);\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (!n.isEmpty())\n      documents = new ArrayList<Document>();\n    for (Element element : n)\n      documents.add(new Document(element));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80c7b34ead12b9d35e12b29cd4a6032baae1d564","date":1245645598,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dd73fb6c61a8c05893f26d0a5c8405760e27ab1","date":1260879539,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataConfig#readFromXml(Element).mjava","sourceNew":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","sourceOld":"  public void readFromXml(Element e) {\n    List<Element> n = getChildNodes(e, \"document\");\n    if (n.isEmpty()) {\n      throw new DataImportHandlerException(SEVERE, \"DataImportHandler \" +\n              \"configuration file must have one <document> node.\");\n    }\n    document = new Document(n.get(0));\n\n    n = getChildNodes(e, SCRIPT);\n    if (!n.isEmpty()) {\n      script = new Script(n.get(0));\n    }\n\n    // Add the provided evaluators\n    n = getChildNodes(e, FUNCTION);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        String func = getStringAttribute(element, NAME, null);\n        String clz = getStringAttribute(element, CLASS, null);\n        if (func == null || clz == null){\n          throw new DataImportHandlerException(\n                  SEVERE,\n                  \"<function> must have a 'name' and 'class' attributes\");\n        } else {\n          functions.add(getAllAttributes(element));\n        }\n      }\n    }\n    n = getChildNodes(e, DATA_SRC);\n    if (!n.isEmpty()) {\n      for (Element element : n) {\n        Properties p = new Properties();\n        HashMap<String, String> attrs = getAllAttributes(element);\n        for (Map.Entry<String, String> entry : attrs.entrySet()) {\n          p.setProperty(entry.getKey(), entry.getValue());\n        }\n        dataSources.put(p.getProperty(\"name\"), p);\n      }\n    }\n    if(dataSources.get(null) == null){\n      for (Properties properties : dataSources.values()) {\n        dataSources.put(null,properties);\n        break;        \n      } \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d532a814197216f5e180897b172e87e0158690b":["8d22c66b0638c82521891318fc352042c5b86e03"],"8d22c66b0638c82521891318fc352042c5b86e03":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3dd73fb6c61a8c05893f26d0a5c8405760e27ab1":["80c7b34ead12b9d35e12b29cd4a6032baae1d564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80c7b34ead12b9d35e12b29cd4a6032baae1d564":["db6dfac30d1553e9356900c2b76b768139483a62"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3dd73fb6c61a8c05893f26d0a5c8405760e27ab1"],"db6dfac30d1553e9356900c2b76b768139483a62":["9d532a814197216f5e180897b172e87e0158690b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9d532a814197216f5e180897b172e87e0158690b":["db6dfac30d1553e9356900c2b76b768139483a62"],"8d22c66b0638c82521891318fc352042c5b86e03":["9d532a814197216f5e180897b172e87e0158690b"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["8d22c66b0638c82521891318fc352042c5b86e03"],"3dd73fb6c61a8c05893f26d0a5c8405760e27ab1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"80c7b34ead12b9d35e12b29cd4a6032baae1d564":["3dd73fb6c61a8c05893f26d0a5c8405760e27ab1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db6dfac30d1553e9356900c2b76b768139483a62":["80c7b34ead12b9d35e12b29cd4a6032baae1d564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}