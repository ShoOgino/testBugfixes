{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#parse(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#parse(String,String).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#parse(String,String).mjava","sourceNew":"  /**\n   * Parses a query string to an object, usually some query object. <br/>\n   * <br/>\n   * In this method the three phases are executed: <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1st - the query string is parsed using the\n   * text parser returned by {@link #getSyntaxParser()}, the result is a query\n   * node tree <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2nd - the query node tree is processed by the\n   * processor returned by {@link #getQueryNodeProcessor()} <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3th - a object is built from the query node\n   * tree using the builder returned by {@link #getQueryBuilder()}\n   * \n   * @param query\n   *          the query string\n   * @param defaultField\n   *          the default field used by the text parser\n   * \n   * @return the object built from the query\n   * \n   * @throws QueryNodeException\n   *           if something wrong happens along the three phases\n   */\n  public Object parse(String query, String defaultField)\n      throws QueryNodeException {\n    QueryNode queryTree = getSyntaxParser().parse(query, defaultField);\n\n    QueryNodeProcessor processor = getQueryNodeProcessor();\n\n    if (processor != null) {\n      queryTree = processor.process(queryTree);\n    }\n\n    return getQueryBuilder().build(queryTree);\n\n  }\n\n","sourceOld":"  /**\n   * Parses a query string to an object, usually some query object. <br/>\n   * <br/>\n   * In this method the three phases are executed: <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1st - the query string is parsed using the\n   * text parser returned by {@link #getSyntaxParser()}, the result is a query\n   * node tree <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2nd - the query node tree is processed by the\n   * processor returned by {@link #getQueryNodeProcessor()} <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3th - a object is built from the query node\n   * tree using the builder returned by {@link #getQueryBuilder()}\n   * \n   * @param query\n   *          the query string\n   * @param defaultField\n   *          the default field used by the text parser\n   * \n   * @return the object built from the query\n   * \n   * @throws QueryNodeException\n   *           if something wrong happens along the three phases\n   */\n  public Object parse(String query, String defaultField)\n      throws QueryNodeException {\n    QueryNode queryTree = getSyntaxParser().parse(query, defaultField);\n\n    QueryNodeProcessor processor = getQueryNodeProcessor();\n\n    if (processor != null) {\n      queryTree = processor.process(queryTree);\n    }\n\n    return getQueryBuilder().build(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14600834a1fbc7c12faf344466e00cca8cc67de4","date":1423303834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#parse(String,String).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/QueryParserHelper#parse(String,String).mjava","sourceNew":"  /**\n   * Parses a query string to an object, usually some query object.<br>\n   * <br>\n   * In this method the three phases are executed: <br>\n   * <br>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1st - the query string is parsed using the\n   * text parser returned by {@link #getSyntaxParser()}, the result is a query\n   * node tree <br>\n   * <br>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2nd - the query node tree is processed by the\n   * processor returned by {@link #getQueryNodeProcessor()} <br>\n   * <br>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3th - a object is built from the query node\n   * tree using the builder returned by {@link #getQueryBuilder()}\n   * \n   * @param query\n   *          the query string\n   * @param defaultField\n   *          the default field used by the text parser\n   * \n   * @return the object built from the query\n   * \n   * @throws QueryNodeException\n   *           if something wrong happens along the three phases\n   */\n  public Object parse(String query, String defaultField)\n      throws QueryNodeException {\n    QueryNode queryTree = getSyntaxParser().parse(query, defaultField);\n\n    QueryNodeProcessor processor = getQueryNodeProcessor();\n\n    if (processor != null) {\n      queryTree = processor.process(queryTree);\n    }\n\n    return getQueryBuilder().build(queryTree);\n\n  }\n\n","sourceOld":"  /**\n   * Parses a query string to an object, usually some query object. <br/>\n   * <br/>\n   * In this method the three phases are executed: <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1st - the query string is parsed using the\n   * text parser returned by {@link #getSyntaxParser()}, the result is a query\n   * node tree <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2nd - the query node tree is processed by the\n   * processor returned by {@link #getQueryNodeProcessor()} <br/>\n   * <br/>\n   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3th - a object is built from the query node\n   * tree using the builder returned by {@link #getQueryBuilder()}\n   * \n   * @param query\n   *          the query string\n   * @param defaultField\n   *          the default field used by the text parser\n   * \n   * @return the object built from the query\n   * \n   * @throws QueryNodeException\n   *           if something wrong happens along the three phases\n   */\n  public Object parse(String query, String defaultField)\n      throws QueryNodeException {\n    QueryNode queryTree = getSyntaxParser().parse(query, defaultField);\n\n    QueryNodeProcessor processor = getQueryNodeProcessor();\n\n    if (processor != null) {\n      queryTree = processor.process(queryTree);\n    }\n\n    return getQueryBuilder().build(queryTree);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"14600834a1fbc7c12faf344466e00cca8cc67de4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14600834a1fbc7c12faf344466e00cca8cc67de4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["14600834a1fbc7c12faf344466e00cca8cc67de4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"14600834a1fbc7c12faf344466e00cca8cc67de4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}