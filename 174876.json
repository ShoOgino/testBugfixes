{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#createTree(Node[],int,int).mjava","commits":[{"id":"083674ea80108c4053d9526cdef6f77b2494e551","date":1462313169,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#createTree(Node[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    private static Node createTree(final Node[] edges, final int low, final int high) {\n      if (low > high) {\n        return null;\n      }\n      // add midpoint\n      int mid = (low + high) >>> 1;\n      final Node newNode = edges[mid];\n      // add children\n      newNode.left = createTree(edges, low, mid - 1);\n      newNode.right = createTree(edges, mid + 1, high);\n      // pull up max values to this node\n      if (newNode.left != null) {\n        newNode.max = Math.max(newNode.max, newNode.left.max);\n      }\n      if (newNode.right != null) {\n        newNode.max = Math.max(newNode.max, newNode.right.max);\n      }\n      return newNode;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.Tree#createTree(Node[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    private static Node createTree(final Node[] edges, final int low, final int high) {\n      if (low > high) {\n        return null;\n      }\n      // add midpoint\n      int mid = (low + high) >>> 1;\n      final Node newNode = edges[mid];\n      // add children\n      newNode.left = createTree(edges, low, mid - 1);\n      newNode.right = createTree(edges, mid + 1, high);\n      // pull up max values to this node\n      if (newNode.left != null) {\n        newNode.max = Math.max(newNode.max, newNode.left.max);\n      }\n      if (newNode.right != null) {\n        newNode.max = Math.max(newNode.max, newNode.right.max);\n      }\n      return newNode;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"083674ea80108c4053d9526cdef6f77b2494e551":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["083674ea80108c4053d9526cdef6f77b2494e551"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","083674ea80108c4053d9526cdef6f77b2494e551"]},"commit2Childs":{"083674ea80108c4053d9526cdef6f77b2494e551":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["083674ea80108c4053d9526cdef6f77b2494e551","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}