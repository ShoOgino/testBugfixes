{"path":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","sourceOld":"  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    /*\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }*/\n    return stats;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10d98d3c84fcfdd2089a56054f4cf7186a57265d","date":1400053445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      stats.add(\"entry#\" + i, entries[i]);\n    }\n    return stats;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    /*\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }*/\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      stats.add(\"entry#\" + i, entries[i]);\n    }\n    return stats;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      stats.add(\"entry#\" + i, entries[i]);\n    }\n    return stats;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    CacheEntry[] entries = FieldCache.DEFAULT.getCacheEntries();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      CacheEntry e = entries[i];\n      stats.add(\"entry#\" + i, e.toString());\n    }\n\n    Insanity[] insanity = checker.check(entries);\n\n    stats.add(\"insanity_count\", insanity.length);\n    for (int i = 0; i < insanity.length; i++) {\n\n      /** RAM estimation is both CPU and memory intensive... we don't want to do it unless asked.\n      // we only estimate the size of insane entries\n      for (CacheEntry e : insanity[i].getCacheEntries()) {\n        // don't re-estimate if we've already done it.\n        if (null == e.getEstimatedSize()) e.estimateSize();\n      }\n      **/\n      \n      stats.add(\"insanity#\" + i, insanity[i].toString());\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731","date":1458585039,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    if (!disableEntryList) {\n      for (int i = 0; i < entries.length; i++) {\n        stats.add(\"entry#\" + i, entries[i]);\n      }\n    }\n    return stats;\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    for (int i = 0; i < entries.length; i++) {\n      stats.add(\"entry#\" + i, entries[i]);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b0bba9e104010e438d33cdb0c21121f83a8cc49","date":1459882900,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    return getStats(!disableEntryList);\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    if (!disableEntryList) {\n      for (int i = 0; i < entries.length; i++) {\n        stats.add(\"entry#\" + i, entries[i]);\n      }\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":"  @Override\n  public NamedList getStatistics() {\n    return getStats(!disableEntryList);\n  }\n\n","sourceOld":"  @Override\n  public NamedList getStatistics() {\n    NamedList stats = new SimpleOrderedMap();\n    String[] entries = UninvertingReader.getUninvertedStats();\n    stats.add(\"entries_count\", entries.length);\n    if (!disableEntryList) {\n      for (int i = 0; i < entries.length; i++) {\n        stats.add(\"entry#\" + i, entries[i]);\n      }\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    return getStats(!disableEntryList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrFieldCacheMBean#getStatistics().mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList getStatistics() {\n    return getStats(!disableEntryList);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b6284684320a9808c41a5e43de958b2da22f89bd"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"56572ec06f1407c066d6b7399413178b33176cd8":["7530de27b87b961b51f01bd1299b7004d46e8823","93dd449115a9247533e44bab47e8429e5dccbc6d"],"816521ebaad5add9cb96bb88c577394e2938c40b":["b6284684320a9808c41a5e43de958b2da22f89bd"],"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"b6284684320a9808c41a5e43de958b2da22f89bd":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["7530de27b87b961b51f01bd1299b7004d46e8823","10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["7530de27b87b961b51f01bd1299b7004d46e8823"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4a1dc89d1db9e10bf6acefd6083f0d2bfed96731":["b6284684320a9808c41a5e43de958b2da22f89bd","2b0bba9e104010e438d33cdb0c21121f83a8cc49"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b6284684320a9808c41a5e43de958b2da22f89bd":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["4a1dc89d1db9e10bf6acefd6083f0d2bfed96731","56572ec06f1407c066d6b7399413178b33176cd8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2b0bba9e104010e438d33cdb0c21121f83a8cc49":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}