{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","commits":[{"id":"0b631a3d48258df52a36daa975d3f8deee09b75d","date":1438887563,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (collectionRequests != null) {\n      for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n        //check permissions for each collection\n        MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n        if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n      }\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609b959cb2dad7c9d9b3237fa2b806629e9206d","date":1439303330,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (collectionRequests.isEmpty()) {\n      MatchStatus flag = checkCollPerm(mapping.get(\"\"), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (collectionRequests != null) {\n      for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n        //check permissions for each collection\n        MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n        if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n      }\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76","date":1441196471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      MatchStatus flag = checkCollPerm(mapping.get(\"\"), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (collectionRequests.isEmpty()) {\n      MatchStatus flag = checkCollPerm(mapping.get(\"\"), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","bugFix":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239a1d4a10c03638628b6aa312f3c64ed9db72d2","date":1450681874,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      MatchStatus flag = checkCollPerm(mapping.get(\"\"), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check global permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(null), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb842b7eba1323ec814496c88e41dc3264d1d4e0","date":1569005452,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n        context.getResource(), context.getRequestType(), collectionRequests);\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n          context.getResource(), context.getRequestType(), collectionRequests);\n    }\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n        context.getResource(), context.getRequestType(), collectionRequests);\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#authorize(AuthorizationContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin#authorize(AuthorizationContext).mjava","sourceNew":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n          context.getResource(), context.getRequestType(), collectionRequests);\n    }\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","sourceOld":"  @Override\n  public AuthorizationResponse authorize(AuthorizationContext context) {\n    List<AuthorizationContext.CollectionRequest> collectionRequests = context.getCollectionRequests();\n    if (log.isDebugEnabled()) {\n      log.debug(\"Attempting to authorize request to [{}] of type: [{}], associated with collections [{}]\",\n          context.getResource(), context.getRequestType(), collectionRequests);\n    }\n\n    if (context.getRequestType() == AuthorizationContext.RequestType.ADMIN) {\n      log.debug(\"Authorizing an ADMIN request, checking admin permissions\");\n      MatchStatus flag = checkCollPerm(mapping.get(null), context);\n      return flag.rsp;\n    }\n\n    for (AuthorizationContext.CollectionRequest collreq : collectionRequests) {\n      //check permissions for each collection\n      log.debug(\"Authorizing collection-aware request, checking perms applicable to specific collection [{}]\",\n          collreq.collectionName);\n      MatchStatus flag = checkCollPerm(mapping.get(collreq.collectionName), context);\n      if (flag != MatchStatus.NO_PERMISSIONS_FOUND) return flag.rsp;\n    }\n\n    log.debug(\"Authorizing collection-aware request, checking perms applicable to all (*) collections\");\n    //check wildcard (all=*) permissions.\n    MatchStatus flag = checkCollPerm(mapping.get(\"*\"), context);\n    return flag.rsp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"8076096f334b0665d0a69a63ee98ac09baad402b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["8076096f334b0665d0a69a63ee98ac09baad402b"],"0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76":["239a1d4a10c03638628b6aa312f3c64ed9db72d2"],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b631a3d48258df52a36daa975d3f8deee09b75d"],"c609b959cb2dad7c9d9b3237fa2b806629e9206d":["0db6b07ace5f92f85e46b06168f1a2f8ebc5ef76"],"cb842b7eba1323ec814496c88e41dc3264d1d4e0":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"239a1d4a10c03638628b6aa312f3c64ed9db72d2":["cb842b7eba1323ec814496c88e41dc3264d1d4e0"],"0b631a3d48258df52a36daa975d3f8deee09b75d":["c609b959cb2dad7c9d9b3237fa2b806629e9206d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}