{"path":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","commits":[{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63961b0a0b1541623ed4c74d8cb088c35b32470f","date":1399929609,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl#getDocTermOrds(AtomicReader,String).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field) throws IOException {\n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, null), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","sourceNew":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptySortedSet();\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.emptySortedSet();\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.emptySortedSet();\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.EMPTY_SORTED_SET;\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.EMPTY_SORTED_SET;\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheImpl#getDocTermOrds(AtomicReader,String,BytesRef).mjava","sourceNew":null,"sourceOld":"  // TODO: this if DocTermsIndex was already created, we\n  // should share it...\n  public SortedSetDocValues getDocTermOrds(AtomicReader reader, String field, BytesRef prefix) throws IOException {\n    // not a general purpose filtering mechanism...\n    assert prefix == null || prefix == INT32_TERM_PREFIX || prefix == INT64_TERM_PREFIX;\n    \n    SortedSetDocValues dv = reader.getSortedSetDocValues(field);\n    if (dv != null) {\n      return dv;\n    }\n    \n    SortedDocValues sdv = reader.getSortedDocValues(field);\n    if (sdv != null) {\n      return DocValues.singleton(sdv);\n    }\n    \n    final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n    if (info == null) {\n      return DocValues.emptySortedSet();\n    } else if (info.hasDocValues()) {\n      throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n    } else if (!info.isIndexed()) {\n      return DocValues.emptySortedSet();\n    }\n    \n    // ok we need to uninvert. check if we can optimize a bit.\n    \n    Terms terms = reader.terms(field);\n    if (terms == null) {\n      return DocValues.emptySortedSet();\n    } else {\n      // if #postings = #docswithfield we know that the field is \"single valued enough\".\n      // its possible the same term might appear twice in the same document, but SORTED_SET discards frequency.\n      // its still ok with filtering (which we limit to numerics), it just means precisionStep = Inf\n      long numPostings = terms.getSumDocFreq();\n      if (numPostings != -1 && numPostings == terms.getDocCount()) {\n        return DocValues.singleton(getTermsIndex(reader, field));\n      }\n    }\n    \n    DocTermOrds dto = (DocTermOrds) caches.get(DocTermOrds.class).get(reader, new CacheKey(field, prefix), false);\n    return dto.iterator(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63961b0a0b1541623ed4c74d8cb088c35b32470f"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["63961b0a0b1541623ed4c74d8cb088c35b32470f"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36a4a25c2f02edc0c96bc51a298c45b1764e662d","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}