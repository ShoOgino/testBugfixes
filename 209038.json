{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testBasicUpdates().mjava","commits":[{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testBasicUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUpdates() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String collectionName = createAndSetNewDefaultCollection();\n    \n    // add a doc, update it, and delete it\n    addUpdateDelete(\"doc1\");\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    // add 2 docs in a single request\n    addTwoDocsInOneRequest(\"doc2\", \"doc3\");\n    assertEquals(2, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    // 2 deletes in a single request...\n    assertEquals(0, (new UpdateRequest().deleteById(\"doc2\").deleteById(\"doc3\"))\n                 .process(cloudClient).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    // add a doc that we will then delete later after adding two other docs (all before next commit).\n    assertEquals(0, cloudClient.add(sdoc(\"id\", \"doc4\", \"content_s\", \"will_delete_later\")).getStatus());\n    assertEquals(0, cloudClient.add(sdocs(sdoc(\"id\", \"doc5\"),\n                                          sdoc(\"id\", \"doc6\"))).getStatus());\n    assertEquals(0, cloudClient.deleteById(\"doc4\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n\n    assertEquals(0, cloudClient.query(params(\"q\", \"id:doc4\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"id:doc5\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"id:doc6\")).getResults().getNumFound());\n    assertEquals(2, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"post_doc_5_6\"));\n\n    // delete everything....\n    assertEquals(0, cloudClient.deleteByQuery(\"*:*\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"delAll\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#testBasicUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUpdates() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String collectionName = createAndSetNewDefaultCollection();\n    \n    // add a doc, update it, and delete it\n    addUpdateDelete(\"doc1\");\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    // add 2 docs in a single request\n    addTwoDocsInOneRequest(\"doc2\", \"doc3\");\n    assertEquals(2, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    // 2 deletes in a single request...\n    assertEquals(0, (new UpdateRequest().deleteById(\"doc2\").deleteById(\"doc3\"))\n                 .process(cloudClient).getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    \n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    // add a doc that we will then delete later after adding two other docs (all before next commit).\n    assertEquals(0, cloudClient.add(sdoc(\"id\", \"doc4\", \"content_s\", \"will_delete_later\")).getStatus());\n    assertEquals(0, cloudClient.add(sdocs(sdoc(\"id\", \"doc5\"),\n                                          sdoc(\"id\", \"doc6\"))).getStatus());\n    assertEquals(0, cloudClient.deleteById(\"doc4\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n\n    assertEquals(0, cloudClient.query(params(\"q\", \"id:doc4\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"id:doc5\")).getResults().getNumFound());\n    assertEquals(1, cloudClient.query(params(\"q\", \"id:doc6\")).getResults().getNumFound());\n    assertEquals(2, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n    \n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"post_doc_5_6\"));\n\n    // delete everything....\n    assertEquals(0, cloudClient.deleteByQuery(\"*:*\").getStatus());\n    assertEquals(0, cloudClient.commit().getStatus());\n    assertEquals(0, cloudClient.query(params(\"q\",\"*:*\")).getResults().getNumFound());\n\n    checkShardConsistency(params(\"q\",\"*:*\", \"rows\", \"9999\",\"_trace\",\"delAll\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}