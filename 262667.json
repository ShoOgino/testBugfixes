{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"500867f0f15393f6b2c38c3366e414fccba04ed6","date":1411520390,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","date":1411708843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      byte[] id = si.getId();\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1dcbd1c5c87f332c2d56a197b2db988c2c17088c","date":1411744749,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      byte[] id = si.getId();\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    final IndexOutput output = dir.createOutput(fileName, ioContext);\n\n    boolean success = false;\n    try {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n      output.writeString(si.getId());\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2b68cde7a9cb042573786d2f01d451ff46b5556","date":1412631431,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(version.toString());\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7923aa6efab0e92f2982f1972dc96dae3032b1c3","date":1413834454,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      version.write(output);\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7520ba9e95ee7b692648c0217c90cc4dd681e6","date":1413834525,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      version.write(output);\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7923aa6efab0e92f2982f1972dc96dae3032b1c3":["55980207f1977bd1463465de1659b821347e2fa8"],"d2b68cde7a9cb042573786d2f01d451ff46b5556":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"55980207f1977bd1463465de1659b821347e2fa8":["1dcbd1c5c87f332c2d56a197b2db988c2c17088c","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["d2b68cde7a9cb042573786d2f01d451ff46b5556"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["500867f0f15393f6b2c38c3366e414fccba04ed6","1dcbd1c5c87f332c2d56a197b2db988c2c17088c"],"1dcbd1c5c87f332c2d56a197b2db988c2c17088c":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7520ba9e95ee7b692648c0217c90cc4dd681e6":["7923aa6efab0e92f2982f1972dc96dae3032b1c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"]},"commit2Childs":{"7923aa6efab0e92f2982f1972dc96dae3032b1c3":["1c7520ba9e95ee7b692648c0217c90cc4dd681e6"],"55980207f1977bd1463465de1659b821347e2fa8":["7923aa6efab0e92f2982f1972dc96dae3032b1c3"],"d2b68cde7a9cb042573786d2f01d451ff46b5556":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5d957b3a23cce91c77a2c9971ecf0c9f99dd503":["1dcbd1c5c87f332c2d56a197b2db988c2c17088c"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["d2b68cde7a9cb042573786d2f01d451ff46b5556"],"1dcbd1c5c87f332c2d56a197b2db988c2c17088c":["55980207f1977bd1463465de1659b821347e2fa8","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["500867f0f15393f6b2c38c3366e414fccba04ed6"],"500867f0f15393f6b2c38c3366e414fccba04ed6":["a5d957b3a23cce91c77a2c9971ecf0c9f99dd503","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"1c7520ba9e95ee7b692648c0217c90cc4dd681e6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1c7520ba9e95ee7b692648c0217c90cc4dd681e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}