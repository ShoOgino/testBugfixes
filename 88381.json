{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            Weight w = q.weight(searcher);\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   !w.scoresDocsOutOfOrder());\n            searcher.search(w, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"393267188e35eb5f4918eae25b19d8773b889aa2","date":1301605398,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = reader.getDeletedDocs();\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (!delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits delDocs = MultiFields.getDeletedDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == delDocs || ! delDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          if (q instanceof MultiTermQuery) {\n            System.out.println(\"MultiTermQuery term count = \" + ((MultiTermQuery) q).getTotalNumberOfTerms());\n          }\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir, true);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      searcher.close();\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/ReadTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n    int res = 0;\n\n    // open reader or use existing one\n    IndexSearcher searcher = getRunData().getIndexSearcher();\n\n    IndexReader reader;\n\n    final boolean closeSearcher;\n    if (searcher == null) {\n      // open our own reader\n      Directory dir = getRunData().getDirectory();\n      reader = IndexReader.open(dir);\n      searcher = new IndexSearcher(reader);\n      closeSearcher = true;\n    } else {\n      // use existing one; this passes +1 ref to us\n      reader = searcher.getIndexReader();\n      closeSearcher = false;\n    }\n\n    // optionally warm and add num docs traversed to count\n    if (withWarm()) {\n      Document doc = null;\n      Bits liveDocs = MultiFields.getLiveDocs(reader);\n      for (int m = 0; m < reader.maxDoc(); m++) {\n        if (null == liveDocs || liveDocs.get(m)) {\n          doc = reader.document(m);\n          res += (doc == null ? 0 : 1);\n        }\n      }\n    }\n\n    if (withSearch()) {\n      res++;\n      Query q = queryMaker.makeQuery();\n      Sort sort = getSort();\n      TopDocs hits = null;\n      final int numHits = numHits();\n      if (numHits > 0) {\n        if (withCollector() == false) {\n          if (sort != null) {\n            // TODO: instead of always passing false we\n            // should detect based on the query; if we make\n            // the IndexSearcher search methods that take\n            // Weight public again, we can go back to\n            // pulling the Weight ourselves:\n            TopFieldCollector collector = TopFieldCollector.create(sort, numHits,\n                                                                   true, withScore(),\n                                                                   withMaxScore(),\n                                                                   false);\n            searcher.search(q, null, collector);\n            hits = collector.topDocs();\n          } else {\n            hits = searcher.search(q, numHits);\n          }\n        } else {\n          Collector collector = createCollector();\n          searcher.search(q, null, collector);\n          //hits = collector.topDocs();\n        }\n\n        final String printHitsField = getRunData().getConfig().get(\"print.hits.field\", null);\n        if (hits != null && printHitsField != null && printHitsField.length() > 0) {\n          System.out.println(\"totalHits = \" + hits.totalHits);\n          System.out.println(\"maxDoc()  = \" + reader.maxDoc());\n          System.out.println(\"numDocs() = \" + reader.numDocs());\n          for(int i=0;i<hits.scoreDocs.length;i++) {\n            final int docID = hits.scoreDocs[i].doc;\n            final Document doc = reader.document(docID);\n            System.out.println(\"  \" + i + \": doc=\" + docID + \" score=\" + hits.scoreDocs[i].score + \" \" + printHitsField + \" =\" + doc.get(printHitsField));\n          }\n        }\n\n        if (withTraverse()) {\n          final ScoreDoc[] scoreDocs = hits.scoreDocs;\n          int traversalSize = Math.min(scoreDocs.length, traversalSize());\n\n          if (traversalSize > 0) {\n            boolean retrieve = withRetrieve();\n            int numHighlight = Math.min(numToHighlight(), scoreDocs.length);\n            Analyzer analyzer = getRunData().getAnalyzer();\n            BenchmarkHighlighter highlighter = null;\n            if (numHighlight > 0) {\n              highlighter = getBenchmarkHighlighter(q);\n            }\n            for (int m = 0; m < traversalSize; m++) {\n              int id = scoreDocs[m].doc;\n              res++;\n              if (retrieve) {\n                Document document = retrieveDoc(reader, id);\n                res += document != null ? 1 : 0;\n                if (numHighlight > 0 && m < numHighlight) {\n                  Collection<String> fieldsToHighlight = getFieldsToHighlight(document);\n                  for (final String field : fieldsToHighlight) {\n                    String text = document.get(field);\n                    res += highlighter.doHighlight(reader, id, field, document, analyzer, text);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (closeSearcher) {\n      reader.close();\n    } else {\n      // Release our +1 ref from above\n      reader.decRef();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["2a4965b25e439626b575c2281b39ad875f89d891","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["393267188e35eb5f4918eae25b19d8773b889aa2"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","393267188e35eb5f4918eae25b19d8773b889aa2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["393267188e35eb5f4918eae25b19d8773b889aa2","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["393267188e35eb5f4918eae25b19d8773b889aa2","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["2a4965b25e439626b575c2281b39ad875f89d891"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a4965b25e439626b575c2281b39ad875f89d891":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["2a4965b25e439626b575c2281b39ad875f89d891","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","393267188e35eb5f4918eae25b19d8773b889aa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"393267188e35eb5f4918eae25b19d8773b889aa2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","2a4965b25e439626b575c2281b39ad875f89d891"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","393267188e35eb5f4918eae25b19d8773b889aa2"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2a4965b25e439626b575c2281b39ad875f89d891":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"393267188e35eb5f4918eae25b19d8773b889aa2":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}