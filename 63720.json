{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2da1197ae52a47f9d559bf916998d6626fb9a7b","date":1316275956,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, true);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["47ac88233e9e3019faa24a5184425ad60c23d70f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookup(String,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookup(String,boolean,int).mjava","sourceNew":"  /**\n   * Lookup suggestions to <code>key</code>.\n   * \n   * @param key\n   *          The prefix to which suggestions should be sought.\n   * @param num\n   *          At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first\n   *         (decreasing) and then alphabetically (UTF-8 codepoint order).\n   */\n  public List<Completion> lookup(String key, int num) {\n    if (key.length() == 0 || automaton == null) {\n      return EMPTY_RESULT;\n    }\n\n    try {\n      BytesRef keyUtf8 = new BytesRef(key);\n      if (!higherWeightsFirst && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for\n        // alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves\n        // unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(keyUtf8, num);\n      } else {\n        return lookupSortedByWeight(keyUtf8, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Lookup autocomplete suggestions to <code>key</code>.\n   *  \n   * @param key The prefix to which suggestions should be sought. \n   * @param onlyMorePopular Return most popular suggestions first. This is the default\n   * behavior for this implementation. Setting it to <code>false</code> has no effect (use\n   * constant term weights to sort alphabetically only). \n   * @param num At most this number of suggestions will be returned.\n   * @return Returns the suggestions, sorted by their approximated weight first (decreasing)\n   * and then alphabetically (utf16 codepoint order).\n   */\n  @Override\n  public List<LookupResult> lookup(String key, boolean onlyMorePopular, int num) {\n    if (key.length() == 0 || automaton == null) {\n      // Keep the result an ArrayList to keep calls monomorphic.\n      return EMPTY_RESULT; \n    }\n    \n    try {\n      if (!onlyMorePopular && rootArcs.length > 1) {\n        // We could emit a warning here (?). An optimal strategy for alphabetically sorted\n        // suggestions would be to add them with a constant weight -- this saves unnecessary\n        // traversals and sorting.\n        return lookupSortedAlphabetically(key, num);\n      } else {\n        return lookupSortedByWeight(key, num, false);\n      }\n    } catch (IOException e) {\n      // Should never happen, but anyway.\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["e230a61047bc041516c811baa08a7174d6f8322a"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["e2da1197ae52a47f9d559bf916998d6626fb9a7b"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["e2da1197ae52a47f9d559bf916998d6626fb9a7b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}