{"path":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/GOMSourceImpl#processEndElement().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/GOMSourceImpl#processEndElement().mjava","pathOld":"contrib/gdata-server/src/gom/java/org/apache/lucene/gdata/gom/core/GOMSourceImpl#processEndElement().mjava","sourceNew":"\t/**\n\t * @see org.apache.lucene.gdata.gom.core.AtomParser#processEndElement()\n\t */\n\tpublic void processEndElement() {\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:id element.\n\t\t */\n\t\tif (this.id == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName, GOMId.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:title element.\n\t\t */\n\t\tif (this.title == null)\n\t\t\tthrow new GDataParseException(String\n\t\t\t\t\t.format(MISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\t\t\tGOMTitle.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:updated element.\n\t\t */\n\t\tif (this.updated == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMUpdated.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain one or more atom:author elements,\n\t\t * unless all of the\n\t\t */\n\t\tif (this.authors.size() < 1)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMAuthor.LOCALNAME));\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tList<GOMLink> alternateLinks = new LinkedList<GOMLink>();\n\t\tfor (GOMLink link : this.links) {\n\t\t\t/*\n\t\t\t * atom:link elements MAY have a \"rel\" attribute that indicates the\n\t\t\t * link relation type. If the \"rel\" attribute is not present, the\n\t\t\t * link element MUST be interpreted as if the link relation type is\n\t\t\t * \"alternate\".\n\t\t\t */\n\t\t\tif (link.getRel() == null\n\t\t\t\t\t|| link.getRel().equalsIgnoreCase(\"alternate\"))\n\t\t\t\talternateLinks.add(link);\n\t\t}\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tif (alternateLinks.size() > 1) {\n\t\t\tfor (GOMLink link : alternateLinks) {\n\t\t\t\tfor (GOMLink link2 : alternateLinks) {\n\t\t\t\t\tif (link != link2)\n\t\t\t\t\t\tif (AtomParserUtils.compareAlternateLinks(link, link2))\n\t\t\t\t\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\t\t\t\tString\n\t\t\t\t\t\t\t\t\t\t\t.format(DUPLICATE_ELEMENT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"link with rel=\\\"alternate\\\" and same href and type attributes\"));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n","sourceOld":"\t/**\n\t * @see org.apache.lucene.gdata.gom.core.AtomParser#processEndElement()\n\t */\n\tpublic void processEndElement() {\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:id element.\n\t\t */\n\t\tif (this.id == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName, GOMId.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:title element.\n\t\t */\n\t\tif (this.title == null)\n\t\t\tthrow new GDataParseException(String\n\t\t\t\t\t.format(MISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\t\t\tGOMTitle.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:updated element.\n\t\t */\n\t\tif (this.updated == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMUpdated.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain one or more atom:author elements,\n\t\t * unless all of the\n\t\t */\n\t\tif (this.authors.size() < 1)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMAuthor.LOCALNAME));\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tList<GOMLink> alternateLinks = new LinkedList<GOMLink>();\n\t\tfor (GOMLink link : this.links) {\n\t\t\t/*\n\t\t\t * atom:link elements MAY have a \"rel\" attribute that indicates the\n\t\t\t * link relation type. If the \"rel\" attribute is not present, the\n\t\t\t * link element MUST be interpreted as if the link relation type is\n\t\t\t * \"alternate\".\n\t\t\t */\n\t\t\tif (link.getRel() == null\n\t\t\t\t\t|| link.getRel().equalsIgnoreCase(\"alternate\"))\n\t\t\t\talternateLinks.add(link);\n\t\t}\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tif (alternateLinks.size() > 1) {\n\t\t\tfor (GOMLink link : alternateLinks) {\n\t\t\t\tfor (GOMLink link2 : alternateLinks) {\n\t\t\t\t\tif (link != link2)\n\t\t\t\t\t\tif (AtomParserUtils.compareAlternateLinks(link, link2))\n\t\t\t\t\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\t\t\t\tString\n\t\t\t\t\t\t\t\t\t\t\t.format(DUPLICATE_ELEMENT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"link with rel=\\\"alternate\\\" and same href and type attributes\"));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/gom/src/java/org/apache/lucene/gdata/gom/core/GOMSourceImpl#processEndElement().mjava","sourceNew":null,"sourceOld":"\t/**\n\t * @see org.apache.lucene.gdata.gom.core.AtomParser#processEndElement()\n\t */\n\tpublic void processEndElement() {\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:id element.\n\t\t */\n\t\tif (this.id == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName, GOMId.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:title element.\n\t\t */\n\t\tif (this.title == null)\n\t\t\tthrow new GDataParseException(String\n\t\t\t\t\t.format(MISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\t\t\tGOMTitle.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain exactly one atom:updated element.\n\t\t */\n\t\tif (this.updated == null)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMUpdated.LOCALNAME));\n\t\t/*\n\t\t * atom:feed elements MUST contain one or more atom:author elements,\n\t\t * unless all of the\n\t\t */\n\t\tif (this.authors.size() < 1)\n\t\t\tthrow new GDataParseException(String.format(\n\t\t\t\t\tMISSING_ELEMENT_CHILD, this.localName,\n\t\t\t\t\tGOMAuthor.LOCALNAME));\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tList<GOMLink> alternateLinks = new LinkedList<GOMLink>();\n\t\tfor (GOMLink link : this.links) {\n\t\t\t/*\n\t\t\t * atom:link elements MAY have a \"rel\" attribute that indicates the\n\t\t\t * link relation type. If the \"rel\" attribute is not present, the\n\t\t\t * link element MUST be interpreted as if the link relation type is\n\t\t\t * \"alternate\".\n\t\t\t */\n\t\t\tif (link.getRel() == null\n\t\t\t\t\t|| link.getRel().equalsIgnoreCase(\"alternate\"))\n\t\t\t\talternateLinks.add(link);\n\t\t}\n\n\t\t/*\n\t\t * atom:feed elements MUST NOT contain more than one atom:link element\n\t\t * with a rel attribute value of \"alternate\" that has the same\n\t\t * combination of type and hreflang attribute values.\n\t\t */\n\t\tif (alternateLinks.size() > 1) {\n\t\t\tfor (GOMLink link : alternateLinks) {\n\t\t\t\tfor (GOMLink link2 : alternateLinks) {\n\t\t\t\t\tif (link != link2)\n\t\t\t\t\t\tif (AtomParserUtils.compareAlternateLinks(link, link2))\n\t\t\t\t\t\t\tthrow new GDataParseException(\n\t\t\t\t\t\t\t\t\tString\n\t\t\t\t\t\t\t\t\t\t\t.format(DUPLICATE_ELEMENT,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"link with rel=\\\"alternate\\\" and same href and type attributes\"));\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}