{"path":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","pathOld":"/dev/null","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","pathOld":"/dev/null","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","pathOld":"/dev/null","sourceNew":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"828f199c76d70a5ea0ddc4d9605063f1d323a28d","date":1308738340,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#getURLs(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","sourceNew":"  // Not thread safe... don't use in Callable.\r\n  // Don't modify the returned URL list.\r\n  private List<String> getURLs(String shard) {\r\n    List<String> urls = shardToURLs.get(shard);\r\n    if (urls==null) {\r\n      urls = StrUtils.splitSmart(shard, \"|\", true);\r\n\r\n      // convert shard to URL\r\n      for (int i=0; i<urls.size(); i++) {\r\n        urls.set(i, httpShardHandlerFactory.scheme + urls.get(i));\r\n      }\r\n\r\n      //\r\n      // Shuffle the list instead of use round-robin by default.\r\n      // This prevents accidental synchronization where multiple shards could get in sync\r\n      // and query the same replica at the same time.\r\n      //\r\n      if (urls.size() > 1)\r\n        Collections.shuffle(urls, httpShardHandlerFactory.r);\r\n      shardToURLs.put(shard, urls);\r\n    }\r\n    return urls;\r\n  }\r\n\n","sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpCommComponent[SearchHandler]#getURLs(String).mjava","sourceNew":null,"sourceOld":"  // Not thread safe... don't use in Callable.\n  // Don't modify the returned URL list.\n  private List<String> getURLs(String shard) {\n    List<String> urls = shardToURLs.get(shard);\n    if (urls==null) {\n      urls = StrUtils.splitSmart(shard,\"|\",true);\n\n      // convert shard to URL\n      for (int i=0; i<urls.size(); i++) {\n        urls.set(i, SearchHandler.scheme + urls.get(i));\n      }\n\n      //\n      // Shuffle the list instead of use round-robin by default.\n      // This prevents accidental synchronization where multiple shards could get in sync\n      // and query the same replica at the same time.\n      //\n      if (urls.size() > 1)\n        Collections.shuffle(urls, r);\n      shardToURLs.put(shard, urls);\n    }\n    return urls;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","828f199c76d70a5ea0ddc4d9605063f1d323a28d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["828f199c76d70a5ea0ddc4d9605063f1d323a28d"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","828f199c76d70a5ea0ddc4d9605063f1d323a28d","4ecea1664e8617d82eca3b8055a3c37cb4da8511","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"2553b00f699380c64959ccb27991289aae87be2e":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"828f199c76d70a5ea0ddc4d9605063f1d323a28d":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}