{"path":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","commits":[{"id":"66a601acf439105252becef7e0f1cb6b2e296bce","date":1071108465,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"/dev/null","sourceNew":"\tprivate void getFieldInfo() throws IOException {\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\t\tfields = new Vector();\n\t\tindexedFields = new Vector();\n\n\t\t//get the list of all field names\n\t\tfieldIterator = indexReader.getFieldNames().iterator();\n\t\twhile (fieldIterator.hasNext()) {\n\t\t\tObject field = fieldIterator.next();\n\t\t\tif (field != null && !field.equals(\"\"))\n\t\t\t\tfields.add(field.toString());\n\t\t}\n\t\t//\n\t\t//get the list of indexed field names\n\t\tfieldIterator = indexReader.getFieldNames(true).iterator();\n\t\twhile (fieldIterator.hasNext()) {\n\t\t\tObject field = fieldIterator.next();\n\t\t\tif (field != null && !field.equals(\"\"))\n\t\t\t\tindexedFields.add(field.toString());\n\t\t}\n\t\tindexReader.close();\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8","date":1075080975,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"\tprivate void getFieldInfo() throws IOException {\n\t\tIndexReader indexReader = IndexReader.open(indexName);\n\t\tfields = new Vector();\n\t\tindexedFields = new Vector();\n\n\t\t//get the list of all field names\n\t\tfieldIterator = indexReader.getFieldNames().iterator();\n\t\twhile (fieldIterator.hasNext()) {\n\t\t\tObject field = fieldIterator.next();\n\t\t\tif (field != null && !field.equals(\"\"))\n\t\t\t\tfields.add(field.toString());\n\t\t}\n\t\t//\n\t\t//get the list of indexed field names\n\t\tfieldIterator = indexReader.getFieldNames(true).iterator();\n\t\twhile (fieldIterator.hasNext()) {\n\t\t\tObject field = fieldIterator.next();\n\t\t\tif (field != null && !field.equals(\"\"))\n\t\t\t\tindexedFields.add(field.toString());\n\t\t}\n\t\tindexReader.close();\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a","date":1107704112,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","pathOld":"sandbox/contributions/lucli/src/lucli/LuceneMethods#getFieldInfo().mjava","sourceNew":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","sourceOld":"  private void getFieldInfo() throws IOException {\n    IndexReader indexReader = IndexReader.open(indexName);\n    fields = new Vector();\n    indexedFields = new Vector();\n\n    //get the list of all field names\n    fieldIterator = indexReader.getFieldNames().iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        fields.add(field.toString());\n    }\n    //\n    //get the list of indexed field names\n    fieldIterator = indexReader.getFieldNames(true).iterator();\n    while (fieldIterator.hasNext()) {\n      Object field = fieldIterator.next();\n      if (field != null && !field.equals(\"\"))\n        indexedFields.add(field.toString());\n    }\n    indexReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"66a601acf439105252becef7e0f1cb6b2e296bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["66a601acf439105252becef7e0f1cb6b2e296bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66a601acf439105252becef7e0f1cb6b2e296bce"],"a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66a601acf439105252becef7e0f1cb6b2e296bce":["e98e42b41456ce3f4f653a8e6c3abc34a23f41a8"],"e98e42b41456ce3f4f653a8e6c3abc34a23f41a8":["a458de6913aa2012d9bbfd9b571ad1f8ab3b1b9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}