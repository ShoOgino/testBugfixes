{"path":"src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","commits":[{"id":"8f8f5dd9e0322b913c47628300753239d0d5ef7e","date":1253656557,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   */\n  /*\n   * TODO: implement new lucene 2.9 API incrementToken() instead of deprecated\n   * Token.next() TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this. TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public Token process(Token token) throws IOException {\n    Token next = peek(1);\n    // if this is the last token just spit it out. Any commongram would have\n    // been output in the previous call\n    if (next == null) {\n      return token;\n    }\n\n    /**\n     * if this token or next are common then construct a bigram with type=\"gram\"\n     * position increment = 0, and put it in the output queue. It will be\n     * returned when super.next() is called, before this method gets called with\n     * a new token from the input stream See implementation of next() in\n     * BufferedTokenStream\n     */\n\n    if (isCommon(token) || isCommon(next)) {\n      Token gram = gramToken(token, next);\n      write(gram);\n    }\n    // we always return the unigram token\n    return token;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CommonGramsFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsFilter#process(Token).mjava","sourceNew":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   *\n   * TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this.\n   *\n   * TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public boolean incrementToken() throws IOException {\n    // get the next piece of input\n    if (savedState != null) {\n      restoreState(savedState);\n      savedState = null;\n      saveTermBuffer();\n      return true;\n    } else if (!input.incrementToken()) {\n        return false;\n    }\n    \n    /* We build n-grams before and after stopwords. \n     * When valid, the buffer always contains at least the separator.\n     * If its empty, there is nothing before this stopword.\n     */\n    if (lastWasCommon || (isCommon() && buffer.length() > 0)) {\n      savedState = captureState();\n      gramToken();\n      return true;      \n    }\n\n    saveTermBuffer();\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Inserts bigrams for common words into a token stream. For each input token,\n   * output the token. If the token and/or the following token are in the list\n   * of common words also output a bigram with position increment 0 and\n   * type=\"gram\"\n   */\n  /*\n   * TODO: implement new lucene 2.9 API incrementToken() instead of deprecated\n   * Token.next() TODO:Consider adding an option to not emit unigram stopwords\n   * as in CDL XTF BigramStopFilter, CommonGramsQueryFilter would need to be\n   * changed to work with this. TODO: Consider optimizing for the case of three\n   * commongrams i.e \"man of the year\" normally produces 3 bigrams: \"man-of\",\n   * \"of-the\", \"the-year\" but with proper management of positions we could\n   * eliminate the middle bigram \"of-the\"and save a disk seek and a whole set of\n   * position lookups.\n   */\n  public Token process(Token token) throws IOException {\n    Token next = peek(1);\n    // if this is the last token just spit it out. Any commongram would have\n    // been output in the previous call\n    if (next == null) {\n      return token;\n    }\n\n    /**\n     * if this token or next are common then construct a bigram with type=\"gram\"\n     * position increment = 0, and put it in the output queue. It will be\n     * returned when super.next() is called, before this method gets called with\n     * a new token from the input stream See implementation of next() in\n     * BufferedTokenStream\n     */\n\n    if (isCommon(token) || isCommon(next)) {\n      Token gram = gramToken(token, next);\n      write(gram);\n    }\n    // we always return the unigram token\n    return token;\n  }\n\n","bugFix":null,"bugIntro":["22f56bf98bcc4bbd169ab6c3d65b65d9f84d8e57"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8f8f5dd9e0322b913c47628300753239d0d5ef7e"],"ef28ac95f5f85bbf872801277448c0924b0a6827":[],"8f8f5dd9e0322b913c47628300753239d0d5ef7e":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef28ac95f5f85bbf872801277448c0924b0a6827","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}