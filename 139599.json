{"path":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double,long).mjava","commits":[{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double,long).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#setRandomIOExceptionRate(double,long).mjava","sourceNew":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate, long seed) {\n    randomIOExceptionRate = rate;\n    // seed so we have deterministic behaviour:\n    randomState = new Random(seed);\n  }\n\n","sourceOld":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate, long seed) {\n    randomIOExceptionRate = rate;\n    // seed so we have deterministic behaviour:\n    randomState = new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double,long).mjava","sourceNew":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate) {\n    randomIOExceptionRate = rate;\n  }\n\n","sourceOld":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate, long seed) {\n    randomIOExceptionRate = rate;\n    // seed so we have deterministic behaviour:\n    randomState = new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double).mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#setRandomIOExceptionRate(double,long).mjava","sourceNew":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate) {\n    randomIOExceptionRate = rate;\n  }\n\n","sourceOld":"  /**\n   * If 0.0, no exceptions will be thrown.  Else this should\n   * be a double 0.0 - 1.0.  We will randomly throw an\n   * IOException on the first write to an OutputStream based\n   * on this probability.\n   */\n  public void setRandomIOExceptionRate(double rate, long seed) {\n    randomIOExceptionRate = rate;\n    // seed so we have deterministic behaviour:\n    randomState = new Random(seed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["53a31399f2471493d67b19a95c028a74e0113b6a"]},"commit2Childs":{"53a31399f2471493d67b19a95c028a74e0113b6a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["53a31399f2471493d67b19a95c028a74e0113b6a","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}