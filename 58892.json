{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"/dev/null","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n\n      boolean usePositions = false;\n      boolean useOffsets = false;\n      OffsetAttribute offsetAtt = null;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        if (fieldOptions.offsets && dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n          useOffsets = true;\n          offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n        }\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", offsetAtt.startOffset());\n            theOffsets.add(\"end\", offsetAtt.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, fieldOptions.offsets);\n      boolean useOffsets = fieldOptions.offsets;\n      if (dpEnum == null) {\n        useOffsets = false;\n        dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      }\n\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n\n      boolean usePositions = false;\n      boolean useOffsets = false;\n      OffsetAttribute offsetAtt = null;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        if (fieldOptions.offsets && dpEnum.attributes().hasAttribute(OffsetAttribute.class)) {\n          useOffsets = true;\n          offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n        }\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", offsetAtt.startOffset());\n            theOffsets.add(\"end\", offsetAtt.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, fieldOptions.offsets);\n      boolean useOffsets = fieldOptions.offsets;\n      if (dpEnum == null) {\n        useOffsets = false;\n        dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      }\n\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, fieldOptions.offsets);\n      boolean useOffsets = fieldOptions.offsets;\n      if (dpEnum == null) {\n        useOffsets = false;\n        dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      }\n\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum, fieldOptions.offsets);\n      boolean useOffsets = fieldOptions.offsets;\n      if (dpEnum == null) {\n        useOffsets = false;\n        dpEnum = termsEnum.docsAndPositions(null, dpEnum, false);\n      }\n\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n      }\n\n      NamedList<Number> theOffsets = null;\n      if (useOffsets) {\n        theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n      }\n\n      NamedList<Integer> positionsNL = null;\n\n      if (usePositions || theOffsets != null) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(reader, field, text));\n      }\n\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / getDocFreq(reader, field, text);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<Object>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<Integer>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<Number>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    DocsAndPositionsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.ALL);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.FLAG_ALL);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      int dpEnumFlags = 0;\n      dpEnumFlags |= fieldOptions.positions ? PostingsEnum.POSITIONS : 0;\n      //payloads require offsets\n      dpEnumFlags |= (fieldOptions.offsets || fieldOptions.payloads) ? PostingsEnum.OFFSETS : 0;\n      dpEnumFlags |= fieldOptions.payloads ? PostingsEnum.PAYLOADS : 0;\n      dpEnum = termsEnum.postings(null, dpEnum, dpEnumFlags);\n\n      boolean atNextDoc = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        atNextDoc = true;\n      }\n\n      if (atNextDoc && dpEnumFlags != 0) {\n        NamedList<Integer> positionsNL = null;\n        NamedList<Number> theOffsets = null;\n        NamedList<String> thePayloads = null;\n\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (fieldOptions.positions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          int startOffset = fieldOptions.offsets ? dpEnum.startOffset() : -1;\n          if (startOffset >= 0) {\n            if (theOffsets == null) {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n\n          BytesRef payload = fieldOptions.payloads ? dpEnum.getPayload() : null;\n          if (payload != null) {\n            if (thePayloads == null) {\n              thePayloads = new NamedList<>();\n              termInfo.add(\"payloads\", thePayloads);\n            }\n            thePayloads.add(\"payload\", Base64.byteArrayToBase64(payload.bytes, payload.offset, payload.length));\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.ALL);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      int dpEnumFlags = 0;\n      dpEnumFlags |= fieldOptions.positions ? PostingsEnum.POSITIONS : 0;\n      //payloads require offsets\n      dpEnumFlags |= (fieldOptions.offsets || fieldOptions.payloads) ? PostingsEnum.OFFSETS : 0;\n      dpEnumFlags |= fieldOptions.payloads ? PostingsEnum.PAYLOADS : 0;\n      dpEnum = termsEnum.postings(null, dpEnum, dpEnumFlags);\n\n      boolean atNextDoc = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        atNextDoc = true;\n      }\n\n      if (atNextDoc && dpEnumFlags != 0) {\n        NamedList<Integer> positionsNL = null;\n        NamedList<Number> theOffsets = null;\n        NamedList<String> thePayloads = null;\n\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (fieldOptions.positions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          int startOffset = fieldOptions.offsets ? dpEnum.startOffset() : -1;\n          if (startOffset >= 0) {\n            if (theOffsets == null) {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n\n          BytesRef payload = fieldOptions.payloads ? dpEnum.getPayload() : null;\n          if (payload != null) {\n            if (thePayloads == null) {\n              thePayloads = new NamedList<>();\n              termInfo.add(\"payloads\", thePayloads);\n            }\n            thePayloads.add(\"payload\", Base64.byteArrayToBase64(payload.bytes, payload.offset, payload.length));\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      dpEnum = termsEnum.postings(null, dpEnum, PostingsEnum.ALL);\n      boolean useOffsets = false;\n      boolean usePositions = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        usePositions = fieldOptions.positions;\n        useOffsets = fieldOptions.offsets;\n      }\n\n      NamedList<Integer> positionsNL = null;\n      NamedList<Number> theOffsets = null;\n\n      if (usePositions || useOffsets) {\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (usePositions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          if (useOffsets && theOffsets == null) {\n            if (dpEnum.startOffset() == -1) {\n              useOffsets = false;\n            } else {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n          }\n\n          if (theOffsets != null) {\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#mapOneVector(NamedList[Object],FieldOptions,IndexReader,int,TermsEnum,String).mjava","sourceNew":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      int dpEnumFlags = 0;\n      dpEnumFlags |= fieldOptions.positions ? PostingsEnum.POSITIONS : 0;\n      //payloads require offsets\n      dpEnumFlags |= (fieldOptions.offsets || fieldOptions.payloads) ? PostingsEnum.OFFSETS : 0;\n      dpEnumFlags |= fieldOptions.payloads ? PostingsEnum.PAYLOADS : 0;\n      dpEnum = termsEnum.postings(dpEnum, dpEnumFlags);\n\n      boolean atNextDoc = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        atNextDoc = true;\n      }\n\n      if (atNextDoc && dpEnumFlags != 0) {\n        NamedList<Integer> positionsNL = null;\n        NamedList<Number> theOffsets = null;\n        NamedList<String> thePayloads = null;\n\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (fieldOptions.positions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          int startOffset = fieldOptions.offsets ? dpEnum.startOffset() : -1;\n          if (startOffset >= 0) {\n            if (theOffsets == null) {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n\n          BytesRef payload = fieldOptions.payloads ? dpEnum.getPayload() : null;\n          if (payload != null) {\n            if (thePayloads == null) {\n              thePayloads = new NamedList<>();\n              termInfo.add(\"payloads\", thePayloads);\n            }\n            thePayloads.add(\"payload\", Base64.byteArrayToBase64(payload.bytes, payload.offset, payload.length));\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","sourceOld":"  private void mapOneVector(NamedList<Object> docNL, FieldOptions fieldOptions, IndexReader reader, int docID, TermsEnum termsEnum, String field) throws IOException {\n    NamedList<Object> fieldNL = new NamedList<>();\n    docNL.add(field, fieldNL);\n\n    BytesRef text;\n    PostingsEnum dpEnum = null;\n    while((text = termsEnum.next()) != null) {\n      String term = text.utf8ToString();\n      NamedList<Object> termInfo = new NamedList<>();\n      fieldNL.add(term, termInfo);\n      final int freq = (int) termsEnum.totalTermFreq();\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", freq);\n      }\n\n      int dpEnumFlags = 0;\n      dpEnumFlags |= fieldOptions.positions ? PostingsEnum.POSITIONS : 0;\n      //payloads require offsets\n      dpEnumFlags |= (fieldOptions.offsets || fieldOptions.payloads) ? PostingsEnum.OFFSETS : 0;\n      dpEnumFlags |= fieldOptions.payloads ? PostingsEnum.PAYLOADS : 0;\n      dpEnum = termsEnum.postings(null, dpEnum, dpEnumFlags);\n\n      boolean atNextDoc = false;\n      if (dpEnum != null) {\n        dpEnum.nextDoc();\n        atNextDoc = true;\n      }\n\n      if (atNextDoc && dpEnumFlags != 0) {\n        NamedList<Integer> positionsNL = null;\n        NamedList<Number> theOffsets = null;\n        NamedList<String> thePayloads = null;\n\n        for (int i = 0; i < freq; i++) {\n          final int pos = dpEnum.nextPosition();\n          if (fieldOptions.positions && pos >= 0) {\n            if (positionsNL == null) {\n              positionsNL = new NamedList<>();\n              termInfo.add(\"positions\", positionsNL);\n            }\n            positionsNL.add(\"position\", pos);\n          }\n\n          int startOffset = fieldOptions.offsets ? dpEnum.startOffset() : -1;\n          if (startOffset >= 0) {\n            if (theOffsets == null) {\n              theOffsets = new NamedList<>();\n              termInfo.add(\"offsets\", theOffsets);\n            }\n            theOffsets.add(\"start\", dpEnum.startOffset());\n            theOffsets.add(\"end\", dpEnum.endOffset());\n          }\n\n          BytesRef payload = fieldOptions.payloads ? dpEnum.getPayload() : null;\n          if (payload != null) {\n            if (thePayloads == null) {\n              thePayloads = new NamedList<>();\n              termInfo.add(\"payloads\", thePayloads);\n            }\n            thePayloads.add(\"payload\", Base64.byteArrayToBase64(payload.bytes, payload.offset, payload.length));\n          }\n        }\n      }\n      \n      int df = 0;\n      if (fieldOptions.docFreq || fieldOptions.tfIdf) {\n        df = reader.docFreq(new Term(field, text));\n      }\n\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", df);\n      }\n\n      // TODO: this is not TF/IDF by anyone's definition!\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) freq) / df;\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["31f025ae60076ae95274433f3fe8e6ace2857a87","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["31f025ae60076ae95274433f3fe8e6ace2857a87","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3cc749c053615f5871f3b95715fe292f34e70a53":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6a0e3c1c21aac8ecf75706605133012833585c7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}