{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","commits":[{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","pathOld":"/dev/null","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","pathOld":"/dev/null","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#openStreams().mjava","sourceNew":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList<>();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","sourceOld":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6fa0fff8102ba352427001188190711b7295a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fa0fff8102ba352427001188190711b7295a1c2"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["6fa0fff8102ba352427001188190711b7295a1c2"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"6fa0fff8102ba352427001188190711b7295a1c2":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}