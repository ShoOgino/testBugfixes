{"path":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<ContentStream>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4","date":1592286410,"type":3,"author":"Nazerke Seidan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/DirectSolrConnection#request(SolrRequestHandler,SolrParams,String).mjava","sourceNew":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n        SolrRequestInfo.clearRequestInfo();\n      }\n    }\n  }\n\n","sourceOld":"  public String request(SolrRequestHandler handler, SolrParams params, String body) throws Exception\n  {\n    if (params == null)\n      params = new MapSolrParams( new HashMap<String, String>() );\n\n    // Make a stream for the 'body' content\n    List<ContentStream> streams = new ArrayList<>( 1 );\n    if( body != null && body.length() > 0 ) {\n      streams.add( new ContentStreamBase.StringStream( body ) );\n    }\n\n    SolrQueryRequest req = null;\n    try {\n      req = parser.buildRequestFrom( core, params, streams );\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req, rsp));      \n      core.execute( handler, req, rsp );\n      if( rsp.getException() != null ) {\n        throw rsp.getException();\n      }\n\n      // Now write it out\n      QueryResponseWriter responseWriter = core.getQueryResponseWriter(req);\n      StringWriter out = new StringWriter();\n      responseWriter.write(out, req, rsp);\n      return out.toString();\n    } finally {\n      if (req != null) {\n        req.close();\n      }\n      SolrRequestInfo.clearRequestInfo();            \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a32e902eb5b2408fefa7ca7a8579e22f4ba6f2b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}