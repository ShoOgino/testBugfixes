{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      automaton.readFirstTargetArc(arc, arc);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c2e9514030f533e06823aa8aec716afaf09cced","date":1353602477,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"all\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader();\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader();\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader(0);\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#cacheRootArcs(FST[Object]).mjava","sourceNew":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<>());\n      FST.BytesReader fstReader = automaton.getBytesReader();\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Cache the root node's output arcs starting with completions with the\n   * highest weights.\n   */\n  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private static Arc<Object>[] cacheRootArcs(FST<Object> automaton) {\n    try {\n      List<Arc<Object>> rootArcs = new ArrayList<Arc<Object>>();\n      Arc<Object> arc = automaton.getFirstArc(new Arc<Object>());\n      FST.BytesReader fstReader = automaton.getBytesReader();\n      automaton.readFirstTargetArc(arc, arc, fstReader);\n      while (true) {\n        rootArcs.add(new Arc<Object>().copyFrom(arc));\n        if (arc.isLast()) break;\n        automaton.readNextArc(arc, fstReader);\n      }\n      \n      Collections.reverse(rootArcs); // we want highest weights first.\n      return rootArcs.toArray(new Arc[rootArcs.size()]);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["8c2e9514030f533e06823aa8aec716afaf09cced"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["407687e67faf6e1f02a211ca078d8e3eed631027","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","8c2e9514030f533e06823aa8aec716afaf09cced"],"8c2e9514030f533e06823aa8aec716afaf09cced":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["407687e67faf6e1f02a211ca078d8e3eed631027","8c2e9514030f533e06823aa8aec716afaf09cced"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"8c2e9514030f533e06823aa8aec716afaf09cced":["82557a475db3e0849171dc0be5b02e3ae0745ddb","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}