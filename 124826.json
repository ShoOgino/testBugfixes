{"path":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec49d4d0a3912a8fdaa15864f243adb6e8a29147","date":1344384675,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URLConnection connection = new URL(url).openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfea9c90af47b6b37ffaafe52d3307a1f8978e68","date":1357665734,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    boolean ok = false;\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<String, String[]>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<ContentStream>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e3d6e935c580f4ecd7e08b41ba9f107035aedd","date":1441121298,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-7999\")\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d191285b804da9b550f60a7e04a3c5102e313dd2","date":1441171701,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    URL url = getClass().getResource(\"/README\");\n    assertNotNull(\"Missing file 'README' in test-resources root folder.\", url);\n    \n    byte[] bytes = IOUtils.toByteArray(url);\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] { url.toExternalForm() } );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    try (SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams )) {\n      assertEquals( 1, streams.size() );\n      try (InputStream in = streams.get(0).getStream()) {\n        assertArrayEquals( bytes, IOUtils.toByteArray( in ) );\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-7999\")\n  public void testStreamURL() throws Exception\n  {\n    String url = \"http://www.apache.org/dist/lucene/solr/\";\n    byte[] bytes = null;\n    try {\n      URL u = new URL(url);\n      HttpURLConnection connection = (HttpURLConnection)u.openConnection();\n      connection.setConnectTimeout(5000);\n      connection.setReadTimeout(5000);\n      connection.connect();\n      int code = connection.getResponseCode();\n      assumeTrue(\"wrong response code from server: \" + code, 200 == code);\n      bytes = IOUtils.toByteArray( connection.getInputStream());\n    }\n    catch( Exception ex ) {\n      assumeNoException(\"Unable to connect to \" + url + \" to run the test.\", ex);\n      return;\n    }\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] {url} );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams );\n    assertEquals( 1, streams.size() );\n    try {\n      assertArrayEquals( bytes, IOUtils.toByteArray( streams.get(0).getStream() ) );\n    } catch (SocketTimeoutException ex) {\n      assumeNoException(\"Problems retrieving from \" + url + \" to run the test.\", ex);\n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","pathOld":"solr/core/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStreamURL().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"try\"})\n  public void testStreamURL() throws Exception\n  {\n    URL url = getClass().getResource(\"/README\");\n    assertNotNull(\"Missing file 'README' in test-resources root folder.\", url);\n    \n    byte[] bytes = IOUtils.toByteArray(url);\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] { url.toExternalForm() } );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    try (SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams )) {\n      assertEquals( 1, streams.size() );\n      try (InputStream in = streams.get(0).getStream()) {\n        assertArrayEquals( bytes, IOUtils.toByteArray( in ) );\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStreamURL() throws Exception\n  {\n    URL url = getClass().getResource(\"/README\");\n    assertNotNull(\"Missing file 'README' in test-resources root folder.\", url);\n    \n    byte[] bytes = IOUtils.toByteArray(url);\n\n    SolrCore core = h.getCore();\n    \n    Map<String,String[]> args = new HashMap<>();\n    args.put( CommonParams.STREAM_URL, new String[] { url.toExternalForm() } );\n    \n    // Make sure it got a single stream in and out ok\n    List<ContentStream> streams = new ArrayList<>();\n    try (SolrQueryRequest req = parser.buildRequestFrom( core, new MultiMapSolrParams( args ), streams )) {\n      assertEquals( 1, streams.size() );\n      try (InputStream in = streams.get(0).getStream()) {\n        assertArrayEquals( bytes, IOUtils.toByteArray( in ) );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"d191285b804da9b550f60a7e04a3c5102e313dd2":["e5e3d6e935c580f4ecd7e08b41ba9f107035aedd"],"ec49d4d0a3912a8fdaa15864f243adb6e8a29147":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"e5e3d6e935c580f4ecd7e08b41ba9f107035aedd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e98520789adb1d5ad05afb4956eca0944a929688":["d191285b804da9b550f60a7e04a3c5102e313dd2"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["c26f00b574427b55127e869b935845554afde1fa","ec49d4d0a3912a8fdaa15864f243adb6e8a29147"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["ec49d4d0a3912a8fdaa15864f243adb6e8a29147"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["c26f00b574427b55127e869b935845554afde1fa","ec49d4d0a3912a8fdaa15864f243adb6e8a29147"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["ec49d4d0a3912a8fdaa15864f243adb6e8a29147","bfea9c90af47b6b37ffaafe52d3307a1f8978e68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e5e3d6e935c580f4ecd7e08b41ba9f107035aedd"],"d191285b804da9b550f60a7e04a3c5102e313dd2":["e98520789adb1d5ad05afb4956eca0944a929688"],"ec49d4d0a3912a8fdaa15864f243adb6e8a29147":["c7869f64c874ebf7f317d22c00baf2b6857797a6","bfea9c90af47b6b37ffaafe52d3307a1f8978e68","d6f074e73200c07d54f242d3880a8da5a35ff97b","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c26f00b574427b55127e869b935845554afde1fa":["ec49d4d0a3912a8fdaa15864f243adb6e8a29147","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"e5e3d6e935c580f4ecd7e08b41ba9f107035aedd":["d191285b804da9b550f60a7e04a3c5102e313dd2"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"bfea9c90af47b6b37ffaafe52d3307a1f8978e68":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}