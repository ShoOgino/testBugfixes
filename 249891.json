{"path":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","commits":[{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 10; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":null,"bugFix":null,"bugIntro":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9e699ccb4baaeee781f4e18a6d08b380d7f9788","date":1460972866,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 30; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 10; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 30; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 10; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d0a2f1af291288867f8c65a22225571ff6a2926","date":1463720644,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 30; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 30; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c60c9f4bcbe63477e33f0b4639da14f7edb31aab","date":1471264328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 100; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 30; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"303eba9db32cde4e6fbc4e51a44361ef1c302e6c","date":1553596029,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = this.getDefaultMoreLikeThis(reader);\n\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = new MoreLikeThis(reader);\n\n      mlt.setAnalyzer(analyzer);\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setMinDocFreq(1);\n      mlt.setMinTermFreq(1);\n      mlt.setMinWordLen(1);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":["e562682007e295029696e354ac6947531b083c79"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3ff85fc12f4290c14ae4652270f0216b9cec578","date":1556640829,"type":3,"author":"Olli Kuonanoja","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/mlt/TestMoreLikeThis#testMultiFieldShouldReturnPerFieldBooleanQuery().mjava","sourceNew":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = this.getDefaultMoreLikeThis(reader);\n\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl = \"https://issues.apache.org/jira/browse/LUCENE-7161\")\n  public void testMultiFieldShouldReturnPerFieldBooleanQuery() throws Exception {\n    IndexReader reader = null;\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    try {\n      int maxQueryTerms = 25;\n\n      String[] itShopItemForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n      String[] itShopItemNotForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n\n      String[] clothesShopItemForSale = new String[]{\"tie\", \"trousers\", \"shoes\", \"skirt\", \"hat\"};\n      String[] clothesShopItemNotForSale = new String[]{\"watch\", \"ipod\", \"asrock\", \"imac\", \"macbookpro\", \"monitor\", \"keyboard\", \"mouse\", \"speakers\"};\n\n      // add series of shop docs\n      RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"it\", itShopItemForSale, itShopItemNotForSale);\n      }\n      for (int i = 0; i < 300; i++) {\n        addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      }\n      // Input Document is a clothes shop\n      int inputDocId = addShopDoc(writer, \"clothes\", clothesShopItemForSale, clothesShopItemNotForSale);\n      reader = writer.getReader();\n      writer.close();\n\n      // setup MLT query\n      MoreLikeThis mlt = this.getDefaultMoreLikeThis(reader);\n\n      mlt.setMaxQueryTerms(maxQueryTerms);\n      mlt.setFieldNames(new String[]{FOR_SALE, NOT_FOR_SALE});\n\n      // perform MLT query\n      BooleanQuery query = (BooleanQuery) mlt.like(inputDocId);\n      Collection<BooleanClause> clauses = query.clauses();\n\n      Collection<BooleanClause> expectedClothesShopClauses = new ArrayList<BooleanClause>();\n      for (String itemForSale : clothesShopItemForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(FOR_SALE, itemForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n      for (String itemNotForSale : clothesShopItemNotForSale) {\n        BooleanClause booleanClause = new BooleanClause(new TermQuery(new Term(NOT_FOR_SALE, itemNotForSale)), BooleanClause.Occur.SHOULD);\n        expectedClothesShopClauses.add(booleanClause);\n      }\n\n      for (BooleanClause expectedClause : expectedClothesShopClauses) {\n        assertTrue(clauses.contains(expectedClause));\n      }\n    } finally {\n      // clean up\n      if (reader != null) {\n        reader.close();\n      }\n      dir.close();\n      analyzer.close();\n    }\n  }\n  // TODO: add tests for the MoreLikeThisQuery\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d470c8182e92b264680e34081b75e70a9f2b3c89","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["d470c8182e92b264680e34081b75e70a9f2b3c89","c60c9f4bcbe63477e33f0b4639da14f7edb31aab"],"c60c9f4bcbe63477e33f0b4639da14f7edb31aab":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e562682007e295029696e354ac6947531b083c79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["713122036535651642e6d4fe57ce12b449e18473","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d9e699ccb4baaeee781f4e18a6d08b380d7f9788":["e562682007e295029696e354ac6947531b083c79"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["713122036535651642e6d4fe57ce12b449e18473","0d0a2f1af291288867f8c65a22225571ff6a2926"],"f3ff85fc12f4290c14ae4652270f0216b9cec578":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c"],"713122036535651642e6d4fe57ce12b449e18473":["e562682007e295029696e354ac6947531b083c79","d9e699ccb4baaeee781f4e18a6d08b380d7f9788"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0a2f1af291288867f8c65a22225571ff6a2926":["713122036535651642e6d4fe57ce12b449e18473"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3ff85fc12f4290c14ae4652270f0216b9cec578"]},"commit2Childs":{"303eba9db32cde4e6fbc4e51a44361ef1c302e6c":["f3ff85fc12f4290c14ae4652270f0216b9cec578"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["303eba9db32cde4e6fbc4e51a44361ef1c302e6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"c60c9f4bcbe63477e33f0b4639da14f7edb31aab":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"e562682007e295029696e354ac6947531b083c79":["d9e699ccb4baaeee781f4e18a6d08b380d7f9788","713122036535651642e6d4fe57ce12b449e18473"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","c60c9f4bcbe63477e33f0b4639da14f7edb31aab"],"d9e699ccb4baaeee781f4e18a6d08b380d7f9788":["713122036535651642e6d4fe57ce12b449e18473"],"f3ff85fc12f4290c14ae4652270f0216b9cec578":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0d0a2f1af291288867f8c65a22225571ff6a2926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e562682007e295029696e354ac6947531b083c79"],"0d0a2f1af291288867f8c65a22225571ff6a2926":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}