{"path":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, true, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, true, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, true, lf);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, true, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, true, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, true, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, true, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, true, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, true, lf);\n        } catch (IOException e) {\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, true, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, true, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, true, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f18c35aec8cd0e819e1904c0147e05f7aea15bc4","date":1227961014,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n          FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n          fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n            FSDirectory fs2 = FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n            fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":["66b12ba4967665216eeb706b58d424c51fb3641a","5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7faff7550034759516ce7f4898cd16c1816cde","date":1245778901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory5\");\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n          FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n          fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        String indexDirName = \"index.TestLockFactory5\";\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n          FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n          fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":null,"sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory5\");\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n          FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n          fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testFSDirectoryDifferentLockFactory().mjava","sourceNew":null,"sourceOld":"    // Verify: if I try to getDirectory() with two different locking implementations, I get an IOException\n    public void testFSDirectoryDifferentLockFactory() throws IOException {\n        File indexDirName = _TestUtil.getTempDir(\"index.TestLockFactory5\");\n\n        LockFactory lf = new SingleInstanceLockFactory();\n        FSDirectory fs1 = FSDirectory.getDirectory(indexDirName, lf);\n\n        // Different lock factory instance should hit IOException:\n        try {\n          FSDirectory.getDirectory(indexDirName, new SingleInstanceLockFactory());\n          fail(\"Should have hit an IOException because LockFactory instances differ\");\n        } catch (IOException e) {\n        }\n\n        FSDirectory fs2 = null;\n\n        // Same lock factory instance should not:\n        try {\n            fs2 = FSDirectory.getDirectory(indexDirName, lf);\n        } catch (IOException e) {\n            e.printStackTrace(System.out);\n            fail(\"Should not have hit an IOException because LockFactory instances are the same\");\n        }\n\n        fs1.close();\n        if (fs2 != null) {\n            fs2.close();\n        }\n        // Cleanup\n        _TestUtil.rmDir(indexDirName);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["8f7faff7550034759516ce7f4898cd16c1816cde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["8f7faff7550034759516ce7f4898cd16c1816cde","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"8f7faff7550034759516ce7f4898cd16c1816cde":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a046c0c310bc77931fc8441bd920053b607dd14"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["66b12ba4967665216eeb706b58d424c51fb3641a"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"66b12ba4967665216eeb706b58d424c51fb3641a":["f18c35aec8cd0e819e1904c0147e05f7aea15bc4"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["66b12ba4967665216eeb706b58d424c51fb3641a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"0a046c0c310bc77931fc8441bd920053b607dd14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f7faff7550034759516ce7f4898cd16c1816cde":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"f18c35aec8cd0e819e1904c0147e05f7aea15bc4":["8f7faff7550034759516ce7f4898cd16c1816cde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}