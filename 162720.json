{"path":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    final BytesRef bytes = new BytesRef();\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    final BytesRef bytes = new BytesRef();\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    final BytesRef bytes = new BytesRef();\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    final BytesRef bytes = new BytesRef();\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    final BytesRef bytes = new BytesRef();\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c9d8533c954f661481ae44273622957dbf572f","date":1380991288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<AttributeSource>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77e6111c8c695bcab271a048bf5aae6b05cf415b","date":1450974359,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end(); // TODO should we capture?\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end();\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","bugFix":["99c9d8533c954f661481ae44273622957dbf572f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a","date":1550036130,"type":3,"author":"Bruno P. Kinoshita","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase#analyzeTokenStream(TokenStream).mjava","sourceNew":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end(); // TODO should we capture?\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occurred while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","sourceOld":"  /**\n   * Analyzes the given TokenStream, collecting the Tokens it produces.\n   *\n   * @param tokenStream TokenStream to analyze\n   *\n   * @return List of tokens produced from the TokenStream\n   */\n  private List<AttributeSource> analyzeTokenStream(TokenStream tokenStream) {\n    final List<AttributeSource> tokens = new ArrayList<>();\n    final PositionIncrementAttribute posIncrAtt = tokenStream.addAttribute(PositionIncrementAttribute.class);\n    final TokenTrackingAttribute trackerAtt = tokenStream.addAttribute(TokenTrackingAttribute.class);\n    // for backwards compatibility, add all \"common\" attributes\n    tokenStream.addAttribute(OffsetAttribute.class);\n    tokenStream.addAttribute(TypeAttribute.class);\n    try {\n      tokenStream.reset();\n      int position = 0;\n      while (tokenStream.incrementToken()) {\n        position += posIncrAtt.getPositionIncrement();\n        trackerAtt.setActPosition(position);\n        tokens.add(tokenStream.cloneAttributes());\n      }\n      tokenStream.end(); // TODO should we capture?\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Error occured while iterating over tokenstream\", ioe);\n    } finally {\n      IOUtils.closeWhileHandlingException(tokenStream);\n    }\n\n    return tokens;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"99c9d8533c954f661481ae44273622957dbf572f":["c26f00b574427b55127e869b935845554afde1fa"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["99c9d8533c954f661481ae44273622957dbf572f"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"]},"commit2Childs":{"77e6111c8c695bcab271a048bf5aae6b05cf415b":["d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a"],"99c9d8533c954f661481ae44273622957dbf572f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["77e6111c8c695bcab271a048bf5aae6b05cf415b"],"d669cb2b7fbc6ceb7f966e63a1c625e6400c7d2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"c26f00b574427b55127e869b935845554afde1fa":["99c9d8533c954f661481ae44273622957dbf572f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","5d004d0e0b3f65bb40da76d476d659d7888270e8","a258fbb26824fd104ed795e5d9033d2d040049ee"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}