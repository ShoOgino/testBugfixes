{"path":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","sourceNew":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fd30bfbfa6b9e036bcd99c8339712e965d4a63","date":1351859294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","sourceNew":"  /**\n   * Resets the pool to its initial state reusing the first buffer and fills all\n   * buffers with <tt>0</tt> bytes before they reused or passed to\n   * {@link Allocator#recycleByteBlocks(byte[][], int, int)}. Calling\n   * {@link ByteBlockPool#nextBuffer()} is not needed after reset.\n   */\n  public void reset() {\n    reset(true, true);\n  }\n\n","sourceOld":"  public void reset() {\n    if (bufferUpto != -1) {\n      // We allocated at least one buffer\n\n      for(int i=0;i<bufferUpto;i++)\n        // Fully zero fill buffers that we fully used\n        Arrays.fill(buffers[i], (byte) 0);\n\n      // Partial zero fill the final buffer\n      Arrays.fill(buffers[bufferUpto], 0, byteUpto, (byte) 0);\n          \n      if (bufferUpto > 0)\n        // Recycle all but the first buffer\n        allocator.recycleByteBlocks(buffers, 1, 1+bufferUpto);\n\n      // Re-use the first buffer\n      bufferUpto = 0;\n      byteUpto = 0;\n      byteOffset = 0;\n      buffer = buffers[0];\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e3751ad4cc85eb979419cf5469dfba266eae56a","date":1581046252,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ByteBlockPool#reset().mjava","sourceNew":"  /**\n   * Resets the pool to its initial state reusing the first buffer and fills all\n   * buffers with <code>0</code> bytes before they reused or passed to\n   * {@link Allocator#recycleByteBlocks(byte[][], int, int)}. Calling\n   * {@link ByteBlockPool#nextBuffer()} is not needed after reset.\n   */\n  public void reset() {\n    reset(true, true);\n  }\n\n","sourceOld":"  /**\n   * Resets the pool to its initial state reusing the first buffer and fills all\n   * buffers with <tt>0</tt> bytes before they reused or passed to\n   * {@link Allocator#recycleByteBlocks(byte[][], int, int)}. Calling\n   * {@link ByteBlockPool#nextBuffer()} is not needed after reset.\n   */\n  public void reset() {\n    reset(true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e3751ad4cc85eb979419cf5469dfba266eae56a"]},"commit2Childs":{"9e3751ad4cc85eb979419cf5469dfba266eae56a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30fd30bfbfa6b9e036bcd99c8339712e965d4a63"],"30fd30bfbfa6b9e036bcd99c8339712e965d4a63":["9e3751ad4cc85eb979419cf5469dfba266eae56a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}