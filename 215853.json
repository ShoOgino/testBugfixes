{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,\n            fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, 0,\n            fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    CachedSqlEntityProcessor csep = new CachedSqlEntityProcessor();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestCachedSqlEntityProcessor#withoutWhereClause().mjava","sourceNew":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","sourceOld":"  @Test\n  public void withoutWhereClause() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"id\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"desc\"));\n    String q = \"select * from x where id=${x.id}\";\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"query\", q);\n    MockDataSource ds = new MockDataSource();\n    VariableResolverImpl vr = new VariableResolverImpl();\n\n    vr.addNamespace(\"x\", AbstractDataImportHandlerTest.createMap(\"id\", 1));\n    Context context = AbstractDataImportHandlerTest.getContext(null, vr, ds, Context.FULL_DUMP, fields, entityAttrs);\n    List<Map<String, Object>> rows = new ArrayList<Map<String, Object>>();\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\", \"one\"));\n    rows.add(AbstractDataImportHandlerTest.createMap(\"id\", 1, \"desc\",\n            \"another one\"));\n    MockDataSource.setIterator(vr.replaceTokens(q), rows.iterator());\n    EntityProcessor csep = new EntityProcessorWrapper( new CachedSqlEntityProcessor(), null);\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    ds.close();\n    csep.init(context);\n    rows = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> r = csep.nextRow();\n      if (r == null)\n        break;\n      rows.add(r);\n    }\n    Assert.assertEquals(2, rows.size());\n    Assert.assertEquals(2, rows.get(0).size());\n    Assert.assertEquals(2, rows.get(1).size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}