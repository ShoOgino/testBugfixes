{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","commits":[{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Properties).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Properties props) {\n    Properties existing = readIndexerProperties();\n    existing.putAll(props);\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(IOUtils.CHARSET_UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(IOUtils.CHARSET_UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    try {\n      existing.store(output, \"\");\n      byte[] bytes = output.toByteArray();\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(IOUtils.CHARSET_UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(IOUtils.CHARSET_UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd2b0e0e1141e4851e1281c4955c7690b374c3b","date":1474031826,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":["b2a6913ca906832d1ef58d72498167acb00a7e4f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    } catch (Exception e) {\n      log.warn(\n          \"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to {} : {}\", path, e.getClass(), e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to \" + path + \" :\" + e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/ZKPropertiesWriter#persist(Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void persist(Map<String, Object> propObjs) {\n    Properties existing = mapToProperties(readIndexerProperties());\n    existing.putAll(mapToProperties(propObjs));\n    StringWriter output = new StringWriter();\n    try {\n      existing.store(output, null);\n      byte[] bytes = output.toString().getBytes(StandardCharsets.UTF_8);\n      if (!zkClient.exists(path, false)) {\n        try {\n          zkClient.makePath(path, false);\n        } catch (NodeExistsException e) {}\n      }\n      zkClient.setData(path, bytes, false);\n    } catch (Exception e) {\n      SolrZkClient.checkInterrupted(e);\n      log.warn(\"Could not persist properties to {} : {}\", path, e.getClass(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1","7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"7d89d7e4e5101347833eea558851bf4209218619":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7d89d7e4e5101347833eea558851bf4209218619","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7d89d7e4e5101347833eea558851bf4209218619","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9fd2b0e0e1141e4851e1281c4955c7690b374c3b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","7d89d7e4e5101347833eea558851bf4209218619"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a966532d92cf9ba2856f15a8140151bb6b518e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fd2b0e0e1141e4851e1281c4955c7690b374c3b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","407687e67faf6e1f02a211ca078d8e3eed631027","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}