{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","commits":[{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47a51687a906464022060653be52ed62dfa2c18","date":1391087530,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader, r), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader, r), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader), tr);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8969d0d5af68b213a9b3eb175a7efdfc7205083","date":1524923004,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager#refreshIfNeeded(SearcherAndTaxonomy).mjava","sourceNew":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr;\n      try {\n        tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      } catch (Throwable t1) {\n        try {\n          IOUtils.close(newReader);\n        } catch (Throwable t2) {\n          t2.addSuppressed(t2);\n        }\n        throw t1;\n      }\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader, r), tr);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected SearcherAndTaxonomy refreshIfNeeded(SearcherAndTaxonomy ref) throws IOException {\n    // Must re-open searcher first, otherwise we may get a\n    // new reader that references ords not yet known to the\n    // taxonomy reader:\n    final IndexReader r = ref.searcher.getIndexReader();\n    final IndexReader newReader = DirectoryReader.openIfChanged((DirectoryReader) r);\n    if (newReader == null) {\n      return null;\n    } else {\n      DirectoryTaxonomyReader tr = TaxonomyReader.openIfChanged(ref.taxonomyReader);\n      if (tr == null) {\n        ref.taxonomyReader.incRef();\n        tr = ref.taxonomyReader;\n      } else if (taxoWriter != null && taxoWriter.getTaxonomyEpoch() != taxoEpoch) {\n        IOUtils.close(newReader, tr);\n        throw new IllegalStateException(\"DirectoryTaxonomyWriter.replaceTaxonomy was called, which is not allowed when using SearcherTaxonomyManager\");\n      }\n\n      return new SearcherAndTaxonomy(SearcherManager.getSearcher(searcherFactory, newReader, r), tr);\n    }\n  }\n\n","bugFix":["77925d097d69ba9a9806554c5afe4779fafa142d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["d47a51687a906464022060653be52ed62dfa2c18"],"d47a51687a906464022060653be52ed62dfa2c18":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8969d0d5af68b213a9b3eb175a7efdfc7205083":["e0dfae671422e7453a9199aa320f91427cd80d60"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4edc984f0f4ac77c37e48ace2932f780f888453c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8969d0d5af68b213a9b3eb175a7efdfc7205083"],"0c924d4069ef5a5bc479a493befe0121aada6896":["d47a51687a906464022060653be52ed62dfa2c18","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["b8969d0d5af68b213a9b3eb175a7efdfc7205083","0c924d4069ef5a5bc479a493befe0121aada6896"],"d47a51687a906464022060653be52ed62dfa2c18":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4edc984f0f4ac77c37e48ace2932f780f888453c","3cc728b07df73b197e6d940d27f9b08b63918f13"],"4edc984f0f4ac77c37e48ace2932f780f888453c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d47a51687a906464022060653be52ed62dfa2c18"],"b8969d0d5af68b213a9b3eb175a7efdfc7205083":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}