{"path":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values.get(doc);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          if (values.docID() < doc) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return values.longValue();\n          } else {\n            return 0;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values.get(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          if (values.docID() < doc) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return values.longValue();\n          } else {\n            return 0;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values.get(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          if (values.docID() < doc) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return values.longValue();\n          } else {\n            return 0;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) {\n          assertTrue(doc <= context.reader().maxDoc());\n          return values.get(doc);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery.CustomExternalQuery#getCustomScoreProvider(LeafReaderContext).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected CustomScoreProvider getCustomScoreProvider(LeafReaderContext context) throws IOException {\n      final NumericDocValues values = DocValues.getNumeric(context.reader(), INT_FIELD);\n      return new CustomScoreProvider(context) {\n        @Override\n        public float customScore(int doc, float subScore, float valSrcScore) throws IOException {\n          assertTrue(doc <= context.reader().maxDoc());\n          if (values.docID() < doc) {\n            values.advance(doc);\n          }\n          if (doc == values.docID()) {\n            return values.longValue();\n          } else {\n            return 0;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82662cae660e76ded4de1e9b451633e523d83e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a82662cae660e76ded4de1e9b451633e523d83e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}