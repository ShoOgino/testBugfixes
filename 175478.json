{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLargeVertexPolygon().mjava","commits":[{"id":"a015018940d108a771fb0bc4eed2ab3e3ca089c2","date":1531689126,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLargeVertexPolygon().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point with a large number of vertices*/\n  public void testLargeVertexPolygon() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLargeVertexPolygon().mjava","pathOld":"/dev/null","sourceNew":"  /** test we can search for a point with a large number of vertices*/\n  public void testLargeVertexPolygon() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestLatLonShape#testLargeVertexPolygon().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonShape#testLargeVertexPolygon().mjava","sourceNew":"  /** test we can search for a point with a large number of vertices*/\n  public void testLargeVertexPolygon() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","sourceOld":"  /** test we can search for a point with a large number of vertices*/\n  public void testLargeVertexPolygon() throws Exception {\n    int numVertices = TestUtil.nextInt(random(), 200000, 500000);\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int mbd = iwc.getMaxBufferedDocs();\n    if (mbd != -1 && mbd < numVertices/100) {\n      iwc.setMaxBufferedDocs(numVertices/100);\n    }\n    Directory dir = newFSDirectory(createTempDir(getClass().getSimpleName()));\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    // add a random polygon without a hole\n    Polygon p = GeoTestUtil.createRegularPolygon(0, 90, atLeast(1000000), numVertices);\n    Document document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, p);\n    writer.addDocument(document);\n\n    // add a random polygon with a hole\n    Polygon inner = new Polygon(new double[] {-1d, -1d, 1d, 1d, -1d},\n        new double[] {-91d, -89d, -89d, -91.0, -91.0});\n    Polygon outer = GeoTestUtil.createRegularPolygon(0, -90, atLeast(1000000), numVertices);\n\n    document = new Document();\n    addPolygonsToDoc(FIELDNAME, document, new Polygon(outer.getPolyLats(), outer.getPolyLons(), inner));\n    writer.addDocument(document);\n\n    ////// search /////\n    // search an intersecting bbox\n    IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n    Query q = newRectQuery(FIELDNAME, -1d, 1d, p.minLon, p.maxLon);\n    assertEquals(1, searcher.count(q));\n\n    // search a disjoint bbox\n    q = newRectQuery(FIELDNAME, p.minLat-1d, p.minLat+1, p.minLon-1d, p.minLon+1d);\n    assertEquals(0, searcher.count(q));\n\n    // search a bbox in the hole\n    q = newRectQuery(FIELDNAME, inner.minLat + 1e-6, inner.maxLat - 1e-6, inner.minLon + 1e-6, inner.maxLon - 1e-6);\n    assertEquals(0, searcher.count(q));\n\n    IOUtils.close(reader, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a015018940d108a771fb0bc4eed2ab3e3ca089c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a015018940d108a771fb0bc4eed2ab3e3ca089c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a015018940d108a771fb0bc4eed2ab3e3ca089c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a015018940d108a771fb0bc4eed2ab3e3ca089c2":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","09c1e6d465800c73af60624bf9d4459a19f7940c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a015018940d108a771fb0bc4eed2ab3e3ca089c2","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}