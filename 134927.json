{"path":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if(bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord)-1;\n      }\n\n      if (docID >= docToID.length) {\n        int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size) * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1+ord;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if(bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord)-1;\n      }\n\n      if (docID >= docToID.length) {\n        int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size) * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1+ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        initDataOut();\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n     public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n     public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n        datOut.writeInt(size);\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n\n      if (ord >= 0) {\n        // new added entry\n        datOut.writeBytes(bytes.bytes, bytes.offset, bytes.length);\n      } else {\n        ord = (-ord) - 1;\n      }\n\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#add(int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) { // default value - skip it\n        return;\n      }\n      checkSize(bytes);\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToEntry.length) {\n        final int size = docToEntry.length;\n        docToEntry = ArrayUtil.grow(docToEntry, 1 + docID);\n        bytesUsed.addAndGet((docToEntry.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToEntry[docID] = 1 + ord;\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":6,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.DerefBytesWriterBase#checkSize(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedDerefBytesImpl.Writer#add(int,BytesRef).mjava","sourceNew":"    protected void checkSize(BytesRef bytes) {\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void add(int docID, BytesRef bytes) throws IOException {\n      if (bytes.length == 0) // default value - skip it\n        return;\n      if (size == -1) {\n        size = bytes.length;\n      } else if (bytes.length != size) {\n        throw new IllegalArgumentException(\"expected bytes size=\" + size\n            + \" but got \" + bytes.length);\n      }\n      int ord = hash.add(bytes);\n      if (ord < 0) {\n        ord = (-ord) - 1;\n      }\n      if (docID >= docToID.length) {\n        final int size = docToID.length;\n        docToID = ArrayUtil.grow(docToID, 1 + docID);\n        bytesUsed.addAndGet((docToID.length - size)\n            * RamUsageEstimator.NUM_BYTES_INT);\n      }\n      docToID[docID] = 1 + ord;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","85eb75e0c0203e44dcf686f35876cf6080f3a671"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}