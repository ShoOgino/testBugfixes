{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","sourceNew":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","sourceNew":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   * \n   * @throws IOException\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","sourceNew":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      public PathPolicy getPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new FacetIndexingParams() {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      public PathPolicy getPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/streaming/CategoryParentsStreamTest#testStreamNonTopLevelParams().mjava","sourceNew":null,"sourceOld":"  /**\n   * Verifies that a {@link CategoryParentsStream} can be constructed from\n   * {@link CategoryAttributesStream} and produces the correct number of\n   * tokens with non top level facet indexing params.\n   */\n  @Test\n  public void testStreamNonTopLevelParams() throws IOException {\n    Directory directory = newDirectory();\n    final TaxonomyWriter taxonomyWriter = new DirectoryTaxonomyWriter(\n        directory);\n    FacetIndexingParams indexingParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected OrdinalPolicy fixedOrdinalPolicy() {\n        return new NonTopLevelOrdinalPolicy();\n      }\n      @Override\n      protected PathPolicy fixedPathPolicy() {\n        return new NonTopLevelPathPolicy();\n      }\n    };\n    \n    CategoryParentsStream stream = new CategoryParentsStream(\n        new CategoryAttributesStream(categoryContainer),\n        taxonomyWriter, indexingParams);\n\n    // count the number of tokens\n    int nTokens;\n    for (nTokens = 0; stream.incrementToken(); nTokens++) {\n    }\n    /*\n     * should be 4: 3 non top level (\"two\", \"three\" and \"six\"), and one\n     * explicit top level (\"four\")\n     */\n    assertEquals(\"Wrong number of tokens\", 4, nTokens);\n\n    taxonomyWriter.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}