{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    return getReader(true);\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    return getReader(true);\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n\n    return getReader(true);\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    getReaderCalled = true;\n    if (r.nextInt(4) == 2)\n      w.optimize();\n    // If we are writing with PreFlexRW, force a full\n    // IndexReader.open so terms are sorted in codepoint\n    // order during searching:\n    if (!w.codecs.getDefaultFieldCodec().equals(\"PreFlex\") && r.nextBoolean()) {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: use NRT reader\");\n      }\n      return w.getReader();\n    } else {\n      if (LuceneTestCase.VERBOSE) {\n        System.out.println(\"RIW.getReader: open new reader\");\n      }\n      w.commit();\n      return IndexReader.open(w.getDirectory(), new KeepOnlyLastCommitDeletionPolicy(), r.nextBoolean(), _TestUtil.nextInt(r, 1, 10));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a32e313633383bfadd3bbf8b933611c6a07c7c","date":1303945298,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    return getReader(true);\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n\n    return getReader(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#getReader().mjava","sourceNew":"  public IndexReader getReader() throws IOException {\n    return getReader(true);\n  }\n\n","sourceOld":"  public IndexReader getReader() throws IOException {\n    return getReader(true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"7b91922b55d15444d554721b352861d028eb8278":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["7b91922b55d15444d554721b352861d028eb8278","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70a32e313633383bfadd3bbf8b933611c6a07c7c":[],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["70a32e313633383bfadd3bbf8b933611c6a07c7c"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70a32e313633383bfadd3bbf8b933611c6a07c7c","f1bdbf92da222965b46c0a942c3857ba56e5c638","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}