{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","commits":[{"id":"91e2345fb81b6c1c7faefa550ee5eaafadc54486","date":1469730189,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Preconditions.checkNotNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Preconditions.checkNotNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Preconditions.checkNotNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Objects.requireNonNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Preconditions.checkNotNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Objects.requireNonNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Preconditions.checkNotNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotMetaDataManager#snapshot(String,String,long).mjava","sourceNew":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Objects.requireNonNull(name);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n          , name, solrCore.getName(), gen, indexDirPath);\n    }\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This method creates a new snapshot meta-data entry.\n   *\n   * @param name The name of the snapshot.\n   * @param indexDirPath The directory path where the index files are stored.\n   * @param gen The generation number for the {@linkplain IndexCommit} being snapshotted.\n   * @throws IOException in case of I/O errors.\n   */\n  public synchronized void snapshot(String name, String indexDirPath, long gen) throws IOException {\n    Objects.requireNonNull(name);\n\n    log.info(\"Creating the snapshot named {} for core {} associated with index commit with generation {} in directory {}\"\n        , name, solrCore.getName(), gen, indexDirPath);\n\n    if(nameToDetailsMapping.containsKey(name)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"A snapshot with name \" + name + \" already exists\");\n    }\n\n    SnapshotMetaData d = new SnapshotMetaData(name, indexDirPath, gen);\n    nameToDetailsMapping.put(name, d);\n\n    boolean success = false;\n    try {\n      persist();\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          release(name);\n        } catch (Exception e) {\n          // Suppress so we keep throwing original exception\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"140be51d03394488536f4aacedace29f9b318347":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","91e2345fb81b6c1c7faefa550ee5eaafadc54486"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["140be51d03394488536f4aacedace29f9b318347","320888923ec13b91f53082558f01f4c9960dd226"],"320888923ec13b91f53082558f01f4c9960dd226":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"91e2345fb81b6c1c7faefa550ee5eaafadc54486":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}