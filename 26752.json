{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<SegmentCommitInfo>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentInfoPerCommit> eligible = new ArrayList<SegmentInfoPerCommit>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentInfoPerCommit> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentInfoPerCommit info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67bcec391f8e94564afde5a0f0e6538d07a96255","date":1393593793,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<SegmentCommitInfo>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(infos, eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<SegmentCommitInfo>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(infos, eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<SegmentCommitInfo>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(infos, eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer) throws IOException {\n    if (verbose(writer)) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.segString(infos) + \" segmentsToMerge=\" + segmentsToMerge, writer);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(infos, eligible.get(0), writer)))) {\n      if (verbose(writer)) {\n        message(\"already merged\", writer);\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending(writer));\n\n    if (verbose(writer)) {\n      message(\"eligible=\" + eligible, writer);\n      message(\"forceMergeRunning=\" + forceMergeRunning, writer);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose(writer)) {\n        message(\"add merge=\" + writer.segString(merge.segments), writer);\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose(writer)) {\n        message(\"add final merge=\" + merge.segString(writer.getDirectory()), writer);\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(SegmentInfos infos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge) throws IOException {\n    if (verbose()) {\n      message(\"findForcedMerges maxSegmentCount=\" + maxSegmentCount + \" infos=\" + writer.get().segString(infos) + \" segmentsToMerge=\" + segmentsToMerge);\n    }\n\n    List<SegmentCommitInfo> eligible = new ArrayList<>();\n    boolean forceMergeRunning = false;\n    final Collection<SegmentCommitInfo> merging = writer.get().getMergingSegments();\n    boolean segmentIsOriginal = false;\n    for(SegmentCommitInfo info : infos) {\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        if (!merging.contains(info)) {\n          eligible.add(info);\n        } else {\n          forceMergeRunning = true;\n        }\n      }\n    }\n\n    if (eligible.size() == 0) {\n      return null;\n    }\n\n    if ((maxSegmentCount > 1 && eligible.size() <= maxSegmentCount) ||\n        (maxSegmentCount == 1 && eligible.size() == 1 && (!segmentIsOriginal || isMerged(infos, eligible.get(0))))) {\n      if (verbose()) {\n        message(\"already merged\");\n      }\n      return null;\n    }\n\n    Collections.sort(eligible, new SegmentByteSizeDescending());\n\n    if (verbose()) {\n      message(\"eligible=\" + eligible);\n      message(\"forceMergeRunning=\" + forceMergeRunning);\n    }\n\n    int end = eligible.size();\n    \n    MergeSpecification spec = null;\n\n    // Do full merges, first, backwards:\n    while(end >= maxMergeAtOnceExplicit + maxSegmentCount - 1) {\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      final OneMerge merge = new OneMerge(eligible.subList(end-maxMergeAtOnceExplicit, end));\n      if (verbose()) {\n        message(\"add merge=\" + writer.get().segString(merge.segments));\n      }\n      spec.add(merge);\n      end -= maxMergeAtOnceExplicit;\n    }\n\n    if (spec == null && !forceMergeRunning) {\n      // Do final merge\n      final int numToMerge = end - maxSegmentCount + 1;\n      final OneMerge merge = new OneMerge(eligible.subList(end-numToMerge, end));\n      if (verbose()) {\n        message(\"add final merge=\" + merge.segString(writer.get().getDirectory()));\n      }\n      spec = new MergeSpecification();\n      spec.add(merge);\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"027bee21e09164c9ee230395405076d1e0034b30":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["027bee21e09164c9ee230395405076d1e0034b30"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["67bcec391f8e94564afde5a0f0e6538d07a96255"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"67bcec391f8e94564afde5a0f0e6538d07a96255":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}