{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","commits":[{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,CloudConfig,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState, CloudConfig cloudConfig,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, cloudConfig, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/AddReplicaCmd#buildReplicaPositions(SolrCloudManager,ClusterState,CloudConfig,String,ZkNodeProps,EnumMap[Replica.Type,Integer]).mjava","sourceNew":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState, CloudConfig cloudConfig,\n                                                            String collectionName, ZkNodeProps message,\n                                                            EnumMap<Replica.Type, Integer> replicaTypeVsCount) throws IOException, InterruptedException {\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n    boolean skipNodeAssignment = message.getBool(CollectionAdminParams.SKIP_NODE_ASSIGNMENT, false);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = replicaTypeVsCount.get(Replica.Type.NRT);\n    int numPullReplicas = replicaTypeVsCount.get(Replica.Type.PULL);\n    int numTlogReplicas = replicaTypeVsCount.get(Replica.Type.TLOG);\n    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;\n\n    String node = message.getStr(CoreAdminParams.NODE);\n    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);\n    if (createNodeSetStr == null) {\n      if (node != null) {\n        message.getProperties().put(OverseerCollectionMessageHandler.CREATE_NODE_SET, node);\n        createNodeSetStr = node;\n      }\n    }\n\n    List<ReplicaPosition> positions = null;\n    if (!skipCreateReplicaInClusterState && !skipNodeAssignment) {\n\n      positions = Assign.getNodesForNewReplicas(clusterState, cloudConfig, collection.getName(), sliceName, numNrtReplicas,\n                    numTlogReplicas, numPullReplicas, createNodeSetStr, cloudManager);\n    }\n\n    if (positions == null)  {\n      assert node != null;\n      if (node == null) {\n        // in case asserts are disabled\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"A node should have been identified to add replica but wasn't. Please inform solr developers at SOLR-9317\");\n      }\n      // it is unlikely that multiple replicas have been requested to be created on\n      // the same node, but we've got to accommodate.\n      positions = new ArrayList<>(totalReplicas);\n      int i = 0;\n      for (Map.Entry<Replica.Type, Integer> entry : replicaTypeVsCount.entrySet()) {\n        for (int j = 0; j < entry.getValue(); j++) {\n          positions.add(new ReplicaPosition(sliceName, i++, entry.getKey(), node));\n        }\n      }\n    }\n    return positions;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"3f504512a03d978990cbff30db0522b354e846db":["c526352db87264a72a7a9ad68c1b769b81e54305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}