{"path":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","sourceNew":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","sourceOld":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","pathOld":"/dev/null","sourceNew":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","sourceNew":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrClient.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","sourceOld":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","sourceNew":null,"sourceOld":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrClient.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","sourceNew":null,"sourceOld":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrClient.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"bafca15d8e408346a67f4282ad1143b88023893b":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","bafca15d8e408346a67f4282ad1143b88023893b"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"bafca15d8e408346a67f4282ad1143b88023893b":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}