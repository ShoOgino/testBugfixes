{"path":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n\n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"820731f8480edb13c35c29432e85168fe2c5749f","date":1384418937,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), rb.getResults().docList, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":["cd00dd91853514614379b0e680d65bd19cac0f30"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<String>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","date":1401992910,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.getQuery(), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1","date":1426889883,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(\"json\", rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(\"json\", rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n      \n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(\"json\", rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(\"json\", rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","date":1450457061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5f469d206ae27a1d59e654e70a1413ffcec765","date":1462661221,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      SolrQueryRequest req = rb.req;\n      StatsCache statsCache = req.getSearcher().getStatsCache();\n      req.getContext().put(SolrIndexSearcher.STATS_SOURCE, statsCache.get(req));\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      SolrQueryRequest req = rb.req;\n      StatsCache statsCache = req.getSearcher().getStatsCache();\n      req.getContext().put(SolrIndexSearcher.STATS_SOURCE, statsCache.get(req));\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#process(ResponseBuilder).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      SolrQueryRequest req = rb.req;\n      StatsCache statsCache = req.getSearcher().getStatsCache();\n      req.getContext().put(SolrIndexSearcher.STATS_SOURCE, statsCache.get(req));\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      @SuppressWarnings({\"rawtypes\"})\n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void process(ResponseBuilder rb) throws IOException\n  {\n    if( rb.isDebug() ) {\n      SolrQueryRequest req = rb.req;\n      StatsCache statsCache = req.getSearcher().getStatsCache();\n      req.getContext().put(SolrIndexSearcher.STATS_SOURCE, statsCache.get(req));\n      DocList results = null;\n      //some internal grouping requests won't have results value set\n      if(rb.getResults() != null) {\n        results = rb.getResults().docList;\n      }\n\n      NamedList stdinfo = SolrPluginUtils.doStandardDebug( rb.req,\n          rb.getQueryString(), rb.wrap(rb.getQuery()), results, rb.isDebugQuery(), rb.isDebugResults());\n      \n      NamedList info = rb.getDebugInfo();\n      if( info == null ) {\n        rb.setDebugInfo( stdinfo );\n        info = stdinfo;\n      }\n      else {\n        info.addAll( stdinfo );\n      }\n\n      FacetDebugInfo fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo\"));\n      if (fdebug != null) {\n        info.add(\"facet-trace\", fdebug.getFacetDebugInfo());\n      }\n\n      fdebug = (FacetDebugInfo)(rb.req.getContext().get(\"FacetDebugInfo-nonJson\"));\n      if (fdebug != null) {\n        info.add(\"facet-debug\", fdebug.getFacetDebugInfo());\n      }\n      \n      if (rb.req.getJSON() != null) {\n        info.add(JSON, rb.req.getJSON());\n      }\n\n      if (rb.isDebugQuery() && rb.getQparser() != null) {\n        rb.getQparser().addDebugInfo(rb.getDebugInfo());\n      }\n      \n      if (null != rb.getDebugInfo() ) {\n        if (rb.isDebugQuery() && null != rb.getFilters() ) {\n          info.add(\"filter_queries\",rb.req.getParams().getParams(FQ));\n          List<String> fqs = new ArrayList<>(rb.getFilters().size());\n          for (Query fq : rb.getFilters()) {\n            fqs.add(QueryParsing.toString(fq, rb.req.getSchema()));\n          }\n          info.add(\"parsed_filter_queries\",fqs);\n        }\n        \n        // Add this directly here?\n        rb.rsp.add(\"debug\", rb.getDebugInfo() );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["820731f8480edb13c35c29432e85168fe2c5749f"],"820731f8480edb13c35c29432e85168fe2c5749f":["d9d424bd039937b4125152b454b3a32754b06f6c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"df72a23fb74bebe914e3f3972063a884327c0436":["3e5f469d206ae27a1d59e654e70a1413ffcec765"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","3e5f469d206ae27a1d59e654e70a1413ffcec765"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["df72a23fb74bebe914e3f3972063a884327c0436"],"d9d424bd039937b4125152b454b3a32754b06f6c":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7","6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"3e5f469d206ae27a1d59e654e70a1413ffcec765":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","3e5f469d206ae27a1d59e654e70a1413ffcec765"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"b0b597c65628ca9e73913a07e81691f8229bae35":["3e5f469d206ae27a1d59e654e70a1413ffcec765","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7"],"820731f8480edb13c35c29432e85168fe2c5749f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c26f00b574427b55127e869b935845554afde1fa":["d9d424bd039937b4125152b454b3a32754b06f6c"],"df72a23fb74bebe914e3f3972063a884327c0436":["8582f07e9350eaeb33bf6c4617b8c9895d99c839","b0b597c65628ca9e73913a07e81691f8229bae35"],"a667f95e8b4d25c8e45a6bb9ba8ce9654e7858d7":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1"],"7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3e5f469d206ae27a1d59e654e70a1413ffcec765","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9d424bd039937b4125152b454b3a32754b06f6c":["820731f8480edb13c35c29432e85168fe2c5749f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"6b3be660e210b4a5ce1e30fa69abb2d0dd0d8cc1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["7c2faf42ce045d4bd93fa175ef185dc88f4f3bcf","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3e5f469d206ae27a1d59e654e70a1413ffcec765":["df72a23fb74bebe914e3f3972063a884327c0436","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e66a459d38c1c4a2f97128433dab546f683a9fed","b0b597c65628ca9e73913a07e81691f8229bae35"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2638f781be724518ff6c2263d14a48cf6e68017","e66a459d38c1c4a2f97128433dab546f683a9fed","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}