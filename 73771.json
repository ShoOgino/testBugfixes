{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    Automaton result = new Automaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optional(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    Automaton result = new Automaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    a = a.cloneExpandedIfRequired();\n    State s = new State();\n    s.addEpsilon(a.initial);\n    s.accept = true;\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b60e3f947fc4f9e2fd81e1929a6809327ff537","date":1435953804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.  This may create a dead state.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    Automaton result = new Automaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    Automaton result = new Automaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"]},"commit2Childs":{"13b60e3f947fc4f9e2fd81e1929a6809327ff537":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["13b60e3f947fc4f9e2fd81e1929a6809327ff537"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}