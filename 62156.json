{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n    String checksum = Long.toString(out.getChecksum());\n    write(CHECKSUM);\n    write(checksum);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":["caf65fa364fcf8ea8ef1032c1247622933af3b04"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n    String checksum = Long.toString(out.getChecksum());\n    write(CHECKSUM);\n    write(checksum);\n    newLine();\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"caf65fa364fcf8ea8ef1032c1247622933af3b04","date":1397057745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n    SimpleTextUtil.writeChecksum(out, scratch);\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numDocsWritten != numDocs) {\n      throw new RuntimeException(\"mergeVectors produced an invalid result: mergedDocs is \" + numDocs + \" but vec numDocs is \" + numDocsWritten + \" file=\" + out.toString() + \"; now aborting this merge to prevent index corruption\");\n    }\n    write(END);\n    newLine();\n    String checksum = Long.toString(out.getChecksum());\n    write(CHECKSUM);\n    write(checksum);\n    newLine();\n  }\n\n","bugFix":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["caf65fa364fcf8ea8ef1032c1247622933af3b04"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","caf65fa364fcf8ea8ef1032c1247622933af3b04"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"caf65fa364fcf8ea8ef1032c1247622933af3b04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}