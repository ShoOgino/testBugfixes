{"path":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  \"foo\" returns null\n   *  \"<!prefix f=myfield>yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"<!prefix f=myfield v=$p>\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (!txt.startsWith(\"<!\")) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71bbe672a26ef56876a0ce949b0a4de41f602057","date":1194896341,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","sourceNew":"  /**\n   *  \"foo\" returns null\n   *  \"<!prefix f=myfield>yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"<!prefix f=myfield v=$p>\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt==null || !txt.startsWith(\"<!\")) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","sourceOld":"  /**\n   *  \"foo\" returns null\n   *  \"<!prefix f=myfield>yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"<!prefix f=myfield v=$p>\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (!txt.startsWith(\"<!\")) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ed9977f1cdec244969bc4f5054a6041028238bf","date":1209503245,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","sourceNew":"  /**\n   *  \"foo\" returns null\n   *  \"{!prefix f=myfield}yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"{!prefix f=myfield v=$p}\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt==null || !txt.startsWith(LOCALPARAM_START)) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","sourceOld":"  /**\n   *  \"foo\" returns null\n   *  \"<!prefix f=myfield>yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"<!prefix f=myfield v=$p>\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt==null || !txt.startsWith(\"<!\")) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32ef722831135736529762b4b97a13dd58b06f66","date":1260567610,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","sourceNew":"  /**\n   * \"foo\" returns null\n   * \"{!prefix f=myfield}yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   * \"{!prefix f=myfield v=$p}\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt == null || !txt.startsWith(LOCALPARAM_START)) {\n      return null;\n    }\n    Map<String, String> localParams = new HashMap<String, String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val == null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V, val);\n    return new MapSolrParams(localParams);\n  }\n\n","sourceOld":"  /**\n   *  \"foo\" returns null\n   *  \"{!prefix f=myfield}yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   *  \"{!prefix f=myfield v=$p}\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt==null || !txt.startsWith(LOCALPARAM_START)) {\n      return null;      \n    }\n    Map<String,String> localParams = new HashMap<String,String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val==null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V,val);\n    return new MapSolrParams(localParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","pathOld":"src/java/org/apache/solr/search/QueryParsing#getLocalParams(String,SolrParams).mjava","sourceNew":"  /**\n   * \"foo\" returns null\n   * \"{!prefix f=myfield}yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   * \"{!prefix f=myfield v=$p}\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt == null || !txt.startsWith(LOCALPARAM_START)) {\n      return null;\n    }\n    Map<String, String> localParams = new HashMap<String, String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val == null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V, val);\n    return new MapSolrParams(localParams);\n  }\n\n","sourceOld":"  /**\n   * \"foo\" returns null\n   * \"{!prefix f=myfield}yes\" returns type=\"prefix\",f=\"myfield\",v=\"yes\"\n   * \"{!prefix f=myfield v=$p}\" returns type=\"prefix\",f=\"myfield\",v=params.get(\"p\")\n   */\n  public static SolrParams getLocalParams(String txt, SolrParams params) throws ParseException {\n    if (txt == null || !txt.startsWith(LOCALPARAM_START)) {\n      return null;\n    }\n    Map<String, String> localParams = new HashMap<String, String>();\n    int start = QueryParsing.parseLocalParams(txt, 0, localParams, params);\n\n    String val;\n    if (start >= txt.length()) {\n      // if the rest of the string is empty, check for \"v\" to provide the value\n      val = localParams.get(V);\n      val = val == null ? \"\" : val;\n    } else {\n      val = txt.substring(start);\n    }\n    localParams.put(V, val);\n    return new MapSolrParams(localParams);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32ef722831135736529762b4b97a13dd58b06f66":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["32ef722831135736529762b4b97a13dd58b06f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"71bbe672a26ef56876a0ce949b0a4de41f602057":["0ed9977f1cdec244969bc4f5054a6041028238bf"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["71bbe672a26ef56876a0ce949b0a4de41f602057"],"0ed9977f1cdec244969bc4f5054a6041028238bf":["32ef722831135736529762b4b97a13dd58b06f66"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32ef722831135736529762b4b97a13dd58b06f66":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}