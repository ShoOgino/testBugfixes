{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForActiveCollection(String,long,TimeUnit,int,int).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForActiveCollection(String,long,TimeUnit,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void waitForActiveCollection(String collection, long wait, TimeUnit unit, int shards, int totalReplicas) {\n    CollectionStatePredicate predicate = expectedShardsAndActiveReplicas(shards, totalReplicas);\n\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      getSolrClient().waitForState(collection, wait, unit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n\n        return predicate.matches(n, c);\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      throw new RuntimeException(\"Failed while waiting for active collection\" + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray())\n          + \"\\nLast available state: \" + state.get());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06f42faae0ab79dde1a569756990bb96283580d","date":1566418420,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForActiveCollection(String,long,TimeUnit,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#waitForActiveCollection(String,long,TimeUnit,int,int).mjava","sourceNew":"  public void waitForActiveCollection(String collection, long wait, TimeUnit unit, int shards, int totalReplicas) {\n    log.info(\"waitForActiveCollection: {}\", collection);\n    CollectionStatePredicate predicate = expectedShardsAndActiveReplicas(shards, totalReplicas);\n\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      getSolrClient().waitForState(collection, wait, unit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n\n        return predicate.matches(n, c);\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      throw new RuntimeException(\"Failed while waiting for active collection\" + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray())\n          + \"\\nLast available state: \" + state.get());\n    }\n\n  }\n\n","sourceOld":"  public void waitForActiveCollection(String collection, long wait, TimeUnit unit, int shards, int totalReplicas) {\n    CollectionStatePredicate predicate = expectedShardsAndActiveReplicas(shards, totalReplicas);\n\n    AtomicReference<DocCollection> state = new AtomicReference<>();\n    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();\n    try {\n      getSolrClient().waitForState(collection, wait, unit, (n, c) -> {\n        state.set(c);\n        liveNodesLastSeen.set(n);\n\n        return predicate.matches(n, c);\n      });\n    } catch (TimeoutException | InterruptedException e) {\n      throw new RuntimeException(\"Failed while waiting for active collection\" + \"\\n\" + e.getMessage() + \"\\nLive Nodes: \" + Arrays.toString(liveNodesLastSeen.get().toArray())\n          + \"\\nLast available state: \" + state.get());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b06f42faae0ab79dde1a569756990bb96283580d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b06f42faae0ab79dde1a569756990bb96283580d"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b06f42faae0ab79dde1a569756990bb96283580d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b06f42faae0ab79dde1a569756990bb96283580d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}