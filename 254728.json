{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n    final SolrClient shard0 = clients.get(0);\n    final SolrClient shard1 = clients.get(1);\n    final SolrClient shard2 = clients.get(2);\n    \n    // the 5 top foo_s terms have 100 docs each on every shard\n    for (int i = 0; i < 100; i++) {\n      for (int j = 0; j < 5; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 13 - i));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 3 + i));\n        shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", i * 7 + j));\n      }\n    }\n\n    // 20 foo_s terms that come in \"second\" with 50 docs each \n    // on both shard0 & shard1 (\"bbb_\")\n    for (int i = 0; i < 50; i++) {\n      for (int j = 0; j < 20; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 0));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 1));\n      }\n      // distracting term appears on only on shard2 50 times\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"junkA\"));\n    }\n    // put \"bbb0\" on shard2 exactly once to sanity check refinement\n    shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb0\", \"stat_i\", -2));\n\n    // long 'tail' foo_s term appears in 45 docs on every shard\n    // foo_s:tail is the only term with bar_s sub-pivot terms\n    for (int i = 0; i < 45; i++) {\n\n      // for sub-pivot, shard0 & shard1 have 6 docs each for \"tailB\"\n      // but the top 5 terms are ccc(0-4) -- 7 on each shard\n      // (4 docs each have junk terms)\n      String sub_term = (i < 35) ? \"ccc\"+(i % 5) : ((i < 41) ? \"tailB\" : \"junkA\");\n      shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n      shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n\n      // shard2's top 5 sub-pivot terms are junk only it has with 8 docs each\n      // and 5 docs that use \"tailB\"\n      // NOTE: none of these get stat_i ! !\n      sub_term = (i < 40) ? \"junkB\"+(i % 5) : \"tailB\";\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term));\n    }\n\n    // really long tail uncommon foo_s terms on shard2\n    for (int i = 0; i < 30; i++) {\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"zzz\"+i));\n    }\n\n    commit();\n\n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    List<PivotField>[] shardPivots = new List[3];\n    shardPivots[0] = shard0.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[1] = shard1.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[2] = shard2.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    assertEquals(\"bbb0\", shardPivots[2].get(7).getValue());\n    assertEquals(1, shardPivots[2].get(7).getCount());\n    for (int j = 8; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"zzz\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n\n    // if we disable overrequesting, we don't find the long tail\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}stat_i\")\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(\"stat_i\");\n      assertEquals(\"stat_i\", bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n    \n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n\n    final SolrClient shard0 = clients.get(0);\n    final SolrClient shard1 = clients.get(1);\n    final SolrClient shard2 = clients.get(2);\n    \n    // the 5 top foo_s terms have 100 docs each on every shard\n    for (int i = 0; i < 100; i++) {\n      for (int j = 0; j < 5; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 13 - i));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 3 + i));\n        shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", i * 7 + j));\n      }\n    }\n\n    // 20 foo_s terms that come in \"second\" with 50 docs each \n    // on both shard0 & shard1 (\"bbb_\")\n    for (int i = 0; i < 50; i++) {\n      for (int j = 0; j < 20; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 0));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 1));\n      }\n      // distracting term appears on only on shard2 50 times\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"junkA\"));\n    }\n    // put \"bbb0\" on shard2 exactly once to sanity check refinement\n    shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb0\", \"stat_i\", -2));\n\n    // long 'tail' foo_s term appears in 45 docs on every shard\n    // foo_s:tail is the only term with bar_s sub-pivot terms\n    for (int i = 0; i < 45; i++) {\n\n      // for sub-pivot, shard0 & shard1 have 6 docs each for \"tailB\"\n      // but the top 5 terms are ccc(0-4) -- 7 on each shard\n      // (4 docs each have junk terms)\n      String sub_term = (i < 35) ? \"ccc\"+(i % 5) : ((i < 41) ? \"tailB\" : \"junkA\");\n      shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n      shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n\n      // shard2's top 5 sub-pivot terms are junk only it has with 8 docs each\n      // and 5 docs that use \"tailB\"\n      // NOTE: none of these get stat_i ! !\n      sub_term = (i < 40) ? \"junkB\"+(i % 5) : \"tailB\";\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term));\n    }\n\n    // really long tail uncommon foo_s terms on shard2\n    for (int i = 0; i < 30; i++) {\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"zzz\"+i));\n    }\n\n    commit();\n\n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    List<PivotField>[] shardPivots = new List[3];\n    shardPivots[0] = shard0.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[1] = shard1.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[2] = shard2.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    assertEquals(\"bbb0\", shardPivots[2].get(7).getValue());\n    assertEquals(1, shardPivots[2].get(7).getCount());\n    for (int j = 8; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"zzz\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n\n    // if we disable overrequesting, we don't find the long tail\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}stat_i\")\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(\"stat_i\");\n      assertEquals(\"stat_i\", bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n    \n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","date":1513104620,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    DistributedFacetSimpleRefinementLongTailTest.buildIndexes(clients, STAT_FIELD);\n    commit();\n\n    sanityCheckIndividualShards();\n    checkRefinementAndOverrequesting();\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n    final SolrClient shard0 = clients.get(0);\n    final SolrClient shard1 = clients.get(1);\n    final SolrClient shard2 = clients.get(2);\n    \n    // the 5 top foo_s terms have 100 docs each on every shard\n    for (int i = 0; i < 100; i++) {\n      for (int j = 0; j < 5; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 13 - i));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 3 + i));\n        shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", i * 7 + j));\n      }\n    }\n\n    // 20 foo_s terms that come in \"second\" with 50 docs each \n    // on both shard0 & shard1 (\"bbb_\")\n    for (int i = 0; i < 50; i++) {\n      for (int j = 0; j < 20; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 0));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 1));\n      }\n      // distracting term appears on only on shard2 50 times\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"junkA\"));\n    }\n    // put \"bbb0\" on shard2 exactly once to sanity check refinement\n    shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb0\", \"stat_i\", -2));\n\n    // long 'tail' foo_s term appears in 45 docs on every shard\n    // foo_s:tail is the only term with bar_s sub-pivot terms\n    for (int i = 0; i < 45; i++) {\n\n      // for sub-pivot, shard0 & shard1 have 6 docs each for \"tailB\"\n      // but the top 5 terms are ccc(0-4) -- 7 on each shard\n      // (4 docs each have junk terms)\n      String sub_term = (i < 35) ? \"ccc\"+(i % 5) : ((i < 41) ? \"tailB\" : \"junkA\");\n      shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n      shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n\n      // shard2's top 5 sub-pivot terms are junk only it has with 8 docs each\n      // and 5 docs that use \"tailB\"\n      // NOTE: none of these get stat_i ! !\n      sub_term = (i < 40) ? \"junkB\"+(i % 5) : \"tailB\";\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term));\n    }\n\n    // really long tail uncommon foo_s terms on shard2\n    for (int i = 0; i < 30; i++) {\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"zzz\"+i));\n    }\n\n    commit();\n\n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    List<PivotField>[] shardPivots = new List[3];\n    shardPivots[0] = shard0.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[1] = shard1.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[2] = shard2.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    assertEquals(\"bbb0\", shardPivots[2].get(7).getValue());\n    assertEquals(1, shardPivots[2].get(7).getCount());\n    for (int j = 8; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"zzz\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n\n    // if we disable overrequesting, we don't find the long tail\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}stat_i\")\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(\"stat_i\");\n      assertEquals(\"stat_i\", bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n    \n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"927e6deec13723e5fd6fb8f1e0457e8597dae15e","date":1513167013,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLongTailTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n    DistributedFacetSimpleRefinementLongTailTest.buildIndexes(clients, STAT_FIELD);\n    commit();\n\n    sanityCheckIndividualShards();\n    checkRefinementAndOverrequesting();\n    doTestDeepPivotStats();\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 3)\n  public void test() throws Exception {\n\n    final SolrClient shard0 = clients.get(0);\n    final SolrClient shard1 = clients.get(1);\n    final SolrClient shard2 = clients.get(2);\n    \n    // the 5 top foo_s terms have 100 docs each on every shard\n    for (int i = 0; i < 100; i++) {\n      for (int j = 0; j < 5; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 13 - i));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", j * 3 + i));\n        shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"aaa\"+j, \"stat_i\", i * 7 + j));\n      }\n    }\n\n    // 20 foo_s terms that come in \"second\" with 50 docs each \n    // on both shard0 & shard1 (\"bbb_\")\n    for (int i = 0; i < 50; i++) {\n      for (int j = 0; j < 20; j++) {\n        shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 0));\n        shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb\"+j, \"stat_i\", 1));\n      }\n      // distracting term appears on only on shard2 50 times\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"junkA\"));\n    }\n    // put \"bbb0\" on shard2 exactly once to sanity check refinement\n    shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"bbb0\", \"stat_i\", -2));\n\n    // long 'tail' foo_s term appears in 45 docs on every shard\n    // foo_s:tail is the only term with bar_s sub-pivot terms\n    for (int i = 0; i < 45; i++) {\n\n      // for sub-pivot, shard0 & shard1 have 6 docs each for \"tailB\"\n      // but the top 5 terms are ccc(0-4) -- 7 on each shard\n      // (4 docs each have junk terms)\n      String sub_term = (i < 35) ? \"ccc\"+(i % 5) : ((i < 41) ? \"tailB\" : \"junkA\");\n      shard0.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n      shard1.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term, \"stat_i\", i));\n\n      // shard2's top 5 sub-pivot terms are junk only it has with 8 docs each\n      // and 5 docs that use \"tailB\"\n      // NOTE: none of these get stat_i ! !\n      sub_term = (i < 40) ? \"junkB\"+(i % 5) : \"tailB\";\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"tail\", \"bar_s\", sub_term));\n    }\n\n    // really long tail uncommon foo_s terms on shard2\n    for (int i = 0; i < 30; i++) {\n      shard2.add(sdoc(\"id\", getDocNum(), \"foo_s\", \"zzz\"+i));\n    }\n\n    commit();\n\n    SolrParams req = params( \"q\", \"*:*\", \n                             \"distrib\", \"false\",\n                             \"facet\", \"true\", \n                             \"facet.limit\", \"10\",\n                             \"facet.pivot\", \"foo_s,bar_s\");\n\n    // sanity check that our expectations about each shard (non-distrib) are correct\n\n    PivotField pivot = null;\n    List<PivotField> pivots = null;\n    List<PivotField>[] shardPivots = new List[3];\n    shardPivots[0] = shard0.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[1] = shard1.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n    shardPivots[2] = shard2.query( req ).getFacetPivot().get(\"foo_s,bar_s\");\n\n    // top 5 same on all shards\n    for (int i = 0; i < 3; i++) {\n      assertEquals(10, shardPivots[i].size());\n      for (int j = 0; j < 5; j++) {\n        pivot = shardPivots[i].get(j);\n        assertEquals(pivot.toString(), \"aaa\"+j, pivot.getValue());\n        assertEquals(pivot.toString(), 100, pivot.getCount());\n      }\n    }\n    // top 6-10 same on shard0 & shard11\n    for (int i = 0; i < 2; i++) {\n      for (int j = 5; j < 10; j++) {\n        pivot = shardPivots[i].get(j);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"bbb\"));\n        assertEquals(pivot.toString(), 50, pivot.getCount());\n      }\n    }\n    // 6-10 on shard2\n    assertEquals(\"junkA\", shardPivots[2].get(5).getValue());\n    assertEquals(50, shardPivots[2].get(5).getCount());\n    assertEquals(\"tail\", shardPivots[2].get(6).getValue());\n    assertEquals(45, shardPivots[2].get(6).getCount());\n    assertEquals(\"bbb0\", shardPivots[2].get(7).getValue());\n    assertEquals(1, shardPivots[2].get(7).getCount());\n    for (int j = 8; j < 10; j++) {\n      pivot = shardPivots[2].get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"zzz\"));\n      assertEquals(pivot.toString(), 1, pivot.getCount());\n    }\n    // check sub-shardPivots on \"tail\" from shard2\n    pivots = shardPivots[2].get(6).getPivot();\n    assertEquals(6, pivots.size());\n    for (int j = 0; j < 5; j++) {\n      pivot = pivots.get(j);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"junkB\"));\n      assertEquals(pivot.toString(), 8, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(\"tailB\", pivot.getValue());\n    assertEquals(5, pivot.getCount());\n\n    // if we disable overrequesting, we don't find the long tail\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  FacetParams.FACET_OVERREQUEST_COUNT, \"0\",\n                                  FacetParams.FACET_OVERREQUEST_RATIO, \"0\",\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"facet.pivot\", \"{!stats=sxy}foo_s,bar_s\",\n                                  \"stats\", \"true\",\n                                  \"stats.field\", \"{!tag=sxy}stat_i\")\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    { // even w/o the long tail, we should have still asked shard2 to refine bbb0\n      pivot = pivots.get(5);\n      assertTrue(pivot.toString(), pivot.getValue().equals(\"bbb0\"));\n      assertEquals(pivot.toString(), 101, pivot.getCount());\n      // basic check of refined stats\n      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(\"stat_i\");\n      assertEquals(\"stat_i\", bbb0Stats.getName());\n      assertEquals(-2.0, bbb0Stats.getMin());\n      assertEquals(1.0, bbb0Stats.getMax());\n      assertEquals(101, (long) bbb0Stats.getCount());\n      assertEquals(0, (long) bbb0Stats.getMissing());\n      assertEquals(48.0, bbb0Stats.getSum());\n      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);\n      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);\n      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);\n    }\n\n\n    // with default overrequesting, we should find the correct top 6 including \n    // long tail and top sub-pivots\n    // (even if we disable overrequesting on the sub-pivot)\n    for (ModifiableSolrParams q : new ModifiableSolrParams[] { \n        params(),\n        params(\"f.bar_s.facet.overrequest.ratio\",\"0\",\n               \"f.bar_s.facet.overrequest.count\",\"0\")      }) {\n      \n      q.add( params( \"q\", \"*:*\",\n                     \"shards\", getShardsString(),\n                     \"facet\", \"true\",\n                     \"facet.limit\", \"6\",\n                     \"facet.pivot\", \"foo_s,bar_s\" ));\n      pivots = queryServer( q ).getFacetPivot().get(\"foo_s,bar_s\");\n        \n      assertEquals(6, pivots.size());\n      for (int i = 0; i < 5; i++) {\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n        assertEquals(pivot.toString(), 300, pivot.getCount());\n      }\n      pivot = pivots.get(5);\n      assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n      assertEquals(pivot.toString(), 135, pivot.getCount());\n      // check the sub pivots\n      pivots = pivot.getPivot();\n      assertEquals(6, pivots.size());\n      pivot = pivots.get(0);\n      assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n      assertEquals(pivot.toString(), 17, pivot.getCount());\n      for (int i = 1; i < 6; i++) { // ccc(0-4)\n        pivot = pivots.get(i);\n        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n        assertEquals(pivot.toString(), 14, pivot.getCount());\n      }\n    }\n\n    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure \n    // that we get the correct top5 including \"tailB\"\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    pivot = pivots.get(0);\n    assertEquals(pivot.toString(), \"tailB\", pivot.getValue());\n    assertEquals(pivot.toString(), 17, pivot.getCount());\n    for (int i = 1; i < 5; i++) { // ccc(0-3)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n\n    // however with a lower limit and overrequesting disabled, \n    // we're going to miss out on tailB\n\n    pivots = queryServer( params( \"q\", \"*:*\",\n                                  \"shards\", getShardsString(),\n                                  \"facet\", \"true\",\n                                  \"facet.limit\", \"6\",\n                                  \"f.bar_s.facet.overrequest.ratio\", \"0\",\n                                  \"f.bar_s.facet.overrequest.count\", \"0\",\n                                  \"f.bar_s.facet.limit\", \"5\",\n                                  \"facet.pivot\", \"foo_s,bar_s\" )\n                          ).getFacetPivot().get(\"foo_s,bar_s\");\n    assertEquals(6, pivots.size());\n    for (int i = 0; i < 5; i++) {\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"aaa\"));\n      assertEquals(pivot.toString(), 300, pivot.getCount());\n    }\n    pivot = pivots.get(5);\n    assertEquals(pivot.toString(), \"tail\", pivot.getValue());\n    assertEquals(pivot.toString(), 135, pivot.getCount());\n    // check the sub pivots\n    pivots = pivot.getPivot();\n    assertEquals(5, pivots.size());\n    for (int i = 0; i < 5; i++) { // ccc(0-4)\n      pivot = pivots.get(i);\n      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith(\"ccc\"));\n      assertEquals(pivot.toString(), 14, pivot.getCount());\n    }\n    \n    doTestDeepPivotStats();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["abb23fcc2461782ab204e61213240feb77d355aa","5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"]},"commit2Childs":{"5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba":["927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"abb23fcc2461782ab204e61213240feb77d355aa":["5445bd5bf6ab5e2fbb1a1b4ff8a36ba1cafa18ba","927e6deec13723e5fd6fb8f1e0457e8597dae15e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"927e6deec13723e5fd6fb8f1e0457e8597dae15e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}