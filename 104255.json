{"path":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory(rand);\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    MockRAMDirectory directory = new MockRAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory(rand);\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(rand, directory,\n                                                     newIndexWriterConfig(rand, TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(SlowMultiReaderWrapper.wrap(closeIndexReader));\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    RAMDirectory directory = new RAMDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(new Field(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = new SlowMultiReaderWrapper(writer.getReader());\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarityProvider(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#getSearcher().mjava","sourceNew":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","sourceOld":"  private IndexSearcher getSearcher() throws Exception {\n    directory = newDirectory();\n    String[] docs = new String[]{\"xx rr yy mm  pp\",\"xx yy mm rr pp\", \"nopayload qq ss pp np\", \"one two three four five six seven eight nine ten eleven\", \"nine one two three four five six seven eight eleven ten\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = null;\n    for(int i = 0; i < docs.length; i++) {\n      doc = new Document();\n      String docText = docs[i];\n      doc.add(newField(PayloadHelper.FIELD,docText, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n\n    closeIndexReader = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(closeIndexReader);\n    return searcher;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"51c34a3639838887e7997850b6be80f838a4d6f7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","51c34a3639838887e7997850b6be80f838a4d6f7"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c8323d210478d76a02372693d254b69aac614689"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["29ef99d61cda9641b6250bf9567329a6e65f901d","1509f151d7692d84fae414b2b799ac06ba60fcb4","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}