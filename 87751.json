{"path":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","commits":[{"id":"6585acee8c9458b9745b49462abd05c2aa4f23d5","date":1012057292,"type":1,"author":"Andrew C. Oliver","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/DeleteFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    try {\n      Directory directory = FSDirectory.getDirectory(\"demo index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n//       Term term = new Term(\"path\", \"pizza\");\n//       int deleted = reader.delete(term);\n\n//       System.out.println(\"deleted \" + deleted +\n// \t\t\t \" documents containing \" + term);\n\n      for (int i = 0; i < reader.maxDoc(); i++)\n\treader.delete(i);\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = FSDirectory.getDirectory(\"demo index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n//       Term term = new Term(\"path\", \"pizza\");\n//       int deleted = reader.delete(term);\n\n//       System.out.println(\"deleted \" + deleted +\n// \t\t\t \" documents containing \" + term);\n\n      for (int i = 0; i < reader.maxDoc(); i++)\n\treader.delete(i);\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbdcd094e2f9e4815621e4b813461caabc9546a","date":1091569764,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.delete(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    try {\n      Directory directory = FSDirectory.getDirectory(\"demo index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n//       Term term = new Term(\"path\", \"pizza\");\n//       int deleted = reader.delete(term);\n\n//       System.out.println(\"deleted \" + deleted +\n// \t\t\t \" documents containing \" + term);\n\n      for (int i = 0; i < reader.maxDoc(); i++)\n\treader.delete(i);\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a862b582eb65bb20bb71a7b3890193c3bc02ad99","date":1141070662,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.delete(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.delete(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.delete(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\");\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\", false);\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.getDirectory(\"index\");\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6880911c836817ac2521251b88f85d02c450ecb","date":1251223725,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory);\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/DeleteFiles#main(String[]).mjava","sourceNew":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  /** Deletes documents from an index that do not contain a term. */\n  public static void main(String[] args) {\n    String usage = \"java org.apache.lucene.demo.DeleteFiles <unique_term>\";\n    if (args.length == 0) {\n      System.err.println(\"Usage: \" + usage);\n      System.exit(1);\n    }\n    try {\n      Directory directory = FSDirectory.open(new File(\"index\"));\n      IndexReader reader = IndexReader.open(directory, false); // we don't want read-only because we are about to delete\n\n      Term term = new Term(\"path\", args[0]);\n      int deleted = reader.deleteDocuments(term);\n\n      System.out.println(\"deleted \" + deleted +\n \t\t\t \" documents containing \" + term);\n\n      // one can also delete documents by their internal id:\n      /*\n      for (int i = 0; i < reader.maxDoc(); i++) {\n        System.out.println(\"Deleting document with id \" + i);\n        reader.delete(i);\n      }*/\n\n      reader.close();\n      directory.close();\n\n    } catch (Exception e) {\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66b12ba4967665216eeb706b58d424c51fb3641a":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"f6880911c836817ac2521251b88f85d02c450ecb":["ba712167ee848727018d8b77aa0c273839fbe15c"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f6880911c836817ac2521251b88f85d02c450ecb"],"ba712167ee848727018d8b77aa0c273839fbe15c":["66b12ba4967665216eeb706b58d424c51fb3641a"]},"commit2Childs":{"66b12ba4967665216eeb706b58d424c51fb3641a":["ba712167ee848727018d8b77aa0c273839fbe15c"],"1bbdcd094e2f9e4815621e4b813461caabc9546a":["a862b582eb65bb20bb71a7b3890193c3bc02ad99"],"f6880911c836817ac2521251b88f85d02c450ecb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6585acee8c9458b9745b49462abd05c2aa4f23d5"],"6585acee8c9458b9745b49462abd05c2aa4f23d5":["1bbdcd094e2f9e4815621e4b813461caabc9546a"],"a862b582eb65bb20bb71a7b3890193c3bc02ad99":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f6880911c836817ac2521251b88f85d02c450ecb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}