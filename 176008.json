{"path":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","commits":[{"id":"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc","date":1582124610,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (intersectsLine(ax, ay, bx, by) ||\n          intersectsLine(bx, by, cx, cy) ||\n          intersectsLine(cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1","date":1582881747,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (calculator.intersectsLine(ax, ay, bx, by) ||\n          calculator.intersectsLine(bx, by, cx, cy) ||\n          calculator.intersectsLine(cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (intersectsLine(ax, ay, bx, by) ||\n          intersectsLine(bx, by, cx, cy) ||\n          intersectsLine(cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Circle2D#relateIndexedTriangle(double,double,double,double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /** relates an indexed triangle with the polygon */\n  private Relation relateIndexedTriangle(double minX, double maxX, double minY, double maxY,\n                                         double ax, double ay, double bx, double by, double cx, double cy) {\n    // check each corner: if < 3 && > 0 are present, its cheaper than crossesSlowly\n    int numCorners = numberOfTriangleCorners(ax, ay, bx, by, cx, cy);\n    if (numCorners == 3) {\n      return Relation.CELL_INSIDE_QUERY;\n    } else if (numCorners == 0) {\n      if (Component2D.pointInTriangle(minX, maxX, minY, maxY, calculator.geX(), calculator.getY(), ax, ay, bx, by, cx, cy) == true) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      if (calculator.intersectsLine(ax, ay, bx, by) ||\n          calculator.intersectsLine(bx, by, cx, cy) ||\n          calculator.intersectsLine(cx, cy, ax, ay)) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"c568a1e2a5125c2245150eebb030a81baa158b31":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1":["c568a1e2a5125c2245150eebb030a81baa158b31"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc"],"8dcb96a15e8d377bd4d5cb5bb2d5c6f1da4693fc":["ded0ce8b083477f59a4cfe486b2e53c7e6fa79e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}