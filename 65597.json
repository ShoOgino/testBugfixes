{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","commits":[{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object]).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter(routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String,Object> objs) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter(routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2041b9cdee9d3bc4be6c8975a8bde8b823a7315b","date":1401348395,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter(routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version,znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version,znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["2041b9cdee9d3bc4be6c8975a8bde8b823a7315b"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2041b9cdee9d3bc4be6c8975a8bde8b823a7315b":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"2041b9cdee9d3bc4be6c8975a8bde8b823a7315b":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["2041b9cdee9d3bc4be6c8975a8bde8b823a7315b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9279b175e5e66258442d2123a50f052219a9cc1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}