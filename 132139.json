{"path":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, entry.reusePostings);\n\n      if (subPostings != null) {\n        entry.reusePostings = subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, entry.reuseDocs) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","77d4998e63ada9336818d1ebaacc362168f473e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","date":1278979937,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, entry.reusePostings);\n\n      if (subPostings != null) {\n        entry.reusePostings = subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, entry.reuseDocs) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":["77d4998e63ada9336818d1ebaacc362168f473e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, entry.reusePostings);\n\n      if (subPostings != null) {\n        entry.reusePostings = subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, entry.reuseDocs) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiSkipDocs;\n    if (skipDocs instanceof MultiBits) {\n      multiSkipDocs = (MultiBits) skipDocs;\n    } else {\n      multiSkipDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiSkipDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the skipDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiSkipDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(skipDocs, top[i].subSlice);\n        }\n      } else if (skipDocs != null) {\n        b = new BitsSlice(skipDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d4998e63ada9336818d1ebaacc362168f473e8","date":1318620209,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    final MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    if (reuse != null) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum();\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, null);\n\n      if (subPostings != null) {\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index], needsOffsets);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // offsets or positions -- we can't correctly\n          // produce a MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n    MultiDocsAndPositionsEnum docsAndPositionsEnum;\n    // Can only reuse if incoming enum is also a MultiDocsAndPositionsEnum\n    if (reuse != null && reuse instanceof MultiDocsAndPositionsEnum) {\n      docsAndPositionsEnum = (MultiDocsAndPositionsEnum) reuse;\n      // ... and was previously created w/ this MultiTermsEnum:\n      if (!docsAndPositionsEnum.canReuse(this)) {\n        docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n      }\n    } else {\n      docsAndPositionsEnum = new MultiDocsAndPositionsEnum(this, subs.length);\n    }\n    \n    final MultiBits multiLiveDocs;\n    if (liveDocs instanceof MultiBits) {\n      multiLiveDocs = (MultiBits) liveDocs;\n    } else {\n      multiLiveDocs = null;\n    }\n\n    int upto = 0;\n\n    for(int i=0;i<numTop;i++) {\n\n      final TermsEnumWithSlice entry = top[i];\n\n      final Bits b;\n\n      if (multiLiveDocs != null) {\n        // Optimize for common case: requested skip docs is a\n        // congruent sub-slice of MultiBits: in this case, we\n        // just pull the liveDocs from the sub reader, rather\n        // than making the inefficient\n        // Slice(Multi(sub-readers)):\n        final MultiBits.SubResult sub = multiLiveDocs.getMatchingSub(top[i].subSlice);\n        if (sub.matches) {\n          b = sub.result;\n        } else {\n          // custom case: requested skip docs is foreign:\n          // must slice it on every access (very\n          // inefficient)\n          b = new BitsSlice(liveDocs, top[i].subSlice);\n        }\n      } else if (liveDocs != null) {\n        b = new BitsSlice(liveDocs, top[i].subSlice);\n      } else {\n        // no deletions\n        b = null;\n      }\n\n      assert entry.index < docsAndPositionsEnum.subDocsAndPositionsEnum.length: entry.index + \" vs \" + docsAndPositionsEnum.subDocsAndPositionsEnum.length + \"; \" + subs.length;\n      final DocsAndPositionsEnum subPostings = entry.terms.docsAndPositions(b, docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index]);\n\n      if (subPostings != null) {\n        docsAndPositionsEnum.subDocsAndPositionsEnum[entry.index] = subPostings;\n        subDocsAndPositions[upto].docsAndPositionsEnum = subPostings;\n        subDocsAndPositions[upto].slice = entry.subSlice;\n        upto++;\n      } else {\n        if (entry.terms.docs(b, null, false) != null) {\n          // At least one of our subs does not store\n          // positions -- we can't correctly produce a\n          // MultiDocsAndPositions enum\n          return null;\n        }\n      }\n    }\n\n    if (upto == 0) {\n      return null;\n    } else {\n      return docsAndPositionsEnum.reset(subDocsAndPositions, upto);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"37c44f030e0de6fd5fda4cdfe97af3af2c6319e8":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["77d4998e63ada9336818d1ebaacc362168f473e8","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["77d4998e63ada9336818d1ebaacc362168f473e8"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","37c44f030e0de6fd5fda4cdfe97af3af2c6319e8"],"77d4998e63ada9336818d1ebaacc362168f473e8":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"37c44f030e0de6fd5fda4cdfe97af3af2c6319e8":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["77d4998e63ada9336818d1ebaacc362168f473e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["37c44f030e0de6fd5fda4cdfe97af3af2c6319e8","5f4e87790277826a2aea119328600dfb07761f32"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","31f025ae60076ae95274433f3fe8e6ace2857a87"],"5f4e87790277826a2aea119328600dfb07761f32":[],"77d4998e63ada9336818d1ebaacc362168f473e8":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31f025ae60076ae95274433f3fe8e6ace2857a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","5f4e87790277826a2aea119328600dfb07761f32","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}