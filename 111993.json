{"path":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(File,String).mjava","commits":[{"id":"e5040424df1d01c5daf6a4e0afbebb2da1f1c168","date":1269714861,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(File,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(String,String).mjava","sourceNew":"  /* Unzips zipName --> dirName, removing dirName\n     first */\n  public void unzip(File zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","sourceOld":"  /* Unzips dirName + \".zip\" --> dirName, removing dirName\n     first */\n  public void unzip(String zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName + \".zip\");\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":4,"author":"Doron Cohen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(File,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips zipName --> dirName, removing dirName\n     first */\n  public void unzip(File zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(File,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips zipName --> dirName, removing dirName\n     first */\n  public void unzip(File zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#unzip(File,String).mjava","sourceNew":null,"sourceOld":"  /* Unzips zipName --> dirName, removing dirName\n     first */\n  public void unzip(File zipName, String destDirName) throws IOException {\n\n    ZipFile zipFile = new ZipFile(zipName);\n\n    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n\n    String dirName = fullDir(destDirName);\n\n    File fileDir = new File(dirName);\n    rmDir(destDirName);\n\n    fileDir.mkdir();\n\n    while (entries.hasMoreElements()) {\n      ZipEntry entry = entries.nextElement();\n\n      InputStream in = zipFile.getInputStream(entry);\n      OutputStream out = new BufferedOutputStream(new FileOutputStream(new File(fileDir, entry.getName())));\n\n      byte[] buffer = new byte[8192];\n      int len;\n      while((len = in.read(buffer)) >= 0) {\n        out.write(buffer, 0, len);\n      }\n\n      in.close();\n      out.close();\n    }\n\n    zipFile.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5040424df1d01c5daf6a4e0afbebb2da1f1c168":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"]},"commit2Childs":{"e5040424df1d01c5daf6a4e0afbebb2da1f1c168":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cdad2c6b6234338031bcc1f24c001a5ad66f714","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5040424df1d01c5daf6a4e0afbebb2da1f1c168"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}