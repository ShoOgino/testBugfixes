{"path":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","commits":[{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","sourceNew":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee","date":1593704090,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","sourceNew":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas,small_i_p\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"rollup(input(),over=\\\"sortabledv_udvas\\\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (Map<String, Object> doc : docs) {\n      assertNotNull(\"missing sum: \" + doc, doc.get(\"sum(small_i_p)\"));\n      assertEquals(18000.0, ((Number)doc.get(\"sum(small_i_p)\")).doubleValue(), 2500.0);\n      assertNotNull(\"missing avg: \" + doc, doc.get(\"avg(small_i_p)\"));\n      assertEquals(18.0, ((Number)doc.get(\"avg(small_i_p)\")).doubleValue(), 2.5);\n      assertNotNull(\"missing count: \" + doc, doc.get(\"count(*)\"));\n      assertEquals(1000.0, ((Number)doc.get(\"count(*)\")).doubleValue(), 200.0);\n    }\n    // try invalid field types\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv,small_i_p\", \"sort\", \"sortabledv asc\", \"expr\", \"unique(input(),over=\\\"sortabledv\\\")\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    assertEquals(\"wrong response status\", 400, ((Number)Utils.getObjectByPath(rspMap, false, \"/responseHeader/status\")).intValue());\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertEquals(\"wrong number of docs\", 1, docs.size());\n    Map<String, Object> doc = docs.get(0);\n    assertTrue(\"doc doesn't have exception\", doc.containsKey(StreamParams.EXCEPTION));\n    assertTrue(\"wrong exception message\", doc.get(StreamParams.EXCEPTION).toString().contains(\"Must have useDocValuesAsStored='true'\"));\n  }\n\n","sourceOld":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b8c26c13b294e143adb7359d48c525f7052def","date":1593853283,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas,small_i_p\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"rollup(input(),over=\\\"sortabledv_udvas\\\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (Map<String, Object> doc : docs) {\n      assertNotNull(\"missing sum: \" + doc, doc.get(\"sum(small_i_p)\"));\n      assertEquals(18000.0, ((Number)doc.get(\"sum(small_i_p)\")).doubleValue(), 2500.0);\n      assertNotNull(\"missing avg: \" + doc, doc.get(\"avg(small_i_p)\"));\n      assertEquals(18.0, ((Number)doc.get(\"avg(small_i_p)\")).doubleValue(), 2.5);\n      assertNotNull(\"missing count: \" + doc, doc.get(\"count(*)\"));\n      assertEquals(1000.0, ((Number)doc.get(\"count(*)\")).doubleValue(), 200.0);\n    }\n    // try invalid field types\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv,small_i_p\", \"sort\", \"sortabledv asc\", \"expr\", \"unique(input(),over=\\\"sortabledv\\\")\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    assertEquals(\"wrong response status\", 400, ((Number)Utils.getObjectByPath(rspMap, false, \"/responseHeader/status\")).intValue());\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertEquals(\"wrong number of docs\", 1, docs.size());\n    Map<String, Object> doc = docs.get(0);\n    assertTrue(\"doc doesn't have exception\", doc.containsKey(StreamParams.EXCEPTION));\n    assertTrue(\"wrong exception message\", doc.get(StreamParams.EXCEPTION).toString().contains(\"Must have useDocValuesAsStored='true'\"));\n  }\n\n","sourceOld":"  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    @SuppressWarnings({\"unchecked\"})\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    @SuppressWarnings({\"unchecked\"})\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas,small_i_p\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"rollup(input(),over=\\\"sortabledv_udvas\\\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (Map<String, Object> doc : docs) {\n      assertNotNull(\"missing sum: \" + doc, doc.get(\"sum(small_i_p)\"));\n      assertEquals(18000.0, ((Number)doc.get(\"sum(small_i_p)\")).doubleValue(), 2500.0);\n      assertNotNull(\"missing avg: \" + doc, doc.get(\"avg(small_i_p)\"));\n      assertEquals(18.0, ((Number)doc.get(\"avg(small_i_p)\")).doubleValue(), 2.5);\n      assertNotNull(\"missing count: \" + doc, doc.get(\"count(*)\"));\n      assertEquals(1000.0, ((Number)doc.get(\"count(*)\")).doubleValue(), 200.0);\n    }\n    // try invalid field types\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv,small_i_p\", \"sort\", \"sortabledv asc\", \"expr\", \"unique(input(),over=\\\"sortabledv\\\")\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    assertEquals(\"wrong response status\", 400, ((Number)Utils.getObjectByPath(rspMap, false, \"/responseHeader/status\")).intValue());\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertEquals(\"wrong number of docs\", 1, docs.size());\n    Map<String, Object> doc = docs.get(0);\n    assertTrue(\"doc doesn't have exception\", doc.containsKey(StreamParams.EXCEPTION));\n    assertTrue(\"wrong exception message\", doc.get(StreamParams.EXCEPTION).toString().contains(\"Must have useDocValuesAsStored='true'\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7923b4ccccd9103a8c45d58c6708f863cd1e3195","date":1597232725,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/export/TestExportWriter#testExpr().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 101, docs.size());\n    for (int i = 0; i < 100; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas,small_i_p\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"rollup(input(),over=\\\"sortabledv_udvas\\\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 101, docs.size());\n    for (Map<String, Object> doc : docs) {\n      assertNotNull(\"missing sum: \" + doc, doc.get(\"sum(small_i_p)\"));\n      assertEquals(18000.0, ((Number)doc.get(\"sum(small_i_p)\")).doubleValue(), 1000.0);\n      assertNotNull(\"missing avg: \" + doc, doc.get(\"avg(small_i_p)\"));\n      assertEquals(18.0, ((Number)doc.get(\"avg(small_i_p)\")).doubleValue(), 1.0);\n      assertNotNull(\"missing count: \" + doc, doc.get(\"count(*)\"));\n      assertEquals(1000.0, ((Number)doc.get(\"count(*)\")).doubleValue(), 100.0);\n    }\n    // try invalid field types\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv,small_i_p\", \"sort\", \"sortabledv asc\", \"expr\", \"unique(input(),over=\\\"sortabledv\\\")\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    assertEquals(\"wrong response status\", 400, ((Number)Utils.getObjectByPath(rspMap, false, \"/responseHeader/status\")).intValue());\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertEquals(\"wrong number of docs\", 1, docs.size());\n    Map<String, Object> doc = docs.get(0);\n    assertTrue(\"doc doesn't have exception\", doc.containsKey(StreamParams.EXCEPTION));\n    assertTrue(\"wrong exception message\", doc.get(StreamParams.EXCEPTION).toString().contains(\"Must have useDocValuesAsStored='true'\"));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testExpr() throws Exception {\n    assertU(delQ(\"*:*\"));\n    assertU(commit());\n    createLargeIndex();\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id\", \"sort\", \"id asc\", \"expr\", \"top(n=2,input(),sort=\\\"id desc\\\")\");\n    assertJQ(req,\n        \"response/numFound==100000\",\n        \"response/docs/[0]/id=='99999'\",\n        \"response/docs/[1]/id=='99998'\"\n        );\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"unique(input(),over=\\\"sortabledv_udvas\\\")\");\n    String rsp = h.query(req);\n    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);\n    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (int i = 0; i < 99; i++) {\n      boolean found = false;\n      String si = String.valueOf(i);\n      for (int j = 0; j < docs.size(); j++) {\n        if (docs.get(j).get(\"sortabledv_udvas\").equals(si)) {\n          found = true;\n          break;\n        }\n      }\n      assertTrue(\"missing value \" + i + \" in results\", found);\n    }\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv_udvas,small_i_p\", \"sort\", \"sortabledv_udvas asc\", \"expr\", \"rollup(input(),over=\\\"sortabledv_udvas\\\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertNotNull(\"missing document results: \" + rspMap, docs);\n    assertEquals(\"wrong number of unique docs\", 100, docs.size());\n    for (Map<String, Object> doc : docs) {\n      assertNotNull(\"missing sum: \" + doc, doc.get(\"sum(small_i_p)\"));\n      assertEquals(18000.0, ((Number)doc.get(\"sum(small_i_p)\")).doubleValue(), 2500.0);\n      assertNotNull(\"missing avg: \" + doc, doc.get(\"avg(small_i_p)\"));\n      assertEquals(18.0, ((Number)doc.get(\"avg(small_i_p)\")).doubleValue(), 2.5);\n      assertNotNull(\"missing count: \" + doc, doc.get(\"count(*)\"));\n      assertEquals(1000.0, ((Number)doc.get(\"count(*)\")).doubleValue(), 200.0);\n    }\n    // try invalid field types\n    req = req(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", \"id,sortabledv,small_i_p\", \"sort\", \"sortabledv asc\", \"expr\", \"unique(input(),over=\\\"sortabledv\\\")\");\n    rsp = h.query(req);\n    rspMap = mapper.readValue(rsp, HashMap.class);\n    assertEquals(\"wrong response status\", 400, ((Number)Utils.getObjectByPath(rspMap, false, \"/responseHeader/status\")).intValue());\n    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, \"/response/docs\");\n    assertEquals(\"wrong number of docs\", 1, docs.size());\n    Map<String, Object> doc = docs.get(0);\n    assertTrue(\"doc doesn't have exception\", doc.containsKey(StreamParams.EXCEPTION));\n    assertTrue(\"wrong exception message\", doc.get(StreamParams.EXCEPTION).toString().contains(\"Must have useDocValuesAsStored='true'\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11b8c26c13b294e143adb7359d48c525f7052def":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["e98520789adb1d5ad05afb4956eca0944a929688"],"7923b4ccccd9103a8c45d58c6708f863cd1e3195":["11b8c26c13b294e143adb7359d48c525f7052def"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"804a8d5358fe7b7563b85ee7838714d720b89272":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7923b4ccccd9103a8c45d58c6708f863cd1e3195"],"e98520789adb1d5ad05afb4956eca0944a929688":["804a8d5358fe7b7563b85ee7838714d720b89272"]},"commit2Childs":{"11b8c26c13b294e143adb7359d48c525f7052def":["7923b4ccccd9103a8c45d58c6708f863cd1e3195"],"1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee":["11b8c26c13b294e143adb7359d48c525f7052def"],"7923b4ccccd9103a8c45d58c6708f863cd1e3195":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["1d810b19e2ed4ec2e2b3d79844c7d5dea82794ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}