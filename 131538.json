{"path":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<String>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : delegate.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<String>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : delegate.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : delegate.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<String>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : delegate.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a04e4daf0316a981f526f447259cbdfb9ecba03","date":1404918762,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : in.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : delegate.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    // LUCENE-1468: our NRTCachingDirectory will actually exist (RAMDir!),\n    // but if the underlying delegate is an FSDir and mkdirs() has not\n    // yet been called, because so far everything is a cached write,\n    // in this case, we don't want to throw a NoSuchDirectoryException\n    try {\n      for(String f : in.listAll()) {\n        // Cannot do this -- if lucene calls createOutput but\n        // file already exists then this falsely trips:\n        //assert !files.contains(f): \"file \\\"\" + f + \"\\\" is in both dirs\";\n        files.add(f);\n      }\n    } catch (NoSuchDirectoryException ex) {\n      // however, if there are no cached files, then the directory truly\n      // does not \"exist\"\n      if (files.isEmpty()) {\n        throw ex;\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":["0c2deddb45aff8869fb50c0231b73d9891d51c24"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"250dfa260b94f1754ee1b5819280aaaff8416405","date":1454769706,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd75f58072bba84066e89d61bd7028de1bd5b632","date":1454871793,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    return files.toArray(new String[files.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c2deddb45aff8869fb50c0231b73d9891d51c24","date":1460433101,"type":3,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      files.add(f);\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","bugFix":["6350c5c2c676e523a68b51ddac73064657fad1ff","f4abec28b874149a7223e32cc7a01704c27790de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"972687ded5c41b7f1e596acab7a03c7aef079fe5","date":1460455404,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      files.add(f);\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      if (!files.add(f)) {\n        throw new IllegalStateException(\"file: \" + in + \" appears both in delegate and in cache: \" +\n                                        \"cache=\" + Arrays.toString(cache.listAll()) + \",delegate=\" + Arrays.toString(in.listAll()));\n      }\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/NRTCachingDirectory#listAll().mjava","sourceNew":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for (String f : cacheDirectory.listAll()) {\n      files.add(f);\n    }\n    for (String f : in.listAll()) {\n      files.add(f);\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public synchronized String[] listAll() throws IOException {\n    final Set<String> files = new HashSet<>();\n    for(String f : cache.listAll()) {\n      files.add(f);\n    }\n    for(String f : in.listAll()) {\n      files.add(f);\n    }\n    String[] result = files.toArray(new String[files.size()]);\n    Arrays.sort(result);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"250dfa260b94f1754ee1b5819280aaaff8416405":["f4abec28b874149a7223e32cc7a01704c27790de"],"dd75f58072bba84066e89d61bd7028de1bd5b632":["f4abec28b874149a7223e32cc7a01704c27790de","5a207d19eac354d649c3f0e2cce070017c78125e"],"972687ded5c41b7f1e596acab7a03c7aef079fe5":["5a207d19eac354d649c3f0e2cce070017c78125e","0c2deddb45aff8869fb50c0231b73d9891d51c24"],"0c2deddb45aff8869fb50c0231b73d9891d51c24":["5a207d19eac354d649c3f0e2cce070017c78125e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["f4abec28b874149a7223e32cc7a01704c27790de","250dfa260b94f1754ee1b5819280aaaff8416405"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["972687ded5c41b7f1e596acab7a03c7aef079fe5"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"f4abec28b874149a7223e32cc7a01704c27790de":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a04e4daf0316a981f526f447259cbdfb9ecba03"],"250dfa260b94f1754ee1b5819280aaaff8416405":["5a207d19eac354d649c3f0e2cce070017c78125e"],"dd75f58072bba84066e89d61bd7028de1bd5b632":[],"972687ded5c41b7f1e596acab7a03c7aef079fe5":["d77dafd89756a5161d244985903e3487ca109182"],"0c2deddb45aff8869fb50c0231b73d9891d51c24":["972687ded5c41b7f1e596acab7a03c7aef079fe5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5a207d19eac354d649c3f0e2cce070017c78125e":["dd75f58072bba84066e89d61bd7028de1bd5b632","972687ded5c41b7f1e596acab7a03c7aef079fe5","0c2deddb45aff8869fb50c0231b73d9891d51c24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a04e4daf0316a981f526f447259cbdfb9ecba03":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["250dfa260b94f1754ee1b5819280aaaff8416405","dd75f58072bba84066e89d61bd7028de1bd5b632","5a207d19eac354d649c3f0e2cce070017c78125e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd75f58072bba84066e89d61bd7028de1bd5b632","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}