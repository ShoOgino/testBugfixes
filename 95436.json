{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeQueryManyEqualValues().mjava","commits":[{"id":"646cad9a0473e40f431299c5d1567d1f4d32f689","date":1562050301,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testPointRangeQueryManyEqualValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testPointRangeQueryManyEqualValues() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    int cardinality = TestUtil.nextInt(random(), 2, 20);\n\n    int zeroCount = 0;\n    int oneCount = 0;\n    for(int i=0;i<10000;i++) {\n      int x = random().nextInt(cardinality);\n      if (x == 0) {\n        zeroCount++;\n      } else if (x == 1) {\n        oneCount++;\n      }\n      Document doc = new Document();\n      doc.add(new IntPoint(\"int\", x));\n      doc.add(new LongPoint(\"long\", (long) x));\n      doc.add(new FloatPoint(\"float\", (float) x));\n      doc.add(new DoublePoint(\"double\", (double) x));\n      doc.add(new BinaryPoint(\"bytes\", new byte[] {(byte) x}));\n      w.addDocument(doc);\n    }\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r, false);\n\n    assertEquals(zeroCount, s.count(IntPoint.newRangeQuery(\"int\", 0, 0)));\n    assertEquals(oneCount, s.count(IntPoint.newRangeQuery(\"int\", 1, 1)));\n    assertEquals(zeroCount + oneCount, s.count(IntPoint.newRangeQuery(\"int\", 0, 1)));\n    assertEquals(10000 - zeroCount - oneCount, s.count(IntPoint.newRangeQuery(\"int\", 2, cardinality)));\n\n    assertEquals(zeroCount, s.count(LongPoint.newRangeQuery(\"long\", 0, 0)));\n    assertEquals(oneCount, s.count(LongPoint.newRangeQuery(\"long\", 1, 1)));\n    assertEquals(zeroCount + oneCount, s.count(LongPoint.newRangeQuery(\"long\", 0, 1)));\n    assertEquals(10000 - zeroCount - oneCount, s.count(LongPoint.newRangeQuery(\"long\", 2, cardinality)));\n\n    assertEquals(zeroCount, s.count(FloatPoint.newRangeQuery(\"float\", 0, 0)));\n    assertEquals(oneCount, s.count(FloatPoint.newRangeQuery(\"float\", 1, 1)));\n    assertEquals(zeroCount + oneCount, s.count(FloatPoint.newRangeQuery(\"float\", 0, 1)));\n    assertEquals(10000 - zeroCount - oneCount, s.count(FloatPoint.newRangeQuery(\"float\", 2, cardinality)));\n\n    assertEquals(zeroCount, s.count(DoublePoint.newRangeQuery(\"double\", 0, 0)));\n    assertEquals(oneCount, s.count(DoublePoint.newRangeQuery(\"double\", 1, 1)));\n    assertEquals(zeroCount + oneCount, s.count(DoublePoint.newRangeQuery(\"double\", 0, 1)));\n    assertEquals(10000 - zeroCount - oneCount, s.count(DoublePoint.newRangeQuery(\"double\", 2, cardinality)));\n\n    assertEquals(zeroCount, s.count(BinaryPoint.newRangeQuery(\"bytes\", new byte[] {0}, new byte[] {0})));\n    assertEquals(oneCount, s.count(BinaryPoint.newRangeQuery(\"bytes\", new byte[] {1}, new byte[] {1})));\n    assertEquals(zeroCount + oneCount, s.count(BinaryPoint.newRangeQuery(\"bytes\", new byte[] {0}, new byte[] {1})));\n    assertEquals(10000 - zeroCount - oneCount, s.count(BinaryPoint.newRangeQuery(\"bytes\", new byte[] {2}, new byte[] {(byte) cardinality})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"646cad9a0473e40f431299c5d1567d1f4d32f689":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["646cad9a0473e40f431299c5d1567d1f4d32f689"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["646cad9a0473e40f431299c5d1567d1f4d32f689"],"646cad9a0473e40f431299c5d1567d1f4d32f689":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}