{"path":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","commits":[{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection(String).mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n        createCollectionRequest.setCollectionName(collectionName);\n        createCollectionRequest.setNumShards(1);\n        createCollectionRequest.setReplicationFactor(1);\n        createCollectionRequest.setConfigName(configName);\n        \n        final CollectionAdminResponse response = createCollectionRequest.process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection(String collectionName) {\n      try {\n        final CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n        createCollectionRequest.setCollectionName(collectionName);\n        createCollectionRequest.setNumShards(1);\n        createCollectionRequest.setReplicationFactor(1);\n        createCollectionRequest.setConfigName(collectionName);\n        \n        final CollectionAdminResponse response = createCollectionRequest.process(solrClient);\n        assertEquals(0, response.getStatus());\n      } catch (IOException | SolrServerException e) {\n        throw new RuntimeException(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = new CollectionAdminRequest.Create()\n                .setCollectionName(collectionName)\n                .setNumShards(1)\n                .setReplicationFactor(1)\n                .setConfigName(configName).process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminRequest.Create createCollectionRequest = new CollectionAdminRequest.Create();\n        createCollectionRequest.setCollectionName(collectionName);\n        createCollectionRequest.setNumShards(1);\n        createCollectionRequest.setReplicationFactor(1);\n        createCollectionRequest.setConfigName(configName);\n        \n        final CollectionAdminResponse response = createCollectionRequest.process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = new CollectionAdminRequest.Create()\n                .setCollectionName(collectionName)\n                .setNumShards(1)\n                .setReplicationFactor(1)\n                .setConfigName(configName).process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = new CollectionAdminRequest.Create()\n                .setCollectionName(collectionName)\n                .setNumShards(1)\n                .setReplicationFactor(1)\n                .setConfigName(configName).process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = new CollectionAdminRequest.Create()\n                .setCollectionName(collectionName)\n                .setNumShards(1)\n                .setReplicationFactor(1)\n                .setConfigName(configName).process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = new CollectionAdminRequest.Create()\n                .setCollectionName(collectionName)\n                .setNumShards(1)\n                .setReplicationFactor(1)\n                .setConfigName(configName).process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ConcurrentDeleteAndCreateCollectionTest.CreateDeleteCollectionThread#createCollection().mjava","sourceNew":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","sourceOld":"    private void createCollection() {\n      try {\n        final CollectionAdminResponse response = CollectionAdminRequest.createCollection(collectionName,configName,1,1)\n                .process(solrClient);\n        if (response.getStatus() != 0) {\n          addFailure(new RuntimeException(\"failed to create collection \" + collectionName));\n        }\n      } catch (Exception e) {\n        addFailure(e);\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3217321f3e1d7922898c6c633d17acfa840d6875","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","ac97ea104d893f16aab430d9904473bc1f233f3c"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3217321f3e1d7922898c6c633d17acfa840d6875":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["e9017cf144952056066919f1ebc7897ff9bd71b1","ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}