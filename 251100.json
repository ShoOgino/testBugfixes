{"path":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,IndexSearcher,String,TermContext).mjava","commits":[{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,IndexSearcher,String,TermContext).mjava","pathOld":"/dev/null","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, IndexSearcher searcher,\n      String fieldName, TermContext termContext) throws IOException {\n    IndexReader reader = searcher.getIndexReader();\n    int numberOfDocuments = reader.maxDoc();\n    \n    int docFreq = termContext.docFreq();\n    long totalTermFreq = termContext.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n    \n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), fieldName);\n    if (terms == null) {\n      // field does not exist;\n      numberOfFieldTokens = 0;\n      avgFieldLength = 1;\n    } else {\n      long sumTotalTermFreq = terms.getSumTotalTermFreq();\n\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      if (sumTotalTermFreq == -1) {\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1;\n      } else {\n        numberOfFieldTokens = sumTotalTermFreq;\n        avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n      }\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,CollectionStatistics,TermStatistics).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/similarities/SimilarityBase#fillBasicStats(BasicStats,IndexSearcher,String,TermContext).mjava","sourceNew":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, CollectionStatistics collectionStats, TermStatistics termStats) {\n    int numberOfDocuments = collectionStats.maxDoc();\n    \n    int docFreq = termStats.docFreq();\n    long totalTermFreq = termStats.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n\n    long sumTotalTermFreq = collectionStats.sumTotalTermFreq();\n\n    if (sumTotalTermFreq <= 0) {\n      // field does not exist;\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      numberOfFieldTokens = docFreq;\n      avgFieldLength = 1;\n    } else {\n      numberOfFieldTokens = sumTotalTermFreq;\n      avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","sourceOld":"  /** Fills all member fields defined in {@code BasicStats} in {@code stats}. \n   *  Subclasses can override this method to fill additional stats. */\n  protected void fillBasicStats(BasicStats stats, IndexSearcher searcher,\n      String fieldName, TermContext termContext) throws IOException {\n    IndexReader reader = searcher.getIndexReader();\n    int numberOfDocuments = reader.maxDoc();\n    \n    int docFreq = termContext.docFreq();\n    long totalTermFreq = termContext.totalTermFreq();\n\n    // codec does not supply totalTermFreq: substitute docFreq\n    if (totalTermFreq == -1) {\n      totalTermFreq = docFreq;\n    }\n\n    final long numberOfFieldTokens;\n    final float avgFieldLength;\n    \n    Terms terms = MultiFields.getTerms(searcher.getIndexReader(), fieldName);\n    if (terms == null) {\n      // field does not exist;\n      numberOfFieldTokens = 0;\n      avgFieldLength = 1;\n    } else {\n      long sumTotalTermFreq = terms.getSumTotalTermFreq();\n\n      // We have to provide something if codec doesnt supply these measures,\n      // or if someone omitted frequencies for the field... negative values cause\n      // NaN/Inf for some scorers.\n      if (sumTotalTermFreq == -1) {\n        numberOfFieldTokens = docFreq;\n        avgFieldLength = 1;\n      } else {\n        numberOfFieldTokens = sumTotalTermFreq;\n        avgFieldLength = (float)numberOfFieldTokens / numberOfDocuments;\n      }\n    }\n \n    // TODO: add sumDocFreq for field (numberOfFieldPostings)\n    stats.setNumberOfDocuments(numberOfDocuments);\n    stats.setNumberOfFieldTokens(numberOfFieldTokens);\n    stats.setAvgFieldLength(avgFieldLength);\n    stats.setDocFreq(docFreq);\n    stats.setTotalTermFreq(totalTermFreq);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"]},"commit2Childs":{"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}