{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getDictionaryEncoding(InputStream).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getDictionaryEncoding(InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (encoding.length() > 4 && \"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d2676f60312754dc25ef542551cb2623527013a4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#getDictionaryEncoding(InputStream).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#getDictionaryEncoding(InputStream).mjava","sourceNew":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (encoding.length() > 4 && \"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses the encoding specified in the affix file readable through the provided InputStream\n   *\n   * @param affix InputStream for reading the affix file\n   * @return Encoding specified in the affix file\n   * @throws IOException Can be thrown while reading from the InputStream\n   * @throws ParseException Thrown if the first non-empty non-comment line read from the file does not adhere to the format {@code SET <encoding>}\n   */\n  private String getDictionaryEncoding(InputStream affix) throws IOException, ParseException {\n    final StringBuilder encoding = new StringBuilder();\n    for (;;) {\n      encoding.setLength(0);\n      int ch;\n      while ((ch = affix.read()) >= 0) {\n        if (ch == '\\n') {\n          break;\n        }\n        if (ch != '\\r') {\n          encoding.append((char)ch);\n        }\n      }\n      if (\n          encoding.length() == 0 || encoding.charAt(0) == '#' ||\n          // this test only at the end as ineffective but would allow lines only containing spaces:\n          encoding.toString().trim().length() == 0\n      ) {\n        if (ch < 0) {\n          throw new ParseException(\"Unexpected end of affix file.\", 0);\n        }\n        continue;\n      }\n      if (encoding.length() > 4 && \"SET \".equals(encoding.substring(0, 4))) {\n        // cleanup the encoding string, too (whitespace)\n        return encoding.substring(4).trim();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}