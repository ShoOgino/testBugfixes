{"path":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70790b11e79a0366b21b2cc5b82d03b6fddcef81","date":1364594206,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(getDeletionPolicy())\n        .setMaxBufferedDocs(2));\n    SnapshotDeletionPolicy dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(getDeletionPolicy())\n        .setMaxBufferedDocs(2));\n    SnapshotDeletionPolicy dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.shutdown();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","date":1409346855,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // we use the IW unref'ed files check which is unaware of retries:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // we use the IW unref'ed files check which is unaware of retries:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // we use the IW unref'ed files check which is unaware of retries:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // we use the IW unref'ed files check which is unaware of retries:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // we use the IW unref'ed files check which is unaware of retries:\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);\n    }\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    expectThrows(IllegalStateException.class, () -> {\n      dp.snapshot();\n    });\n\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    try {\n      dp.snapshot();\n      fail(\"did not hit exception\");\n    } catch(IllegalStateException ise) {\n      // expected\n    }\n    dp = (SnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71da933d30aea361ccc224d6544c451cbf49916d","date":1579874339,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds at night\n    final long stopTime = System.currentTimeMillis() + (TEST_NIGHTLY ? 1000 : 100);\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    expectThrows(IllegalStateException.class, () -> {\n      dp.snapshot();\n    });\n\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n        .setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    // Verify we catch misuse:\n    expectThrows(IllegalStateException.class, () -> {\n      dp.snapshot();\n    });\n\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a207d19eac354d649c3f0e2cce070017c78125e":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","b470f36a9372c97283360b1304eacbde22df6c0d"],"05fe562aa248790944d43cdd478f512572835ba0":["5a207d19eac354d649c3f0e2cce070017c78125e"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b470f36a9372c97283360b1304eacbde22df6c0d":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71da933d30aea361ccc224d6544c451cbf49916d"],"71da933d30aea361ccc224d6544c451cbf49916d":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"70790b11e79a0366b21b2cc5b82d03b6fddcef81":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"dce99db8590cdd065839ae4e6b228b66eeee8f38":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["70790b11e79a0366b21b2cc5b82d03b6fddcef81"],"5a207d19eac354d649c3f0e2cce070017c78125e":["05fe562aa248790944d43cdd478f512572835ba0"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"05fe562aa248790944d43cdd478f512572835ba0":["71da933d30aea361ccc224d6544c451cbf49916d"],"98d2deb8c96c79ebef084a1f8e5a1a6c08608f13":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["98d2deb8c96c79ebef084a1f8e5a1a6c08608f13"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"71da933d30aea361ccc224d6544c451cbf49916d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}