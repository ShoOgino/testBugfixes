{"path":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","commits":[{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.setTermBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.setTermBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.setTermBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.setTermBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.buffer(), 0, next.length());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.termBuffer(), 0, next.termLength());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.buffer(), 0, next.length());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":["77e6111c8c695bcab271a048bf5aae6b05cf415b","77e6111c8c695bcab271a048bf5aae6b05cf415b","77e6111c8c695bcab271a048bf5aae6b05cf415b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.buffer(), 0, next.length());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        Token next = tokenIterator.next();\n        termAtt.copyBuffer(next.buffer(), 0, next.length());\n        typeAtt.setType(next.type());\n        offsetAtt.setOffset(next.startOffset(), next.endOffset());\n        flagsAtt.setFlags(next.getFlags());\n        payloadAtt.setPayload(next.getPayload());\n        posIncAtt.setPositionIncrement(next.getPositionIncrement());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1968de7e0b2444c3f91eedc11c3238a6d35b8950","date":1303335305,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandlerBase.ListBasedTokenStream#incrementToken().mjava","sourceNew":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean incrementToken() throws IOException {\n      if (tokenIterator.hasNext()) {\n        clearAttributes();\n        AttributeSource next = tokenIterator.next();\n        Iterator<Class<? extends Attribute>> atts = next.getAttributeClassesIterator();\n        while (atts.hasNext()) // make sure all att impls in the token exist here\n          addAttribute(atts.next());\n        next.copyTo(this);\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["1968de7e0b2444c3f91eedc11c3238a6d35b8950","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","1968de7e0b2444c3f91eedc11c3238a6d35b8950"],"1968de7e0b2444c3f91eedc11c3238a6d35b8950":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["e79a6d080bdd5b2a8f56342cf571b5476de04180","1968de7e0b2444c3f91eedc11c3238a6d35b8950"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"1da8d55113b689b06716246649de6f62430f15c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","1968de7e0b2444c3f91eedc11c3238a6d35b8950"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a7347509fad0711ac30cb15a746e9a3830a38ebd","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1968de7e0b2444c3f91eedc11c3238a6d35b8950"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["1da8d55113b689b06716246649de6f62430f15c0"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["d085fb336a7208eea2214e5ffcc803960819b60b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"1968de7e0b2444c3f91eedc11c3238a6d35b8950":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["1968de7e0b2444c3f91eedc11c3238a6d35b8950","e79a6d080bdd5b2a8f56342cf571b5476de04180","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"1da8d55113b689b06716246649de6f62430f15c0":["d085fb336a7208eea2214e5ffcc803960819b60b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}