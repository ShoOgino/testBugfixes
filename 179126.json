{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","commits":[{"id":"aedcfb5ebceafe4a0285436fa86269ed6c926442","date":1271441603,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private static String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b80ad3438ccc68d1ef441add711ed2143324f14","date":1293087175,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc5ecd93bcd50b2199757091d526fc1bcbce0db1","date":1293154244,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","sourceNew":null,"sourceOld":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["aedcfb5ebceafe4a0285436fa86269ed6c926442","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9b80ad3438ccc68d1ef441add711ed2143324f14"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["aedcfb5ebceafe4a0285436fa86269ed6c926442","9b80ad3438ccc68d1ef441add711ed2143324f14"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["dc5ecd93bcd50b2199757091d526fc1bcbce0db1","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc5ecd93bcd50b2199757091d526fc1bcbce0db1":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"9b80ad3438ccc68d1ef441add711ed2143324f14":["ecc11368dc265bfdad90214f8bf5da99016ab1e2","dc5ecd93bcd50b2199757091d526fc1bcbce0db1"],"aedcfb5ebceafe4a0285436fa86269ed6c926442":["70ad682703b8585f5d0a637efec044d57ec05efb","dc5ecd93bcd50b2199757091d526fc1bcbce0db1","9b80ad3438ccc68d1ef441add711ed2143324f14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}