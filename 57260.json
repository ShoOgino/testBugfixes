{"path":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"/dev/null","sourceNew":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    checker.build(core);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["84f1ddc6934c6c11372619b2ab45bab869ef13a6","d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84f1ddc6934c6c11372619b2ab45bab869ef13a6","date":1216657101,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    checker.build(core);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90","date":1216996119,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core.getResourceLoader());\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","pathOld":"src/test/org/apache/solr/spelling/IndexBasedSpellCheckerTest#testAlternateDistance().mjava","sourceNew":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","sourceOld":"  public void testAlternateDistance() throws Exception {\n    TestSpellChecker checker = new TestSpellChecker();\n    NamedList spellchecker = new NamedList();\n    spellchecker.add(\"classname\", IndexBasedSpellChecker.class.getName());\n\n    File tmpDir = new File(System.getProperty(\"java.io.tmpdir\"));\n    File indexDir = new File(tmpDir, \"spellingIdx\" + new Date().getTime());\n    indexDir.mkdirs();\n    spellchecker.add(AbstractLuceneSpellChecker.INDEX_DIR, indexDir.getAbsolutePath());\n    spellchecker.add(IndexBasedSpellChecker.FIELD, \"title\");\n    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);\n    spellchecker.add(AbstractLuceneSpellChecker.STRING_DISTANCE, JaroWinklerDistance.class.getName());\n    SolrCore core = h.getCore();\n    String dictName = checker.init(spellchecker, core);\n    assertTrue(dictName + \" is not equal to \" + SolrSpellChecker.DEFAULT_DICTIONARY_NAME,\n            dictName.equals(SolrSpellChecker.DEFAULT_DICTIONARY_NAME) == true);\n    RefCounted<SolrIndexSearcher> holder = core.getSearcher();\n    SolrIndexSearcher searcher = holder.get();\n    try {\n    checker.build(core, searcher);\n    SpellChecker sc = checker.getSpellChecker();\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    StringDistance sd = sc.getStringDistance();\n    assertTrue(\"sd is null and it shouldn't be\", sd != null);\n    assertTrue(\"sd is not an instance of \" + JaroWinklerDistance.class.getName(), sd instanceof JaroWinklerDistance);\n    } finally {\n      holder.decref();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"84f1ddc6934c6c11372619b2ab45bab869ef13a6":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["84f1ddc6934c6c11372619b2ab45bab869ef13a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["84f1ddc6934c6c11372619b2ab45bab869ef13a6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"84f1ddc6934c6c11372619b2ab45bab869ef13a6":["d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"d6a7ae0a5e41f95f1e5771fcbbe60d9bdba7be90":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}