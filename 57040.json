{"path":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","commits":[{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder, boolean topScorer) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a2b7a4c3442f9d6e937213f4661f316485108c8","date":1304351258,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0d986f42c7320fce5b6ba6a767c160289c738a","date":1304428044,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue());\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.quickSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      final Bits delDocs = reader.getDeletedDocs();\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(delDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(delDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes());\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {\n            // term does exist, but has no positions\n            throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n          } else {\n            // term does not exist\n            return null;\n          }\n        }\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,\n            reader.norms(field));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,\n              reader.norms(field));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0952c55e47c70ea2d8c8e2b634da066f9bde4e38","date":1310506639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      assert !terms.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      if (terms.size() == 0)\t\t\t  // optimize zero-term case\n        return null;\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery.PhraseWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert !terms.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = acceptDocs;\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      assert !terms.isEmpty();\n      final IndexReader reader = context.reader;\n      final Bits liveDocs = reader.getLiveDocs();\n      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];\n      for (int i = 0; i < terms.size(); i++) {\n        final Term t = terms.get(i);\n        final TermState state = states[i].get(context.ord);\n        if (state == null) { /* term doesnt exist in this segment */\n          assert termNotInReader(reader, field, t.bytes()) : \"no termstate found but term exists in reader\";\n          return null;\n        }\n        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,\n                                                                     t.field(),\n                                                                     t.bytes(),\n                                                                     state);\n        // PhraseQuery on a field that did not index\n        // positions.\n        if (postingsEnum == null) {\n          assert (reader.termDocsEnum(liveDocs, t.field(), t.bytes(), state) != null) : \"termstate found but no term exists in reader\";\n          // term does exist, but has no positions\n          throw new IllegalStateException(\"field \\\"\" + t.field() + \"\\\" was indexed without position data; cannot run PhraseQuery (term=\" + t.text() + \")\");\n        }\n        // get the docFreq without seeking\n        TermsEnum te = reader.fields().terms(field).getThreadTermsEnum();\n        te.seekExact(t.bytes(), state);\n        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, te.docFreq(), positions.get(i).intValue(), t);\n      }\n\n      // sort by increasing docFreq order\n      if (slop == 0) {\n        ArrayUtil.mergeSort(postingsFreqs);\n      }\n\n      if (slop == 0) {\t\t\t\t  // optimize exact case\n        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity.exactDocScorer(stats, field, context));\n        if (s.noDocs) {\n          return null;\n        } else {\n          return s;\n        }\n      } else {\n        return\n          new SloppyPhraseScorer(this, postingsFreqs, slop, similarity.sloppyDocScorer(stats, field, context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2a0d986f42c7320fce5b6ba6a767c160289c738a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","0f3cee3d20b0c786e6fca20539454262e29edcab"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["817d8435e9135b756f08ce6710ab0baac51bdf88","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","2a0d986f42c7320fce5b6ba6a767c160289c738a"],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["6a2b7a4c3442f9d6e937213f4661f316485108c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["0952c55e47c70ea2d8c8e2b634da066f9bde4e38"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["0f3cee3d20b0c786e6fca20539454262e29edcab","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"0952c55e47c70ea2d8c8e2b634da066f9bde4e38":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","6a2b7a4c3442f9d6e937213f4661f316485108c8","868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"6a2b7a4c3442f9d6e937213f4661f316485108c8":["2a0d986f42c7320fce5b6ba6a767c160289c738a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"2a0d986f42c7320fce5b6ba6a767c160289c738a":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}