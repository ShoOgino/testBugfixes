{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#processMessage(CloudState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private CloudState processMessage(CloudState cloudState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        cloudState = updateState(cloudState, message);\n      } else if (DELETECORE.equals(operation)) {\n        cloudState = removeCore(cloudState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        cloudState = setShardLeader(cloudState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return cloudState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4a1e513a6300abab05d02fe7fddc0b2015359c","date":1346241963,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        final String leaderUrl = ZkCoreNodeProps.getCoreUrl(baseUrl, coreName);\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), leaderUrl);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        final String leaderUrl = ZkCoreNodeProps.getCoreUrl(baseUrl, coreName);\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), leaderUrl);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (!baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb\n            .append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP), sb.toString());\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.get(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.get(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.get(ZkStateReader.COLLECTION_PROP),\n            message.get(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"587bce86f07b072818f585d0fd32bb3fc7a1c647","date":1366063632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        if( isLegacy(message.getStr(\"collection\"))) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.equals(operation)){\n        clusterState = addReplica(clusterState,message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        if( isLegacy(message.getStr(\"collection\"))) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.equals(operation)){\n        clusterState = addReplica(clusterState,message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        clusterState = updateState(clusterState, message);\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (\"state\".equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (\"createshard\".equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (\"updateshardstate\".equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"################Quit command receive\");\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8295a0e649f894ba19be89ef3b8887648978525f","date":1396508870,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"################Quit command receive\");\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else {\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d996c36bf85996da326201b915c87d41449d7f5","date":1403084374,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        if(myId.equals( message.get(\"id\"))){\n          log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n          overseerCollectionProcessor.close();\n          close();\n        } else {\n          log.warn(\"Overseer received wrong QUIT message {}\", message);\n        }\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e57c73924f3b8c19defa62e96bfa34a4922d49c2","date":1403106358,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        if(myId.equals( message.get(\"id\"))){\n          log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n          overseerCollectionProcessor.close();\n          close();\n        } else {\n          log.warn(\"Overseer received wrong QUIT message {}\", message);\n        }\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n        overseerCollectionProcessor.close();\n        close();\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      if (STATE.equals(operation)) {\n        if( isLegacy( clusterProps )) {\n          clusterState = updateState(clusterState, message);\n        } else {\n          clusterState = updateStateNew(clusterState, message);\n        }\n      } else if (DELETECORE.equals(operation)) {\n        clusterState = removeCore(clusterState, message);\n      } else if (REMOVECOLLECTION.equals(operation)) {\n        clusterState = removeCollection(clusterState, message);\n      } else if (REMOVESHARD.equals(operation)) {\n        clusterState = removeShard(clusterState, message);\n      } else if (ZkStateReader.LEADER_PROP.equals(operation)) {\n\n        StringBuilder sb = new StringBuilder();\n        String baseUrl = message.getStr(ZkStateReader.BASE_URL_PROP);\n        String coreName = message.getStr(ZkStateReader.CORE_NAME_PROP);\n        sb.append(baseUrl);\n        if (baseUrl != null && !baseUrl.endsWith(\"/\")) sb.append(\"/\");\n        sb.append(coreName == null ? \"\" : coreName);\n        if (!(sb.substring(sb.length() - 1).equals(\"/\"))) sb.append(\"/\");\n        clusterState = setShardLeader(clusterState,\n            message.getStr(ZkStateReader.COLLECTION_PROP),\n            message.getStr(ZkStateReader.SHARD_ID_PROP),\n            sb.length() > 0 ? sb.toString() : null);\n\n      } else if (CREATESHARD.equals(operation)) {\n        clusterState = createShard(clusterState, message);\n      } else if (UPDATESHARDSTATE.equals(operation))  {\n        clusterState = updateShardState(clusterState, message);\n      } else if (OverseerCollectionProcessor.CREATECOLLECTION.equals(operation)) {\n         clusterState = buildCollection(clusterState, message);\n      } else if(ADDREPLICA.isEqual(operation)){\n        clusterState = createReplica(clusterState, message);\n      } else if (Overseer.ADD_ROUTING_RULE.equals(operation)) {\n        clusterState = addRoutingRule(clusterState, message);\n      } else if (Overseer.REMOVE_ROUTING_RULE.equals(operation))  {\n        clusterState = removeRoutingRule(clusterState, message);\n      } else if(CLUSTERPROP.isEqual(operation)){\n           handleProp(message);\n      } else if( QUIT.equals(operation)){\n        if(myId.equals( message.get(\"id\"))){\n          log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n          overseerCollectionProcessor.close();\n          close();\n        } else {\n          log.warn(\"Overseer received wrong QUIT message {}\", message);\n        }\n      } else{\n        throw new RuntimeException(\"unknown operation:\" + operation\n            + \" contents:\" + message.getProperties());\n      }\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESLICEUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESLICEUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESLICEUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfb6f3c8c119796b6a4ca83753599e3064b65305","date":1416760830,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","sourceOld":"    private ClusterState processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            clusterState = buildCollection(clusterState, message);\n            break;\n          case DELETE:\n            clusterState = removeCollection(clusterState, message);\n            break;\n          case CREATESHARD:\n            clusterState = createShard(clusterState, message);\n            break;\n          case DELETESHARD:\n            clusterState = removeShard(clusterState, message);\n            break;\n          case ADDREPLICA:\n            clusterState = createReplica(clusterState, message);\n            break;\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            clusterState = addReplicaProp(clusterState, message);\n            break;\n          case DELETEREPLICAPROP:\n            clusterState = deleteReplicaProp(clusterState, message);\n            break;\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              clusterState = newState(clusterState, singletonMap(collName, dProp.getDocCollection()));\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              if (isLegacy(clusterProps)) {\n                clusterState = updateState(clusterState, message);\n              } else {\n                clusterState = updateStateNew(clusterState, message);\n              }\n              break;\n            case LEADER:\n              clusterState = setShardLeader(clusterState, message);\n              break;\n            case DELETECORE:\n              clusterState = removeCore(clusterState, message);\n              break;\n            case ADDROUTINGRULE:\n              clusterState = addRoutingRule(clusterState, message);\n              break;\n            case REMOVEROUTINGRULE:\n              clusterState = removeRoutingRule(clusterState, message);\n              break;\n            case UPDATESHARDSTATE:\n              clusterState = updateShardState(clusterState, message);\n              break;\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              clusterState = buildCollection(clusterState, message);\n              break;\n            case REMOVECOLLECTION:\n              clusterState = removeCollection(clusterState, message);\n              break;\n            case REMOVESHARD:\n              clusterState = removeShard(clusterState, message);\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return clusterState;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String,int).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation, int queueSize) {\n      log.info(\"processMessage: queueSize: {}, message = {}\", queueSize, message);\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(this, clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30b7bf64aeb00a25d1c4bf089c3943e576a38e17","date":1419334479,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","date":1419334852,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).removeReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":["03f6fef27e0d27edc875c720e6ce5db17480a562"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f50c561548cfceea8b9255e35f632714c274b8","date":1427543237,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction != null) {\n          switch (overseerAction) {\n            case STATE:\n              return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n            case LEADER:\n              return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n            case DELETECORE:\n              return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n            case ADDROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n            case REMOVEROUTINGRULE:\n              return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n            case UPDATESHARDSTATE:\n              return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n            case QUIT:\n              if (myId.equals(message.get(\"id\"))) {\n                log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n                overseerCollectionProcessor.close();\n                close();\n              } else {\n                log.warn(\"Overseer received wrong QUIT message {}\", message);\n              }\n              break;\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        } else  {\n          // merely for back-compat where overseer action names were different from the ones\n          // specified in CollectionAction. See SOLR-6115. Remove this in 5.0\n          switch (operation) {\n            case OverseerCollectionProcessor.CREATECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n            case REMOVECOLLECTION:\n              return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n            case REMOVESHARD:\n              return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n            default:\n              throw new RuntimeException(\"unknown operation:\" + operation\n                  + \" contents:\" + message.getProperties());\n          }\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6398c01b0e06ba3aa3a96d549077877414f9f8","date":1429701153,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case CLUSTERPROP:\n            handleProp(message);\n            break;\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          case MIGRATESTATEFORMAT:\n            return new ClusterStateMutator(reader).migrateStateFormat(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          case MIGRATESTATEFORMAT:\n            return new ClusterStateMutator(reader).migrateStateFormat(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          case MIGRATESTATEFORMAT:\n            return new ClusterStateMutator(reader).migrateStateFormat(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4820e7931c05e4eb25ac34917774fbacab59c3a3","date":1454991883,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private ZkWriteCommand processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message);\n          case DELETE:\n            return new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message);\n          case CREATESHARD:\n            return new CollectionMutator(getZkStateReader()).createShard(clusterState, message);\n          case DELETESHARD:\n            return new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message);\n          case ADDREPLICA:\n            return new SliceMutator(getZkStateReader()).addReplica(clusterState, message);\n          case ADDREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message);\n          case DELETEREPLICAPROP:\n            return new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message);\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return new ZkWriteCommand(collName, dProp.getDocCollection());\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return new CollectionMutator(reader).modifyCollection(clusterState,message);\n          case MIGRATESTATEFORMAT:\n            return new ClusterStateMutator(reader).migrateStateFormat(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return new ReplicaMutator(getZkStateReader()).setState(clusterState, message);\n          case LEADER:\n            return new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message);\n          case DELETECORE:\n            return new SliceMutator(getZkStateReader()).removeReplica(clusterState, message);\n          case ADDROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message);\n          case REMOVEROUTINGRULE:\n            return new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message);\n          case UPDATESHARDSTATE:\n            return new SliceMutator(getZkStateReader()).updateShardState(clusterState, message);\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return ZkStateWriter.NO_OP;\n    }\n\n","bugFix":null,"bugIntro":["f7e7599efe704cd8a873a909e546525ace4b5502"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {}\", LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(\"id\"))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7e7599efe704cd8a873a909e546525ace4b5502","date":1491388304,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator(getZkStateReader()).downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getZkStateReader()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getZkStateReader()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(reader).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(reader).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getZkStateReader()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getZkStateReader()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              if (log.isInfoEnabled()) {\n                log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              }\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#processMessage(ClusterState,ZkNodeProps,String).mjava","sourceNew":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).modifyCollection(clusterState,message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              if (log.isInfoEnabled()) {\n                log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              }\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","sourceOld":"    private List<ZkWriteCommand> processMessage(ClusterState clusterState,\n        final ZkNodeProps message, final String operation) {\n      CollectionParams.CollectionAction collectionAction = CollectionParams.CollectionAction.get(operation);\n      if (collectionAction != null) {\n        switch (collectionAction) {\n          case CREATE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).createCollection(clusterState, message));\n          case DELETE:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).deleteCollection(clusterState, message));\n          case CREATESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).createShard(clusterState, message));\n          case DELETESHARD:\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).deleteShard(clusterState, message));\n          case ADDREPLICA:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addReplica(clusterState, message));\n          case ADDREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).addReplicaProperty(clusterState, message));\n          case DELETEREPLICAPROP:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).deleteReplicaProperty(clusterState, message));\n          case BALANCESHARDUNIQUE:\n            ExclusiveSliceProperty dProp = new ExclusiveSliceProperty(clusterState, message);\n            if (dProp.balanceProperty()) {\n              String collName = message.getStr(ZkStateReader.COLLECTION_PROP);\n              return Collections.singletonList(new ZkWriteCommand(collName, dProp.getDocCollection()));\n            }\n            break;\n          case MODIFYCOLLECTION:\n            CollectionsHandler.verifyRuleParams(zkController.getCoreContainer() ,message.getProperties());\n            return Collections.singletonList(new CollectionMutator(getSolrCloudManager()).modifyCollection(clusterState,message));\n          case MIGRATESTATEFORMAT:\n            return Collections.singletonList(new ClusterStateMutator(getSolrCloudManager()).migrateStateFormat(clusterState, message));\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation\n                + \" contents:\" + message.getProperties());\n        }\n      } else {\n        OverseerAction overseerAction = OverseerAction.get(operation);\n        if (overseerAction == null) {\n          throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n        switch (overseerAction) {\n          case STATE:\n            return Collections.singletonList(new ReplicaMutator(getSolrCloudManager()).setState(clusterState, message));\n          case LEADER:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).setShardLeader(clusterState, message));\n          case DELETECORE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeReplica(clusterState, message));\n          case ADDROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).addRoutingRule(clusterState, message));\n          case REMOVEROUTINGRULE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).removeRoutingRule(clusterState, message));\n          case UPDATESHARDSTATE:\n            return Collections.singletonList(new SliceMutator(getSolrCloudManager()).updateShardState(clusterState, message));\n          case QUIT:\n            if (myId.equals(message.get(ID))) {\n              if (log.isInfoEnabled()) {\n                log.info(\"Quit command received {} {}\", message, LeaderElector.getNodeName(myId));\n              }\n              overseerCollectionConfigSetProcessor.close();\n              close();\n            } else {\n              log.warn(\"Overseer received wrong QUIT message {}\", message);\n            }\n            break;\n          case DOWNNODE:\n            return new NodeMutator().downNode(clusterState, message);\n          default:\n            throw new RuntimeException(\"unknown operation:\" + operation + \" contents:\" + message.getProperties());\n        }\n      }\n\n      return Collections.singletonList(ZkStateWriter.NO_OP);\n    }\n\n","bugFix":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["587bce86f07b072818f585d0fd32bb3fc7a1c647","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["7d996c36bf85996da326201b915c87d41449d7f5"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"8295a0e649f894ba19be89ef3b8887648978525f":["5b15576cafd8b5d06857055c28f26912321937e3"],"f7e7599efe704cd8a873a909e546525ace4b5502":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"02f50c561548cfceea8b9255e35f632714c274b8":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f7e7599efe704cd8a873a909e546525ace4b5502"],"30b7bf64aeb00a25d1c4bf089c3943e576a38e17":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["30c688f7052130cef7bd419c85e3c5be214f7b9e","dc2bafa00000be70227a04c29e3f885ff41e531d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["d6f074e73200c07d54f242d3880a8da5a35ff97b","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["02f50c561548cfceea8b9255e35f632714c274b8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4820e7931c05e4eb25ac34917774fbacab59c3a3","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"da888af1ab894358122a22229051215f58cf4d54":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"7d996c36bf85996da326201b915c87d41449d7f5":["8295a0e649f894ba19be89ef3b8887648978525f"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":["8295a0e649f894ba19be89ef3b8887648978525f","7d996c36bf85996da326201b915c87d41449d7f5"],"ad4957cde742defe6db19689abdc267c5d948066":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"9f45f67a018421da088ea39274f23ad5d339b97d":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["3a4a1e513a6300abab05d02fe7fddc0b2015359c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f","02f50c561548cfceea8b9255e35f632714c274b8"],"5b15576cafd8b5d06857055c28f26912321937e3":["9f45f67a018421da088ea39274f23ad5d339b97d"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5eb2511ababf862ea11e10761c70ee560cd84510":["9f45f67a018421da088ea39274f23ad5d339b97d","8295a0e649f894ba19be89ef3b8887648978525f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["ad4957cde742defe6db19689abdc267c5d948066"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"3a4a1e513a6300abab05d02fe7fddc0b2015359c":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["da888af1ab894358122a22229051215f58cf4d54"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["fa64435b5902ce266c23755a4a00691a3285dab8"],"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["4820e7931c05e4eb25ac34917774fbacab59c3a3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","55980207f1977bd1463465de1659b821347e2fa8"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"4820e7931c05e4eb25ac34917774fbacab59c3a3":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["dc2bafa00000be70227a04c29e3f885ff41e531d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["da888af1ab894358122a22229051215f58cf4d54","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"8295a0e649f894ba19be89ef3b8887648978525f":["7d996c36bf85996da326201b915c87d41449d7f5","e57c73924f3b8c19defa62e96bfa34a4922d49c2","5eb2511ababf862ea11e10761c70ee560cd84510"],"f7e7599efe704cd8a873a909e546525ace4b5502":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"02f50c561548cfceea8b9255e35f632714c274b8":["3b6398c01b0e06ba3aa3a96d549077877414f9f8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"bfb6f3c8c119796b6a4ca83753599e3064b65305":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["ad4957cde742defe6db19689abdc267c5d948066"],"30b7bf64aeb00a25d1c4bf089c3943e576a38e17":["da5ef0533dae1e5782b071a5484e1b9f3c28fc5f"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"da888af1ab894358122a22229051215f58cf4d54":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["9f45f67a018421da088ea39274f23ad5d339b97d","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"7d996c36bf85996da326201b915c87d41449d7f5":["30c688f7052130cef7bd419c85e3c5be214f7b9e","e57c73924f3b8c19defa62e96bfa34a4922d49c2"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["bfb6f3c8c119796b6a4ca83753599e3064b65305"],"e57c73924f3b8c19defa62e96bfa34a4922d49c2":[],"ad4957cde742defe6db19689abdc267c5d948066":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"9f45f67a018421da088ea39274f23ad5d339b97d":["5b15576cafd8b5d06857055c28f26912321937e3","5eb2511ababf862ea11e10761c70ee560cd84510"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","fa64435b5902ce266c23755a4a00691a3285dab8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"5b15576cafd8b5d06857055c28f26912321937e3":["8295a0e649f894ba19be89ef3b8887648978525f"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"3a4a1e513a6300abab05d02fe7fddc0b2015359c":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fa64435b5902ce266c23755a4a00691a3285dab8":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["f7e7599efe704cd8a873a909e546525ace4b5502"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"da5ef0533dae1e5782b071a5484e1b9f3c28fc5f":["02f50c561548cfceea8b9255e35f632714c274b8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","3a4a1e513a6300abab05d02fe7fddc0b2015359c","8fd5be977c105554c6a7b68afcdbc511439723ab"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["f03e4bed5023ec3ef93a771b8888cae991cf448d","6d2dadc1f5ca8703d8659f4964961f9967935d75","e5fa6615014cd2288fe930f8c8bb726f9504961d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","f03e4bed5023ec3ef93a771b8888cae991cf448d","54ca69905c5d9d1529286f06ab1d12c68f6c13cb","e57c73924f3b8c19defa62e96bfa34a4922d49c2","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5eb2511ababf862ea11e10761c70ee560cd84510","55980207f1977bd1463465de1659b821347e2fa8","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}