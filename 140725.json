{"path":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","pathOld":"/dev/null","sourceNew":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.EMPTY_LIST)) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.EMPTY_LIST);\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.EMPTY_LIST);\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a147de1036a146a6a327bc9e3c974b19274f406","date":1386024334,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.EMPTY_LIST)) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.EMPTY_LIST);\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.EMPTY_LIST);\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/solr-morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.SolrCell#SolrCell(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","sourceOld":"    public SolrCell(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      this.schema = locator.getIndexSchema();\n      Preconditions.checkNotNull(schema);\n      LOG.trace(\"Solr schema: \\n{}\", Joiner.on(\"\\n\").join(new TreeMap(schema.getFields()).values()));\n\n      ListMultimap<String, String> cellParams = ArrayListMultimap.create();\n      String uprefix = getConfigs().getString(config, ExtractingParams.UNKNOWN_FIELD_PREFIX, null);\n      if (uprefix != null) {\n        cellParams.put(ExtractingParams.UNKNOWN_FIELD_PREFIX, uprefix);\n      }\n      for (String capture : getConfigs().getStringList(config, ExtractingParams.CAPTURE_ELEMENTS, Collections.<String>emptyList())) {\n        cellParams.put(ExtractingParams.CAPTURE_ELEMENTS, capture);\n      }\n      Config fmapConfig = getConfigs().getConfig(config, \"fmap\", null);\n      if (fmapConfig != null) {\n        for (Map.Entry<String, Object> entry : fmapConfig.root().unwrapped().entrySet()) {\n          cellParams.put(ExtractingParams.MAP_PREFIX + entry.getKey(), entry.getValue().toString());\n        }\n      }\n      String captureAttributes = getConfigs().getString(config, ExtractingParams.CAPTURE_ATTRIBUTES, null);\n      if (captureAttributes != null) {\n        cellParams.put(ExtractingParams.CAPTURE_ATTRIBUTES, captureAttributes);\n      }\n      String lowerNames = getConfigs().getString(config, ExtractingParams.LOWERNAMES, null);\n      if (lowerNames != null) {\n        cellParams.put(ExtractingParams.LOWERNAMES, lowerNames);\n      }\n      String defaultField = getConfigs().getString(config, ExtractingParams.DEFAULT_FIELD, null);\n      if (defaultField != null) {\n        cellParams.put(ExtractingParams.DEFAULT_FIELD, defaultField);\n      }\n      xpathExpr = getConfigs().getString(config, ExtractingParams.XPATH_EXPRESSION, null);\n      if (xpathExpr != null) {\n        cellParams.put(ExtractingParams.XPATH_EXPRESSION, xpathExpr);\n      }\n      \n      this.dateFormats = getConfigs().getStringList(config, \"dateFormats\", new ArrayList<String>(DateUtil.DEFAULT_DATE_FORMATS));\n      \n      String handlerStr = getConfigs().getString(config, \"solrContentHandlerFactory\", TrimSolrContentHandlerFactory.class.getName());\n      Class<? extends SolrContentHandlerFactory> factoryClass;\n      try {\n        factoryClass = (Class<? extends SolrContentHandlerFactory>)Class.forName(handlerStr);\n      } catch (ClassNotFoundException cnfe) {\n        throw new MorphlineCompilationException(\"Could not find class \"\n          + handlerStr + \" to use for \" + \"solrContentHandlerFactory\", config, cnfe);\n      }\n      this.solrContentHandlerFactory = getSolrContentHandlerFactory(factoryClass, dateFormats, config);\n\n      this.mediaTypeToParserMap = new HashMap<MediaType, Parser>();\n      //MimeTypes mimeTypes = MimeTypes.getDefaultMimeTypes(); // FIXME getMediaTypeRegistry.normalize() \n\n      List<? extends Config> parserConfigs = getConfigs().getConfigList(config, \"parsers\");\n      for (Config parserConfig : parserConfigs) {\n        String parserClassName = getConfigs().getString(parserConfig, \"parser\");\n        \n        Object obj;\n        try {\n          obj = Class.forName(parserClassName).newInstance();\n        } catch (Throwable e) {\n          throw new MorphlineCompilationException(\"Cannot instantiate Tika parser: \" + parserClassName, config, e);\n        }\n        if (!(obj instanceof Parser)) {\n          throw new MorphlineCompilationException(\"Tika parser \" + obj.getClass().getName()\n              + \" must be an instance of class \" + Parser.class.getName(), config);\n        }\n        Parser parser = (Parser) obj;\n        this.parsers.add(parser);\n\n        List<String> mediaTypes = getConfigs().getStringList(parserConfig, SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n        for (String mediaTypeStr : mediaTypes) {\n          MediaType mediaType = parseMediaType(mediaTypeStr);\n          addSupportedMimeType(mediaTypeStr);\n          this.mediaTypeToParserMap.put(mediaType, parser);\n        }\n        \n        if (!parserConfig.hasPath(SUPPORTED_MIME_TYPES)) {\n          for (MediaType mediaType : parser.getSupportedTypes(new ParseContext())) {\n            mediaType = mediaType.getBaseType();\n            addSupportedMimeType(mediaType.toString());\n            this.mediaTypeToParserMap.put(mediaType, parser);\n          }        \n          List<String> extras = getConfigs().getStringList(parserConfig, ADDITIONAL_SUPPORTED_MIME_TYPES, Collections.<String>emptyList());\n          for (String mediaTypeStr : extras) {\n            MediaType mediaType = parseMediaType(mediaTypeStr);\n            addSupportedMimeType(mediaTypeStr);\n            this.mediaTypeToParserMap.put(mediaType, parser);            \n          }\n        }\n      }\n      //LOG.info(\"mediaTypeToParserMap=\"+mediaTypeToParserMap);\n\n      Map<String, String[]> tmp = new HashMap();\n      for (Map.Entry<String,Collection<String>> entry : cellParams.asMap().entrySet()) {\n        tmp.put(entry.getKey(), entry.getValue().toArray(new String[entry.getValue().size()]));\n      }\n      this.solrParams = new MultiMapSolrParams(tmp);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["0a147de1036a146a6a327bc9e3c974b19274f406"],"0a147de1036a146a6a327bc9e3c974b19274f406":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a147de1036a146a6a327bc9e3c974b19274f406":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["0a147de1036a146a6a327bc9e3c974b19274f406"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}