{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","sourceNew":"  @Test\n  public void testArgsParserTypicalUse() {\n    String[] args = new String[] { \n        \"--input-list\", \"file:///tmp\",\n        \"--morphline-file\", MORPHLINE_FILE,\n        \"--morphline-id\", \"morphline_xyz\",\n        \"--output-dir\", \"file:/tmp/foo\",\n        \"--solr-home-dir\", MINIMR_INSTANCE_DIR.getPath(),\n        \"--mappers\", \"10\", \n        \"--reducers\", \"9\", \n        \"--fanout\", \"8\", \n        \"--max-segments\", \"7\", \n        \"--shards\", \"1\",\n        \"--verbose\", \n        \"file:///home\",\n        \"file:///dev\",\n        };\n    Integer res = parser.parseArgs(args, conf, opts);\n    assertNull(res != null ? res.toString() : \"\", res);\n    assertEquals(Collections.singletonList(new Path(\"file:///tmp\")), opts.inputLists);\n    assertEquals(new Path(\"file:/tmp/foo\"), opts.outputDir);\n    assertEquals(new File(MINIMR_INSTANCE_DIR.getPath()), opts.solrHomeDir);\n    assertEquals(10, opts.mappers);\n    assertEquals(9, opts.reducers);\n    assertEquals(8, opts.fanout);\n    assertEquals(7, opts.maxSegments);\n    assertEquals(new Integer(1), opts.shards);\n    assertEquals(null, opts.fairSchedulerPool);\n    assertTrue(opts.isVerbose);\n    assertEquals(Arrays.asList(new Path(\"file:///home\"), new Path(\"file:///dev\")), opts.inputFiles);\n    assertEquals(RetainMostRecentUpdateConflictResolver.class.getName(), opts.updateConflictResolver);\n    assertEquals(MORPHLINE_FILE, opts.morphlineFile.getPath());\n    assertEquals(\"morphline_xyz\", opts.morphlineId);\n    assertEmptySystemErrAndEmptySystemOut();\n  }\n\n","sourceOld":"  @Test\n  public void testArgsParserTypicalUse() {\n    String[] args = new String[] { \n        \"--input-list\", \"file:///tmp\",\n        \"--morphline-file\", MORPHLINE_FILE,\n        \"--morphline-id\", \"morphline_xyz\",\n        \"--output-dir\", \"file:/tmp/foo\",\n        \"--solr-home-dir\", MINIMR_INSTANCE_DIR.getPath(),\n        \"--mappers\", \"10\", \n        \"--reducers\", \"9\", \n        \"--fanout\", \"8\", \n        \"--max-segments\", \"7\", \n        \"--shards\", \"1\",\n        \"--verbose\", \n        \"file:///home\",\n        \"file:///dev\",\n        };\n    Integer res = parser.parseArgs(args, conf, opts);\n    assertNull(res != null ? res.toString() : \"\", res);\n    assertEquals(Collections.singletonList(new Path(\"file:///tmp\")), opts.inputLists);\n    assertEquals(new Path(\"file:/tmp/foo\"), opts.outputDir);\n    assertEquals(new File(MINIMR_INSTANCE_DIR.getPath()), opts.solrHomeDir);\n    assertEquals(10, opts.mappers);\n    assertEquals(9, opts.reducers);\n    assertEquals(8, opts.fanout);\n    assertEquals(7, opts.maxSegments);\n    assertEquals(new Integer(1), opts.shards);\n    assertEquals(null, opts.fairSchedulerPool);\n    assertTrue(opts.isVerbose);\n    assertEquals(Arrays.asList(new Path(\"file:///home\"), new Path(\"file:///dev\")), opts.inputFiles);\n    assertEquals(RetainMostRecentUpdateConflictResolver.class.getName(), opts.updateConflictResolver);\n    assertEquals(MORPHLINE_FILE, opts.morphlineFile.getPath());\n    assertEquals(\"morphline_xyz\", opts.morphlineId);\n    assertEmptySystemErrAndEmptySystemOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testArgsParserTypicalUse() {\n    String[] args = new String[] { \n        \"--input-list\", \"file:///tmp\",\n        \"--morphline-file\", MORPHLINE_FILE,\n        \"--morphline-id\", \"morphline_xyz\",\n        \"--output-dir\", \"file:/tmp/foo\",\n        \"--solr-home-dir\", MINIMR_INSTANCE_DIR.getPath(),\n        \"--mappers\", \"10\", \n        \"--reducers\", \"9\", \n        \"--fanout\", \"8\", \n        \"--max-segments\", \"7\", \n        \"--shards\", \"1\",\n        \"--verbose\", \n        \"file:///home\",\n        \"file:///dev\",\n        };\n    Integer res = parser.parseArgs(args, conf, opts);\n    assertNull(res != null ? res.toString() : \"\", res);\n    assertEquals(Collections.singletonList(new Path(\"file:///tmp\")), opts.inputLists);\n    assertEquals(new Path(\"file:/tmp/foo\"), opts.outputDir);\n    assertEquals(new File(MINIMR_INSTANCE_DIR.getPath()), opts.solrHomeDir);\n    assertEquals(10, opts.mappers);\n    assertEquals(9, opts.reducers);\n    assertEquals(8, opts.fanout);\n    assertEquals(7, opts.maxSegments);\n    assertEquals(new Integer(1), opts.shards);\n    assertEquals(null, opts.fairSchedulerPool);\n    assertTrue(opts.isVerbose);\n    assertEquals(Arrays.asList(new Path(\"file:///home\"), new Path(\"file:///dev\")), opts.inputFiles);\n    assertEquals(RetainMostRecentUpdateConflictResolver.class.getName(), opts.updateConflictResolver);\n    assertEquals(MORPHLINE_FILE, opts.morphlineFile.getPath());\n    assertEquals(\"morphline_xyz\", opts.morphlineId);\n    assertEmptySystemErrAndEmptySystemOut();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testArgsParserTypicalUse() {\n    String[] args = new String[] { \n        \"--input-list\", \"file:///tmp\",\n        \"--morphline-file\", MORPHLINE_FILE,\n        \"--morphline-id\", \"morphline_xyz\",\n        \"--output-dir\", \"file:/tmp/foo\",\n        \"--solr-home-dir\", MINIMR_INSTANCE_DIR.getPath(),\n        \"--mappers\", \"10\", \n        \"--reducers\", \"9\", \n        \"--fanout\", \"8\", \n        \"--max-segments\", \"7\", \n        \"--shards\", \"1\",\n        \"--verbose\", \n        \"file:///home\",\n        \"file:///dev\",\n        };\n    Integer res = parser.parseArgs(args, conf, opts);\n    assertNull(res != null ? res.toString() : \"\", res);\n    assertEquals(Collections.singletonList(new Path(\"file:///tmp\")), opts.inputLists);\n    assertEquals(new Path(\"file:/tmp/foo\"), opts.outputDir);\n    assertEquals(new File(MINIMR_INSTANCE_DIR.getPath()), opts.solrHomeDir);\n    assertEquals(10, opts.mappers);\n    assertEquals(9, opts.reducers);\n    assertEquals(8, opts.fanout);\n    assertEquals(7, opts.maxSegments);\n    assertEquals(new Integer(1), opts.shards);\n    assertEquals(null, opts.fairSchedulerPool);\n    assertTrue(opts.isVerbose);\n    assertEquals(Arrays.asList(new Path(\"file:///home\"), new Path(\"file:///dev\")), opts.inputFiles);\n    assertEquals(RetainMostRecentUpdateConflictResolver.class.getName(), opts.updateConflictResolver);\n    assertEquals(MORPHLINE_FILE, opts.morphlineFile.getPath());\n    assertEquals(\"morphline_xyz\", opts.morphlineId);\n    assertEmptySystemErrAndEmptySystemOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MapReduceIndexerToolArgumentParserTest#testArgsParserTypicalUse().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testArgsParserTypicalUse() {\n    String[] args = new String[] { \n        \"--input-list\", \"file:///tmp\",\n        \"--morphline-file\", MORPHLINE_FILE,\n        \"--morphline-id\", \"morphline_xyz\",\n        \"--output-dir\", \"file:/tmp/foo\",\n        \"--solr-home-dir\", MINIMR_INSTANCE_DIR.getPath(),\n        \"--mappers\", \"10\", \n        \"--reducers\", \"9\", \n        \"--fanout\", \"8\", \n        \"--max-segments\", \"7\", \n        \"--shards\", \"1\",\n        \"--verbose\", \n        \"file:///home\",\n        \"file:///dev\",\n        };\n    Integer res = parser.parseArgs(args, conf, opts);\n    assertNull(res != null ? res.toString() : \"\", res);\n    assertEquals(Collections.singletonList(new Path(\"file:///tmp\")), opts.inputLists);\n    assertEquals(new Path(\"file:/tmp/foo\"), opts.outputDir);\n    assertEquals(new File(MINIMR_INSTANCE_DIR.getPath()), opts.solrHomeDir);\n    assertEquals(10, opts.mappers);\n    assertEquals(9, opts.reducers);\n    assertEquals(8, opts.fanout);\n    assertEquals(7, opts.maxSegments);\n    assertEquals(new Integer(1), opts.shards);\n    assertEquals(null, opts.fairSchedulerPool);\n    assertTrue(opts.isVerbose);\n    assertEquals(Arrays.asList(new Path(\"file:///home\"), new Path(\"file:///dev\")), opts.inputFiles);\n    assertEquals(RetainMostRecentUpdateConflictResolver.class.getName(), opts.updateConflictResolver);\n    assertEquals(MORPHLINE_FILE, opts.morphlineFile.getPath());\n    assertEquals(\"morphline_xyz\", opts.morphlineId);\n    assertEmptySystemErrAndEmptySystemOut();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["12109b652e9210b8d58fca47f6c4a725d058a58e","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}