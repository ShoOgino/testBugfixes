{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["072f211dfa8387028bb978d128c35bf9a450bbbf","747dd71fefcbc7142661c25334b74c518fef4d81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","date":1390584048,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrServer(docId);\n    \n    testIndexingWithSuss(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrServer(docId);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    testIndexingWithSuss();\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    testThatCantForwardToLeaderFails();\n  }\n\n","bugFix":null,"bugIntro":["747dd71fefcbc7142661c25334b74c518fef4d81"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrServer(docId);\n    \n    testIndexingWithSuss(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrServer(docId);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrServer(docId);\n    \n    testIndexingWithSuss(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrServer(docId);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrServer(docId);\n    \n    testIndexingWithSuss(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrServer(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 6)\n  public void test() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    \n    waitForRecoveriesToFinish(false);\n    \n    // add a doc, update it, and delete it\n    \n    QueryResponse results;\n    UpdateRequest uReq;\n    long docId = addUpdateDelete();\n    \n    // add 2 docs in a request\n    SolrInputDocument doc1;\n    SolrInputDocument doc2;\n    docId = addTwoDocsInOneRequest(docId);\n    \n    // two deletes\n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId-1));\n    uReq.deleteById(Long.toString(docId-2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId-1));\n    controlClient.deleteById(Long.toString(docId-2));\n    \n    commit();\n    \n    results = query(cloudClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    results = query(controlClient);\n    assertEquals(0, results.getResults().getNumFound());\n    \n    // add two docs together, a 3rd doc and a delete\n    indexr(\"id\", docId++, t1, \"originalcontent\");\n    \n    uReq = new UpdateRequest();\n    doc1 = new SolrInputDocument();\n\n    addFields(doc1, \"id\", docId++);\n    uReq.add(doc1);\n    doc2 = new SolrInputDocument();\n    addFields(doc2, \"id\", docId++);\n    uReq.add(doc2);\n \n    uReq.process(cloudClient);\n    uReq.process(controlClient);\n    \n    uReq = new UpdateRequest();\n    uReq.deleteById(Long.toString(docId - 2)).process(cloudClient);\n    controlClient.deleteById(Long.toString(docId - 2));\n    \n    commit();\n    \n    assertDocCounts(VERBOSE);\n    \n    checkShardConsistency();\n    \n    results = query(controlClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    results = query(cloudClient);\n    assertEquals(2, results.getResults().getNumFound());\n    \n    docId = testIndexQueryDeleteHierarchical(docId);\n    \n    docId = testIndexingDocPerRequestWithHttpSolrClient(docId);\n    \n    testConcurrentIndexing(docId);\n    \n    // TODO: testOptimisticUpdate(results);\n    \n    testDeleteByQueryDistrib();\n    \n    docId = testThatCantForwardToLeaderFails(docId);\n    \n    \n    docId = testIndexingBatchPerRequestWithHttpSolrClient(docId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["bafca15d8e408346a67f4282ad1143b88023893b"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["0ca2b77e0c13ce25852abbdf65e17a1f2bb003cb","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d22ac6a4146774c1bc8400160fc0b6150294e92","637a392e2e05d4e1179ac3c532cfeef0cde977ba","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}