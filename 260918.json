{"path":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","commits":[{"id":"c8f9fd570bc31c72df35ff9374f45131e8e74d0c","date":1415015820,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingParamSet().mjava","sourceNew":"  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithConflictingParamSet(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2d72c3e6563e08675f940d4c74139309c5e3db2","date":1419411068,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","sourceNew":"  /*@Test\n  public void testComponentWithInitParamAndRequestParam(){\n    for (String s : Arrays.asList(\"/dump4\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"param\", \"a\",\"param\",\"b\" ,\"param\",\"c\", \"useParam\",\"a\"), rsp);\n      NamedList def = (NamedList) rsp.getValues().get(\"params\");\n      assertEquals(\"A\", def.get(\"a\"));\n      assertEquals(\"B\", def.get(\"b\"));\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n  }*/\n  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"451cffdb3c3e47d721152b8e904170684a1a9236","date":1420611049,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","sourceNew":"  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","sourceOld":"  /*@Test\n  public void testComponentWithInitParamAndRequestParam(){\n    for (String s : Arrays.asList(\"/dump4\")) {\n      SolrRequestHandler handler = h.getCore().getRequestHandler(s);\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      handler.handleRequest(req(\"param\", \"a\",\"param\",\"b\" ,\"param\",\"c\", \"useParam\",\"a\"), rsp);\n      NamedList def = (NamedList) rsp.getValues().get(\"params\");\n      assertEquals(\"A\", def.get(\"a\"));\n      assertEquals(\"B\", def.get(\"b\"));\n      assertEquals(\"C\", def.get(\"c\"));\n    }\n  }*/\n  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestInitParams#testComponentWithConflictingInitParams().mjava","sourceNew":"  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","sourceOld":"  @Test\n  public void testComponentWithConflictingInitParams(){\n    SolrRequestHandler handler = h.getCore().getRequestHandler(\"/dump2\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    handler.handleRequest(req(\"initArgs\", \"true\"), rsp);\n    NamedList nl = (NamedList) rsp.getValues().get(\"initArgs\");\n    NamedList def = (NamedList) nl.get(PluginInfo.DEFAULTS);\n    assertEquals(\"A1\" ,def.get(\"a\"));\n    def = (NamedList) nl.get(PluginInfo.INVARIANTS);\n    assertEquals(\"B1\" ,def.get(\"b\"));\n    def = (NamedList) nl.get(PluginInfo.APPENDS);\n    assertEquals(Arrays.asList(\"C1\",\"C\") ,def.getAll(\"c\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"451cffdb3c3e47d721152b8e904170684a1a9236":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["451cffdb3c3e47d721152b8e904170684a1a9236"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8f9fd570bc31c72df35ff9374f45131e8e74d0c"],"c8f9fd570bc31c72df35ff9374f45131e8e74d0c":["c2d72c3e6563e08675f940d4c74139309c5e3db2"],"451cffdb3c3e47d721152b8e904170684a1a9236":["e98520789adb1d5ad05afb4956eca0944a929688"],"c2d72c3e6563e08675f940d4c74139309c5e3db2":["451cffdb3c3e47d721152b8e904170684a1a9236"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}