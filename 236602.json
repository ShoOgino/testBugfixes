{"path":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","commits":[{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  // single straight enum\n  private void doTestStraightEnum(List<Term> fieldTerms, IndexReader reader, int uniqueTermCount) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now enum reader=\" + reader);\n    }\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n\n    {\n      // Test straight enum:\n      String field;\n      int termCount = 0;\n      while((field = fieldsEnum.next()) != null) {\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        BytesRef lastText = null;\n        while((text = termsEnum.next()) != null) {\n          Term exp = fieldTerms.get(termCount);\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + field + \":\" + UnicodeUtil.toHexString(text.utf8ToString()));\n            System.out.println(\"       exp=\" + exp.field() + \":\" + UnicodeUtil.toHexString(exp.text().toString()));\n            System.out.println();\n          }\n          if (lastText == null) {\n            lastText = new BytesRef(text);\n          } else {\n            assertTrue(lastText.compareTo(text) < 0);\n            lastText.copy(text);\n          }\n          assertEquals(exp.field(), field);\n          assertEquals(exp.bytes(), text);\n          termCount++;\n        }\n        if (VERBOSE) {\n          System.out.println(\"  no more terms for field=\" + field);\n        }\n      }\n      assertEquals(uniqueTermCount, termCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  // single straight enum\n  private void doTestStraightEnum(List<Term> fieldTerms, IndexReader reader, int uniqueTermCount) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now enum reader=\" + reader);\n    }\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n\n    {\n      // Test straight enum:\n      String field;\n      int termCount = 0;\n      while((field = fieldsEnum.next()) != null) {\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        BytesRef lastText = null;\n        while((text = termsEnum.next()) != null) {\n          Term exp = fieldTerms.get(termCount);\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + field + \":\" + UnicodeUtil.toHexString(text.utf8ToString()));\n            System.out.println(\"       exp=\" + exp.field() + \":\" + UnicodeUtil.toHexString(exp.text().toString()));\n            System.out.println();\n          }\n          if (lastText == null) {\n            lastText = new BytesRef(text);\n          } else {\n            assertTrue(lastText.compareTo(text) < 0);\n            lastText.copy(text);\n          }\n          assertEquals(exp.field(), field);\n          assertEquals(exp.bytes(), text);\n          termCount++;\n        }\n        if (VERBOSE) {\n          System.out.println(\"  no more terms for field=\" + field);\n        }\n      }\n      assertEquals(uniqueTermCount, termCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  // single straight enum\n  private void doTestStraightEnum(List<Term> fieldTerms, IndexReader reader, int uniqueTermCount) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now enum reader=\" + reader);\n    }\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n\n    {\n      // Test straight enum:\n      String field;\n      int termCount = 0;\n      while((field = fieldsEnum.next()) != null) {\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        BytesRef lastText = null;\n        while((text = termsEnum.next()) != null) {\n          Term exp = fieldTerms.get(termCount);\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + field + \":\" + UnicodeUtil.toHexString(text.utf8ToString()));\n            System.out.println(\"       exp=\" + exp.field() + \":\" + UnicodeUtil.toHexString(exp.text().toString()));\n            System.out.println();\n          }\n          if (lastText == null) {\n            lastText = new BytesRef(text);\n          } else {\n            assertTrue(lastText.compareTo(text) < 0);\n            lastText.copy(text);\n          }\n          assertEquals(exp.field(), field);\n          assertEquals(exp.bytes(), text);\n          termCount++;\n        }\n        if (VERBOSE) {\n          System.out.println(\"  no more terms for field=\" + field);\n        }\n      }\n      assertEquals(uniqueTermCount, termCount);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/preflex/TestSurrogates#doTestStraightEnum(List[Term],IndexReader,int).mjava","sourceNew":"  // single straight enum\n  private void doTestStraightEnum(List<Term> fieldTerms, IndexReader reader, int uniqueTermCount) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now enum reader=\" + reader);\n    }\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n\n    {\n      // Test straight enum:\n      String field;\n      int termCount = 0;\n      while((field = fieldsEnum.next()) != null) {\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        BytesRef lastText = null;\n        while((text = termsEnum.next()) != null) {\n          Term exp = fieldTerms.get(termCount);\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + field + \":\" + UnicodeUtil.toHexString(text.utf8ToString()));\n            System.out.println(\"       exp=\" + exp.field() + \":\" + UnicodeUtil.toHexString(exp.text().toString()));\n            System.out.println();\n          }\n          if (lastText == null) {\n            lastText = new BytesRef(text);\n          } else {\n            assertTrue(lastText.compareTo(text) < 0);\n            lastText.copy(text);\n          }\n          assertEquals(exp.field(), field);\n          assertEquals(exp.bytes(), text);\n          termCount++;\n        }\n        if (VERBOSE) {\n          System.out.println(\"  no more terms for field=\" + field);\n        }\n      }\n      assertEquals(uniqueTermCount, termCount);\n    }\n  }\n\n","sourceOld":"  // single straight enum\n  private void doTestStraightEnum(List<Term> fieldTerms, IndexReader reader, int uniqueTermCount) throws IOException {\n\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: top now enum reader=\" + reader);\n    }\n    FieldsEnum fieldsEnum = MultiFields.getFields(reader).iterator();\n\n    {\n      // Test straight enum:\n      String field;\n      int termCount = 0;\n      while((field = fieldsEnum.next()) != null) {\n        TermsEnum termsEnum = fieldsEnum.terms();\n        BytesRef text;\n        BytesRef lastText = null;\n        while((text = termsEnum.next()) != null) {\n          Term exp = fieldTerms.get(termCount);\n          if (VERBOSE) {\n            System.out.println(\"  got term=\" + field + \":\" + UnicodeUtil.toHexString(text.utf8ToString()));\n            System.out.println(\"       exp=\" + exp.field() + \":\" + UnicodeUtil.toHexString(exp.text().toString()));\n            System.out.println();\n          }\n          if (lastText == null) {\n            lastText = new BytesRef(text);\n          } else {\n            assertTrue(lastText.compareTo(text) < 0);\n            lastText.copy(text);\n          }\n          assertEquals(exp.field(), field);\n          assertEquals(exp.bytes(), text);\n          termCount++;\n        }\n        if (VERBOSE) {\n          System.out.println(\"  no more terms for field=\" + field);\n        }\n      }\n      assertEquals(uniqueTermCount, termCount);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["7b91922b55d15444d554721b352861d028eb8278","3242a09f703274d3b9283f2064a1a33064b53a1b"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}