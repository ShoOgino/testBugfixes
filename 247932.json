{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","commits":[{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  public void search(QueryWeight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        scorer.score(collector);\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9900b2c2df4909dc735d4042e21e453057db47","date":1246040088,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","sourceNew":"  public void search(QueryWeight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  public void search(QueryWeight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        scorer.score(collector);\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,Collector).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(QueryWeight,Filter,Collector).mjava","sourceNew":"  public void search(Weight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","sourceOld":"  public void search(QueryWeight weight, Filter filter, Collector collector)\n      throws IOException {\n    \n    if (filter == null) {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        Scorer scorer = weight.scorer(subReaders[i], !collector.acceptsDocsOutOfOrder(), true);\n        if (scorer != null) {\n          scorer.score(collector);\n        }\n      }\n    } else {\n      for (int i = 0; i < subReaders.length; i++) { // search each subreader\n        collector.setNextReader(subReaders[i], docStarts[i]);\n        searchWithFilter(subReaders[i], weight, filter, collector);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a9900b2c2df4909dc735d4042e21e453057db47":["052fac7830290bd38a04cddee1a121ee07656b56"],"fe941135bdfc28c81e20b4d21422f8726af34925":["0a9900b2c2df4909dc735d4042e21e453057db47"],"052fac7830290bd38a04cddee1a121ee07656b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe941135bdfc28c81e20b4d21422f8726af34925"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["052fac7830290bd38a04cddee1a121ee07656b56"],"0a9900b2c2df4909dc735d4042e21e453057db47":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"052fac7830290bd38a04cddee1a121ee07656b56":["0a9900b2c2df4909dc735d4042e21e453057db47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}