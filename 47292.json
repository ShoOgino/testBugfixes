{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a009b1ead486cdd766fc886dccd36621d4f9827","date":1341697311,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new StringReader(query.toString()));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    @Override\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    @Override\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2bf3aaab96a82bcd435e3075d7e79e7c41c11a","date":1363619769,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    @Override\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#parse(CharSequence,CharSequence).mjava","sourceNew":"  /**\n   * Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n   * @param query  the query string to be parsed.\n   * @throws ParseException if the parsing fails\n   */\n  public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n    ReInit(new FastCharStream(new StringReader(query.toString())));\n    try {\n      return TopLevelQuery(field);\n    } catch (ParseException tme) {\n      tme.setQuery(query);\n      throw tme;\n    } catch (Error tme) {\n      Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n      QueryNodeParseException e = new QueryNodeParseException(tme);\n      e.setQuery(query);\n      e.setNonLocalizedMessage(message);\n      throw e;\n    }\n  }\n\n","sourceOld":"     /** Parses a query string, returning a {@link org.apache.lucene.queryparser.flexible.core.nodes.QueryNode}.\n     *  @param query  the query string to be parsed.\n     *  @throws ParseException if the parsing fails\n     */\n    public QueryNode parse(CharSequence query, CharSequence field) throws QueryNodeParseException {\n      ReInit(new FastCharStream(new StringReader(query.toString())));\n      try {\n        // TopLevelQuery is a Query followed by the end-of-input (EOF)\n        QueryNode querynode = TopLevelQuery(field);\n        return querynode;\n      }\n      catch (ParseException tme) {\n            tme.setQuery(query);\n            throw tme;\n      }\n      catch (Error tme) {\n          Message message = new MessageImpl(QueryParserMessages.INVALID_SYNTAX_CANNOT_PARSE, query, tme.getMessage());\n          QueryNodeParseException e = new QueryNodeParseException(tme);\n            e.setQuery(query);\n            e.setNonLocalizedMessage(message);\n            throw e;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["2acf500f78aa12b92e371fd89c719291986b6b90","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4a009b1ead486cdd766fc886dccd36621d4f9827"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["5a2bf3aaab96a82bcd435e3075d7e79e7c41c11a"],"7530de27b87b961b51f01bd1299b7004d46e8823":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"5a2bf3aaab96a82bcd435e3075d7e79e7c41c11a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4a009b1ead486cdd766fc886dccd36621d4f9827","fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"4a009b1ead486cdd766fc886dccd36621d4f9827":["2acf500f78aa12b92e371fd89c719291986b6b90"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823","46d8ada1fff8d18cb197c38c7983225162599948"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5a2bf3aaab96a82bcd435e3075d7e79e7c41c11a"],"5a2bf3aaab96a82bcd435e3075d7e79e7c41c11a":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}