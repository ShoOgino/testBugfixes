{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","commits":[{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e98d733a5bb519a76012bac63af29da2e75ccdb8","date":1502719837,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\".system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f11a1d7d9cbd25a1a439c97539211bc7576b4de2","date":1503501096,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    log.info(\"Stopping node \" + cluster.getJettySolrRunner(nonOverseerLeaderIndex).getNodeName());\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    log.info(\"Stopping node \" + cluster.getJettySolrRunner(nonOverseerLeaderIndex).getNodeName());\n    JettySolrRunner j = cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    \n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 2));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    log.info(\"Stopping node \" + cluster.getJettySolrRunner(nonOverseerLeaderIndex).getNodeName());\n    cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":["55ed5a78f8a4b37108ac73a894a105db562d303e","f11a1d7d9cbd25a1a439c97539211bc7576b4de2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75b91197becbbe8cc6ba02b36109229daac9c2e6","date":1544494002,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    log.info(\"Stopping node \" + stoppedJetty.getNodeName());\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // stop non-overseer node\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int nonOverseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (!jetty.getNodeName().equals(overseerLeader)) {\n        nonOverseerLeaderIndex = i;\n      }\n    }\n    log.info(\"Stopping node \" + cluster.getJettySolrRunner(nonOverseerLeaderIndex).getNodeName());\n    JettySolrRunner j = cluster.stopJettySolrRunner(nonOverseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n\n    \n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system\", 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    log.info(\"Stopping node \" + stoppedJetty.getNodeName());\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    log.info(\"Stopping node \" + stoppedJetty.getNodeName());\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    log.info(\"Stopping node \" + stoppedJetty.getNodeName());\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.setMaxShardsPerNode(3);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/SystemLogListenerTest#test().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void test() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'execute_plan','class':'solr.ExecutePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'},\" +\n        \"{'name':'error','class':'\" + ErrorTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // remove default listener\n    String removeListenerCommand = \"{\\n\" +\n        \"\\t\\\"remove-listener\\\" : {\\n\" +\n        \"\\t\\t\\\"name\\\" : \\\"node_lost_trigger.system\\\"\\n\" +\n        \"\\t}\\n\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"test\",\n        \"conf\",3, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"test\", clusterShape(3, 6));\n\n    String setListenerCommand = \"{\" +\n        \"'set-listener' : \" +\n        \"{\" +\n        \"'name' : 'foo',\" +\n        \"'trigger' : 'node_lost_trigger',\" +\n        \"'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED'],\" +\n        \"'beforeAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'afterAction' : ['compute_plan','execute_plan','test','error'],\" +\n        \"'class' : '\" + SystemLogListener.class.getName() + \"'\" +\n        \"}\" +\n        \"}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // Stop a node (that's safe to stop for the purposes of this test)\n    final JettySolrRunner stoppedJetty = pickNodeToStop();\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping node {}\", stoppedJetty.getNodeName());\n    }\n    cluster.stopJettySolrRunner(stoppedJetty);\n    cluster.waitForJettyToStop(stoppedJetty);\n    \n    assertTrue(\"Trigger was not fired \", triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    \n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    \n    ModifiableSolrParams query = new ModifiableSolrParams();\n    query.add(CommonParams.Q, \"type:\" + SystemLogListener.DOC_TYPE);\n    query.add(CommonParams.SORT, \"id asc\");\n    \n    try {\n      timeout.waitFor(\"\", new Supplier<Boolean>() {\n\n        @Override\n        public Boolean get() {\n          try {\n            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;\n          } catch (SolrServerException | IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    } catch (TimeoutException e) {\n      // fine\n    }\n    // make sure the event docs are replicated and committed\n    Thread.sleep(5000);\n    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);\n\n\n    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);\n    SolrDocumentList docs = resp.getResults();\n    assertNotNull(docs);\n    assertEquals(\"wrong number of events added to .system: \" + docs.toString(),\n                 9, docs.size());\n    docs.forEach(doc -> assertCommonFields(doc));\n\n    // STARTED\n    SolrDocument doc = docs.get(0);\n    assertEquals(\"STARTED\", doc.getFieldValue(\"stage_s\"));\n\n    // BEFORE_ACTION compute_plan\n    doc = docs.get(1);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION compute_plan\n    doc = docs.get(2);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"compute_plan\", doc.getFieldValue(\"action_s\"));\n    Collection<Object> vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n    for (Object val : vals) {\n      assertTrue(val.toString(), String.valueOf(val).contains(\"action=MOVEREPLICA\"));\n    }\n\n    // BEFORE_ACTION execute_plan\n    doc = docs.get(3);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertEquals(3, vals.size());\n\n    // AFTER_ACTION execute_plan\n    doc = docs.get(4);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"execute_plan\", doc.getFieldValue(\"action_s\"));\n    vals = doc.getFieldValues(\"operations.params_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals = doc.getFieldValues(\"responses_ts\");\n    assertNotNull(vals);\n    assertEquals(3, vals.size());\n    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith(\"success MOVEREPLICA action completed successfully\")));\n\n    // BEFORE_ACTION test\n    doc = docs.get(5);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // AFTER_ACTION test\n    doc = docs.get(6);\n    assertEquals(\"AFTER_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"test\", doc.getFieldValue(\"action_s\"));\n\n    // BEFORE_ACTION error\n    doc = docs.get(7);\n    assertEquals(\"BEFORE_ACTION\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n\n    // FAILED error\n    doc = docs.get(8);\n    assertEquals(\"FAILED\", doc.getFieldValue(\"stage_s\"));\n    assertEquals(\"error\", doc.getFieldValue(\"action_s\"));\n    assertEquals(\"failure from ErrorTriggerAction\", doc.getFieldValue(\"error.message_t\"));\n    assertTrue(doc.getFieldValue(\"error.details_t\").toString().contains(\"RuntimeException\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f11a1d7d9cbd25a1a439c97539211bc7576b4de2":["e98d733a5bb519a76012bac63af29da2e75ccdb8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f11a1d7d9cbd25a1a439c97539211bc7576b4de2"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"75b91197becbbe8cc6ba02b36109229daac9c2e6":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["75b91197becbbe8cc6ba02b36109229daac9c2e6"],"e98d733a5bb519a76012bac63af29da2e75ccdb8":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"f11a1d7d9cbd25a1a439c97539211bc7576b4de2":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["75b91197becbbe8cc6ba02b36109229daac9c2e6"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["e98d733a5bb519a76012bac63af29da2e75ccdb8"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"75b91197becbbe8cc6ba02b36109229daac9c2e6":["89948af0461fead48f44ba8fb7866f107ce83f22"],"560c18d71dad43d675158783c3840f8c80d6d39c":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"89948af0461fead48f44ba8fb7866f107ce83f22":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"e98d733a5bb519a76012bac63af29da2e75ccdb8":["f11a1d7d9cbd25a1a439c97539211bc7576b4de2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}