{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"/dev/null","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"/dev/null","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"/dev/null","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8136d8c9f128223389b731b2affdeccdbf1af3","date":1305220410,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#doTest(int,IntsRef[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs#doTest(int,IntsRef[]).mjava","sourceNew":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","sourceOld":"  // given set of terms, test the different outputs for them\n  private void doTest(int inputMode, IntsRef[] terms) throws IOException {\n    Arrays.sort(terms);\n\n    // NoOutputs (simple FSA)\n    {\n      final Outputs<Object> outputs = NoOutputs.getSingleton();\n      final Object NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      for(IntsRef term : terms) {\n        pairs.add(new FSTTester.InputOutput<Object>(term, NO_OUTPUT));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (ord)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(idx)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random monotonically increasing positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(value)));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // PositiveIntOutput (random positive number)\n    {\n      final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final List<FSTTester.InputOutput<Long>> pairs = new ArrayList<FSTTester.InputOutput<Long>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        pairs.add(new FSTTester.InputOutput<Long>(terms[idx], outputs.get(random.nextLong()) & Long.MAX_VALUE));\n      }\n      new FSTTester<Long>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Pair<ord, (random monotonically increasing positive number>\n    {\n      final PositiveIntOutputs o1 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PositiveIntOutputs o2 = PositiveIntOutputs.getSingleton(random.nextBoolean());\n      final PairOutputs<Long,Long> outputs = new PairOutputs<Long,Long>(o1, o2);\n      final List<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>> pairs = new ArrayList<FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        final long value = lastOutput + _TestUtil.nextInt(random, 1, 1000);\n        lastOutput = value;\n        pairs.add(new FSTTester.InputOutput<PairOutputs.Pair<Long,Long>>(terms[idx],\n                                                                         outputs.get(o1.get(idx),\n                                                                                     o2.get(value))));\n      }\n      new FSTTester<PairOutputs.Pair<Long,Long>>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-bytes\n    {\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final BytesRef NO_OUTPUT = outputs.getNoOutput();      \n      final List<FSTTester.InputOutput<BytesRef>> pairs = new ArrayList<FSTTester.InputOutput<BytesRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final BytesRef output = random.nextInt(30) == 17 ? NO_OUTPUT : new BytesRef(Integer.toString(idx));\n        pairs.add(new FSTTester.InputOutput<BytesRef>(terms[idx], output));\n      }\n      new FSTTester<BytesRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Sequence-of-ints\n    {\n      final IntSequenceOutputs outputs = IntSequenceOutputs.getSingleton();\n      final List<FSTTester.InputOutput<IntsRef>> pairs = new ArrayList<FSTTester.InputOutput<IntsRef>>(terms.length);\n      for(int idx=0;idx<terms.length;idx++) {\n        final String s = Integer.toString(idx);\n        final IntsRef output = new IntsRef(s.length());\n        output.length = s.length();\n        for(int idx2=0;idx2<output.length;idx2++) {\n          output.ints[idx2] = s.charAt(idx2);\n        }\n        pairs.add(new FSTTester.InputOutput<IntsRef>(terms[idx], output));\n      }\n      new FSTTester<IntsRef>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n\n    // Up to two positive ints, shared, generally but not\n    // monotonically increasing\n    {\n      if (VERBOSE) {\n        System.out.println(\"TEST: now test UpToTwoPositiveIntOutputs\");\n      }\n      final UpToTwoPositiveIntOutputs outputs = UpToTwoPositiveIntOutputs.getSingleton(true);\n      final List<FSTTester.InputOutput<Object>> pairs = new ArrayList<FSTTester.InputOutput<Object>>(terms.length);\n      long lastOutput = 0;\n      for(int idx=0;idx<terms.length;idx++) {\n        // Sometimes go backwards\n        long value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        while(value < 0) {\n          value = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n        }\n        final Object output;\n        if (random.nextInt(5) == 3) {\n          long value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          while(value2 < 0) {\n            value2 = lastOutput + _TestUtil.nextInt(random, -100, 1000);\n          }\n          output = outputs.get(value, value2);\n        } else {\n          output = outputs.get(value);\n        }\n        pairs.add(new FSTTester.InputOutput<Object>(terms[idx], output));\n      }\n      new FSTTester<Object>(random, dir, inputMode, pairs, outputs).doTest();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["ea8136d8c9f128223389b731b2affdeccdbf1af3"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc","ea8136d8c9f128223389b731b2affdeccdbf1af3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea8136d8c9f128223389b731b2affdeccdbf1af3":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","ea8136d8c9f128223389b731b2affdeccdbf1af3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ea8136d8c9f128223389b731b2affdeccdbf1af3":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a3776dccca01c11e7046323cfad46a3b4a471233","ea8136d8c9f128223389b731b2affdeccdbf1af3","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}