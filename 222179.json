{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,String,Map[String,String],Map[String,Object]).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,String,Map[String,String],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private PluginInfo preparePlugin(PluginInfo info, String className, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n    if (className != null) {\n      if (classNameAttr != null && !className.equals(classNameAttr)) {\n        log.warn(\"Conflicting class name attributes, expected \" + className + \" but was \" + classNameAttr + \", skipping \" + info);\n        return null;\n      }\n    }\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", className);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"889865904ccb84e97569ba35ada9860df9ae6f0d","date":1502460448,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private PluginInfo preparePlugin(PluginInfo info, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", classNameAttr);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","sourceOld":"  private PluginInfo preparePlugin(PluginInfo info, String className, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n    if (className != null) {\n      if (classNameAttr != null && !className.equals(classNameAttr)) {\n        log.warn(\"Conflicting class name attributes, expected \" + className + \" but was \" + classNameAttr + \", skipping \" + info);\n        return null;\n      }\n    }\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", className);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e8eb794082b9cc37b6562c76814ec4a26b9b8b","date":1502501868,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private PluginInfo preparePlugin(PluginInfo info, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", classNameAttr);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","sourceOld":"  private PluginInfo preparePlugin(PluginInfo info, String className, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n    if (className != null) {\n      if (classNameAttr != null && !className.equals(classNameAttr)) {\n        log.warn(\"Conflicting class name attributes, expected \" + className + \" but was \" + classNameAttr + \", skipping \" + info);\n        return null;\n      }\n    }\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", className);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,Map[String,String],Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#preparePlugin(PluginInfo,String,Map[String,String],Map[String,Object]).mjava","sourceNew":"  private PluginInfo preparePlugin(PluginInfo info, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", classNameAttr);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","sourceOld":"  private PluginInfo preparePlugin(PluginInfo info, String className, Map<String, String> defaultAttributes,\n                                   Map<String, Object> defaultInitArgs) {\n    if (info == null) {\n      return null;\n    }\n    String classNameAttr = info.attributes.get(\"class\");\n    if (className != null) {\n      if (classNameAttr != null && !className.equals(classNameAttr)) {\n        log.warn(\"Conflicting class name attributes, expected \" + className + \" but was \" + classNameAttr + \", skipping \" + info);\n        return null;\n      }\n    }\n\n    Map<String, String> attrs = new HashMap<>(info.attributes);\n    defaultAttributes.forEach((k, v) -> {\n      if (!attrs.containsKey(k)) {\n        attrs.put(k, v);\n      }\n    });\n    attrs.put(\"class\", className);\n    Map<String, Object> initArgs = new HashMap<>();\n    if (info.initArgs != null) {\n      initArgs.putAll(info.initArgs.asMap(10));\n    }\n    defaultInitArgs.forEach((k, v) -> {\n      if (!initArgs.containsKey(k)) {\n        initArgs.put(k, v);\n      }\n    });\n    return new PluginInfo(info.type, attrs, new NamedList(initArgs), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"889865904ccb84e97569ba35ada9860df9ae6f0d":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","889865904ccb84e97569ba35ada9860df9ae6f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"]},"commit2Childs":{"889865904ccb84e97569ba35ada9860df9ae6f0d":["19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["889865904ccb84e97569ba35ada9860df9ae6f0d","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","19e8eb794082b9cc37b6562c76814ec4a26b9b8b"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"19e8eb794082b9cc37b6562c76814ec4a26b9b8b":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}