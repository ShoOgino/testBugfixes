{"path":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","commits":[{"id":"db318054409ed0abffd7a36b3f0ac61693f45684","date":1351009122,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n     checkCorrectClassification(new KNearestNeighborClassifier(1), new MockAnalyzer(random()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n     checkCorrectClassification(new KNearestNeighborClassifier(1), new MockAnalyzer(random()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6965197f9fe6d03eb332e2bd4e44e905f83f83d","date":1365412474,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n     checkCorrectClassification(new KNearestNeighborClassifier(1), new BytesRef(\"technology\"), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n     checkCorrectClassification(new KNearestNeighborClassifier(1), new MockAnalyzer(random()));\n  }\n\n","bugFix":null,"bugIntro":["f943af95e5f861862ba175e931d53f5c53060cb3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f943af95e5f861862ba175e931d53f5c53060cb3","date":1367086170,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new KNearestNeighborClassifier(1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n     checkCorrectClassification(new KNearestNeighborClassifier(1), new BytesRef(\"technology\"), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","bugFix":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new KNearestNeighborClassifier(1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new KNearestNeighborClassifier(1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4","date":1385109382,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    // usage with default MLT min docs / term freq\n    checkCorrectClassification(new KNearestNeighborClassifier(3), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    // usage without custom min docs / term freq for MLT\n    checkCorrectClassification(new KNearestNeighborClassifier(3, 2, 1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new KNearestNeighborClassifier(1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    // usage with default MLT min docs / term freq\n    checkCorrectClassification(new KNearestNeighborClassifier(3), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    // usage without custom min docs / term freq for MLT\n    checkCorrectClassification(new KNearestNeighborClassifier(3, 2, 1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new KNearestNeighborClassifier(1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    // usage with default MLT min docs / term freq\n    checkCorrectClassification(new KNearestNeighborClassifier(3), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    // usage without custom min docs / term freq for MLT\n    checkCorrectClassification(new KNearestNeighborClassifier(3, 2, 1), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7161a776f504e35697e4bcb672862f679a4c2a9d","date":1439207410,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultDS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultLMS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      assertTrue(resultDS.getScore() != resultLMS.getScore());\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"bugIntro":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultDS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultLMS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      assertTrue(resultDS.getScore() != resultLMS.getScore());\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultDS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultLMS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      assertTrue(resultDS.getScore() != resultLMS.getScore());\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/KNearestNeighborClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultDS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new BM25Similarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultLMS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      assertTrue(resultDS.getScore() != resultLMS.getScore());\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 1, 0, 0, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultDS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, null, analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      ClassificationResult<BytesRef> resultLMS =  checkCorrectClassification(new KNearestNeighborClassifier(leafReader, new LMDirichletSimilarity(), analyzer, null, 3, 2, 1, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      assertTrue(resultDS.getScore() != resultLMS.getScore());\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f943af95e5f861862ba175e931d53f5c53060cb3":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"db318054409ed0abffd7a36b3f0ac61693f45684":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["45ae8f6354b0826d27014deff71fe330604a9783"],"45ae8f6354b0826d27014deff71fe330604a9783":["f943af95e5f861862ba175e931d53f5c53060cb3"],"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["db318054409ed0abffd7a36b3f0ac61693f45684"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"62e52115b56781006682fd92c6938efaf174304d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","db318054409ed0abffd7a36b3f0ac61693f45684"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7161a776f504e35697e4bcb672862f679a4c2a9d":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["45ae8f6354b0826d27014deff71fe330604a9783","42752f746c2f3b1cfc8a971a2890d8098ebfb4b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e75448368ba628d73e9967b45e29c40bbfe39fa"]},"commit2Childs":{"f943af95e5f861862ba175e931d53f5c53060cb3":["45ae8f6354b0826d27014deff71fe330604a9783"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"db318054409ed0abffd7a36b3f0ac61693f45684":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d","62e52115b56781006682fd92c6938efaf174304d"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["7161a776f504e35697e4bcb672862f679a4c2a9d"],"42752f746c2f3b1cfc8a971a2890d8098ebfb4b4":["360ff513ddb24a30ffa2111a3ef0f91038803100","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"45ae8f6354b0826d27014deff71fe330604a9783":["42752f746c2f3b1cfc8a971a2890d8098ebfb4b4","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["f943af95e5f861862ba175e931d53f5c53060cb3"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db318054409ed0abffd7a36b3f0ac61693f45684","62e52115b56781006682fd92c6938efaf174304d"],"7161a776f504e35697e4bcb672862f679a4c2a9d":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}