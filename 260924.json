{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","commits":[{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.shutdown();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexed(true);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#isAHit(Query,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#isAHit(Query,String,Analyzer).mjava","sourceNew":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","sourceOld":"  private boolean isAHit(Query q, String content, Analyzer analyzer) throws IOException{\n    Directory ramDir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), ramDir, analyzer);\n    Document doc = new Document();\n    FieldType fieldType = new FieldType();\n    fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n    fieldType.setTokenized(true);\n    fieldType.setStored(true);\n    Field field = new Field(FIELD, content, fieldType);\n    doc.add(field);\n    writer.addDocument(doc);\n    writer.close();\n    DirectoryReader ir = DirectoryReader.open(ramDir);\n    IndexSearcher is = new IndexSearcher(ir);\n      \n    int hits = is.search(q, 10).totalHits;\n    ir.close();\n    ramDir.close();\n    if (hits == 1){\n      return true;\n    } else {\n      return false;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d0ef034a4f10871667ae75181537775ddcf8ade4","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["046829b17e246624c179b94d5a20cb53fa945e87"],"ea4107f60b9f95623c16025c9c247412ff809092":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3184874f7f3aca850248483485b4995343066875","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["046829b17e246624c179b94d5a20cb53fa945e87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}