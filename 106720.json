{"path":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45fa1757f5581a10e9c63294cf292a14c92d23b1","date":1430234127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    Assert.assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    Assert.assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    Assert.assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708","586cf43028f4cae848088bc127a6e4d6773ce9aa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a07c9097694a846350fe228b1722319fd8372e08","date":1481812225,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkUnequal(Query,Query).mjava","sourceNew":"  public static void checkUnequal(Query q1, Query q2) {\n    assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n  }\n\n","sourceOld":"  public static void checkUnequal(Query q1, Query q2) {\n    assertFalse(q1 + \" equal to \" + q2, q1.equals(q2));\n    assertFalse(q2 + \" equal to \" + q1, q2.equals(q1));\n\n    // possible this test can fail on a hash collision... if that\n    // happens, please change test to use a different example.\n    assertTrue(q1.hashCode() != q2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a07c9097694a846350fe228b1722319fd8372e08":["45fa1757f5581a10e9c63294cf292a14c92d23b1"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45fa1757f5581a10e9c63294cf292a14c92d23b1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9856095f7afb5a607bf5e65077615ed91273508c":["45fa1757f5581a10e9c63294cf292a14c92d23b1","a07c9097694a846350fe228b1722319fd8372e08"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a07c9097694a846350fe228b1722319fd8372e08"]},"commit2Childs":{"a07c9097694a846350fe228b1722319fd8372e08":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["45fa1757f5581a10e9c63294cf292a14c92d23b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"45fa1757f5581a10e9c63294cf292a14c92d23b1":["a07c9097694a846350fe228b1722319fd8372e08","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}