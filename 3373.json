{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes().mjava","commits":[{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyBytes() throws Exception {\n    testCopyBytes(getDirectory(createTempDir(\"testCopyBytes\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testCopyBytes().mjava","sourceNew":"  public void testCopyBytes() throws Exception {\n    try (Directory dir = getDirectory(createTempDir(\"testCopyBytes\"))) {\n      IndexOutput out = dir.createOutput(\"test\", newIOContext(random()));\n      byte[] bytes = new byte[TestUtil.nextInt(random(), 1, 77777)];\n      final int size = TestUtil.nextInt(random(), 1, 1777777);\n      int upto = 0;\n      int byteUpto = 0;\n      while (upto < size) {\n        bytes[byteUpto++] = value(upto);\n        upto++;\n        if (byteUpto == bytes.length) {\n          out.writeBytes(bytes, 0, bytes.length);\n          byteUpto = 0;\n        }\n      }\n\n      out.writeBytes(bytes, 0, byteUpto);\n      assertEquals(size, out.getFilePointer());\n      out.close();\n      assertEquals(size, dir.fileLength(\"test\"));\n\n      // copy from test -> test2\n      final IndexInput in = dir.openInput(\"test\", newIOContext(random()));\n\n      out = dir.createOutput(\"test2\", newIOContext(random()));\n\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          out.writeByte(in.readByte());\n          upto++;\n        } else {\n          final int chunk = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          out.copyBytes(in, chunk);\n          upto += chunk;\n        }\n      }\n      assertEquals(size, upto);\n      out.close();\n      in.close();\n\n      // verify\n      IndexInput in2 = dir.openInput(\"test2\", newIOContext(random()));\n      upto = 0;\n      while (upto < size) {\n        if (random().nextBoolean()) {\n          final byte v = in2.readByte();\n          assertEquals(value(upto), v);\n          upto++;\n        } else {\n          final int limit = Math.min(\n              TestUtil.nextInt(random(), 1, bytes.length), size - upto);\n          in2.readBytes(bytes, 0, limit);\n          for (int byteIdx = 0; byteIdx < limit; byteIdx++) {\n            assertEquals(value(upto), bytes[byteIdx]);\n            upto++;\n          }\n        }\n      }\n      in2.close();\n\n      dir.deleteFile(\"test\");\n      dir.deleteFile(\"test2\");\n    }\n  }\n\n","sourceOld":"  public void testCopyBytes() throws Exception {\n    testCopyBytes(getDirectory(createTempDir(\"testCopyBytes\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["c15a75016387504d70a40cba6e9314b8885307f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c15a75016387504d70a40cba6e9314b8885307f0"],"c15a75016387504d70a40cba6e9314b8885307f0":["f3adea0022cffaaa592081efed775a7b8bf86b51"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}