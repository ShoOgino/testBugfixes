{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#Axiomatic(float,int,float).mjava","commits":[{"id":"fbc431f993cb68e5cd7af59f2d7c081ff1290b33","date":1479540505,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#Axiomatic(float,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor setting all Axiomatic hyperparameters\n   * @param s hyperparam for the growth function\n   * @param queryLen the query length\n   * @param k hyperparam for the primitive weighting function\n   */\n  public Axiomatic(float s, int queryLen, float k) {\n    if (Float.isFinite(s) == false || Float.isNaN(s) || s < 0 || s > 1) {\n      throw new IllegalArgumentException(\"illegal s value: \" + s + \", must be between 0 and 1\");\n    }\n    if (Float.isFinite(k) == false || Float.isNaN(k) || k < 0 || k > 1) {\n      throw new IllegalArgumentException(\"illegal k value: \" + k + \", must be between 0 and 1\");\n    }\n    if (queryLen < 0 || queryLen > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"illegal query length value: \"\n          + queryLen + \", must be larger 0 and smaller than MAX_INT\");\n    }\n    this.s = s;\n    this.queryLen = queryLen;\n    this.k = k;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Axiomatic#Axiomatic(float,int,float).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor setting all Axiomatic hyperparameters\n   * @param s hyperparam for the growth function\n   * @param queryLen the query length\n   * @param k hyperparam for the primitive weighting function\n   */\n  public Axiomatic(float s, int queryLen, float k) {\n    if (Float.isFinite(s) == false || Float.isNaN(s) || s < 0 || s > 1) {\n      throw new IllegalArgumentException(\"illegal s value: \" + s + \", must be between 0 and 1\");\n    }\n    if (Float.isFinite(k) == false || Float.isNaN(k) || k < 0 || k > 1) {\n      throw new IllegalArgumentException(\"illegal k value: \" + k + \", must be between 0 and 1\");\n    }\n    if (queryLen < 0 || queryLen > Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"illegal query length value: \"\n          + queryLen + \", must be larger 0 and smaller than MAX_INT\");\n    }\n    this.s = s;\n    this.queryLen = queryLen;\n    this.k = k;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd70af1186a18d10a788433cc33be44327a83ce7","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}