{"path":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random.nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"829d9441b99897377d279219000bb71b50c026be","date":1342046363,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = _TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = _TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = _TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int[] VALUE_COUNTS = new int[]{0, 1, 5, 8, 100, 500};\n    final int MIN_BITS_PER_VALUE = 1;\n    final int MAX_BITS_PER_VALUE = 64;\n\n    for (int valueCount: VALUE_COUNTS) {\n      for (int bitsPerValue = MIN_BITS_PER_VALUE ;\n           bitsPerValue <= MAX_BITS_PER_VALUE ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = _TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d209368a36457e41f5200a77a35a074db72a454b","date":1428899355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/packed/TestPackedInts#testRandomEquality().mjava","sourceNew":"  public void testRandomEquality() {\n    final int numIters = TEST_NIGHTLY ? atLeast(2) : 1;\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomEquality() {\n    final int numIters = atLeast(2);\n    for (int i = 0; i < numIters; ++i) {\n      final int valueCount = TestUtil.nextInt(random(), 1, 300);\n\n      for (int bitsPerValue = 1 ;\n           bitsPerValue <= 64 ;\n           bitsPerValue++) {\n        assertRandomEquality(valueCount, bitsPerValue, random().nextLong());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d209368a36457e41f5200a77a35a074db72a454b":["6613659748fe4411a7dcf85266e55db1f95f7315"],"aba371508186796cc6151d8223a5b4e16d02e26e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","829d9441b99897377d279219000bb71b50c026be"],"6613659748fe4411a7dcf85266e55db1f95f7315":["829d9441b99897377d279219000bb71b50c026be"],"829d9441b99897377d279219000bb71b50c026be":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","829d9441b99897377d279219000bb71b50c026be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d209368a36457e41f5200a77a35a074db72a454b"]},"commit2Childs":{"d209368a36457e41f5200a77a35a074db72a454b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["d209368a36457e41f5200a77a35a074db72a454b"],"829d9441b99897377d279219000bb71b50c026be":["aba371508186796cc6151d8223a5b4e16d02e26e","6613659748fe4411a7dcf85266e55db1f95f7315","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["aba371508186796cc6151d8223a5b4e16d02e26e","829d9441b99897377d279219000bb71b50c026be","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}