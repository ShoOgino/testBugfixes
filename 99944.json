{"path":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QueryParsing.SortSpec getSort(boolean useGlobal) throws ParseException {\n    QueryParsing.SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      QueryParsing.SortSpec oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      sort.sort = oldSort.sort;\n    }\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a883c02229be6ea3db6c4a3d618c5569e0363346","date":1194441663,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","sourceNew":"  @Override\n  public QueryParsing.SortSpec getSort(boolean useGlobal) throws ParseException {\n    QueryParsing.SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      QueryParsing.SortSpec oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      if( oldSort != null ) {\n        sort.sort = oldSort.sort;\n      }\n    }\n    return sort;\n  }\n\n","sourceOld":"  @Override\n  public QueryParsing.SortSpec getSort(boolean useGlobal) throws ParseException {\n    QueryParsing.SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      QueryParsing.SortSpec oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      sort.sort = oldSort.sort;\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6075cf7db5ebb03b013c9110fca8f1013ba6a72","date":1196271697,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","sourceNew":"  @Override\n  public SortSpec getSort(boolean useGlobal) throws ParseException {\n    SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      Sort oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      if( oldSort != null ) {\n        sort.sort = oldSort;\n      }\n    }\n    return sort;\n  }\n\n","sourceOld":"  @Override\n  public QueryParsing.SortSpec getSort(boolean useGlobal) throws ParseException {\n    QueryParsing.SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      QueryParsing.SortSpec oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      if( oldSort != null ) {\n        sort.sort = oldSort.sort;\n      }\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/OldLuceneQParser[LuceneQParserPlugin]#getSort(boolean).mjava","sourceNew":"  @Override\n  public SortSpec getSort(boolean useGlobal) throws ParseException {\n    SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      Sort oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      if( oldSort != null ) {\n        sort.sort = oldSort;\n      }\n    }\n    return sort;\n  }\n\n","sourceOld":"  @Override\n  public SortSpec getSort(boolean useGlobal) throws ParseException {\n    SortSpec sort = super.getSort(useGlobal);\n    if (sortStr != null && sortStr.length()>0 && sort.getSort()==null) {\n      Sort oldSort = QueryParsing.parseSort(sortStr, getReq().getSchema());\n      if( oldSort != null ) {\n        sort.sort = oldSort;\n      }\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a883c02229be6ea3db6c4a3d618c5569e0363346":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["a883c02229be6ea3db6c4a3d618c5569e0363346"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a883c02229be6ea3db6c4a3d618c5569e0363346":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["a883c02229be6ea3db6c4a3d618c5569e0363346"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}