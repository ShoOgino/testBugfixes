{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","pathOld":"/dev/null","sourceNew":"      private final void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytes.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706b903fac3a7a12a1a332474b4bf3e0e7c2472c","date":1275076282,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","sourceNew":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytes.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","sourceOld":"      private final void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytes.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","sourceNew":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytesReader.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","sourceOld":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytes.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","sourceNew":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytesReader.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","sourceOld":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytesReader.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexReader.FieldIndexReader.CoreFieldIndex#fillResult(int,TermsIndexResult).mjava","sourceNew":null,"sourceOld":"      private void fillResult(int idx, TermsIndexResult result) {\n        final long offset = termOffsets.get(idx);\n        final int length = (int) (termOffsets.get(1+idx) - offset);\n        termBytesReader.fill(result.term, termBytesStart + offset, length);\n        result.position = idx * totalIndexInterval;\n        result.offset = termsStart + termsDictOffsets.get(idx);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["706b903fac3a7a12a1a332474b4bf3e0e7c2472c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","99cf56f3a650b908f7017a72f9d23940418f8a52"],"706b903fac3a7a12a1a332474b4bf3e0e7c2472c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["706b903fac3a7a12a1a332474b4bf3e0e7c2472c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"706b903fac3a7a12a1a332474b4bf3e0e7c2472c":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}