{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","commits":[{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[File]).mjava","sourceNew":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15, false);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstBuilder.finish());\n    return dictionary;\n  }\n\n","sourceOld":"  public TokenInfoDictionaryWriter buildDictionary(List<File> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    \n    // all lines in the file\n    System.out.println(\"  parse...\");\n    List<String[]> lines = new ArrayList<>(400000);\n    for (File file : csvFiles){\n      FileInputStream inputStream = new FileInputStream(file);\n      Charset cs = Charset.forName(encoding);\n      CharsetDecoder decoder = cs.newDecoder()\n          .onMalformedInput(CodingErrorAction.REPORT)\n          .onUnmappableCharacter(CodingErrorAction.REPORT);\n      InputStreamReader streamReader = new InputStreamReader(inputStream, decoder);\n      BufferedReader reader = new BufferedReader(streamReader);\n      \n      String line = null;\n      while ((line = reader.readLine()) != null) {\n        String[] entry = CSVUtil.parse(line);\n\n        if(entry.length < 13) {\n          throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n        }\n        \n        String[] formatted = formatEntry(entry);\n        lines.add(formatted);\n        \n        // NFKC normalize dictionary entry\n        if (normalForm != null) {\n          if (Normalizer.isNormalized(entry[0], normalForm)){\n            continue;\n          }\n          String[] normalizedEntry = new String[entry.length];\n          for (int i = 0; i < entry.length; i++) {\n            normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n          }\n          \n          formatted = formatEntry(normalizedEntry);\n          lines.add(formatted);\n        }\n      }\n    }\n    \n    System.out.println(\"  sort...\");\n\n    // sort by term: we sorted the files already and use a stable sort.\n    Collections.sort(lines, new Comparator<String[]>() {\n      public int compare(String[] left, String[] right) {\n        return left[0].compareTo(right[0]);\n      }\n    });\n    \n    System.out.println(\"  encode...\");\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15, false);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build tokeninfo dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        System.out.println(\"Failed to process line: \" + Arrays.toString(entry));\n        continue;\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int)ord, offset);\n      offset = next;\n    }\n    \n    final FST<Long> fst = fstBuilder.finish();\n    \n    System.out.print(\"  \" + fstBuilder.getNodeCount() + \" nodes, \" + fstBuilder.getArcCount() + \" arcs, \" + fst.ramBytesUsed() + \" bytes...  \");\n    dictionary.setFST(fst);\n    System.out.println(\" done\");\n    \n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a1204a92958bea883656169000a87a6c55c2d0","date":1562106073,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","sourceNew":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstBuilder.finish());\n    return dictionary;\n  }\n\n","sourceOld":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15, false);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstBuilder.finish());\n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","sourceNew":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, fstOutput);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstCompiler.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstCompiler.compile());\n    return dictionary;\n  }\n\n","sourceOld":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstBuilder.finish());\n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","pathOld":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder#buildDictionary(List[Path]).mjava","sourceNew":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE2, fstOutput);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstCompiler.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstCompiler.compile());\n    return dictionary;\n  }\n\n","sourceOld":"  private TokenInfoDictionaryWriter buildDictionary(List<Path> csvFiles) throws IOException {\n    TokenInfoDictionaryWriter dictionary = new TokenInfoDictionaryWriter(10 * 1024 * 1024);\n    Charset cs = Charset.forName(encoding);\n    // all lines in the file\n    List<String[]> lines = new ArrayList<>(400000);\n    for (Path path : csvFiles) {\n      try (BufferedReader reader = Files.newBufferedReader(path, cs)) {\n        String line;\n        while ((line = reader.readLine()) != null) {\n          String[] entry = CSVUtil.parse(line);\n\n          if (entry.length < 13) {\n            throw new IllegalArgumentException(\"Entry in CSV is not valid (13 field values expected): \" + line);\n          }\n\n          lines.add(formatEntry(entry));\n\n          if (normalForm != null) {\n            if (Normalizer.isNormalized(entry[0], normalForm)) {\n              continue;\n            }\n            String[] normalizedEntry = new String[entry.length];\n            for (int i = 0; i < entry.length; i++) {\n              normalizedEntry[i] = Normalizer.normalize(entry[i], normalForm);\n            }\n            lines.add(formatEntry(normalizedEntry));\n          }\n        }\n      }\n    }\n    \n    // sort by term: we sorted the files already and use a stable sort.\n    lines.sort(Comparator.comparing(entry -> entry[0]));\n\n    PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n    Builder<Long> fstBuilder = new Builder<>(FST.INPUT_TYPE.BYTE2, 0, 0, true, true, Integer.MAX_VALUE, fstOutput, true, 15);\n    IntsRefBuilder scratch = new IntsRefBuilder();\n    long ord = -1; // first ord will be 0\n    String lastValue = null;\n\n    // build token info dictionary\n    for (String[] entry : lines) {\n      int next = dictionary.put(entry);\n        \n      if(next == offset){\n        throw new IllegalStateException(\"Failed to process line: \" + Arrays.toString(entry));\n      }\n      \n      String token = entry[0];\n      if (!token.equals(lastValue)) {\n        // new word to add to fst\n        ord++;\n        lastValue = token;\n        scratch.grow(token.length());\n        scratch.setLength(token.length());\n        for (int i = 0; i < token.length(); i++) {\n          scratch.setIntAt(i, (int) token.charAt(i));\n        }\n        fstBuilder.add(scratch.get(), ord);\n      }\n      dictionary.addMapping((int) ord, offset);\n      offset = next;\n    }\n    dictionary.setFST(fstBuilder.finish());\n    return dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59a1204a92958bea883656169000a87a6c55c2d0":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["59a1204a92958bea883656169000a87a6c55c2d0","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["59a1204a92958bea883656169000a87a6c55c2d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"59a1204a92958bea883656169000a87a6c55c2d0":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["59a1204a92958bea883656169000a87a6c55c2d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}