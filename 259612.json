{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring   ? new ScoringDocIdCollector(maxDoc)\n                          : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring   ? new ScoringDocIdCollector(maxDoc)\n                          : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring ? new ScoringDocIdCollector(maxDoc) : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring   ? new ScoringDocIdCollector(maxDoc)\n                          : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring ? new ScoringDocIdCollector(maxDoc) : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring   ? new ScoringDocIdCollector(maxDoc)\n                          : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/ScoredDocIdCollector#create(int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new {@link ScoredDocIdCollector} with the given parameters.\n   * \n   * @param maxDoc the number of documents that are expected to be collected.\n   *        Note that if more documents are collected, unexpected exceptions may\n   *        be thrown. Usually you should pass {@link IndexReader#maxDoc()} of\n   *        the same IndexReader with which the search is executed.\n   * @param enableScoring if scoring is enabled, a score will be computed for\n   *        every matching document, which might be expensive. Therefore if you\n   *        do not require scoring, it is better to set it to <i>false</i>.\n   */\n  public static ScoredDocIdCollector create(int maxDoc, boolean enableScoring) {\n    return enableScoring ? new ScoringDocIdCollector(maxDoc) : new NonScoringDocIdCollector(maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["b89678825b68eccaf09e6ab71675fc0b0af1e099","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","8917bfede3b4ca30f4305c1e391e9218959cd723"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}