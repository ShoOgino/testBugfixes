{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCostlyQueries().mjava","commits":[{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCostlyQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipCostlyQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc1 = new Document();\n    doc1.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc1.add(new StringField(\"foo\", \"quux\", Store.YES));\n    Document doc2 = new Document();\n    doc2.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocuments(Arrays.asList(doc1, doc2));\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, 1.5f);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER);\n    bq.add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.FILTER);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    // bar is not cached since its cost is 2 which is 2x the cost of the BooleanQuery\n    assertEquals(Collections.singleton(new TermQuery(new Term(\"foo\", \"quux\"))), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCostlyQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipCostlyQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc1 = new Document();\n    doc1.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc1.add(new StringField(\"foo\", \"quux\", Store.YES));\n    Document doc2 = new Document();\n    doc2.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocuments(Arrays.asList(doc1, doc2));\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, 1.5f);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER);\n    bq.add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.FILTER);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    // bar is not cached since its cost is 2 which is 2x the cost of the BooleanQuery\n    assertEquals(Collections.singleton(new TermQuery(new Term(\"foo\", \"quux\"))), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCostlyQueries().mjava","sourceNew":null,"sourceOld":"  public void testSkipCostlyQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc1 = new Document();\n    doc1.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc1.add(new StringField(\"foo\", \"quux\", Store.YES));\n    Document doc2 = new Document();\n    doc2.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocuments(Arrays.asList(doc1, doc2));\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, 1.5f);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER);\n    bq.add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.FILTER);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    // bar is not cached since its cost is 2 which is 2x the cost of the BooleanQuery\n    assertEquals(Collections.singleton(new TermQuery(new Term(\"foo\", \"quux\"))), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCostlyQueries().mjava","sourceNew":null,"sourceOld":"  public void testSkipCostlyQueries() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc1 = new Document();\n    doc1.add(new StringField(\"foo\", \"bar\", Store.YES));\n    doc1.add(new StringField(\"foo\", \"quux\", Store.YES));\n    Document doc2 = new Document();\n    doc2.add(new StringField(\"foo\", \"bar\", Store.YES));\n    w.addDocuments(Arrays.asList(doc1, doc2));\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    w.close();\n\n    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, 1.5f);\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    bq.add(new TermQuery(new Term(\"foo\", \"bar\")), Occur.FILTER);\n    bq.add(new TermQuery(new Term(\"foo\", \"quux\")), Occur.FILTER);\n\n    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));\n    searcher.search(bq.build(), 1);\n    // bar is not cached since its cost is 2 which is 2x the cost of the BooleanQuery\n    assertEquals(Collections.singleton(new TermQuery(new Term(\"foo\", \"quux\"))), new HashSet<>(queryCache.cachedQueries()));\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"]},"commit2Childs":{"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}