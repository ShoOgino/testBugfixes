{"path":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebug()) {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        } \n        if (rb.isDebugTimings()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n        } \n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n\n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebugQuery()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.QUERY);\n      } else if (rb.isDebugTimings()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.TIMING);\n      } else if (rb.isDebugResults()){\n        sreq.params.set(CommonParams.DEBUG, CommonParams.RESULTS);\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","date":1399316048,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        }\n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n      sreq.params.set(CommonParams.DEBUG, \"false\");\n    }\n    if (rb.isDebugTimings()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n    } \n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else if (rb.isDebug()) {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        } \n        if (rb.isDebugTimings()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n        } \n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n    }\n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","bugFix":["d9d424bd039937b4125152b454b3a32754b06f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      // always distribute the latest version of global stats\n      sreq.purpose |= ShardRequest.PURPOSE_SET_TERM_STATS;\n      StatsCache statsCache = rb.req.getSearcher().getStatsCache();\n      statsCache.sendGlobalStats(rb, sreq);\n\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        }\n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n      sreq.params.set(CommonParams.DEBUG, \"false\");\n    }\n    if (rb.isDebugTimings()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n    } \n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        }\n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n      sreq.params.set(CommonParams.DEBUG, \"false\");\n    }\n    if (rb.isDebugTimings()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n    } \n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/DebugComponent#modifyRequest(ResponseBuilder,SearchComponent,ShardRequest).mjava","sourceNew":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      // always distribute the latest version of global stats\n      sreq.purpose |= ShardRequest.PURPOSE_SET_TERM_STATS;\n      StatsCache statsCache = rb.req.getSearcher().getStatsCache();\n      statsCache.sendGlobalStats(rb, sreq);\n\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        }\n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n      sreq.params.set(CommonParams.DEBUG, \"false\");\n    }\n    if (rb.isDebugTimings()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n    } \n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","sourceOld":"  @Override\n  public void modifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) {\n    if (!rb.isDebug()) return;\n    \n    // Turn on debug to get explain only when retrieving fields\n    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) != 0) {\n      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;\n      if (rb.isDebugAll()) {\n        sreq.params.set(CommonParams.DEBUG_QUERY, \"true\");\n      } else {\n        if (rb.isDebugQuery()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.QUERY);\n        }\n        if (rb.isDebugResults()){\n          sreq.params.add(CommonParams.DEBUG, CommonParams.RESULTS);\n        }\n      }\n    } else {\n      sreq.params.set(CommonParams.DEBUG_QUERY, \"false\");\n      sreq.params.set(CommonParams.DEBUG, \"false\");\n    }\n    if (rb.isDebugTimings()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TIMING);\n    } \n    if (rb.isDebugTrack()) {\n      sreq.params.add(CommonParams.DEBUG, CommonParams.TRACK);\n      sreq.params.set(CommonParams.REQUEST_ID, rb.req.getParams().get(CommonParams.REQUEST_ID));\n      sreq.params.set(CommonParams.REQUEST_PURPOSE, SolrPluginUtils.getRequestPurpose(sreq.purpose));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9d424bd039937b4125152b454b3a32754b06f6c":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["d9d424bd039937b4125152b454b3a32754b06f6c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df72a23fb74bebe914e3f3972063a884327c0436":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df72a23fb74bebe914e3f3972063a884327c0436"],"b0b597c65628ca9e73913a07e81691f8229bae35":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"d9d424bd039937b4125152b454b3a32754b06f6c":["53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d9d424bd039937b4125152b454b3a32754b06f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"53153d3c5d39cd6b824fa6413fa8c7ee0f1b6d3e":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"df72a23fb74bebe914e3f3972063a884327c0436":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}