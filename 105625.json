{"path":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","commits":[{"id":"9d7f2f39556d99cecd24f152bdece2b6432458c3","date":1077651298,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"\t// make sure the documents returned by the search match the expected list\n\tprivate void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n\tthrows IOException {\n\t\tHits result = searcher.search (query, sort);\n\t\tStringBuffer buff = new StringBuffer(10);\n\t\tint n = result.length();\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tDocument doc = result.doc(i);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\tassertEquals (expectedResult, buff.toString());\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"\t// make sure the documents returned by the search match the expected list\n\tprivate void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n\tthrows IOException {\n    ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n\t\tStringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n\t\tfor (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\tassertEquals (expectedResult, buff.toString());\n\t}\n\n","sourceOld":"\t// make sure the documents returned by the search match the expected list\n\tprivate void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n\tthrows IOException {\n\t\tHits result = searcher.search (query, sort);\n\t\tStringBuffer buff = new StringBuffer(10);\n\t\tint n = result.length();\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tDocument doc = result.doc(i);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\tassertEquals (expectedResult, buff.toString());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n  throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"\t// make sure the documents returned by the search match the expected list\n\tprivate void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n\tthrows IOException {\n    ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n\t\tStringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n\t\tfor (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\tassertEquals (expectedResult, buff.toString());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches (Searcher searcher, Query query, Sort sort, String expectedResult)\n  throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuffer buff = new StringBuffer(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#assertMatches(Searcher,Query,Sort,String).mjava","sourceNew":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","sourceOld":"  // make sure the documents returned by the search match the expected list\n  private void assertMatches(Searcher searcher, Query query, Sort sort,\n      String expectedResult) throws IOException {\n    //ScoreDoc[] result = searcher.search (query, null, 1000, sort).scoreDocs;\n    TopDocs hits = searcher.search (query, null, expectedResult.length(), sort);\n    ScoreDoc[] result = hits.scoreDocs;\n    assertEquals(hits.totalHits, expectedResult.length());\n    StringBuilder buff = new StringBuilder(10);\n    int n = result.length;\n    for (int i=0; i<n; ++i) {\n      Document doc = searcher.doc(result[i].doc);\n      String[] v = doc.getValues(\"tracer\");\n      for (int j=0; j<v.length; ++j) {\n        buff.append (v[j]);\n      }\n    }\n    assertEquals (expectedResult, buff.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63bc3238545c6012bd44f5d294077997f236bc4e":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d7f2f39556d99cecd24f152bdece2b6432458c3"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["63bc3238545c6012bd44f5d294077997f236bc4e"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9d7f2f39556d99cecd24f152bdece2b6432458c3":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"63bc3238545c6012bd44f5d294077997f236bc4e":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}