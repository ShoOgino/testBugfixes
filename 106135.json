{"path":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   */\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17d4fe0503a62f6522b1dd15204dd25cd231edf","date":1313599393,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#encodeCollationKey(byte[]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/CollationTestBase#encodeCollationKey(byte[]).mjava","sourceNew":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","sourceOld":"  /**\n   * Convenience method to perform the same function as CollationKeyFilter.\n   *  \n   * @param keyBits the result from \n   *  collator.getCollationKey(original).toByteArray()\n   * @return The encoded collation key for the original String\n   * @deprecated only for testing deprecated filters\n   */\n  @Deprecated\n  protected String encodeCollationKey(byte[] keyBits) {\n    // Ensure that the backing char[] array is large enough to hold the encoded\n    // Binary String\n    int encodedLength = IndexableBinaryStringTools.getEncodedLength(keyBits, 0, keyBits.length);\n    char[] encodedBegArray = new char[encodedLength];\n    IndexableBinaryStringTools.encode(keyBits, 0, keyBits.length, encodedBegArray, 0, encodedLength);\n    return new String(encodedBegArray);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"d17d4fe0503a62f6522b1dd15204dd25cd231edf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d17d4fe0503a62f6522b1dd15204dd25cd231edf"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}