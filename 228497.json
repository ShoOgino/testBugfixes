{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deploy(String,String,String[],boolean,String[],boolean,boolean).mjava","commits":[{"id":"a688687cbff91a8f44c95d31697c3ba8a47c8c25","date":1593512440,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deploy(String,String,String[],boolean,String[],boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#deploy(String,String,String[],String[],boolean,boolean).mjava","sourceNew":"  /**\n   * Deploys a version of a package to a list of collections.\n   * @param version If null, the most recent version is deployed. \n   *    EXPERT FEATURE: If version is PackageUtils.LATEST, this collection will be auto updated whenever a newer version of this package is installed.\n   * @param isUpdate Is this a fresh deployment or is it an update (i.e. there is already a version of this package deployed on this collection)\n   * @param noprompt If true, don't prompt before executing setup commands.\n   */\n  public void deploy(String packageName, String version, String[] collections, boolean shouldInstallClusterPlugins, String[] parameters,\n      boolean isUpdate, boolean noprompt) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n\n    boolean pegToLatest = PackageUtils.LATEST.equals(version); // User wants to peg this package's version to the latest installed (for auto-update, i.e. no explicit deploy step)\n    SolrPackageInstance packageInstance = getPackageInstance(packageName, version);\n    if (packageInstance == null) {\n      PackageUtils.printRed(\"Package instance doesn't exist: \" + packageName + \":\" + version + \". Use install command to install this version first.\");\n      System.exit(1);\n    }\n    if (version == null) version = packageInstance.version;\n\n    Manifest manifest = packageInstance.manifest;\n    if (PackageUtils.checkVersionConstraint(RepositoryManager.systemVersion, manifest.versionConstraint) == false) {\n      PackageUtils.printRed(\"Version incompatible! Solr version: \"\n          + RepositoryManager.systemVersion + \", package version constraint: \" + manifest.versionConstraint);\n      System.exit(1);\n    }\n\n    boolean res = deployPackage(packageInstance, pegToLatest, isUpdate, noprompt,\n        Arrays.asList(collections), shouldInstallClusterPlugins, parameters);\n    PackageUtils.print(res? PackageUtils.GREEN: PackageUtils.RED, res? \"Deployment successful\": \"Deployment failed\");\n  }\n\n","sourceOld":"  /**\n   * Deploys a version of a package to a list of collections.\n   * @param version If null, the most recent version is deployed. \n   *    EXPERT FEATURE: If version is PackageUtils.LATEST, this collection will be auto updated whenever a newer version of this package is installed.\n   * @param isUpdate Is this a fresh deployment or is it an update (i.e. there is already a version of this package deployed on this collection)\n   * @param noprompt If true, don't prompt before executing setup commands.\n   */\n  public void deploy(String packageName, String version, String[] collections, String[] parameters,\n      boolean isUpdate, boolean noprompt) throws SolrException {\n    ensureCollectionsExist(Arrays.asList(collections));\n\n    boolean pegToLatest = PackageUtils.LATEST.equals(version); // User wants to peg this package's version to the latest installed (for auto-update, i.e. no explicit deploy step)\n    SolrPackageInstance packageInstance = getPackageInstance(packageName, version);\n    if (packageInstance == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Package instance doesn't exist: \" + packageName + \":\" + null +\n          \". Use install command to install this version first.\");\n    }\n    if (version == null) version = packageInstance.version;\n\n    Manifest manifest = packageInstance.manifest;\n    if (PackageUtils.checkVersionConstraint(RepositoryManager.systemVersion, manifest.versionConstraint) == false) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Version incompatible! Solr version: \"\n          + RepositoryManager.systemVersion + \", package version constraint: \" + manifest.versionConstraint);\n    }\n\n    boolean res = deployPackage(packageInstance, pegToLatest, isUpdate, noprompt,\n        Arrays.asList(collections), parameters);\n    PackageUtils.print(res? PackageUtils.GREEN: PackageUtils.RED, res? \"Deployment successful\": \"Deployment failed\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a688687cbff91a8f44c95d31697c3ba8a47c8c25"],"a688687cbff91a8f44c95d31697c3ba8a47c8c25":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}