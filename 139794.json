{"path":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (datOut == null) {\n        initDatOut();\n      }\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":"    @Override\n    synchronized public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (datOut == null) {\n        initDatOut();\n      }\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","sourceOld":"    @Override\n    synchronized public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d99ebe8731bf50d5cb230be452816572bdfd7037","date":1309162035,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID >= values.length) {\n        final long len = values.length;\n        values = ArrayUtil.grow(values, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n            * ((values.length) - len));\n      }\n      values[docID] = Float.floatToRawIntBits((float)v);\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID >= values.length) {\n        final long len = values.length;\n        values = ArrayUtil.grow(values, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n            * ((values.length) - len));\n      }\n      values[docID] = Float.floatToRawIntBits((float)v);\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID >= values.length) {\n        final long len = values.length;\n        values = ArrayUtil.grow(values, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n            * ((values.length) - len));\n      }\n      values[docID] = Float.floatToRawIntBits((float)v);\n      lastDocId = docID;\n    }\n\n","sourceOld":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID - lastDocId > 1) {\n        // fill with default values\n        lastDocId += fillDefault(docID - lastDocId - 1);\n      }\n      assert datOut != null;\n      datOut.writeInt(Float.floatToRawIntBits((float) v));\n      ++lastDocId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/Floats.Float4Writer#add(int,double).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void add(final int docID, final double v)\n        throws IOException {\n      assert docID > lastDocId : \"docID: \" + docID\n          + \" must be greater than the last added doc id: \" + lastDocId;\n      if (docID >= values.length) {\n        final long len = values.length;\n        values = ArrayUtil.grow(values, 1 + docID);\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_INT\n            * ((values.length) - len));\n      }\n      values[docID] = Float.floatToRawIntBits((float)v);\n      lastDocId = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9235b9d4454a46c066cda47fed7ca0a34e614529"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["d99ebe8731bf50d5cb230be452816572bdfd7037"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d99ebe8731bf50d5cb230be452816572bdfd7037":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","d99ebe8731bf50d5cb230be452816572bdfd7037"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d99ebe8731bf50d5cb230be452816572bdfd7037","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d99ebe8731bf50d5cb230be452816572bdfd7037":["85eb75e0c0203e44dcf686f35876cf6080f3a671","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"2553b00f699380c64959ccb27991289aae87be2e":[],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}