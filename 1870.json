{"path":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","commits":[{"id":"9c576fba1e3c6d11c61fa0802214d5150fb5c633","date":1243676170,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    for(int x=0;x<2;x++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir,\n                                           new TestPayloadAnalyzer(), true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      if (x == 1) {\n        writer.setAllowMinus1Position();\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"content\",\n                        new StringReader(\"a a b c d e a f g h i j a b k k\")));\n      writer.addDocument(doc);\n\n      IndexReader r = writer.getReader();\n\n      TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n      int count = 0;\n      assertTrue(tp.next());\n      // \"a\" occurs 4 times\n      assertEquals(4, tp.freq());\n      int expected;\n      if (x == 1) {\n        expected = Integer.MAX_VALUE;\n      } else {\n        expected = 0;\n      }\n      assertEquals(expected, tp.nextPosition());\n      if (x == 1) {\n        continue;\n      }\n      assertEquals(1, tp.nextPosition());\n      assertEquals(3, tp.nextPosition());\n      assertEquals(6, tp.nextPosition());\n\n      // only one doc has \"a\"\n      assertFalse(tp.next());\n\n      IndexSearcher is = new IndexSearcher(r);\n    \n      SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n      SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n      SpanQuery[] sqs = { stq1, stq2 };\n      SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n      count = 0;\n      boolean sawZero = false;\n      //System.out.println(\"\\ngetPayloadSpans test\");\n      PayloadSpans pspans = snq.getPayloadSpans(is.getIndexReader());\n      while (pspans.next()) {\n        //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n        Collection payloads = pspans.getPayload();\n        sawZero |= pspans.start() == 0;\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          count++;\n          it.next();\n          //System.out.println(new String((byte[]) it.next()));\n        }\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n\n      //System.out.println(\"\\ngetSpans test\");\n      Spans spans = snq.getSpans(is.getIndexReader());\n      count = 0;\n      sawZero = false;\n      while (spans.next()) {\n        count++;\n        sawZero |= spans.start() == 0;\n        //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n      }\n      assertEquals(4, count);\n      assertTrue(sawZero);\n\t\t\n      //System.out.println(\"\\nPayloadSpanUtil test\");\n\n      sawZero = false;\n      PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n      Collection pls = psu.getPayloadsForQuery(snq);\n      count = pls.size();\n      for (Iterator it = pls.iterator(); it.hasNext();) {\n        String s = new String((byte[]) it.next());\n        //System.out.println(s);\n        sawZero |= s.equals(\"pos: 0\");\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n      writer.close();\n      is.getIndexReader().close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b932bc3bc19499cc1d9d82848d7748d0ef46a06f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    for(int x=0;x<2;x++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir,\n                                           new TestPayloadAnalyzer(), true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      if (x == 1) {\n        writer.setAllowMinus1Position();\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"content\",\n                        new StringReader(\"a a b c d e a f g h i j a b k k\")));\n      writer.addDocument(doc);\n\n      IndexReader r = writer.getReader();\n\n      TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n      int count = 0;\n      assertTrue(tp.next());\n      // \"a\" occurs 4 times\n      assertEquals(4, tp.freq());\n      int expected;\n      if (x == 1) {\n        expected = Integer.MAX_VALUE;\n      } else {\n        expected = 0;\n      }\n      assertEquals(expected, tp.nextPosition());\n      if (x == 1) {\n        continue;\n      }\n      assertEquals(1, tp.nextPosition());\n      assertEquals(3, tp.nextPosition());\n      assertEquals(6, tp.nextPosition());\n\n      // only one doc has \"a\"\n      assertFalse(tp.next());\n\n      IndexSearcher is = new IndexSearcher(r);\n    \n      SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n      SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n      SpanQuery[] sqs = { stq1, stq2 };\n      SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n      count = 0;\n      boolean sawZero = false;\n      //System.out.println(\"\\ngetPayloadSpans test\");\n      Spans pspans = snq.getSpans(is.getIndexReader());\n      while (pspans.next()) {\n        //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n        Collection payloads = pspans.getPayload();\n        sawZero |= pspans.start() == 0;\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          count++;\n          it.next();\n          //System.out.println(new String((byte[]) it.next()));\n        }\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n\n      //System.out.println(\"\\ngetSpans test\");\n      Spans spans = snq.getSpans(is.getIndexReader());\n      count = 0;\n      sawZero = false;\n      while (spans.next()) {\n        count++;\n        sawZero |= spans.start() == 0;\n        //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n      }\n      assertEquals(4, count);\n      assertTrue(sawZero);\n\t\t\n      //System.out.println(\"\\nPayloadSpanUtil test\");\n\n      sawZero = false;\n      PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n      Collection pls = psu.getPayloadsForQuery(snq);\n      count = pls.size();\n      for (Iterator it = pls.iterator(); it.hasNext();) {\n        String s = new String((byte[]) it.next());\n        //System.out.println(s);\n        sawZero |= s.equals(\"pos: 0\");\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n      writer.close();\n      is.getIndexReader().close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    for(int x=0;x<2;x++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir,\n                                           new TestPayloadAnalyzer(), true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      if (x == 1) {\n        writer.setAllowMinus1Position();\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"content\",\n                        new StringReader(\"a a b c d e a f g h i j a b k k\")));\n      writer.addDocument(doc);\n\n      IndexReader r = writer.getReader();\n\n      TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n      int count = 0;\n      assertTrue(tp.next());\n      // \"a\" occurs 4 times\n      assertEquals(4, tp.freq());\n      int expected;\n      if (x == 1) {\n        expected = Integer.MAX_VALUE;\n      } else {\n        expected = 0;\n      }\n      assertEquals(expected, tp.nextPosition());\n      if (x == 1) {\n        continue;\n      }\n      assertEquals(1, tp.nextPosition());\n      assertEquals(3, tp.nextPosition());\n      assertEquals(6, tp.nextPosition());\n\n      // only one doc has \"a\"\n      assertFalse(tp.next());\n\n      IndexSearcher is = new IndexSearcher(r);\n    \n      SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n      SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n      SpanQuery[] sqs = { stq1, stq2 };\n      SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n      count = 0;\n      boolean sawZero = false;\n      //System.out.println(\"\\ngetPayloadSpans test\");\n      PayloadSpans pspans = snq.getPayloadSpans(is.getIndexReader());\n      while (pspans.next()) {\n        //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n        Collection payloads = pspans.getPayload();\n        sawZero |= pspans.start() == 0;\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          count++;\n          it.next();\n          //System.out.println(new String((byte[]) it.next()));\n        }\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n\n      //System.out.println(\"\\ngetSpans test\");\n      Spans spans = snq.getSpans(is.getIndexReader());\n      count = 0;\n      sawZero = false;\n      while (spans.next()) {\n        count++;\n        sawZero |= spans.start() == 0;\n        //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n      }\n      assertEquals(4, count);\n      assertTrue(sawZero);\n\t\t\n      //System.out.println(\"\\nPayloadSpanUtil test\");\n\n      sawZero = false;\n      PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n      Collection pls = psu.getPayloadsForQuery(snq);\n      count = pls.size();\n      for (Iterator it = pls.iterator(); it.hasNext();) {\n        String s = new String((byte[]) it.next());\n        //System.out.println(s);\n        sawZero |= s.equals(\"pos: 0\");\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n      writer.close();\n      is.getIndexReader().close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7","date":1255555265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (Iterator it = payloads.iterator(); it.hasNext();) {\n        count++;\n        it.next();\n        //System.out.println(new String((byte[]) it.next()));\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (Iterator it = pls.iterator(); it.hasNext();) {\n      String s = new String((byte[]) it.next());\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    for(int x=0;x<2;x++) {\n      Directory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir,\n                                           new TestPayloadAnalyzer(), true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n      if (x == 1) {\n        writer.setAllowMinus1Position();\n      }\n      Document doc = new Document();\n      doc.add(new Field(\"content\",\n                        new StringReader(\"a a b c d e a f g h i j a b k k\")));\n      writer.addDocument(doc);\n\n      IndexReader r = writer.getReader();\n\n      TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n      int count = 0;\n      assertTrue(tp.next());\n      // \"a\" occurs 4 times\n      assertEquals(4, tp.freq());\n      int expected;\n      if (x == 1) {\n        expected = Integer.MAX_VALUE;\n      } else {\n        expected = 0;\n      }\n      assertEquals(expected, tp.nextPosition());\n      if (x == 1) {\n        continue;\n      }\n      assertEquals(1, tp.nextPosition());\n      assertEquals(3, tp.nextPosition());\n      assertEquals(6, tp.nextPosition());\n\n      // only one doc has \"a\"\n      assertFalse(tp.next());\n\n      IndexSearcher is = new IndexSearcher(r);\n    \n      SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n      SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n      SpanQuery[] sqs = { stq1, stq2 };\n      SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n      count = 0;\n      boolean sawZero = false;\n      //System.out.println(\"\\ngetPayloadSpans test\");\n      Spans pspans = snq.getSpans(is.getIndexReader());\n      while (pspans.next()) {\n        //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n        Collection payloads = pspans.getPayload();\n        sawZero |= pspans.start() == 0;\n        for (Iterator it = payloads.iterator(); it.hasNext();) {\n          count++;\n          it.next();\n          //System.out.println(new String((byte[]) it.next()));\n        }\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n\n      //System.out.println(\"\\ngetSpans test\");\n      Spans spans = snq.getSpans(is.getIndexReader());\n      count = 0;\n      sawZero = false;\n      while (spans.next()) {\n        count++;\n        sawZero |= spans.start() == 0;\n        //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n      }\n      assertEquals(4, count);\n      assertTrue(sawZero);\n\t\t\n      //System.out.println(\"\\nPayloadSpanUtil test\");\n\n      sawZero = false;\n      PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n      Collection pls = psu.getPayloadsForQuery(snq);\n      count = pls.size();\n      for (Iterator it = pls.iterator(); it.hasNext();) {\n        String s = new String((byte[]) it.next());\n        //System.out.println(s);\n        sawZero |= s.equals(\"pos: 0\");\n      }\n      assertEquals(5, count);\n      assertTrue(sawZero);\n      writer.close();\n      is.getIndexReader().close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        //System.out.println(new String(bytes));\n\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (Iterator it = payloads.iterator(); it.hasNext();) {\n        count++;\n        it.next();\n        //System.out.println(new String((byte[]) it.next()));\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (Iterator it = pls.iterator(); it.hasNext();) {\n      String s = new String((byte[]) it.next());\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["b932bc3bc19499cc1d9d82848d7748d0ef46a06f","eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b932bc3bc19499cc1d9d82848d7748d0ef46a06f","date":1259677978,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (@SuppressWarnings(\"unused\") byte[] bytes : payloads) {\n        count++;\n        //System.out.println(new String(bytes));\n\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f","9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new TestPayloadAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection<byte[]> payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      count += payloads.size();\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection<byte[]> pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (byte[] bytes : pls) {\n      String s = new String(bytes);\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b932bc3bc19499cc1d9d82848d7748d0ef46a06f":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["b932bc3bc19499cc1d9d82848d7748d0ef46a06f"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c576fba1e3c6d11c61fa0802214d5150fb5c633"],"b932bc3bc19499cc1d9d82848d7748d0ef46a06f":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["560b3a3bb8efcae105d6ae5fbee0f8b03c7decc7"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["b932bc3bc19499cc1d9d82848d7748d0ef46a06f"],"9c576fba1e3c6d11c61fa0802214d5150fb5c633":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}