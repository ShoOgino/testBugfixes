{"path":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","commits":[{"id":"282779d3160a8f7f09d2a07b06add736f93ac50b","date":1161291802,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"/dev/null","sourceNew":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", true, new NativeFSLockFactory());\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", true, new NativeFSLockFactory());\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93a838d8ba57e85e9db126e862958dafc7da4d5b","date":1168639785,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", true, new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", true, new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", true, new NativeFSLockFactory());\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", true, new NativeFSLockFactory());\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", true, new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", true, new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.open(new File(\"TestLockFactory.8\"), new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.open(new File(\"TestLockFactory.9\"), new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.getDirectory(\"TestLockFactory.8\", new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.getDirectory(\"TestLockFactory.9\", new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f7faff7550034759516ce7f4898cd16c1816cde","date":1245778901,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.9\");\n      Directory dir2 = FSDirectory.open(fdir2, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      Directory dir1 = FSDirectory.open(new File(\"TestLockFactory.8\"), new NativeFSLockFactory(\"TestLockFactory.8\"));\n      Directory dir2 = FSDirectory.open(new File(\"TestLockFactory.9\"), new NativeFSLockFactory(\"TestLockFactory.9\"));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      rmDir(\"TestLockFactory.8\");\n      rmDir(\"TestLockFactory.9\");\n    }\n\n","bugFix":null,"bugIntro":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2","date":1252016251,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns different lock\n    // prefixes to different directories:\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      // Make sure we get identical instances:\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.9\");\n      Directory dir2 = FSDirectory.open(fdir2, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n\n      assertTrue(\"Native Lock Factories are incorrectly shared: dir1 and dir2 have same lock prefix '\" + prefix1 + \"'; they should be different\",\n                 !prefix1.equals(prefix2));\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":["282779d3160a8f7f09d2a07b06add736f93ac50b","8f7faff7550034759516ce7f4898cd16c1816cde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","pathOld":"src/test/org/apache/lucene/store/TestLockFactory#testNativeFSLockFactoryPrefix().mjava","sourceNew":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","sourceOld":"    // Verify: NativeFSLockFactory assigns null as lockPrefix if the lockDir is inside directory\n    public void testNativeFSLockFactoryPrefix() throws IOException {\n\n      File fdir1 = _TestUtil.getTempDir(\"TestLockFactory.8\");\n      File fdir2 = _TestUtil.getTempDir(\"TestLockFactory.8.Lockdir\");\n      Directory dir1 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir1));\n      // same directory, but locks are stored somewhere else. The prefix of the lock factory should != null\n      Directory dir2 = FSDirectory.open(fdir1, new NativeFSLockFactory(fdir2));\n\n      String prefix1 = dir1.getLockFactory().getLockPrefix();\n      assertNull(\"Lock prefix for lockDir same as directory should be null\", prefix1);\n      \n      String prefix2 = dir2.getLockFactory().getLockPrefix();\n      assertNotNull(\"Lock prefix for lockDir outside of directory should be not null\", prefix2);\n\n      _TestUtil.rmDir(fdir1);\n      _TestUtil.rmDir(fdir2);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["8f7faff7550034759516ce7f4898cd16c1816cde"],"66b12ba4967665216eeb706b58d424c51fb3641a":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["66b12ba4967665216eeb706b58d424c51fb3641a"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f7faff7550034759516ce7f4898cd16c1816cde":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"245fee3e499fae1fc0c33a80a6dd979f9c5f49e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"66b12ba4967665216eeb706b58d424c51fb3641a":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"93a838d8ba57e85e9db126e862958dafc7da4d5b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["8f7faff7550034759516ce7f4898cd16c1816cde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["282779d3160a8f7f09d2a07b06add736f93ac50b"],"8f7faff7550034759516ce7f4898cd16c1816cde":["245fee3e499fae1fc0c33a80a6dd979f9c5f49e2"],"282779d3160a8f7f09d2a07b06add736f93ac50b":["93a838d8ba57e85e9db126e862958dafc7da4d5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}