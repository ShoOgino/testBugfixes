{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e","date":1277411648,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory, codecs) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      throw new UnsupportedOperationException(\"This IndexReader cannot make any changes to the index (it was opened with readOnly = true)\");\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriterConfig.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > maxIndexVersion) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"7b91922b55d15444d554721b352861d028eb8278":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["4122a26e1fd0457a340616673a3d3aada370f713"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"4122a26e1fd0457a340616673a3d3aada370f713":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5f4e87790277826a2aea119328600dfb07761f32","f237ee05f4e8e1fae6614bce022e0dc66c5ed39e"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7b91922b55d15444d554721b352861d028eb8278"],"4122a26e1fd0457a340616673a3d3aada370f713":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"f237ee05f4e8e1fae6614bce022e0dc66c5ed39e":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}