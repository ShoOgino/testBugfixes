{"path":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"/dev/null","sourceNew":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.prohibited)\n        c.required = true;\n    }\n\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.prohibited)\n        c.required = false;\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    clauses.addElement(new BooleanClause(q, required, prohibited));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2a35410e365d9b0027637c577b72b8a6f96ce85","date":1093643417,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.prohibited)\n        c.required = true;\n    }\n\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.prohibited)\n        c.required = false;\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    clauses.addElement(new BooleanClause(q, required, prohibited));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07b338efcd52be984544e921ef7fe8471048500","date":1094650315,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7","date":1101251614,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == DEFAULT_OPERATOR_AND && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == DEFAULT_OPERATOR_OR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","sourceOld":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(new BooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7b6cdc70e097da94da79a655ed8f94477ff69f5","date":1220815360,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":"  /**\n   * @deprecated use {@link #addClause(List, int, int, Query)} instead.\n   */\n  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    addClause((List) clauses, conj, mods, q);\n  }\n\n","sourceOld":"  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    boolean required, prohibited;\n\n    // If this term is introduced by AND, make the preceding term required,\n    // unless it's already prohibited\n    if (clauses.size() > 0 && conj == CONJ_AND) {\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.MUST);\n    }\n\n    if (clauses.size() > 0 && operator == AND_OPERATOR && conj == CONJ_OR) {\n      // If this term is introduced by OR, make the preceding term optional,\n      // unless it's prohibited (that means we leave -a OR b but +a OR b-->a OR b)\n      // notice if the input is a OR b, first term is parsed as required; without\n      // this modification a OR b would parsed as +a OR b\n      BooleanClause c = (BooleanClause) clauses.elementAt(clauses.size()-1);\n      if (!c.isProhibited())\n        c.setOccur(BooleanClause.Occur.SHOULD);\n    }\n\n    // We might have been passed a null query; the term might have been\n    // filtered away by the analyzer.\n    if (q == null)\n      return;\n\n    if (operator == OR_OPERATOR) {\n      // We set REQUIRED if we're introduced by AND or +; PROHIBITED if\n      // introduced by NOT or -; make sure not to set both.\n      prohibited = (mods == MOD_NOT);\n      required = (mods == MOD_REQ);\n      if (conj == CONJ_AND && !prohibited) {\n        required = true;\n      }\n    } else {\n      // We set PROHIBITED if we're introduced by NOT or -; We set REQUIRED\n      // if not PROHIBITED and not introduced by OR\n      prohibited = (mods == MOD_NOT);\n      required   = (!prohibited && conj != CONJ_OR);\n    }\n    if (required && !prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST));\n    else if (!required && !prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.SHOULD));\n    else if (!required && prohibited)\n      clauses.addElement(newBooleanClause(q, BooleanClause.Occur.MUST_NOT));\n    else\n      throw new RuntimeException(\"Clause cannot be both required and prohibited\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc138e05008664b5e01dc83f6ad95bd73b91c5","date":1256054789,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#addClause(Vector,int,int,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated use {@link #addClause(List, int, int, Query)} instead.\n   */\n  protected void addClause(Vector clauses, int conj, int mods, Query q) {\n    addClause((List) clauses, conj, mods, q);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e07b338efcd52be984544e921ef7fe8471048500":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["e07b338efcd52be984544e921ef7fe8471048500"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"]},"commit2Childs":{"e07b338efcd52be984544e921ef7fe8471048500":["e91de5ec6f7cbc7a33934e225e4c932bdf0effe7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["c7b6cdc70e097da94da79a655ed8f94477ff69f5"],"c7b6cdc70e097da94da79a655ed8f94477ff69f5":["84dc138e05008664b5e01dc83f6ad95bd73b91c5"],"e91de5ec6f7cbc7a33934e225e4c932bdf0effe7":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["b2a35410e365d9b0027637c577b72b8a6f96ce85"],"b2a35410e365d9b0027637c577b72b8a6f96ce85":["e07b338efcd52be984544e921ef7fe8471048500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"84dc138e05008664b5e01dc83f6ad95bd73b91c5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}