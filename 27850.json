{"path":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","commits":[{"id":"433777d1eaf9998136cd16515dc0e1eb26f5d535","date":1273839120,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyPayloadExists(Directory dir, String field, BytesRef text, int numExpected)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int numPayloads = 0;\n      DocsAndPositionsEnum tpe = MultiFields.getTermPositionsEnum(reader, null, field, text);\n      while (tpe.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        tpe.nextPosition();\n        if (tpe.hasPayload()) {\n          BytesRef payload = tpe.getPayload();\n          assertEquals(1, payload.length);\n          assertEquals(1, payload.bytes[0]);\n          ++numPayloads;\n        }\n      }\n      assertEquals(numExpected, numPayloads);\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","sourceNew":"  private void verifyPayloadExists(Directory dir, String field, BytesRef text, int numExpected)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int numPayloads = 0;\n      DocsAndPositionsEnum tpe = MultiFields.getTermPositionsEnum(reader, null, field, text, false);\n      while (tpe.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        tpe.nextPosition();\n        if (tpe.hasPayload()) {\n          BytesRef payload = tpe.getPayload();\n          assertEquals(1, payload.length);\n          assertEquals(1, payload.bytes[0]);\n          ++numPayloads;\n        }\n      }\n      assertEquals(numExpected, numPayloads);\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void verifyPayloadExists(Directory dir, String field, BytesRef text, int numExpected)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int numPayloads = 0;\n      DocsAndPositionsEnum tpe = MultiFields.getTermPositionsEnum(reader, null, field, text);\n      while (tpe.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        tpe.nextPosition();\n        if (tpe.hasPayload()) {\n          BytesRef payload = tpe.getPayload();\n          assertEquals(1, payload.length);\n          assertEquals(1, payload.bytes[0]);\n          ++numPayloads;\n        }\n      }\n      assertEquals(numExpected, numPayloads);\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloadProcessorProvider#verifyPayloadExists(Directory,String,BytesRef,int).mjava","sourceNew":"  private void verifyPayloadExists(Directory dir, String field, BytesRef text, int numExpected)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int numPayloads = 0;\n      DocsAndPositionsEnum tpe = MultiFields.getTermPositionsEnum(reader, null, field, text, false);\n      while (tpe.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        tpe.nextPosition();\n        if (tpe.hasPayload()) {\n          BytesRef payload = tpe.getPayload();\n          assertEquals(1, payload.length);\n          assertEquals(1, payload.bytes[0]);\n          ++numPayloads;\n        }\n      }\n      assertEquals(numExpected, numPayloads);\n    } finally {\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void verifyPayloadExists(Directory dir, String field, BytesRef text, int numExpected)\n      throws IOException {\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int numPayloads = 0;\n      DocsAndPositionsEnum tpe = MultiFields.getTermPositionsEnum(reader, null, field, text, false);\n      while (tpe.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        tpe.nextPosition();\n        if (tpe.hasPayload()) {\n          BytesRef payload = tpe.getPayload();\n          assertEquals(1, payload.length);\n          assertEquals(1, payload.bytes[0]);\n          ++numPayloads;\n        }\n      }\n      assertEquals(numExpected, numPayloads);\n    } finally {\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["433777d1eaf9998136cd16515dc0e1eb26f5d535"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["433777d1eaf9998136cd16515dc0e1eb26f5d535"],"433777d1eaf9998136cd16515dc0e1eb26f5d535":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}