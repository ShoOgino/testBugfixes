{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"BTTR.docs seg=\" + segment);\n        //}\n        currentFrame.decodeMetaData();\n        //if (DEBUG) {\n        //System.out.println(\"  state=\" + currentFrame.state);\n        //}\n        final DocsEnum docsEnum = postingsReader.docs(fieldInfo, currentFrame.state, skipDocs, reuse);\n\n        assert docsEnum != null;\n        return docsEnum;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits skipDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"BTTR.docs seg=\" + segment);\n        //}\n        currentFrame.decodeMetaData();\n        //if (DEBUG) {\n        //System.out.println(\"  state=\" + currentFrame.state);\n        //}\n        return postingsReader.docs(fieldInfo, currentFrame.state, skipDocs, reuse, needsFreqs);\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"BTTR.docs seg=\" + segment);\n        //}\n        currentFrame.decodeMetaData();\n        //if (DEBUG) {\n        //System.out.println(\"  state=\" + currentFrame.state);\n        //}\n        final DocsEnum docsEnum = postingsReader.docs(fieldInfo, currentFrame.state, skipDocs, reuse);\n\n        assert docsEnum != null;\n        return docsEnum;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#docs(Bits,DocsEnum).mjava","sourceNew":"      @Override\n      public DocsEnum docs(Bits skipDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"BTTR.docs seg=\" + segment);\n        //}\n        currentFrame.decodeMetaData();\n        //if (DEBUG) {\n        //System.out.println(\"  state=\" + currentFrame.state);\n        //}\n        return postingsReader.docs(fieldInfo, currentFrame.state, skipDocs, reuse, needsFreqs);\n      }\n\n","sourceOld":"      @Override\n      public DocsEnum docs(Bits skipDocs, DocsEnum reuse) throws IOException {\n        assert !eof;\n        //if (DEBUG) {\n        //System.out.println(\"BTTR.docs seg=\" + segment);\n        //}\n        currentFrame.decodeMetaData();\n        //if (DEBUG) {\n        //System.out.println(\"  state=\" + currentFrame.state);\n        //}\n        final DocsEnum docsEnum = postingsReader.docs(fieldInfo, currentFrame.state, skipDocs, reuse);\n\n        assert docsEnum != null;\n        return docsEnum;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["60ba444201d2570214b6fcf1d15600dc1a01f548","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}