{"path":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/IndexFiles#indexDocs(IndexWriter,File).mjava","sourceNew":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void indexDocs(IndexWriter writer, File file)\n    throws IOException {\n    // do not try to index files that cannot be read\n    if (file.canRead()) {\n      if (file.isDirectory()) {\n        String[] files = file.list();\n        // an IO error could occur\n        if (files != null) {\n          for (int i = 0; i < files.length; i++) {\n            indexDocs(writer, new File(file, files[i]));\n          }\n        }\n      } else {\n        System.out.println(\"adding \" + file);\n        try {\n          writer.addDocument(FileDocument.Document(file));\n        }\n        // at least on windows, some temporary files raise this exception with an \"access denied\" message\n        // checking if the file can be read doesn't help\n        catch (FileNotFoundException fnfe) {\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}