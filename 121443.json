{"path":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","commits":[{"id":"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","date":1571074565,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true &&\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          // include boundaries: ensures box edges that terminate on the polygon are included\n          return true;\n        } else if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          return true;\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["908e262be655c65579ec6d94f228d47b663da975"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true &&\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          // include boundaries: ensures box edges that terminate on the polygon are included\n          return true;\n        } else if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          return true;\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908e262be655c65579ec6d94f228d47b663da975","date":1576571938,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","sourceNew":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true) {\n           if (lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n             // include boundaries: ensures box edges that terminate on the polygon are included\n             return true;\n           }\n        } else {\n          if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n            return true;\n          }\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true &&\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          // include boundaries: ensures box edges that terminate on the polygon are included\n          return true;\n        } else if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          return true;\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","sourceNew":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true) {\n           if (lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n             // include boundaries: ensures box edges that terminate on the polygon are included\n             return true;\n           }\n        } else {\n          if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n            return true;\n          }\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true &&\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          // include boundaries: ensures box edges that terminate on the polygon are included\n          return true;\n        } else if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n          return true;\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a923e28c9d079048c6993884ec89c44f0380b923","date":1581100153,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/geo/EdgeTree#crossesBox(double,double,double,double,boolean).mjava","sourceNew":"  /** Returns true if the box crosses any edge in this edge subtree */\n  boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true) {\n           if (lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n             // include boundaries: ensures box edges that terminate on the polygon are included\n             return true;\n           }\n        } else {\n          if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n            return true;\n          }\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /** Returns true if the box crosses any edge in this edge subtree */\n  protected boolean crossesBox(double minX, double maxX, double minY, double maxY, boolean includeBoundary) {\n    // we just have to cross one edge to answer the question, so we descend the tree and return when we do.\n    if (minY <= max) {\n      // we compute line intersections of every polygon edge with every box line.\n      // if we find one, return true.\n      // for each box line (AB):\n      //   for each poly line (CD):\n      //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0\n      double cy = y1;\n      double dy = y2;\n      double cx = x1;\n      double dx = x2;\n\n      // optimization: see if either end of the line segment is contained by the rectangle\n      if (Rectangle.containsPoint(cy, cx, minY, maxY, minX, maxX) ||\n          Rectangle.containsPoint(dy, dx, minY, maxY, minX, maxX)) {\n        return true;\n      }\n\n      // optimization: see if the rectangle is outside of the \"bounding box\" of the polyline at all\n      // if not, don't waste our time trying more complicated stuff\n      boolean outside = (cy < minY && dy < minY) ||\n          (cy > maxY && dy > maxY) ||\n          (cx < minX && dx < minX) ||\n          (cx > maxX && dx > maxX);\n\n      if (outside == false) {\n        if (includeBoundary == true) {\n           if (lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n            lineCrossesLineWithBoundary(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n             // include boundaries: ensures box edges that terminate on the polygon are included\n             return true;\n           }\n        } else {\n          if (lineCrossesLine(cx, cy, dx, dy, minX, minY, maxX, minY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, minY, maxX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, maxX, maxY, minX, maxY) ||\n              lineCrossesLine(cx, cy, dx, dy, minX, maxY, minX, minY)) {\n            return true;\n          }\n        }\n      }\n\n      if (left != null && left.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n\n      if (right != null && maxY >= low && right.crossesBox(minX, maxX, minY, maxY, includeBoundary)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908e262be655c65579ec6d94f228d47b663da975":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a923e28c9d079048c6993884ec89c44f0380b923":["908e262be655c65579ec6d94f228d47b663da975"],"b945b8f5bba0303382bc69d60c0c287714f23328":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","908e262be655c65579ec6d94f228d47b663da975"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a923e28c9d079048c6993884ec89c44f0380b923"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5e250f1fb163f190f5ec72b6eeb8271162d8ae1"]},"commit2Childs":{"b5e250f1fb163f190f5ec72b6eeb8271162d8ae1":["908e262be655c65579ec6d94f228d47b663da975","b945b8f5bba0303382bc69d60c0c287714f23328","b0b597c65628ca9e73913a07e81691f8229bae35"],"908e262be655c65579ec6d94f228d47b663da975":["a923e28c9d079048c6993884ec89c44f0380b923","b945b8f5bba0303382bc69d60c0c287714f23328"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5e250f1fb163f190f5ec72b6eeb8271162d8ae1","b0b597c65628ca9e73913a07e81691f8229bae35"],"a923e28c9d079048c6993884ec89c44f0380b923":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}